 2/1: from mcerp import *
 2/2: x1 = N(24, 1)
 2/3: x1
 2/4: x2 = N(37, 4)
 2/5:  x3 = Exp(2)
 2/6: Z = (x1*x2**2)/(15*(1.5 + x3))
 2/7: Z
 2/8: Z.describe()
 3/1: from mcerp import *
 3/2: x1=N(24,0)
 3/3: x1=N(24,0,1)
 3/4: x1=N(24,1,1)
 3/5: x1
 3/6: x1.plot()
 3/7: plt.show()
 3/8: x1.plot() && plt.show()
 3/9: x1.plot() ; plt.show()
 4/1: import pandas as pd
 4/2: filename = 'worldcitiespop.txt'
 4/3: data = pd.read_csv(filename, low_memory=False)
 4/4: plot(data.Longitude, data.Latitude, ',')
 4/5: import matlab *
 4/6: from matlab import *
 4/7: from matplotlib import *
 4/8: plot(data.Longitude, data.Latitude, ',')
 4/9: import matplotlib.pyplot as plt
4/10: y = randn(1000)
4/11: y = rand(1000)
4/12: y = random(1000)
4/13: from matplotlab import randn
4/14: from numpy import randn
4/15: %pylab
4/16: ?rand
4/17: ?randn
4/18: y = randn(1000)
4/19: plot(y)
4/20: %who
4/21: filename
4/22: data
4/23: plot(data.Longitude, data.Latitude, ',')
4/24: plot(data.Longitude, data.Latitude, ',')
4/25: import networkx as nx
4/26: !pip install networkx
4/27: import networkx as nx
4/28: g = nx.read_edgelist('0.edges')
 6/1:
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
 6/2:
x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()
 7/1:
import matplotlib.pyplot as plt
%pylab
import pandas as pd
filename = 'worldcitiespop.txt'
data = pd.read_csv(filename, low_memory=False)
plot(data.Longitude, data.Latitude, ',')
 8/1:
import matplotlib.pyplot as plt
%pylab
import pandas as pd
filename = 'worldcitiespop.txt'
data = pd.read_csv(filename, low_memory=False)
plot(data.Longitude, data.Latitude, ',')
 9/1:
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lecture 7: Now for Real MCMC\n",
    "AM207: Verena Kaynig-Fittkau,and Pavlos Protopapas, Harvard University\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "from scipy.stats import norm\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set_style('white')\n",
    "sns.set_context('paper')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rainy Sunny Reprise\n",
    "Remember our rainy sunny example from the previous lecture. We have two states connected each to itself and to each other. To simplify things we will now just set all transition probabilities to 0.5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The transition matrix\n",
      "[[ 0.3  0.7]\n",
      " [ 0.5  0.5]]\n",
      "Stationary distribution\n",
      "[[ 0.41666673  0.58333327]\n",
      " [ 0.41666662  0.58333338]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x26425c88>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x24e9c438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# the transition matrix for our chain\n",
    "#transition_matrix = np.array([[0.5, 0.5],[0.5, 0.5]])\n",
    "transition_matrix = np.array([[0.3, 0.7],[0.5, 0.5]])\n",
    "\n",
    "print \"The transition matrix\"\n",
    "print transition_matrix\n",
    "\n",
    "print \"Stationary distribution\"\n",
    "print np.linalg.matrix_power(transition_matrix,10)\n",
    "\n",
    "# initial state \n",
    "p = np.random.uniform(low=0,high=1, size=2)\n",
    "# normalize \n",
    "p = p/np.sum(p)\n",
    "\n",
    "# do 100 iterations\n",
    "q=np.zeros((10,2))\n",
    "for i in np.arange(0,10):\n",
    "    #compute probability for each state\n",
    "    q[i, :] = np.dot(p,np.linalg.matrix_power(transition_matrix,i))\n",
    "\n",
    "plt.plot(q)\n",
    "plt.xlabel('i')\n",
    "plt.legend( ('Rainy', 'Sunny'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the stationary distribution of our Markov Chain is [0.5, 0.5]. We can do the same by sampling from our chain. We will modify this sampling to model any stationary distribution we want! The example below only works for the symmetric proposal transition matrix. For more flexibility read further below!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.238111111111 0.761888888889\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x2658d240>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ndODAAYendMZ0+2ZiYkI7d+7UihUrHJ7QWdPtn9/97ncqKirS6Oio1q5d6/CUzphu3xw+fFhvv/22\n3n///cnbPq5GyWRS+/btk8vlmrL9Uj6TZ314LnRvj/TRB8j8+fOVn5+vkZERJ0d0zHT75qabbtLZ\ns2fV3Nys73//+06O6Jjp9s0vf/lLbdq06bz7w6420+2fN998U1u3btWdd96pnTt3OjmiY6bbN9dd\nd512796tXbt26emnn3ZwQmd5vV7V19efFx5JM/5MnvXh+fjeHklT7u0pKCjQ6OioMpmM8vPznRzR\nMdPtm2PHjmnHjh3atm2bVq9e7eSIjrnQvjl16pT+/ve/69lnn9WRI0f061//2uEpnTPdn52lS5cq\nLy9PHo9H8+bNc3JEx0y3b37xi18oNzdXCxYs0Pj4uJMjzgr/eUF0fn7+jD+TZ/3l1P95b8/Ro0d1\n33336ciRI9q3b59GR0e1efPmq/K0wIX2zT333KOvfe1rWrNmjQoKCrR69WrdfvvtTo9q3HR/bnJz\nP/pas6GhQdu3b79qv+OZbv+88MIL+stf/qKxsTFt3bpVq1atcnpU46bbNwcOHNCLL74ol8ulDRs2\n6Etf+pLTozrq9ttv15NPPqmf/exnl/yZPOvDAwCYW2b9qTYAwNxCeAAARhEeAIBRhAcAYBThAQAY\nNesfmQN82oyNjamxsVH9/f06e/asNmzYoIqKCn344Yf64he/eMHX7N+//6p+BAuuLoQHuMJefvll\nLV68WA8++KCkj55bdebMGblcrmnD88wzzxAeXDUID3CFWZalV199Vdddd52uvfZaPfPMM6qpqVE6\nndb111+v5557Tq+//roGBga0bds29ff367333lNHR4fWr1+vHTt2aHR0VDfeeKO2bNni9K8DXHHc\nQArY4NChQ9qzZ4/+8Y9/6Otf/7pWr16ts2fP6pZbblFHR4dqa2t17NgxPfbYY9q1a5c2btyoffv2\nadu2bfrRj36klStX6gc/+IHuv//+q/qBlJibOOIBrrB33nlHwWBQFRUVOnv2rH74wx9q5cqVkqSc\nnBwlk0ndc889mj9//nnP/Dp+/Lh+/OMfa2JiQul0Wn19fYQHcw5XtQFX2Kuvvqrdu3dLklwul5Yu\nXar8/HxNTEzorbfe0r/+9S89/PDDqqqqmnzQ4sf/XLFihVpaWiZPz332s5916tcAbEN4gCvslltu\nUTwe1ze+8Q3V1NSosLBQq1at0t69e5Wbm6t4PK6amhr98Y9/nHzkvsvl0u7du3X33Xdr+/bt2rRp\nk9588015vV6HfxvgyuM7HgCAURzxAACMIjwAAKMIDwDAKMIDADCK8AAAjCI8AACjCA8AwCjCAwAw\n6n8BSx8OAYMnlb8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x24b9a518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "desired_stationary_distribution = [0.3, 0.7]\n",
    "\n",
    "number_of_samples = 10000\n",
    "samples = np.zeros(number_of_samples)\n",
    "\n",
    "oldPosition = np.random.randint(low=0, high=2)\n",
    "samples[0] = oldPosition\n",
    "\n",
    "for i in xrange(number_of_samples-1):\n",
    "    newPosition = np.random.choice(2,p=transition_matrix[oldPosition])\n",
    "    \n",
    "    newProb = desired_stationary_distribution[newPosition]\n",
    "    oldProb = desired_stationary_distribution[oldPosition] \n",
    "    acceptance_probability = newProb / oldProb\n",
    "    if np.random.uniform() < acceptance_probability:\n",
    "        # accept \n",
    "        samples[i+1] = newPosition\n",
    "        oldPosition = newPosition\n",
    "    else:\n",
    "        samples[i+1] = oldPosition\n",
    "    \n",
    "samples = samples[1000:]    \n",
    "print 1-np.mean(samples), np.mean(samples)    \n",
    "samples_hist = plt.hist(samples, bins=2)\n",
    "plt.xlabel(\"State\")\n",
    "plt.ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is how to correct for the asymmetric transition probability matrix of the original Markov Chain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.298888888889 0.701111111111\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x26582898>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nFQ5P6KyZ9s8zzzwjj8ejsbExrV271uEpnTHTvjl69Kjeeustvffee1O3fVyN+vv7deDAAblcrmnb\nL+Uzec6H50L39kgffYBkZ2crLy9Po6OjTo7omJn2zU033aTh4WE1NTXpu9/9rpMjOmamffOLX/xC\nmzZtOu/+sKvNTPvnjTfe0NatW3XnnXdq165dTo7omJn2zXXXXae9e/dq9+7devLJJx2c0Fler1fb\nt28/LzySZv2ZPOfD8/G9PZKm3duTn5+vsbExpdNp5eXlOTmiY2baNydOnNDOnTu1bds2rV692skR\nHXOhfXP69Gn97W9/09NPP61jx47p17/+tcNTOmem/ztLly5Vbm6uCgsLtWDBAidHdMxM++bnP/+5\ncnJytHDhQk1MTDg54pzwrxdE5+Xlzfozec5fTv2v9/YcP35c9913n44dO6YDBw5obGxMmzdvvipP\nC1xo39xzzz36yle+ojVr1ig/P1+rV6/W7bff7vSoxs30/yYn56OvNevr67Vjx46r9juemfbPc889\np7/85S8aHx/X1q1btWrVKqdHNW6mfXPo0CE9//zzcrlc2rBhg77whS84Paqjbr/9dj3++OP6yU9+\ncsmfyXM+PACA+WXOn2oDAMwvhAcAYBThAQAYRXgAAEYRHgCAUXP+kTnAf5rx8XE1NDSor69Pw8PD\n2rBhgyoqKvTBBx/o85///AVfc/Dgwav6ESy4uhAe4Ap76aWXtGTJEj344IOSPnpu1dmzZ+VyuWYM\nz1NPPUV4cNUgPMAVZlmWXnnlFV133XW69tpr9dRTT6mmpkapVErXX3+9nn32Wb322msaGBjQtm3b\n1NfXp3fffVdtbW1av369du7cqbGxMd14443asmWL078OcMVxAylggyNHjmjfvn36+9//rq9+9ata\nvXq1hoeHdcstt6itrU21tbU6ceKEHn30Ue3evVsbN27UgQMHtG3bNv3gBz/QypUr9b3vfU/333//\nVf1ASsxPHPEAV9jbb7+tYDCoiooKDQ8P6/vf/75WrlwpScrKylJ/f7/uueceZWdnn/fMr56eHv3w\nhz/U5OSkUqmUent7CQ/mHa5qA66wV155RXv37pUkuVwuLV26VHl5eZqcnNSbb76pf/7zn3r44YdV\nVVU19aDFj/9csWKFmpubp07PffrTn3bq1wBsQ3iAK+yWW25RPB7X1772NdXU1KigoECrVq3S/v37\nlZOTo3g8rpqaGv3hD3+YeuS+y+XS3r17dffdd2vHjh3atGmT3njjDXm9Xod/G+DK4zseAIBRHPEA\nAIwiPAAAowgPAMAowgMAMIrwAACMIjwAAKMIDwDAKMIDADDqfwG/MA3ES3AjsAAAAABJRU5ErkJg\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25b55208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "desired_stationary_distribution = [0.3, 0.7]\n",
    "\n",
    "number_of_samples = 10000\n",
    "samples = np.zeros(number_of_samples)\n",
    "\n",
    "oldPosition = np.random.randint(low=0, high=2)\n",
    "samples[0] = oldPosition\n",
    "\n",
    "for i in xrange(number_of_samples-1):\n",
    "    newPosition = np.random.choice(2,p=transition_matrix[oldPosition])\n",
    "    \n",
    "    newProb = desired_stationary_distribution[newPosition] * transition_matrix[newPosition, oldPosition]\n",
    "    oldProb = desired_stationary_distribution[oldPosition] * transition_matrix[oldPosition, newPosition]\n",
    "\n",
    "    acceptance_probability = newProb / oldProb\n",
    "    if np.random.uniform() < acceptance_probability:\n",
    "        # accept \n",
    "        samples[i+1] = newPosition\n",
    "        oldPosition = newPosition\n",
    "    else:\n",
    "        samples[i+1] = oldPosition\n",
    "    \n",
    "samples = samples[1000:]    \n",
    "print 1-np.mean(samples), np.mean(samples)    \n",
    "samples_hist = plt.hist(samples, bins=2)\n",
    "plt.xlabel(\"State\")\n",
    "plt.ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Markov Chain Sampling\n",
    "In this example we sample from $p(x) =6x(1-x)$ using the Metropolis algorithm with proposal \n",
    "distribution \n",
    "\n",
    "$$x^* \\sim N(x, 0.6) $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n2sW4ceMyC7tt27ZRrly5HLsvp0yZkuX4gQceYO/evWzevJknnngCsHXhvvbaa5mF3enTpwkNDaVF\nixbZ7vfKK6/kmDU1NZUBAwbw0ksv8fLLL/P777/z2muvUbt27WzXjhkzhrFjx9KiRQt27NjBwIED\nadasGT/88AOVK1dm+fLlVKhQgUOHDvHnn3+yfPlySpYsSUxMTJZWupiYGBwcHPjjjz8IDg6mX79+\nVKxYkXvvvTfX72nLli3p168fR48eZfbs2ZnfZ4CjR48yYMAAZs6cSdOmTdm8eTNDhw5l2bJlPPDA\nAwDs2LGDtWvXcv78eV544QXWr1/PU089levn2ZsKOxG5KZ7m8zz28woq/bYWp+SkzPPhj9TDY2h/\ninTtCrfwV2puhVBeR6LmNzkNzriVARhJpctxtO9IjvV4DeflX/Lgr2soeeRvPM6GUHneVCp8Po+j\nTz2LqdzIbANQcpNfnyOTa/Pz86NOnTqsX7+ezp078+uvv9KkSROcnZ0zr4mOjs5skcuLtm3bsmbN\nGp544gnCwsKIjo7m4YcfzvzvLzo6OvOz82r37t2kpqby6quvAtCsWbNcu2tdXV1ZvXo13t7e1KpV\ni7/++ivL61f+HKhSpQoVKlQAbIXclTw9PRk6dChOTk489thjNGrUiHXr1tG/f/88577y8y53UTdv\n3hyAxo0b07RpU1avXs3w4cMBW2Hr7u7OPffcQ40aNTh16tQNfdatUmEnIjfE8+RR7lu6kFK/rMQh\nIwOAdA9Pwtp0JvSZbpz1KWobzXqLXQ/2LoTyg6sHZ9hjAIbVxZXjDZpxqvGTVEqIo9wPXxG4bgXO\nCXFU/e4LLD9+TdKLL5I0YACWS60U6lotPC4XHG3atOGHH36gc+fOrF69mv79+xMfH595nb+/f64D\nbKKjo/H19c3S0tWmTRvmz59PSkoKa9eupW3btlnec7kF12w2U7JkySyvJSQk4OzsjIuLS5bzZrM5\nW8tv6Vym8fnss8+YM2cOI0aMIDk5meeee46RI0fimMNclddqTS5evHiWbtCAgAAu5LB6TV5FRkZm\nGykbGBhIeHh45nHRokUz952cnDKnTLpT9F+2iGSyWCyYzeZsW2RkJD7HDlPjjT406tqS0j99j0NG\nBklFfPm370h+/2Erh4dNIKF8BbvmuVwIXd48PPV83rXEVazKP29OZdMPmzn+0gBSPDxxSE3F/Ysv\n8K1fn4RO3fh96U93bE42uXNatGjBgQMH+OeffwgNDc3WvdmgQQPOnDnDkSNHsr23Z8+efPTRR1nO\nlSpViqpVqxIUFMSaNWuyPEcHUKZMGe655x5+/fXXbPebM2cOPXv2zHa+RIkSnD9/Pktr2/nz57Nd\nl5aWRkhICO+99x5bt27ls88+Y9WqVfzyyy85fu3XGiBx9SCIM2fOZBaTDg4OpKWlZb52rUEZlwUG\nBhIWFpblXFhY2H/PGucDKuxEJNPl56yCgkMyt50/bMLUrSetB3el5GbbD/HEUmXY0uM1ln38HSde\nHkh6kewrJIhxUv2Kc7Tf63wz92t2dutPsn8JHCwWym/6hWeG98Br8GA4fdromAVKQnwsMRejbuuW\nEB970/k8PDxo3Lgxb7zxRo7Pc5UsWZIePXowZMgQ/vrrL6xWK1FRUUyYMIHIyEheeOGFbO9p06YN\nH3/8MV5eXpQtWzbb62+88QZz5sxh1apVpKamkpqayrfffsuyZcsYNGhQtutr1qyJj48P8+bNIz09\nnU2bNrF169Ycv55hw4bx3XffAbZWN5PJlNkS5uzsnKU18mpXFnIxMTF8/PHHpKamsnHjRoKDgzNb\nH++9997MqWC2bt3K3r17M9/n4uKS42c89dRT/PnnnwQFBWGxWNi0aRMbN27M1qJpJHXFikgWl5+z\ncj8XRoXPZlN63Q+YLnUlJJS9h2M9BhPevB0hZ07j6ORynbuJkdI8PDnQ4QWiew2h9E/fU+HLj3A/\nfxa3b76B5cuhTx8YOxZKlTI6ar7m5+dH+yeq3bHPuhFXtla1a9eOAQMGMGfOnByvHTFiBAEBAUyc\nOJFz587h5uZG3bp1WbJkSWaL05X3a926Ne+88w5jx47N8fOaNGnCrFmzWLBgAe+88w5Wq5VKlSqx\ncOFC6tatm+3znZycWLhwIWPHjmXx4sVUq1Ytc3DGlZydnZk3bx5Tp05l6tSpeHl58dJLL2VOv/LM\nM8/Qo0cPJkyYcN3vSfny5Tl//jz169enTJkyfPTRR5ldx2+99RbvvvsuX3zxBfXq1csyqrhJkyZ8\n9dVXPPnkk/z888+Z9yxXrhwff/wxM2bMYNSoUQQGBjJz5kwefPDBbJ+d0/GdYLLmgyeRw8LCaNas\nGUFBQQVylmeRwsJsNrN5wz5qfv8/yq78Bod0WzdFfLHi7Oncg8QXe2O99LxK6OnjODq5EFg661/y\nl1eMyOsoSrPZTFBwSLaH9nO6f26faY/zt/Pe+eUzTakpFP9mEY/88CUOl58zcneHwYOJ7NuXDYej\ns/073Oi/p4jcmlutidRiJ1KI3dDcZKmpuC1YQJvp7+ESHwdAip8/x18eyPYa9TC5exF4B+diEvuz\nurhytMMLlBs9CP9vvoH33oPoaJg+naKLF3PfC32J7PwK5PCAuogUDPopLVKI5WluMqvVtmzV8OF4\n/fsvYBvleqJ7f04/14MMdw8sp49zq7/qcysyC/IUJgWWpye8+Sb06wczZsAHH+Bw4QJ15kwh9ucf\nODR0HNE1bmzVABHJH1TYiRRy15yb7NAhGDYMLo02s5pMnGzRnlOvjSW1WPGb+rzc1i2NjIxky76z\neHlnHWhR0KcwKdB8feGdd6BPH1KGDMH1xx8pcvQg9Qa+QHiT1hwZNIYYD0+jU4rIDbihUbH79++n\nUaNG171u+/btVKlShaSkpOteKyJ3nmNKMh5TpkD16plFHY0acfHXXwkeOv6mizq4PP/c8Swja4OC\nQ1i35TAmB6cs05doCpN8onx54hYtImjGImIqPwRAwO/raPhiCyov+xyumBJCRPK3PBd2y5cvp2fP\nntkWFb5abGxslhE0IpK/+O/YROv+z+Exezakp0P58rBsGWzaRMbDD9vlM66ef04FXMFgfrAG2xet\n5O8x75Hi549jagoPfzEP32bNYNs2o+OJSB7kqbBbsGABS5YsydMSHBMnTqRNmza3HExE7Msl8gLV\nJwyh9vBX8Ao/g9XREUaNgoMHoXNnMGBYvuRDDg6caduZzd8EEfJ0N6wmE06HDkGDBrZn8qJvfbUM\nEbl98lTYderUiZUrV1Kt2rXn8Vm1ahVxcXF06dJFD0OL5BdWK2VWfUujF5sT+OsqACIrVeNiUBBM\nnw4eHgYHlPwo3bsIB1+fTND7i0mvWtV2cuFCqFzZ1sIrIvlSngZP5GX+orNnzzJ37ly++eYbUlJS\nDJmUT+RukNvo0pzW/3Q4e5bHx79Gqb+2A5Dm6c2//Ufxd6MW1AjwJcNsznK9RqgWftca3JLTv31k\nlepc3LAB///9DyZNgogIeP55+P57+Ogj0Px2IvmKXUbFWq1W3nzzTYYNG4a/v3/mOmr6BSFifzlN\nYZJl+hKwTWHy1Vf4vvYaDrG2ZYrOP96SgyPeJqV4SeJOH2f99khKlEzIcm+NUC38bINbIvL8b2+x\nWIiMjYWePXFo3hyv4cNx+eMPWLYM6++/Y/rkE+jQ4U5+CSJyDXYp7MLDw9m/fz+HDx9m4sSJWCwW\nrFYrTZo0YcGCBdSsWdMeHyMil1w9hcmVrTCmiAi8Ro7E9eefcQBSPb05NPJtzrXskOU5ussDHK4U\nG6Pnp+4GN/Jvn7UQNMEbH1DhoeU8vOhDnCMioGNH6N4dZs+GS2t5iohx7FLYlSpVKsviuWfOnKFZ\ns2b88ccfuLm52eMjROQaLv/yrXFsNXXmTsE1NgaAU9VqsmPQWHyr648ruXlXF4Lmrn35pWZ9Wn06\nDecdO+CrryAoCL74Alq0MC6oiNzYPHZXmzBhAhMnTszxNZPJpK5YkTvEMSWZFksX0PCd13GNjSHd\nw4u/R0/j1zHTSbyFOelEchNXsjQnPvuM+LffxurqCmfPQsuWJA4ejCU52eh4InetG2qxq1u3Ltu3\nb888njRpUo7XlS5dmkOHDt1aMhHJE6/jR+j41iD8wk4BEPVwHfaP/4DkUmXg9HFjw0mhFR8Xw/qd\nEZSo3QbvOVWpP+Mt/I4dxmPuXNK2bsXhu+/gvvuMjily17mlFjsRMZDVStkVS3m0Zwf8wk5hMTlw\ntOdQds77xlbUidxml7toHR6qRfCilZx6vicAzrt3wyOPwDffGJxQ5O6jwk6kAHKOi+WRsQN4cMZb\nOKamEF+sOD9Pms3xnkPA0dHoeHIXsrq4cnjIW/wxaTaWYsUgLg5efBFefRUSEq5/AxGxCxV2IgWM\n4/79tBzSjYDf1wEQ3rgVP0xbyPkq9lkOTORWnKvTkIu//w5Nm9pOfP451K8P//5raC6Ru4UKO5GC\n5Isv8G3TBq/wM1icXfhnxNvsfXc+KVfMaSdiNEtAAKxfD+++Cw4OcOAA1KkDK1caHU2k0FNhJ1IQ\npKTY1uns0QNTcjIJxQPYMX8Zoc921xqvkq9cnlPRHB2NuXdvYpYvx+LvD7Gx8PTTMHo0ZGQYHVOk\n0LLLPHYicvNyWyIMLi0TduYMdOoEO3cCkNqkCev7voV7+Qp3MqZInmRb2cKtPNbJH/Psouk4//UX\nTJsGu3bB119DcU3FI2JvKuxEDJbTEmEAcbEXaZkSRpnhw3G4tKpE4rBhhPbqRcqpJNyNCCuSB1dP\naBwDxPz4I/7vvgsffwwbNkCtWrBihe1/RcRu1BUrkg9cXiLsyq3ihjWUfvVVHCIjSfXwZPP4D1jd\nohvrth8lMTHR6MgiN8bVFT76CL78EtzcIDQUGjWC5cuNTiZSqKiwE8lnTOnpVJ49mccXzcIxI4P4\ncvexY/HcTDsAAAAgAElEQVQqElo/jY+vHx6eXkZHFLl5L70E27dD2bKQlASdO8Pbb4NWKhKxCxV2\nIvmIU3wsNUf14p7/WwzAmeq12fHpChLLaQZ/KUQeecT2zGi9erbjCRNsc94lJRmbS6QQUGEnkk+4\nh52mfp9nKb5jEwD/tOzA+jHvke6tqUykYMscKWs2/7c5ORGxbBnJzz5ru+jbb0lr0ICoAwcwm81Y\nLBZjQ4sUUBo8IZIP+P+zl0enjMQlJhqLoyOHhk9iW836ODrqP1Ep+LKNlL0k/GwoDm160NgrgOpf\nfoTznj24NWnG+jfeoWGPjvj7+xuUWKTg0m8NEYO5rF5NkzH9cUxLJdXbh73vfExU7cfg9HGjo4nY\nzdUjZQFiY6JxdHLhbN+RpFd+iOqThuERGUGbCUNJvK8oXG7Nu+S6UwM5qBNKRIWdiJHmzMF76FBM\nViuJgWX5a+bnJGh+OrkLRTRuxc75y6g1ogeuUWaKdOliW46sW7fMa3KbGighPpb2T1RTC58IKuxE\njGGxwBtvwPvvYwKi7q/C3g+/JNVPE7bK3Su2UjV2fPIDNYZ2p0jYaejenYQjR0gaPBhMJiIjI/Hw\nzN7yJyL/Ubu1yJ2WkgJdu8L77wOQ2qwZG6d/oqJOBEgKLMvK8R9w9v4qAHhOmcLFHgP4bcdJ1m05\nrDkcRa5DhZ3InRQTA61bw7ff2o5ffZXYr74i3d3D2Fwi+UiKtw+/TpxDeONWANy/djmN3xuLt7Oz\nwclE8j8VdiJ2ZrFYsk7rcGm7cPAgaY8/Dr//DkDCqFGYp00jMjYWqyZnFckiw9WVvVM+4nSnlwEo\nuflXWk8fg1OSWuxErkXP2InYWU4PeLubz9NwVB+cw8OwmkzsGjSGE02egV2hhJ8NxdvHD9+ixQxM\nLZIPOTpyaNgEUvxLUHHBDAIP7uPJSUPZP+9r0nyKGp1OJF9Si53IbXDl2q+l4mNpMao3fuFhWBwd\n2TdpDpEv9Mp8XUuEiVyDycSJlwbwz8jJWE0mih8/TN0Bz+N64bzRyUTyJRV2IreR17FD1OvXGffw\nM6Q7u7Bh1LuEN29rdCyRAif0mW5sHPAmFgdHvE8epV7/zrifCTE6lki+o8JO5DbxObCHegO74Bpl\nJt3Di59HTyOs5qNGxxIpsI43bEbQ61PIcHHB42wo9fp3xuvEv0bHEslXVNiJ3AbF/95NnSHdcI6L\nJdXXj53zvia8SnWjY4kUeKG1G/DXzC9I9/DEzRxB3YFd8D1+xOhYIvmGCjsRO3PaupXHx7+GU1Ii\nyf4l+fPj/yO28kNGxxIpNKJqPUrwnCWkevvgEhNtW5Jv/36jY4nkCyrsROxp40Z8XnwRp5RkkkqU\nYufH35Jwz/1GpxIpdGKqPkLwnKWkFvHFNS4Gn2efhb/+MjqWiOFU2InYS1AQtGmDKTGRhOIl2Tnv\nGxLL3GN0KpFCK67SgwTPXUpKER8cLl6E5s0hONjoWCKGUmEnYg+//gpt20JSEhlly7Jx+qcklSlv\ndCqRQi/ugapsnLoQi78/XLwILVrAzp1GxxIxjCYoFskDi8VCVFRUjq/5BQfj8PTTtjVg77mHmO+/\nJ+E8+NzhjCJ3q5h7HyBmxQqKPvssRETYirtffoH69Y2OJnLHqbATyYOcVpMA8N76G61njIXUVDLK\nlyfmhx+44OGB1RpvUFKRu1NG5cqwcSM0bQrnz0OrVvDbb1CrVp7ef80/3vz8cHBQB5cUDCrsRPLo\n8moSl/nu30Wt98fhkJpKfEBpfnv7Y5LCrYSfPawlwkSMULWqbS3mJk1sxV3Llrbjh64/Kj23P94S\n4mNp/0Q1/P39b0tkEXtTYSdyE4oc2k+tEa/inJJMfLHi/DXvG1wCy+ICxMZEGx1P5K5isViIjIy0\nHfj747hsGT4dO+IQFWXrlt20CSpVuu59rv7jTaQgUtuyyA3yOnaI2kNfwjkhjkSfoqwb/yFJgWWN\njiVy14qPi2H99uMEBYcQFBzC+gQvVr8xFYu3t63lrlkzOHnS6Jgid4QKO5Eb4HnqOHWGdMclLoZU\nn6L8NPY9YlXUiRjO08sbH1+/zC25eh1iv/0WPD3hzBnbs3dhYUbHFLnt1BUrcoXcHqCOjIzE82wo\ndd7si2t0JGle3uz68H9Eu7njaEBOEbm+9Lp1YfVqeOopOHXK1nK3aRMEBBgdTeS2UWEncoXcHqCO\nPbiPLu+Nxc18nnQPT3Z98CWxlarB6eMGJRWRPHniCVixAtq3h3//tQ2o+OMP8PU1OpnIbaGuWJGr\nXH6A+vJWzNGJZ+ZMwTviHBkurux+bxEx1WoYHVNE8qp1a1i2DBwd4e+/bUVeUpLRqURuCxV2Itfg\nkJJMzVG9KBZyAovJgb2T5xJVU5OeihQ4HTvCJ5/Y9jdvhi5dID3d2Ewit4EKO5FcmNLTeXjca/jt\ns609ubXf61xo1MLgVCJy0159FaZNs+2vWgV9+oDVamwmETtTYSeSE6uVB6ePoeSWDQDsfKEXR5u2\nMTiUiNyyUaNg+HDb/uefw+jRxuYRsTMVdiI5qDj/Pcqs/Q6Ak116sq/d8wYnEhG7MJlgxgzo3t12\nPH06zJxpbCYRO7qhwm7//v00atQo19eXLVtGq1atqF27Np07d2bXrl23HFDkTqu4Yin3LVkAwJnW\nT3Nk0BjbLwMRKRwcHOCzz2zToACMHInrd98Zm0nETvJc2C1fvpyePXuSnsvDpn/++SezZs1izpw5\n7Nq1i65du9K/f39iYmLsFlbkdnNZtYpHFs0CIOLRJzgwZrrtl4CIFAoWiwWz2Yw5Jgbz/Pmk1akD\ngNeQIRTfu9PgdCK3Lk+/sRYsWMCSJUvo379/rteEh4fTq1cvKl1aj69jx444ODhw9OhR+yQVud22\nbcN7wABMVisXq1Rn35R5WJ2cjU4lInZ0ea7KoOAQgv4xs2bkdGLLlMeUlkaDKa/jdeJfoyOK3JI8\nFXadOnVi5cqVVKtWLddrOnToQM+ePTOP//rrLxITE7n//vtvPaXI7Xb0KLRvjyklhfiA0uyesYgM\ndw+jU4nIbXDlXJXuZe9lz6z/kVTEF9fEeGqN6IHrhfNGRxS5aXkq7Pz9/W/opseOHWPIkCEMGTIE\nX83uLfndhQvw5JMQGYnF15c/Js0m1a+40alE5A5JKl2OX16fQrqLK+7nz1Lz9Z44JiYYHUvkptj9\n4aEtW7bw4osv0r17d3r16mXv24vYV1KSbRb648fBxYXYL78kruy9RqcSkVtksViIjIy0PU93xRYZ\nGYk1h7nrLtxfmd+HjsdqMuHz7z88Mm4QJk1gLAWQXdeK/f7775k6dSpvv/02T10ebSSSD1ksFqIu\nXMC7Z09cd+wAIHbePM5XqoT1eLzB6UTkVsXHxbB+ewQlSmZteQs/G4q3jx++RYtle09InUYcGjqe\nqrMmUXz771SdOZ5tfUbcqcgidmG3wm779u28/fbbLF68mFq1atnrtiK3RVRUFOd6D8F/7VoA9vV4\njcNlahG+5XCuP/RFpGDx9PLGx9cvy7nYmOhrviek8yu4nwvj3m8/o+yP31DZrzjUHXc7Y4rY1S11\nxU6YMIGJEycCsGjRItLT0+nduzc1a9akRo0a1KxZky1bttgjp4hduS5dykOr/w+A0A4vcK7XMHx8\n/fDw9DI4mYgY7cigMYQ3aQ1A9S/m4rJuncGJRPLuhlrs6taty/bt2zOPJ02alLn/2Wef2S+VyO30\nxx94vf46AObaDTg4YpImIBaR/zg4sH/8B7iHn8Hn8N949+0L1avbNpF8TjOvyt3lxAl45hlMaWnE\nBZZj75SPNFediGRjcXNn9/RPSPLzx5SYCO3awXnbNCiZkxznsFksFoOTy93OroMnRPK12FjbD+fI\nSCw+PmyeOAuHIj5GpxKRfCqleAB/vPU+LUb3xSEkhLR27Yj54QciExLYsu8sXt5Zf34kxMfS/olq\nNzxFmIg9qcVOCrXMv6zPnyf12Wfh4EGsjo6cmTWL2NLljY4nIvlcSKky/PLqMACcg4OJf7kf6zYf\nwuTglDnJ8eXN06uIwWlF1GInhYjFYiEqKirLucjISLbsO0vDbz/Df8MGAHb3HckWix/eiYka/Soi\n13Wu6VMcTU3mgc8+5J7f1vJoiQAOPPuy0bFEcqTCTgqNy2tAXvlXc/jZUGru3kGlFUsBOP1sdy50\n64fH6eNGxRSRAuj4q4PxOnWMUkFrqPvtZ8SUq0BG6ReMjiWSjbpipVC5cg1IH18/yp8L47FPZgJg\nrtOAw0PGG5xQRAokk4m/35pBTGXbyNjGc6fgeUp/IEr+o8JOCi2XyAs0nzURx/Q0EgPLsm/yPKxO\naqQWkZtjcXVjz9T5JBbxxSUpkRpv9sExIc7oWCJZqLCTQsmUlsojbw3AK8pMuosre6YuIK2Ir9Gx\nRKSASy4ZSNDQ8VgcHfEKOUH1ScNBU5xIPqLCTgqlynOm4LdvFwCbB7xJ3ANVDU4kIoVFeJXq/Pny\nIABKbtlAhc/nGpxI5D8q7KTQKb3mO8p//xUA+9o+x8kGzQxOJCKFzaHWzxD2VCcAHvjsQ4pv/tXg\nRCI2KuykUPE7coAHZ7wFgLlOQ4Jf6GlwIhEplEwmDr4+hYtVbIMpqr89Au+wU8ZmEkGFnRQipgsX\naDDldRzSUi8NlpiL1cHR6FgiUkhZXF3Z++58UooWwzkhjoaTR2CK02AKMZYKOykcMjLw7tsXj8gI\nMlzdNFhCRO6I5JKB7J3yERZHJ4qEnsJr6FCwWo2OJXcxFXZSOIwfj8vmzQAceHOqBkuIyB0TXaMe\nRwaNBsB11SqYM8fgRHI3U2EnBd/atfDuuwAca9OJc606GhxIRO42p5/rQWjDSwO1Ro6E7duNDSR3\nLRV2UrCdOgXduwOQ9sgj7Okzwtg8InJ3MpnYOXQ86RUqQHo6PPccXLhgdCq5C6mwkwLHYrFgNpsx\nh4WR1rEjREdj8fUl5P33yXByNjqeiNyl0j28iFu8GNzdISwMXnwRMjKMjiV3GRV2UuBERUWxauMB\nLvYdivO+fQBsGTaJNafiSUxMNDidiNzNMqpWhQULbAcbNsDbbxsbSO46KuykQKq6cwv3//Q9AMde\nGURii/Z4eHoZnEpEBHjpJejTx7Y/eTKsW2dsHrmrqLCTAsfxyBFqz30HAHPtBhzrOdTgRCIiV5k9\nG2rWtE190rUrhIYanUjuEirspGBJSsK7d2+cUpJJ9i/J/okfgqMmIRaRfMbNDZYvBx8fiIqyPW+X\nnm50KrkLqLCTgmXoUJwOHcLi4MC+SR+S6udvdCIREcA2sCsyMtI2uMtsxuztTeyHH9pe3LIFJk0y\nNqDcFZyMDiCSZ8uWwSefAHDwhd5E16hvcCARkf/Ex8WwfnsEJUom/HeyZHWqt+xAlfU/wjvvQJMm\n0KyZYRml8FOLnRQMJ05A794ApDZowMEuPQ0OJCKSnaeXNz6+flm2AwPeIP3BB23P23XrBufPGx1T\nCjEVdpL/pabC889DbCz4+xO/YAFWPVcnIgWExcWVuEWLwNMTwsNto2YtFqNjSSGlwk7yv9GjYdcu\n2/7//oclIMDYPCIiNyjj/vth/nzbwfr1MGOGsYGk0FJhJ/nb2rXwwQe2/ZEj4cknjc0jInKzuneH\nl1+27Y8dq/Vk5bZQYSf517lz//0QrFvX9uCxiEhBNm8eVKpkW2rshRcgJsboRFLIqLCT/MligVde\ngchIKFIEvv0WXFyMTiUicmu8vGwj/F1d4fRpGDjQ6ERSyKiwk/xpzhzbcyhgey7l3nuNzSMicpOy\nzW8XGEj8uHG2F5cutW0idqJ57CT/2b8f3ngDgOROnYhv2RLM5syXIyMjsVqtRqUTEbkhOc5v90gr\nGjz8I2X2BcOAAfDYY/oDVuxChZ3kL0lJtqV3UlPJKFuW79q+jEtwSJZLws+G4u3jh2/RYgaFFBG5\nMZfnt7vSX69PJnBIVxwiI20DK37/HZz0a1lujbpiJX954w345x9wcCDu449xKRGYbbJPD08vo1OK\niNyyZL/ixF9ecmzrVpg61dhAUiiosJP846efYO5c2/7YsaTX15JhIlK4pbZuDf362Q4mTYIdO4wN\nJAWeCjvJHyIioEcP2369enD5wWIRkcJu5sz/pkDp2hXi4oxOJAWYCjsxntUKPXvaijsvL9sIMWdn\no1OJiNwZHh7w9de2n3snTsDgwUYnkgJMhZ0Y77PPYM0a2/7cuVChgrF5RETutJo1YcoU2/4XX8CP\nPxoaRwouFXZirJMnYdgw2/7TT/+30oSIyN1mxAho1Mi237u3rRdD5AapsBPjZGTYCrn4eCheHBYu\nBJPJ6FQiIsZwdLS11nl6woULtkEVmrNTbpAKOzHOhx/C5s0AxM6cidlk+m9mdrNZExGLyN3nvvtg\n1izb/ooVsGSJsXmkwLmhwm7//v00utxMnIM1a9bQvHlzatSoQb9+/YiMjLzlgFJI/fMPjB0LQPLz\nz7PcrSxBwSFZtnVbDpOYmGhwUBGRO6xXL3jySdv+oEEQGmpsHilQ8lzYLV++nJ49e5Kenp7j64cP\nH2bixInMmjWLP//8E39/f0aPHm23oFKIpKbaZllPSYGyZUl49108vYpoImIREcBitRL53ntYihaF\n2FhSu3XDHBGBxWIxOpoUAHkq7BYsWMCSJUvo379/rtdcbq176KGHcHFxYeTIkWzevJmoqCi7hZWC\nz2KxkDhmDOzZA0DM7NmY09LU5SoicklUVBQ/HjKzo88oAFz++IOjo9/R71PJkzwVdp06dWLlypVU\nq1Yt12tOnDhBhSumqfD19cXHx4cTJ07cekopNGI3bMDt0vMj/7bvwjq38upyFRG5iqdXEWI7dOFc\n83YA1Fm6EIfjxw1OJQVBnlYb9vf3v+41SUlJuLu7Zznn7u5OcnLyzSWTwic5Ga9Bg3CwWEgody+n\nho7Hx82d2Jhoo5OJiNxxFoslx2fRrxw4dnDk2xTd+ydu5gi8X3sNtm+3jZ4VyUWeCru8cHNzy1bE\nJSUl4eHhYa+PkIJu4kScjh7F4uDA/rdmYnFzv/57REQKqfi4GNZvj6BEyYQs58PPhuLt44dv0WKk\nFfHlwJvTqD3yVZyDg2H2bBg+3KDEUhDYbbqTChUqcPLkyczjqKgoYmNjs3TPyl0sOBhmzADgyNPd\niKlWw+BAIiLG8/Tyvu7AMfNjT3CyeVvbwdixcPSoAUmloLBbYde2bVvWr1/P7t27SUlJ4YMPPuDx\nxx/Hx8fHXh8hBVVKCvToARYL6RUq8E+3vkYnEhEpUPb0HkFGyZKQnAyvvgoaISu5uKXCbsKECUyc\nOBGAypUrM3nyZEaPHk2DBg0wm828++679sgoBd3kybZ560wm4ufMIcPVzehEIiIFSpp3ERJmzrQd\nbNkC8+YZG0jyrRt6xq5u3bps374983jSpElZXm/dujWtW7e2TzIpHHbvhmnTbPtDh5Jety4Ehxib\nSUSkAEpt1Qq6doWlS2H0aGjTBvS4k1xFS4rJ7ZOaCq+8YlsT9v77YcoUoxOJiBRss2dDyZKQmAg9\ne6pLVrJRYSe3z7vvwt9/g8kEixeDRkiLiNyaYsVg/nzb/qZNsGCBsXkk31FhJ7eFZc8erO+8A0BS\nr16Yq1TBbDZnmZ9JRERuwtNPQ5cutv1Ro+CKGSlE7DaPnUim9HQyevTAOT2d+IDSrHvyZTIuPVd3\n5fxMIiKSN1dPZmyaOJGiGzbgYDZj7dsX0y+/2HpH5K6nwk7sb/ZsnPftA+DgmPfwCiid+ZJWmRAR\nuXE5TWZcttcIHps2GtOvvxI3fz4pzz2X5T1+fn44OKhj7m6jwk7s68QJGDfOttuyA1G1HzM4kIhI\n4XB5MuPLYts9z+n1P1J+9w5c3hxDUNGKpFx6PSE+lvZPVMvTkqBSuKiUF/uxWqFvX0hKwlK8OPt6\nDjE6kYhI4WUysfXVwaS5ueMaF0PdL+Zlrl7h6VXE6HRiEBV2ckssFgtmsxmz2UzcRx/Bhg0AnBs7\nlhT9YBERua0SipVgV1fbaj6B63/Ef9tGgxOJ0VTYyS2Jiopi1cYDbFm/B5fRYwE4U78xyz3Lk5iY\naHA6EZHC71DLjkRXqwnAgzPewjEh3uBEYiQVdnLLPL2KUO/zubjGx5Lu4cW/b07Fw8vb6FgiIncH\nBwcOjJ6GxckZ9/NneeCTmUYnEgOpsJNbVmrnZkptWA3Akf6jSClRyuBEIiJ3l4R7H+DESwMAKL/8\nS4od/tvgRGIUjYqVW2KKj6fWR1MBiH6oFqFPdzU4kYjI3en4S/0J+G0tXqeOUXv2ZM43r5njdZoG\npXBTYSe3xGPqVNwvnMfi7MKBN6eCfliIiBjC6uLKgdHTqNevM76nj3No4gz29hqa5RpNg1L46bew\n3Lzdu3FbtAiAE937k3DvAwYHEhG5u118qBahHW09J3VW/x8B8XGZU6BoGpS7gwo7uTkZGdC3LyaL\nhbjAcpzo3t/oRCIiAvzb73USff1wSkul6gcTbHOMyl1DhZ3cnPnzYdcuAHYNGo3F1dXgQCIiApDu\nXYTtl/7YLr5jEwG/rTU4kdxJKuzkxp09C2PGAJDcqRMRj9Q1OJCIiFzpxKNNOFO9NgCVZ0/GKT7W\n4ERyp6iwkxs3bBjExYGvLwmTJhmdRkRErmYysa3XcDJcXHAzR2huu7uICjvJ4solwq7eLBYLrFsH\ny5bZLp42DWuJEsYGFhGRHMWVKsPxlwcBUO77ryhyaL/BieRO0HQnksXlJcKuHjmVEB9L+/oV8B84\n0Haifn3o3RuiogxIKSIieXGyax8Cf1mJV8gJHnxvLGHvf2Z0JLnN1GIn2Xh6FckyPP7yEHmPWbPg\nxAlwdISFCzVnnYhIPmd1ceXgqHcA8DlygPvXfGdwIrnd9JtZ8sQ75CTu8+bZDoYNg+rVjQ0kIiJ5\nElWzPmeeehaAh/43H4dz5wxOJLeTCju5PquVmh9Pw5SWRkbp0pgHDsx87i4yMhKr5kgSEcnXDg8c\nTWoRX5yTEvCcMMHoOHIbqbCT6wr4bS0B+21z1m1/ZShBh6IICg4hKDiEdVsOk5iYaHBCERG5lrSi\nxTja73UAXFesgI0bDU4kt4sKO7kmx8QEKs+xPZ8R9nBd4p96Nsuzdx6eXgYnFBGRvAht9zxRD1S1\nHQwcCGlpxgaS20KFnVxThc/n4nYhnAxHJ3a8OgRMJqMjiYjIzXB0JLjfKKwmExw6RMK772af0koK\nPBV2kivPU8e451vb0Pj97Z4jNrCswYlERORWhASW4Z/HWwLgMv09tv28i6DgEFZtPECUpq8qFFTY\nSc6sVqp8MBGHjHSSSgayt8MLRicSERE72PfSwEsDKRKp87+PM6e0ksJBhZ3kKOC3tfjv2grA4SHj\nSHdzNziRiIjYQ0oR38yBFKU2rMbvr+0GJxJ7UmEn2TglJWYOmLhQ73HON25lcCIREbGn0HbPE1P5\nIQCqzhyPKV0DKQoLFXaSTdVvFuF2IRyLkzOHhk3QgAkRkcLG0ZGDI9/GajLhdeoYFX/8xuhEYicq\n7CQLx6NHqbRiCQAnX+xNYrn7DE4kIiK3Q0zVRwhr+xwADy79BIfwcIMTiT2osJP/WK14vvUWDhkZ\nJJUM5MTLA41OJCIit9G//UeR6u2Dc3ISHpMnGx1H7ECFnfxn7VpcfvsNgCMDR5Ph7mFwIBERuZ3S\nfP041msoAG7LlsGOHQYnklulwk5sUlJg2DAAIqrVJLxZG4MDiYjInRD6dDdiylewHQweDJqouEBT\nYSc2s2fDsWNYHRzY03ekBkyIiNwlrE5O7O470nYQHAxffmlsILklKuwEzp2DS89WJHfvzsUKlQwO\nJCIid1LEI3VJaXOpp2b0aIiNNTaQ3DQVdmL7jzg+Hnx9SRw92ug0IiJigIRJk8DVFc6fhylTjI4j\nN0mF3V3MYrFw8ZdfMpvd40eNwgxYrVZjg4mIyB1nKV8eXretSMGHH8K//xobSG6KCru7WJTZTNog\n22iomPIV+OmhZqzbcpjExESDk4mIiCHefBPKlIG0NBg+3Og0chPyVNgdPHiQzp07U6NGDZ5++mn2\n7duX43XfffcdzZs3p06dOrz44ov8888/dg0r9uW6bBnFjx0G4MiISRQpVgIPTy+DU4mIyJ1msViI\njIzEnJRE7LhxtpNr12JZu9bYYHLDrlvYpaam0r9/fzp16sSuXbvo1q0b/fv3JykpKct1R44cYebM\nmSxevJjg4GCaNGnCkCFDbltwuUVxcXheGjAR3rgVUbUbGBxIRESMEh8Xw/rtxwkKDuHnMrW48OAj\nAFiGDLG13kmBcd3CbseOHTg6OvL888/j6OjIs88+S7Fixdi0aVOW606fPo3VaiUtLY2MjAwcHBxw\nd3e/bcHlFk2fjkNEBBlOzhwZNMboNCIiYjBPL298fP3wKVqMoyMnYzWZcDp+HObPNzqa3ACn611w\n4sQJKlSokOXcvffey4kTJ7Kca9iwIeXLl6dNmzY4Ojri5eXFl5oLJ38KCYGZMwH49+kXSSpdzuBA\nIiKSn8RWqsbJ5u2479dVMHEidOsGfn5Gx5I8uG6LXVJSUraWN3d3d5KTk7OcS0lJ4YEHHuCHH35g\nz549dO/enUGDBpGammrfxHLrRo+G5GQs/v4ceq6H0WlERCQf+vulAVg9PCA6OnOuU8n/rlvY5VTE\nJSUl4eGRdR3RefPmERAQQNWqVXFxcWHQoEGkpaWxbds2+yaWW/Pnn/D11wAkvvEGaZ7eBgcSEZH8\nKLlYcRIHD7YdzJun6U8KiOsWdvfddx8nT57Mcu7kyZPcf//9Wc6dPXs2W+uco6Mjjo6OdogpdmG1\n/jd8/cEHSe7Wzdg8IiKSryX172+b/iQ9/b857iRfu25hV79+fVJTU1m6dCnp6eksX76cqKgoGjZs\nmOW6Jk2a8N1333Hw4EEyMjL4/PPPsVgs1KpV67aFl7yxWCyYzWZiFy2CSy2oMePHExkTo8mIRUQk\nd1IXAvYAACAASURBVB4eMHWqbX/VKvjtN2PzyHVdt7BzcXHh008/ZfXq1dSrV4+vv/6a+fPn4+bm\nxoQJE5g4cSIAzz//PD179uS1117j0Ucf5ffff2fRokXZumzlzouKimLtL7txfGsCAGdrN2Cd9/2a\njFhERK7vxRehdm3b/vDhkJFhbB65puuOigWoWLEi3377bbbzkyZNynLcu3dvevfubZ9kYlePbFiN\nZ8Q5LI6OHB82AR9fP2Jjoo2OJSIi+Z2DA8yaBY0awb59tmUoX33V6FSSCy0pdhcwRURQ9f8+ByC0\nwwsk3PuAwYlERCS/y1yNwmzGXLkyKe3a2c7/f3t3Hh1VmaB//FspsgcSVkVUliCIa4fFoEbc6LYb\nFAIhhtUFsTHqDPqbnml7PKPRmbG7ddR2aRFFEREaARECrQyKDIiCEBEQI2sCIeyVkpCQSirJvb8/\nKtBGwBSQ5K3l+ZyTk3svN3UfvCeHx7fqvu8f/oBVWmo4nZyOil0YiPvzn4n0HKM6viU77nvEdBwR\nEQkCP16NYtm6Ij5Jn0Bti0giDh2i8ifv2EngULELdfn5xLz3HgA773mI6tZtDQcSEZFgcWI1iqQ2\ntOh1FbuzfHOfxk6eDMXFhtPJqajYhbrf/x6HZVF+3gXszrzHdBoREQliBXc/RFWrRByVlfDEE6bj\nyCmo2IWy//s/WLwYqJtBPCrabB4REQlqNQmt+G7kBN/OO+/At98azSMnU7ELIcfnq3O5XLgOHaL6\n0UcBqLzsMnYP+JXhdCIiEgp2Ds6ktksX36T3v/+96TjyEyp2IcTtdpO7fDPL1hWx7YW3iNywAYC/\nDxpFxU+WhRMRETkbVmQkxx5/3Lfz8cewbJnZQFKPil2IiU9oRVJcPL949zUADl17M+4+1xpOJSIi\nocKyLPanpVHduzcANY8+iuvQIVwuF5ZlGU4nKnYh6OL57xG3vxg7IoJtD2qYXEREGk95WSlL1xTw\neVY2AC2+/ZYdz71B7vLNuN1uw+lExS7ERJYdJXnaKwAUDx5BeXJPw4lERCTUxCe0xHvDQA6mDQTg\n6hmTaakH9AKCil0QqveQxI++SkpK6DXnbaLKSqmNjmHHhP9nOqqIiISwbQ8+huV0EntwH5cset90\nHMHPtWIlsBx/SCI+oVW948e+/Zq7cn2/WIWjJlDV/jwT8UREJEwc65JM8R1ZXLxgFpe9/zZlv38I\n2rUzHSusacQuSMUntDoxG/jxrxsWzaFFtZeqpLYUjploOqKIiISBHfc9Qk1sHFHlZcS9+KLpOGFP\nxS5EJOz4nu5f+B4533nfP1Mbn2A4kYiIhANv2/YUjv4tADFvvQVFRYYThTcVuxDR4/X/wWHbHD2v\nE3uGjjIdR0REwsiukfdRmdgah9cLOTmm44Q1FbsQ0HrDWjp8+RkAX4+agN0i0nAiEREJJ7XxCeSP\nqltqbPp0yM83GyiMqdgFO9umx+RnAXB16U7htTcbDiQiIuFo52+GU3vxxWBZcHxlCml2KnZBrv2q\nT2n97dcArBt5H0ToloqISPOzIqOoeOwx386CBbB6tdlAYUotIJjV1tLj9f8BoKR3f4qv6ms4kIiI\nhLOq4cPhyit9O489BrZtNlAYUrELYhf87wJaFm4DYFv2v4HDYTiRiIiENacT/vhH3/bKlbBkidk8\nYUjFLkhFVHu55M0XADhw422UXp5iOJGIiIQzy7IoKSnBdc01VKemAlDzr/+K69AhLMsynC58qNgF\nqe5/n0fswX3YERFsn/g703FERCTMlZeVsnT1Tpbl7WHlCN+8di2++47N//0ybrfbcLrwoWIXhBxl\nZfSa/RYAeweN4FiX7oYTiYiIQHxCSxKT2lB9/S0cSrsVgL5z3gGv12ywMKJiF4RiJ08m5ugRaqOi\n2HHfJNNxRERETrJt4r9iOxwkHNhLzIwZpuOEDRW7YONyEfPaawAUDR9H5XkXGA4kIiJysvLknuz7\n9TAA4l54ASoqDCcKDyp2webPfybi2DGqY+MouOtB02lEREROa8f4SVhOJxGHDsFf/2o6TlhQsQsm\n+/fDq68CsC19NNVJbQwHEhEROT1Pp4spuC3dt/PnP8PRo2YDhQEVu2Dy3/8NlZVYSUlsHT7WdBoR\nEZEGbb5zPFZ0NJSUcOyZZ3C5XCe+NA1K41OxCxa7dsEbbwDgefhhquNbms0jIiLih8PR0Wy8aRAA\nka+8yueffcuydUXkLt+saVCagIpdsHj6aaiuhg4d8EyYYDqNiIiI377PvIea2DiiKo5x9aI5JCa1\nIT6hlelYIUnFLhhs3QrTp/u2//3fIT7ebB4REZEzUJnYmt133gtA57nvEFVy2HCi0KViFwyefBIs\nCy68ECZONJ1GRETkjBWO/i3VLVvhrKokebqekG0qKnaBbuNGeP993/YTT0BMjNk8IiIiZ6GmZSsK\nR/uWGrto4d+IO7TfcKLQpGIX6P7jP3zfk5PhnnuMRhERETkXuzPvoap1WyKqvVw+603TcUKSil0g\n++orWLTIt/3UUxAZaTaPiIjIOaiNiz8xuX6XTxcTsXOn4UShR8UugNl1o3U1PXviGjjwxLw/JSUl\n2LZtOJ2IiMiZ25M+hsr25xNh1RL3/POm44ScFqYDiI9lWfXm82mxdi1Jn3wCwFcZ4ylev/fEnx3Y\nt4eWiW1Iat222XOKiIicCys6mp13P8Tl//MfRH/wgW/mh549TccKGRqxCxBut5vc5ZtZtq6IZeuK\nqHz8ad/xzsmUDRpBYlKbE19x8QmG04qIiJy94tszOdb+PByW5ZunVRqNil0AiU9oRWJSG7rs2sH5\nG74C4JvMeyFCt0lEREKHHRVN/si6yfb/9jfIzzcbKISoMQSg7lP/AoCrczK7r7nBcBoREZHGt2vg\nHdRedBHYtkbtGpFfxS4/P5/MzExSUlIYNmwYGzduPOV5eXl5DB8+nJSUFIYMGcKaNWsaNWw4aLN+\nDW3Xrwbg6xF3g8NhOJGIiEjjsyIjqXj0Ud/OnDmwebPZQCGiwWLn9XrJzs5mxIgR5OXlMXbsWLKz\ns/F4PPXOO3ToEA8++CAPPvgg33zzDRMnTuSf//mf8Xq9TRY+5Ng23ae+CEDppVdS1Odaw4FERESa\nTtXIkdC1q2/U7qmnTMcJCQ0WuzVr1uB0OsnKysLpdJKRkUHbtm1ZsWJFvfMWLFjA9ddfz8CBAwEY\nPHgw06dPx6ERJ7912LiONhvWArDjvkc0WiciIqEtMvIfE/HPmwebNpnNEwIaLHYFBQUkJyfXO9a1\na1cKCgrqHcvPz6dDhw48/PDDpKamMnLkSKqrq4nUpLr+sW2umDkFgCOXXc3h6242HEhERKQZjBvn\nW10JNGrXCBosdh6Ph9jY2HrHYmNjqaysrHestLSUuXPnMmbMGL788kuGDBnCxIkTKSsra9zEISpy\nxQraf7cBgB0THtVonYiIhIcWLXxroQPMnw8bNpjNE+QaLHanKnEej4e4uLh6x6Kiorjxxhu59tpr\ncTqdjB49mri4ONavX9+4iUORbRP37LMAHLk8BVfqAMOBREREmtHo0XDJJb7tnByjUYJdg8WuW7du\nFBYW1jtWWFhI9+7d6x3r2rXrSQ9KWJalpa/8sXQpkevWAbB9gj5bJyIiYebHo3YLF4IGhc5ag8Wu\nf//+eL1eZs6cSU1NDfPmzcPtdpOWllbvvKFDh7Jq1SpWrFiBbdvMmDEDr9dLampqk4UPCT96EsjV\n62pKNG+diIiEo1Gj/rG02H/+p9ksQazBYhcVFcWbb77JokWLSE1NZdasWUyePJmYmBiefPJJcuqG\nTHv16sXkyZP5y1/+Qt++fVmwYAGvv/76SZ/Pk5/47DNY7Zu3bvOY+zVaJyIiYcGyLEpKSnC5XL6v\nH36gbNIk3x8uWACnmTNXfl4Lf07q0aMHs2fPPun4Uz95euW6667jww8/bJxk4aJutu3qPn04mNKf\nRMNxREREmkN5WSlLVx+iw3nHThyraN2Du7p2xVlYCP/1XzB3rsGEwUlLipm0YgWsXAlAxb/8i0br\nREQkrMQntCQxqc2Jr7jE1v9YjWLePK1GcRZU7Ew6vjZenz5U103sLCIiEq4sy2LfzTdT27kzAFVP\nPHHirVrLsgynCw4qdqasWuX7fB34ngTSaJ2IiIS58rJSluYVsX7oOACiFixg7fwV5C7fjNvtNpwu\nOKjYmXL8iZ+rr4Y77jCbRUREJEDEJ7TEnTEOz3kX4LBtrp7/HvEJrUzHChoqdiasWQNLl/q2NVon\nIiJSjx0ZRcHdDwFwwSe5JOwtMpwoeKjYNTPLsvDWLXhc06sXrrQ0XC4XJSUlmsxZRESkTvGgDDwd\nOuKwLC57/23TcYKGil0zO/rZZ0R9+ikAa4fexbKvi1m2roglq7ZQUVFhOJ2IiEhgsKOiKRz3AACd\nP/uIiF27zAYKEip2zSz2+ecBKO/SnaODM//xiHd8guFkIiIigaX49iwq23Ugwqol7qWXTMcJCip2\nzWnDBqKXLAFg5z0Pg9NpOJCIiEjgsqKjKRzjG7WLnj0bdu82nCjwqdg1p2eeAaDsgovZf+vthsOI\niIgEvj3po6hMaoOjpgaee850nICnYtdctmzxzaINfH/nPRqtExER8YMVHcPWYWN8O1OnwoEDZgMF\nOBW75vKnP4FtU9upE7tvHmQ6jYiISNDYMXgEVmIiVFXBCy+YjhPQVOyaw65d8N57AHgefhgrMtJs\nHhERkSBSE5dA5f33+3YmTwatQnFaKnbN4dlnobYWOnSgcswY02lERESCjuf++yE+HsrL4eWXTccJ\nWCp2TcSyLN/Ew5s3Y7/tm1jx2MSJlFRUaCJiERGRM2S3aQMP+J6Q5eWXoazMbKAApWLXRNxuN7nL\nN3M451kcVVV4E1qy5OqBmohYRETkbP3Lv0B0NPzwA7z+uuk0AUnFrgm1tiy6f/QBAEV33kv8BRdr\nImIREZGz1bEjjB/v237+efB4zOYJQCp2TeiS3Nm08FRQExvH7sx7TMcREREJfv/2b74pww4ehLe1\nhuxPqdg1EUdZGT1yZwOwZ9gYqhNbG04kIiISnCzLoqSkBJfLhSshgcoRIwCo/dOfsKqqDKcLLCp2\nTSRm2jSiysuojYpi18gJpuOIiIgErfKyUpau3smydUUsW1fEZ7dkYjscOIuLOTZliul4AUXFril4\nPMTWfahz7+A7qWrXwXAgERGR4Baf0JLEpDYkJrUh4so+HLzp1wDEvfSSb0oxAVTsmsY77xBx+DBW\nhJPCsRNNpxEREQk5O+96CABnQQEsWGA4TeBQsWtsP1qkuOimX+PpeKHhQCIiIqGnrOfl7O9znW+n\nbtlOUbFrfHPnQmEhAFtG3GU4jIiISOj6PvNu30ZeHnz2mdkwAULFrjHZtu//GoCq226jtEt3w4FE\nRERC1+Er+1Ddp49vp+7f33CnYteYliyBTZsA8PzTPxkOIyIiEtos2+bQvff6dj79lCOffuqbEsXl\nwrIss+EMUbFrTMf/byEtjZrUVLNZREREQlx5WSnzYztz9KIuAJQ99SeWrSsid/lm3G632XCGqNg1\nltWrYeVK3/Zjj5nNIiIiEibiWyWyu+4J2Qu/+IyOR48Qn9DKcCpzVOway5//7Pt+xRUwaJDZLCIi\nImFk36+G4OnQEYdt03XmG6bjGKVi1xjy82HhQt/2Y4+Bw2E2j4iISBixI6PYNcq3ylOnj+cT6zpk\nOJE5KnaN4dlnfd+7dIGsLKNRREREwlHxHVl4WyYSUVNNj4WzTMcxRsXuHFm7dmHPnAlA+QMP4Dpy\nBJfLRUlJCbYmSxQREWkWtXHxFNXNa5f80Qc4jhwxnMgMFbtzVPWnP+GoqaEysTVLeqSdWKB4yaot\nVFRUmI4nIiISNnaPuJva6BgiPRXETJtmOo4RKnbnwu0mZsYMAIqyxpNwfqcTCxTHxScYDiciIhJe\nqpPasGfISABi33gDPB7DiZqfit25eO01HBUVVMfEsmf4WNNpREREwt6ukfdhRTiJcLng3XdNx2l2\nKnZnq7ISXnkFgMLb0qlulWQ4kIiIiFR2vJCiGwYCUPvss7gOHjyxGkU4rEihYne23n0XDh3CdjrZ\nmj7GdBoRERGps/62dACcBQVseXXGic+/h8OKFCp2Z8Oy4PnnAagaOpSK8zoaDiQiIiLHlXS9hH1X\n9gHg8gV/O/H593BYkULF7mzk5sK2bQB4HnrIcBgRERH5qW+HjAKg9eb1JG3KM5ym+fhV7PLz88nM\nzCQlJYVhw4axcePGnz1/9erV9OrVC08IPY1iWdaJ9+ern3kGAO+AARzq1Enz1YmIiASYvVf342j3\nSwHCapmxBoud1+slOzubESNGkJeXx9ixY8nOzj5taTt69CiPP/54owc1ze12k7t8MxumLyJy3ToA\nVv8yU/PViYiIBCKHg8LRvwWgw6pPid+903Cg5tFgsVuzZg1Op5OsrCycTicZGRm0bduWFStWnPL8\nnJwcBg8e3OhBA0F8QiuuzJ0NwNHul+K5ZbDmqxMREQlQBwbejue8C3DYNl3+NtV0nGbRYLErKCgg\nOTm53rGuXbtSUFBw0rm5ubmUlZUxcuTIkHx7MqF4Nx0+/wSAXaPuB4fDcCIRERE5HbtFJLvvvBeA\nC5bMJ/qHEsOJml6Dxc7j8RAbG1vvWGxsLJWVlfWO7du3j1deeYU//vGPADhCsPRc+uF7OGwbT4eO\n7P/lHabjiIiISAP2DBlJdUJLnF4vl+S+bzpOk2uw2J2qxHk8HuLi4k7s27bNY489xqOPPkq7du1O\njNaF0qid49Ahuny6GIDdd96L3SLScCIRERFpSG18Anvq5pvt/ve5UF5uOFHTarDYdevWjcLCwnrH\nCgsL6d69+4n9AwcOsGnTJnJycrjmmmtIT0/Htm1uuukm1q9f3/ipDYh96y2c1V6q41uyZ+hI03FE\nRETET7sz78FqEUl0+VFiZs0yHadJNVjs+vfvj9frZebMmdTU1DBv3jzcbjdpaWknzunYsSMbNmxg\n7dq1rF27loULFwKwcuVKevfu3XTpm0tFBTHTpgGwJ300tfEtDQcSERERf1W1P499datRxE6ZArW1\nhhM1nQaLXVRUFG+++SaLFi0iNTWVWbNmMXnyZGJiYnjyySfJyck55c85HI7QeSt2+nQifvgBy+lk\n9533mE4jIiIiZ2jXqAkAOIuK4MMPDadpOi38OalHjx7Mnj37pONPPfXUKc/v1KkT33///bklCxSW\nBS++CEDRgNuoan++4UAiIiJypsq79WB/n2vp+PVqeOEFGDHCdKQmoSXFGvL3v8P27QBsHT7GcBgR\nERE5W1uH1f07vnq17ysEqdg15PnnAfCmpXEk+VLDYURERORsHUzpT02vXr6dunfjQo2K3c/5+muo\nW2HDk51tOIyIiIicE4cDzwMP+LY/+AB+MutHKFCx+znH23yPHlQPHGg2i4iIiJyzqowMOO8832fo\nX37ZdJxGp2J3OsXF8H7dDNWPPgoR+k8lIiISzCzLoqS8nGP3+pYZs958k5KCAizLMpys8aitnM4r\nr0BNDbRtC3fdZTqNiIiInKPyslKWrt7J0qsHUhMVTcSxY+zM+R/cbrfpaI1Gxe5UysthyhTfdnY2\n/Gj5NBEREQle8Qktie2czL5BGQBcvmQ+VFcbTtV4VOxO5e23obQUoqLgoYdMpxEREZFGtvvO8QDE\nHz5I1OLFhtM0HhW7n6qtxf7LXwCozMjA1aIFLpeLkpKS0FlJQ0REJMwd65LMoetvASD2tdcgRP6N\nV7H7qYULcdQ9/vx/aUNZtq6IZeuKWLJqCxUVFYbDiYiISGPZNdK3zFjkhg3wxReG0zQOFbufqpvi\n5EBKKqSkkpjUhsSkNsTFJxgOJiIiIo3J3bs/PyT39O288ILZMI1Exe7H8vJg1SoAtqZr+TAREZGQ\n5nCwLX20b3vhwpCYsFjF7sdeegmAmu7dOdDnWsNhREREpKkVDfgVVvv2vgmLX33VdJxzFtbFzrIs\nXC6X7+GIzZux6yYkLhkzBtvhMJxOREREmpoVGYVnvO8JWaZOhbIys4HOUVgXO7fbTe7yzSxbV8SB\nZ17CUV2NN6El8zr00oMSIiIiYaLyrrt8U5wdPQrTp5uOc07CutgBxCe0onVsPJd8PB+A4qGjiGrT\nznAqERERaS52hw4wuu6zdi+95HtbNkiFfbED6PjJQqKOuLGcTooytHyYiIhI2Jk0yfd9xw746COz\nWc6Bip1t03nONAAO3ngbled3MhxIREREmotlWZSUlOC68EKqr7sOAO9zz+FyubCCcOQu7Itdh015\ntNqxBYDdd95rOI2IiIg0p/KyUpau3smydUV8dctwAKJWrmTl9EW43W7D6c5c2Be7Hgv/BkDppVdx\n5Mo+htOIiIhIc4tPaEliUhvKb0un4oKLALj6k1zDqc5OWBe7iMJCLvhqJQC7su4FTXEiIiISvpxO\ndo+4G4Aun32Ew+UyHOjMhXWxi506FYdtU9muAwduGWQ6joiIiBi29/ZMauLicVZ7iXn3XdNxzlj4\nFrujR4meNQuAomFjsSOjDAcSERER02oSWrF30AgAYqZNA6/XcKIzE77Fbto0IsrLqY2MYs/xdeJE\nREQk7O3OvBvb4cB54ADMnWs6zhkJz2L3o/Xgdt/8G6pbtzUcSERERAJFxUVd2dcvzbfzyitmw5yh\n8Cx2S5b4JiAEtt+RZTiMiIiIBJrtQ0b6Nr76CtatMxvmDIRnsatr39X9+3MkuafhMCIiIhJoDqak\nUnPJJb6dIBq1C79it3Wrb8QO8EyYYDiMiIiIBCSHg8r77vNtz54NBw+azeOn8Ct2f/2r73unTngH\naYoTERERObWqrCxo2RKqq+GNN0zH8Ut4FbuyMnjnHd92djZERhqNIyIiIoHLTkiA8eN9O6+/7it4\nAS68it306b5yFx0Nv/2t6TQiIiISoCzLoqSkBPeoUb4D+/Zx9J13cLlcWJZlNtzPCJ9iZ1n/+PDj\nyJHQvr3ZPCIiIhKwystKWbp6J5+4I9nX93oAvC/+ldzlm3G73YbTnV74FLtPPoFt23zb//RPZrOI\niIhIwItPaEliUhv2jb4fgHbfb+TCA3sNp/p5YVHsLMvC+/zzAFT364erc2dcLhclJSXYtm04nYiI\niAQy1zU3cOyiLgBckvu+2TANCItidyQvj8hPPwUg7+Z0lq0rYtm6Ipas2kJFRYXhdCIiIhLQIiIo\nyrgLgItX/C8Ol8twoNMLi2IX+/bbOGybynYdODp4BIlJbUhMakNcfILpaCIiIhIEigePoCYuHme1\nl5gZM0zHOa3QL3bl5UTPmgXAnvQx2JFRhgOJiIhIsKmNb8neQRkAxLzzDtTUmA10GqFf7N57j4iy\nMmpbtGDP0FGm04iIiEiQOv52rHPfPliwwHCaUwvtYmfbJ1aaKE4biLetpjgRERGRs3OsczIHUlJ9\nO6+9ZjbMaYR2sfv8c9i8GYDtt99pOIyIiIgEuxN9YvlyyM83G+YU/Cp2+fn5ZGZmkpKSwrBhw9i4\nceMpz5szZw633XYbffv2JTMzk7y8vEYNe8bqRutqrriCkl5Xmc0iIiIiQW//NTdQe+GFvp0AHLVr\nsNh5vV6ys7MZMWIEeXl5jB07luzsbDweT73zvvrqK1588UVefvll8vLyGDNmDNnZ2ZSWljZZ+J+1\nfz/Mnw+AZ/x4cDjM5BAREZGQYTudVN59t2/n3Xd9S5UGkAaL3Zo1a3A6nWRlZeF0OsnIyKBt27as\nWLGi3nkHDhxgwoQJ9OzZE4D09HQiIiLYvn170yRvyBtv+J5YSUqiKiPDTAYREREJOZVjx0JUlK/U\nBdjUJw0Wu4KCApKTk+sd69q1KwUFBfWODR06lPvuu+/E/tdff01FRQXdu3dvpKhnoLoapkzxbd97\nL8TFNX8GERERCTmWZeFyOKgcOhSAmpdfxnX4MC6XC8uyDKfzo9h5PB5iY2PrHYuNjaWysvK0P7Nj\nxw4mTZrEpEmTSEpKOveUfrIsC5fLxdEZM3xvxQLurCwtHSYiIiKNoryslKWrd7Kq/yAAWmzdyqZp\nC8hdvhm32204nR/F7lQlzuPxEHeaUbBVq1YxevRoxo0bx4QJExonpZ/cbje5yzfjecn3Ycb9vfvz\niTtSS4eJiIhIo4lPaElN/xsp7XE5AL3+dwHxCa0Mp/JpsNh169aNwsLCescKCwtP+RbrBx98wCOP\nPEJOTg4TJ05svJRnoGPJYc7b9DUA+7LGa+kwERERaXwOB0UZ4wA4b8VSYkoOGw7k02Cx69+/P16v\nl5kzZ1JTU8O8efNwu92kpaXVO2/16tU8/fTTTJkyhUGDBjVZ4IZ0XzwXAM/5nTh83S3GcoiIiEho\n2//LIXhbJhJRW0Pyx/NNxwH8KHZRUVG8+eabLFq0iNTUVGbNmsXkyZOJiYnhySefJCcnB4CpU6dS\nU1PD/fffT+/evUlJSaF3796sWrWqqf8OJzjKyujy2d8BKEofA05ns11bREREwosVE8vewSMASF4y\n3/fwpmEt/DmpR48ezJ49+6TjTz311Intt956q/FSnaXoOXOI9FRgRUZRfIdWmhAREZGmtWf4WLrO\nfotYt4vqv/8dmvn5gp8KnSXFbJuYadMA2H/LIKpbtzUcSEREREJdxYVdOJw6AIDYuh5iUugUuxUr\naLF1KwBFGXcZDiMiIiLh4vhDFJFffnlijXpTQqfYvf46AD8k96T08l8YDiMiIiLh4vC1N3OsQ0ff\nzvEFEgwJjWJ38OCJdWF3DB6hdWFFRESk+Tid7PzNcN/2u+9CebmxKKFR7N5+G6qrsVq2pOjGX5tO\nIyIiImGm4FdDsVu0gKNH4RQPnDaXoCx2x5cOc7lcuA4epHbyZABK77iD6pjYBn5aREREpHFVtW6L\nd/Bg387kyWBoKdOgLHbHlw5btq6I/Ndn49yzB4DFPftr6TARERFpdpZlcXB43dux69dz5NNPhBlM\nGAAADdNJREFUTwxCWZbVbDmCstgBxCe0IjGpDZd+kguA++p+VPa4zHAqERERCUflZaUsrG3L0Yu6\nAOB+7lWWrSsid/lm3G53s+UI2mIHELO/mPZfLgdgz7AxhtOIiIhIOItv2Yq9w31TrnVeuZS2EU7i\nE1o1a4agLnYX5c7GYdt4k9pw4CY9NCEiIiJm7f3NcGqjY3BWVdLJwPqxQVvsIqqruXDR+wAUD87E\njoo2nEhERETCXU2rRPYPvAOAixbMbPaHKIK22HVavZxotwvb4WBP+mjTcUREREQA2DPM10sSdu+k\n/bdfN+u1g7bYJX/0AQCu1AF4Ol1sOI2IiIiIT2mvqynteQUA3ev6SnMJymLn3L6d8zblAWi0TkRE\nRALLj95N7PTlZzgOHWq2SwdlsYuZPh0AT4eOHL7uFsNpREREROrb/8shVMe3xFlTQ8ysWc123eAr\ndh4P0XVLdRQPGelbvkNEREQkgNTGxbPv1+kAxLz7LtTWNst1g6/YzZlDRGkpVoST4juyTKcRERER\nOaU9w8YC+FbIWrq0Wa4ZfMXujTcA2Jd6A1XtzzMcRkREROTUyrv14PBlV/t26vpLUwuuYrd5M3z5\nJQA7f5NhOIyIiIjIzyv4Td36sYsWwb59TX694Cp2dW239qKLOJiSajiMiIiIyM/bkzYQKzHR9xm7\nt99u8usFfLGzLAuXy4WrqAjr3XcBcGdkYEUEfHQREREJc9WRUZQOGQJA7ZQpuA4exOVyYVlWk1wv\n4NuR2+0md/lmdr407cRDEwsvvIqKigrT0URERER+VnlZKR/1vBYAZ3Ex302ZQ+7yzbjd7ia5XsAX\nO4D4hFb0+GQRAIfTbsXWShMiIiISJKp6XsEPV/UF4NJPFxGf0KrJrhUUxS5x1w5a1621ppUmRERE\nJNjsGToSgPZffkasq+lWogiKYtdtyXwAPOd3wtUvzXAaERERkTNz4JbBVLdsRURtLV0/yW2y6wR+\nsauooMtnHwGwZ8hIcDoNBxIRERE5M1Z0DHt/7Zv6pNuSD5tsJYqAL3bRublElZdhOZ3sHZxpOo6I\niIjIWSkeOgqA+MMHiFy+vEmuEfDFLqZuipPD19+qlSZEREQkaJV363HiIYrj/aaxBXax27yZyHXr\nAD00ISIiIsHv+EMUUUuXwt69jf76gV3s6laaONahox6aEBERkaB34JbBeBNa4miilSgCt9h5PDBj\nBgA7fz1MD02IiIhI0LOiY9h1y2DfztSpjf4QReAWuw8+gCNHsJ1OCn85xHQaERERkUZR8Othvo2i\nIvj000Z97cAtdlOnAuD95S+pbNvecBgRERGRxlHapTvVfX0PURzvO40lMIvdtm2wYgUAVWPHGg4j\nIiIi0rgqx4zxbSxcCIcabyWKwCx2b73l+37BBXhvvdVsFhEREZFGVpWeDgkJUF0NjTj1SeAVu+pq\neOcd3/a990KLFkbjiIiIiDS6hAQY5ZuwmKlTwbYb5WUDr9gtWvSPIcnx481mEREREWkqEyb4vm/d\nCl980SgvGVDF7rst2yl98S8AlKX255tyDzt2FBpOJSIiItJ4LMuipKQEV9eu1Fx2GQCVr7yCy+XC\nPseRu4Aqdq5th2j1xSoAdgwaxf6yWL4vOGg4lYiIiEjjKS8rZenqnSzL28OmAb457VosXMiSxWs4\ncuTIOb12QBW7TiuX4rBtvK2SOHTjbURERIDDYTqWiIiISKOKT2hJYlIbfkgfTW1UFC2qqrg079zf\njvWr2OXn55OZmUlKSgrDhg1j48aNpzxv8eLFDBw4kJSUFB544AFKSkrOKMyFK5YAsO83w7Gjos/o\nZ0VERESCTXWrJA7e9BsAkpd8eM6v12Cx83q9ZGdnM2LECPLy8hg7dizZ2dl4PJ56523ZsoWcnBxe\nfPFFvvrqK9q1a8cf/vCHMwoT4/I9NFF8R9YZ/ZyIiIhIsCoeMhKA1ju3EvH99+f0Wg0WuzVr1uB0\nOsnKysLpdJKRkUHbtm1ZUTeB8HHHR+uuvPJKoqKi+N3vfsfnn3+O2+0+o0A/XNGb8m49zuxvISIi\nIhKk3CmpHLuwCwDRCxac02s1WOwKCgpITk6ud6xr164UFBT87HlJSUkkJiaedF5DiodotE5ERETC\niMNB8e13AhD98cfn9FINFjuPx0NsbGy9Y7GxsVRWVp7VeT+nJjaOA7cM9vt8ERERkVCwd/AIrAgn\njvLyc3qdBpd1OF2Ji4uLq3csJibGr/NOpba2FoBNKX05tH97vT8rLy3hSJmHH0oOnzh2+NA+IiIi\n8VZW1Du3KY/rmsF5zVD7++iawfnaumZoXTPU/j66ZuBcMz7lGpzffQP8oxudqQaLXbdu3Zg5c2a9\nY4WFhQwZMqTeseTkZAoL/zGZsNvt5ujRoye9jXsqhw/7Stu/HiiG//y9X8FFREREQs7FFwO+btS5\nc+cz/vEGi13//v3xer3MnDmTrKwsFixYgNvtJi0trd55t99+O+PGjSMjI4PLL7+cF154gQEDBpCY\nmNhgiCuuuIKZM2fSvn17nE7nGf8lREREREJBbW0thw8f5oorrjirn3fYfqxdsW3bNp544gm2b99O\n586dycnJ4aqrruLJJ5/E4XCQk5MDwJIlS3jxxRcpKSmhb9++PPPMM7Rp0+asgomIiIjImfGr2ImI\niIhI4AuoJcVERERE5Oyp2ImIiIiECBU7ERERkRChYiciIiISIlTsREREREJEsxa7/Px8MjMzSUlJ\nYdiwYWzcuPGU5y1evJiBAweSkpLCAw88QElJSXPGFD/5ez/nzJnDbbfdRt++fcnMzCQvL6+Zk4o/\n/L2fx61evZpevXrh8XiaKaGcCX/vZ15eHsOHDyclJYUhQ4awZs2aZk4q/vD3fs6dO5eBAwfSr18/\nRo8ezXfffdfMSeVMbNq0iRtuuOG0f35WfchuJlVVVfaAAQPs2bNn2zU1Nfa8efPsa6+91q6oqKh3\n3vfff2/36dPH3rRpk11VVWU//vjj9v33399cMcVP/t7PNWvW2P3797e3bNli27Ztf/jhh3bfvn3t\nI0eOmIgtp+Hv/TyutLTUvvnmm+1LL730tOeIOf7ez4MHD9r9+vWzP/nkE9u2bXvx4sV2v3797Kqq\nKhOx5TT8vZ9btmyxU1NT7d27d9u2bdtTpkyxb731VhORxQ9z5861+/bta/fv3/+Uf362fajZRuzW\nrFmD0+kkKysLp9NJRkYGbdu2ZcWKFfXOO95Or7zySqKiovjd737H559/jtvtbq6o4gd/7+eBAweY\nMGECPXv2BCA9PZ2IiAi2b99+qpcVQ/y9n8fl5OQwePDgZk4p/vL3fi5YsIDrr7+egQMHAjB48GCm\nT5+Ow+EwEVtOw9/7uXv3bmzbprq6mtraWiIiIoiNjTWUWn7O66+/znvvvUd2dvZpzznbPtRsxa6g\noOCkdWO7du1KQUHBz56XlJREYmLiSeeJWf7ez6FDh3Lfffed2P/666+pqKige/fuzZJT/OPv/QTI\nzc2lrKyMkSNHYmt+84Dk7/3Mz8+nQ4cOPPzww6SmpjJy5Eiqq6uJjIxszrjSAH/vZ1paGp07d2bw\n4MFcddVVvPnmmzz33HPNGVX8NGLECBYsWPCzy4adbR9qtmLn8XhO+j+H2NhYKisrz+o8Mets7tOO\nHTuYNGkSkyZNIikpqakjyhnw937u27ePV155hT/+8Y8AGtkJUP7ez9LSUubOncuYMWP48ssvGTJk\nCBMnTqSsrKw540oD/L2fVVVVXHLJJcyfP59vvvmGcePG8fDDD+P1epszrvihXbt2DZ5ztn2o2Yrd\n6UpcXFxcvWMxMTF+nSdm+Xs/j1u1ahWjR49m3LhxTJgwoTkiyhnw537ats1jjz3Go48+Srt27U6M\n1mnULvD4+/sZFRXFjTfeyLXXXovT6WT06NHExcWxfv365owrDfD3fr766qucf/75XHbZZURFRfHw\nww9TXV3Nl19+2ZxxpZGcbR9qtmLXrVs3CgsL6x0rLCw86S255OTkeue53W6OHj160jC0mOXv/QT4\n4IMPeOSRR8jJyWHixInNFVHOgD/388CBA2zatImcnByuueYa0tPTsW2bm266SUUgwPj7+9m1a9eT\nRnMsy1JZDzD+3s99+/addD+dTidOp7PJM0rjO9s+1GzFrn///ni9XmbOnElNTQ3z5s3D7XaTlpZW\n77zbb7+dpUuXsn79eqqqqnjhhRcYMGAAiYmJzRVV/ODv/Vy9ejVPP/00U6ZMYdCgQYbSSkP8uZ8d\nO3Zkw4YNrF27lrVr17Jw4UIAVq5cSe/evU1Fl1Pw9/dz6NChrFq1ihUrVmDbNjNmzMDr9ZKammoo\nuZyKv/fzpptuYu7cueTn51NbW8u0adOwLIs+ffoYSi7n4qz7UGM9tuuPrVu32llZWXbv3r3tYcOG\n2Rs3brRt27afeOIJ+8knnzxx3scff2z/6le/svv06WNPnDjRLikpac6Y4id/7uf48ePtyy67zE5J\nSbFTUlLsX/ziF3ZKSor9+eefG0wup+Lv7+dxxcXFmu4kgPl7P7/44gs7PT3d7t27tz18+HB706ZN\nhhLLz/H3fr7xxhv2LbfcYvfr18++66677O3btxtKLP746quv6k130hh9yGHbGnMXERERCQVaUkxE\nREQkRKjYiYiIiIQIFTsRERGREKFiJyIiIhIiVOxEREREQoSKnYiIiEiIULETERERCREqdiIiIiIh\nQsVOREREJET8fyNwYvl5VvQWAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1d8516a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "starting point was  0.154623608263\n"
     ]
    }
   ],
   "source": [
    "## FUNCTIONS \n",
    "# target distribution p(x) \n",
    "p = lambda x: 6*x*(1-x)\n",
    "\n",
    "# number of samples\n",
    "n = 1000000\n",
    "\n",
    "# sigma for our proposal distribution\n",
    "# corresponds to step size\n",
    "sig = 0.6\n",
    "\n",
    "#intitialize the sampling. Start somewhere from 0..1\n",
    "x0 = np.random.uniform()\n",
    "#x0 = 0.00000001\n",
    "\n",
    "x_prev = x0\n",
    "\n",
    "x = [] # to save our samples\n",
    "\n",
    "for i in xrange(n):\n",
    "    # sample new state candidate from proposal distribution\n",
    "    x_star = np.random.normal(x_prev, sig)\n",
    "\n",
    "    #while  (x_star <0) | (x_star > 1):  # make sure you stay within bounds\n",
    "    #    x_star = np.random.normal(x_prev, sig)\n",
    "       \n",
    "    P_star = p(x_star)\n",
    "    P_prev = p(x_prev)\n",
    "    \n",
    "    U =  np.random.uniform()\n",
    "    \n",
    "    # A is simple because our transition probability is symmetric (Metropolis only)\n",
    "    A =  P_star/P_prev # did we go up or down? \n",
    "       \n",
    "    if U < A: #coin flip to see if we accept\n",
    "        x_prev = x_star \n",
    "\n",
    "    x.append(x_prev) # we always get a sample question just is if we stay or move on\n",
    "\n",
    "# plot our sample histogram\n",
    "plt.hist(x,100, alpha=0.4, label=u'MCMC distribution', normed=True) \n",
    "\n",
    "#plot the true function\n",
    "xx= np.linspace(0,1,100)\n",
    "plt.plot(xx, p(xx), 'r', label=u'True distribution') \n",
    "plt.legend()\n",
    "\n",
    "plt.show()\n",
    "print \"starting point was \", x0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The part where we rejected new proposals if they fell outside the desired range made our sampling wrong. What is basically happening is that we are then sampling from a truncated proposal, and this truncated proposal is not normalized. Normalizing against this actually made the computation much slower, so in this case I would just comment those lines out. The function is negative anyways if we try to go out of the defined bounds, so it all works out for this example.\n",
    "If you want to read in more detail about this, please look at this [blog post](https://darrenjw.wordpress.com/2012/06/04/metropolis-hastings-mcmc-when-the-proposal-and-target-have-differing-support/) from Darren Wilkinson."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bioassay experiment\n",
    "\n",
    "We demonstrate this with an example and examine the convergence of the resulting samples. \n",
    "\n",
    "Bioassay (commonly used shorthand for biological assay), or biological standardisation is a type of scientific experiment. Bioassays are typically conducted to measure the effects of a substance on a living organism and are essential in the development of new drugs and in monitoring environmental pollutants. Both are procedures by which the potency (pharmacology) or the nature of a substance is estimated by studying its effects on living matter.\n",
    "\n",
    "In this experiment 5 animals were tested for various doses and the number of deaths were recorded. The  death rate is usually modeled as logit$^{-1}$ with two parameters (see below). The goal is to estimate those parameters and be able to infer death rates as a function of dose. "
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "\n",
    "| Dose, x_i  | Number of   | Number of    | \n",
    "| log(g/ml)  | animals,n_i |  deaths, y_i |\n",
    "|:-----------|------------:|:------------:|\n",
    "| -0.86      |     5       |     0        |\n",
    "| -0.30      |     5       |     1        |\n",
    "| -0.05      |     5       |     3        |\n",
    "|  0.73      |     5       |     5        |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "n=5\n",
    "X=np.array([-0.86,-0.30,-0.05,0.73])\n",
    "Y=np.array([0,1,3,5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The likelihood since is a success/fail experiment is expressed as a Binomial:\n",
    "\n",
    "$$ P(D_i|\\theta_i) = p(y_i, n_i| \\theta_i) = {\\rm Bionomial}( y_i, n_i \\vert \\theta_i)  \\,\\,\\,\\,    \\rm{for}\\,\\, i=1, \\ldots, 4$$\n",
    "\n",
    "where $\\theta$ is the rate of deaths which is modeled as a $\\rm{logit}^{-1}$:  \n",
    "\n",
    "$$ \\theta_i = {\\rm logit}^{-1}(\\alpha+\\beta x_i) \\,\\,\\,\\, \\rm{for} \\,\\, i=1, \\ldots, 4$$\n",
    "\n",
    "We use flat priors for $\\alpha,\\beta$: \n",
    "\n",
    "$$ p(\\alpha, \\beta) \\propto 1 $$\n",
    "\n",
    "Posterior: \n",
    "\n",
    "$$ p(\\alpha, \\beta \\vert y) \\propto p(\\alpha, \\beta) \\prod_{i=1}^{k} p(y_i \\vert \\alpha, \\beta, n_i, x_i) $$\n",
    "$$ = 1 \\prod_{i=1}^{k} [{\\rm logit}^{-1}(\\alpha+\\beta x_i)]^{y_i} [ 1-{\\rm logit}^{-1}(\\alpha+\\beta x_i)]^{n_i-y_i} $$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## invLogit this is the same as a sigmoid\n",
    "logitInv= lambda x: np.exp(x)/(1.0+np.exp(x))\n",
    "\n",
    "## posterior\n",
    "def calc_posterior(a, b, y=Y, x=X):\n",
    "    # Calculate joint posterior, given values for a, b \n",
    "    # x: dosage\n",
    "    # y: number of deaths\n",
    "    # a + b: parameters of the model\n",
    "    p = np.product((logitInv(a+b*x)**y)*(1.0-logitInv( a+b*x))**(n-y))\n",
    "    \n",
    "    return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x244f2860>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25b480f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xx = np.linspace(-10,10,100)\n",
    "plt.plot(xx, logitInv(xx), label=\"alpha=1, beta=0\")\n",
    "plt.plot(xx, logitInv(0.4*xx), label=\"alpha=0.4, beta=0\")\n",
    "plt.plot(xx, logitInv(xx+3), label=\"alpha=1, beta=3\")\n",
    "plt.xlabel(\"dosage\")\n",
    "plt.ylabel(\"all dead\")\n",
    "plt.legend()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# check my posterior. I do a brute force just to make sure I do the right thing\n",
    "X1 = np.linspace(-3,7,101) # alpha\n",
    "X2 = np.linspace(-10, 30,100) # beta\n",
    "k=0;j=0\n",
    "pp=np.zeros((101,100))\n",
    "for x1 in X1:\n",
    "    j=0\n",
    "    for x2 in X2:\n",
    "        pp[k,j]=calc_posterior(x1,x2)\n",
    "        j +=1\n",
    "    k +=1\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x220f8748>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n8QUAAGAg4gsAAMBAxBcAAICBiC8AAAADEV8AAAAGIr4AAAAMRHwBAAAYiPgCAAAwEPEFAABgIOIL\nAADAQMQXAACAgYgvAAAAAxFfAAAABiK+AAAADER8AQAAGIj4AgAAMJDf8VVbW6tZs2YpOztbt912\nm1555RVJ0vvvv68RI0boK1/5irKysvSVr3xFzz77rN8TBgAAiGS9/fnmhoYGLVy4UMuWLdOUKVNU\nV1enefPm6ctf/rKOHTumcePGacOGDYGaKwAAQMTzK76OHz+uCRMmaMqUKZKkESNGaMyYMdq3b59O\nnTql4cOHB2SSAAAA0cKvbceMjAytXLmy/fPZs2dVW1urjIwMHTp0SO+++64mTpyovLw8rVy5Us3N\nzX5PGAAAIJIF7Ib7zz77TEVFRRo1apTy8vLUv39/5eXl6fe//71eeOEF7d69W2vXrg3U5QAAACJS\nQOLr448/1re//W3179+/PbDWr1+vuXPnymKx6LrrrlNRUZH++Mc/BuJyAAAAEcvv+Prggw9UWFio\nW265RevWrZPZbFZDQ4NWrlypxsbG9vNcLpf69Onj7+UAAAAiml/xdfr0ac2fP1/33HOPli5d2n68\nX79+2r59u9auXauWlhYdPXpUzzzzjAoKCvyeMAAAQJu6ujrNnDlTWVlZmj59uvbv39/heVVVVZo0\naZKysrJUVFSk+vp6n8Y4efKkFi5cqDFjxig3N1crVqzo8B72p556yufO8Su+fvOb3+jMmTNav369\nsrKy2p/n9dRTT2nDhg06fPiwcnJyNHv2bH3zm9/UXXfd5c/lAAAA2rndbtlsNs2YMUO1tbWaM2eO\nbDabmpqaPM47fPiwSktLtXr1au3evVsDBgxQcXGxT2MsWbJE11xzjd5++2397ne/08GDB7V+/XqP\n8d977z0999xziouL82nefj1qYsGCBVqwYEGnX9+0aZM/wwMAAHRq165dMplMKiwslCQVFBTo+eef\n144dOzR58uT289pWvUaNGiXp86AaO3asnE6nDh482OkYEydOVFJSkmw2m+Lj45Wamqr8/Hxt3769\nfezGxkY98sgjmj17tmpra32aN68XAgAAEclut8tqtXocS09Pl91u7/K8lJQUpaSkyG63y+FwdDpG\nfHy8NmzYoNTU1Pavvfnmm8rIyGj//MQTT+iOO+7QDTfc4PO8iS8AABCRmpqalJCQ4HEsISFBLpfL\n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\npggAQNRpbW3VqVOndOONNxp2zZSUFG3btq39fvBA6Nu3r1JSUro8JycnR263WxUVFSosLNSWLVvk\ndDqVm5vrcd7UqVN11113qaCgQCNHjlR5ebnGjRun5OTkLsewWCzKy8vTqlWrtHz5cn344YeqqqrS\nxo0bJUnTpk3TL3/5S+Xk5MhkMunZZ5/Vt771La8/W9xFXx5I4YPi4mJdddVV+sEPftB+bM+ePXr8\n8cd17NgxDR8+XI8//rhhFQ4AAKLfhx9+qJKSEh05ckRpaWkqLS1VZmamli1bpri4OJWWlkqSXn/9\nda1evVr19fXKzs5WWVmZ+vfv3+UYknT27FktW7ZMNTU1SkpK0v3336/p06dL+nxXb+3ataqsrFRz\nc7PuuOMOPfzww1fcJ3+5gMUXAAAAvOP1QgAAAAYivgAAAAxEfAEAABiI+AIAADAQ8QUAAGAg4itI\n1q9fr1tvvVWjR4/W3XffrSNHjoR6SlGprq5OM2fOVFZWlqZPn679+/eHekpRrba2VrNmzVJ2drZu\nu+02vfLKK6GeUsw4ffq0vva1r13xwmAE3smTJ1VUVKSbb75ZEyZM0IsvvhjqKSHKEF9B8Nvf/lav\nvfaaNm/erF27dmns2LFasGBBqKcVddxut2w2m2bMmKHa2lrNmTNHNptNTU1NoZ5aVGpoaNDChQs1\nd+5c1dbWas2aNSovL1dNTU2opxYTHnnkEZ09ezbU04gJ3/3udzV06FD95S9/0S9/+Uv94he/0Hvv\nvRfqaSGKEF9BcPbsWRUVFWnw4MHq1auX7r77bh0/flwnTpwI9dSiyq5du2QymVRYWCiTyaSCggKl\npqayMhAkx48f14QJEzRlyhRJ0ogRIzRmzBjt27cvxDOLfi+//LKSkpLaX2+C4Nm/f79OnTql73//\n++rVq5esVqteeeUVpaenh3pqiCLEVw+1trbqs88+u+Kfc+fOad68eR6vF6iurtZVV13F/zgDrKN3\naKWnp8tut4doRtEtIyNDK1eubP989uxZ1dbW+vTKMPScw+HQpk2bVFpaKp6JHXwffPCBhg4dqp/+\n9KfKzc3V5MmT9d577yk5OTnUU0MUCdq7HaPdnj17NG/evCteIXDttdequrra47zS0lKtWLHC6ClG\nvaamJiUkJHgc6+jt9Ai8zz77TEVFRRo1apRuvfXWUE8narW2tmrp0qX60Y9+pC984Quhnk5MOHv2\nrHbv3q2xY8fqT3/6kw4ePKh7771XX/rSl3TzzTeHenqIEsRXD40dO1aHDx/u8pwtW7boxz/+sUpK\nStq3ahA4HYVWU1OTEhMTQzSj2PDxxx/LZrMpLS1Nq1evDvV0otq6des0fPjwK14SjOAxm81KSUnR\n/PnzJUlZWVm67bbbVF1dTXwhYNh2DJJ169bpJz/5iTZs2ODTG87RfUOGDJHD4fA45nA4NHTo0BDN\nKPp98MEHKiws1C233KJ169bJbDaHekpR7Q9/+IO2bt2q0aNHa/To0frnP/+pBx98UBs3bgz11KJW\nenq6WlpaPLZ4L1y4wJYvAor4CoLf/OY3euGFF/TrX/9ao0ePDvV0olZOTo7cbrcqKirU0tKiyspK\nOZ1OVgmC5PTp05o/f77uueceLV26NNTTiQl/+MMf9Je//EV79uzRnj17dM0112j16tXtqzIIvK9/\n/etKSEjQL37xC7W2tmrv3r3avn27vvnNb4Z6aogicRfJ+YC7/fbb9cknn7SvCly8eFFxcXGqrKzU\nkCFDQjy76PLhhx+qpKRER44cUVpamkpLS5WZmRnqaUWlZ555RmvWrFFCQkL7KkBcXJzuvvtuLV68\nOMSziw0TJ05USUmJxo8fH+qpRLWPP/5Yjz32mA4ePKi+ffvq/vvvZwcDAUV8AQAAGIhtRwAAAAMR\nXwAAAAYivgAAAAxEfAEAABiI+AIAADAQ8QUAAGAg4gsAAMBAxBcAAICBiC8AAAAD/T/d3VmZpZBr\nmAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x230a4630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# look at the posterior distribution\n",
    "plt.contourf(X1,X2,pp.T)\n",
    "plt.colorbar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "rnorm = np.random.normal\n",
    "runif = np.random.rand\n",
    "\n",
    "def metropolis(n_iterations, initial_values, prop_std=[1,1], doPrint=True):\n",
    "    #################################################################\n",
    "    # function to sample using Metropolis \n",
    "    # (assumes proposal distribution is symmetric)\n",
    "    # \n",
    "    # n_iterations:  number of iterations\n",
    "    # initial_values: multidimensional start position for our chain\n",
    "    # prop_std: standard deviation for Gaussian proposal distribution \n",
    "    ##################################################################\n",
    "    \n",
    "    \n",
    "    #np.random.seed(seed=1)\n",
    "    n_params = len(initial_values)\n",
    "            \n",
    "    # Initial proposal standard deviations\n",
    "    # generates a list of length n_params\n",
    "    #prop_sd = [prop_std]*n_params\n",
    "    prop_sd = prop_std\n",
    "    \n",
    "    # Initialize trace for parameters\n",
    "    trace = np.empty((n_iterations+1, n_params))\n",
    "    \n",
    "    # Set initial values\n",
    "    trace[0] = initial_values\n",
    "        \n",
    "    # Calculate joint posterior for initial values\n",
    "    # the * assigns the arguments of the function according to the list elements\n",
    "    current_prob = calc_posterior(*trace[0])\n",
    "    \n",
    "    # Initialize acceptance counts\n",
    "    # We can use this to tune our step size\n",
    "    accepted = [0]*n_params\n",
    "    \n",
    "    for i in range(n_iterations):\n",
    "    \n",
    "        if not i%10000 and doPrint: \n",
    "            print 'Iterations left: ', n_iterations-i\n",
    "    \n",
    "        # Grab current parameter values\n",
    "        current_params = trace[i]\n",
    "    \n",
    "        # Get current value for parameter j\n",
    "        p = trace[i].copy() \n",
    "        \n",
    "        # loop over all dimensions\n",
    "        for j in range(n_params):\n",
    "            # proposed new value\n",
    "            theta = rnorm(current_params[j], prop_sd[j])\n",
    "            \n",
    "            # Insert new value \n",
    "            p[j] = theta\n",
    "    \n",
    "            # Calculate posterior with proposed value\n",
    "            proposed_prob = calc_posterior(*p)\n",
    "    \n",
    "            # Log-acceptance rate\n",
    "            alpha = proposed_prob/current_prob\n",
    "    \n",
    "            # Sample a uniform random variate\n",
    "            u = runif()\n",
    "    \n",
    "            # Test proposed value\n",
    "            if (u) < alpha:\n",
    "                # Accept\n",
    "                trace[i+1,j] = theta\n",
    "                current_prob = proposed_prob\n",
    "                accepted[j] += 1\n",
    "            else:\n",
    "                # Stay put\n",
    "                trace[i+1,j] = trace[i,j]\n",
    "            \n",
    "            # update p so we search the next dimension according\n",
    "            # to the current result\n",
    "            p[j] = trace[i+1,j]\n",
    "    \n",
    "    # return our samples and the number of accepted steps\n",
    "    return trace, accepted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create the sample for the posterior using MH\n",
    "\n",
    "Let's look at the acceptance ratio to tune the stepsize\n",
    "Note that this most probably should be better done after the burn in, but I don't want the simulations to run for too long during the lecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.31376  0.3604 ]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n7z3Xur2mpKSobt26On369HW3URY1eXN7v1pdF1zT9m7c6MyZM6ZFixZm/vz55ty5c2bhwoWmSZMm\n5tSpU0Xut3r1atO4cWOzbds2Y4wxn3zyiYmJiTFHjx41xhjTpUsXM2HCBFNQUGDS09NNbGys+fHH\nH91ZapmNp6CgwDRp0sQsW7bMGGPMDz/8YOrXr2/27dtX5uMxxvUxffzxx6ZDhw7m8OHDxhhjpkyZ\nYjp37nxNbZQVd4zp2LFjJjY21ixdutQYY8zWrVtNbGys+f7778t2MP+fO8Z0sT/+8Y+mXr165p//\n/GeZ1H8pd42nvMwNxpTffam87g/lcZsur9ulO+ryxHvPtW6vx44dM61atTKhoaHO+7h7m3dHTd7c\n3q9W18WuZXt36xG71atXq0KFCurevbsqVKighIQE3XbbbZclzIMHD6pfv34KCQmRJD3yyCO66aab\ntHPnTm3atElHjhzR888/r5tuuknBwcFasGCB6tSp485Sy2w8ubm5+uWXX5Sfny9J8vHxkZ+fn9d+\nfd7VMXXr1k0LFy5UjRo1dOLECeXm5iowMFDS+f8qXGmjrLhjTPv371dcXJzat28vSapXr54aNWqk\nH3/8sczHI7lnTBfMnz9fAQEBqlWrVlkOoQh3jGfjxo3lZm6Qyu++VF73h/K4TZfX7dIddXnivcfV\nui4YOXKkOnToUKo2yqImb27vV6vrgmvd3t0a7DIyMhQcHFxkWZ06dZSRkVFkWadOndS3b1/n7fXr\n1+vUqVO65557tHXrVt1zzz16/fXX1axZMz344IPauHGjqlWr5s5SXeKO8dx666167LHHNHToUNWv\nX1+9e/fWK6+8opo1a5bJGC7l6pgkqVKlSvrkk09033336bPPPtOQIUMknb8+pqttlAV3jCk0NFTj\nx4933u/YsWNat26d6tat69nii+GOMUnnX6vZs2dr5MiRMl78LXJ3jCctLa3czA1S+d2Xyuv+UB63\n6fK6XbqjLk+891xLXZ999pmOHz+uHj16FHmdrqWNsqrJ29t7cXVJ17e9uzXYnT59WpUrVy6yrHLl\nysrLyyv2Menp6Xr22Wf17LPP6tZbb9WxY8e0Zs0aBQYG6p///KfGjh2r0aNHa/369e4s1SXuGI8x\nRpUqVVJycrI2bdqk6dOn67XXXtP27ds9Xf4VXeuYHnroIaWmpmrgwIHq27evcnNzr+t58SR3jOli\nx48f18CBAxUeHq5WrVp5rO6rcceYCgoKlJSUpJdfflm33HJLWZRdLHeMpzzNDVL53ZfK6/5QHrfp\n8rpduqOmXswEAAAY7klEQVQuT7z3uFrX/v37lZycrLFjx0o6f7TwesdWFjVdrKy396vVdb3bu1uD\n3ZWKPn36tPz9/a94/1WrVqlnz57q3bu3+vXrJ0m6+eabdeutt6p///7y9fVVZGSk2rRpo2+++cad\npbrEHeNZtmyZUlNT9cADD8jX11ctW7ZUXFyclixZ4vH6r+Rax+Tn5ydfX1/16dNHAQEBWrt27TW3\n4WnuGNMFe/bs0WOPPabAwEAlJyd7tO6rcceYpk6dqrp167p0kXpPc8d4ytPcIJXffam87g/lcZsu\nr9ulO+ryxHuPK3UZYzR8+HA999xzql69+mVHmdy9zZempktrK+vtvaTn6nq3d7cGu7vvvluZmZlF\nlmVmZuqee+657L6LFi3SkCFDNHLkSA0YMMC5vE6dOjp37lyRARYWFnrlYyR3jOfAgQM6e/Zskfv6\n+vrK19fXM0WXwNUxJScna9KkSc7bxhjl5+eratWquvvuuy87nFzc81IWrndMkpxjkqStW7eqe/fu\nat68uaZOnaqbb77Zs4VfhTtep3/84x/64osvFBsbq9jYWB04cEDPPfec3nnnnTIZw8XcMZ7yNDdI\n5XdfKq/7Q3ncpsvrdumOujzx3uNKXQcPHtTmzZs1cuRIxcbG6pFHHpExRi1bttSGDRvcvs2Xpqa4\nuDht2LBBkne295Keq+ve3kv+bofrLnwLZO7cuSY/P9/8/e9/N02bNjWnT58ucr/vv//eREREmHXr\n1l3WRl5enmnZsqV56623zLlz58z69etNVFSU2bRpkztLdYk7xrN9+3YTHh5uFi9ebIwxZs2aNSY6\nOtps3bq1TMZwKVfHtHLlShMbG2u2b99uzp49a9566y3Trl07c+bMGZfbuJHGdOTIEdOkSRPzzjvv\neGUMl3LHmC7VqlUrr38rtjTjKU9zg7vG5Il9qbzuD+Vxmy6v26U76vLEe8/1bK979+41ISEhzvu4\ne5t3R03e3N6vVtelXN3e3RrsjDkfZLp3726ioqJM586dnRv3K6+8Yl599VVjjDF9+vQx9erVM5GR\nkSYyMtI0bNjQREZGmu+++84YY0xWVpbp27eviY2NNfHx8eaTTz5xd5kuc8d4vv32W9OpUycTHR1t\nHnroIbN8+XJvDccY49qYjDFmwYIFpnXr1iY2NtYMGDCgyNfki2vDW0o7phkzZpjQ0FDn63fhNZw0\naZI3hmOMcc/rdLH4+HivBTtj3DOe8jQ3GFN+96Xyuj+Ux226vG6X7qjLE+89rtZ1wd69ey/7CQ93\nb/Olrcnb23txdV3K1e3dxxgvflUOAAAAbsMlxQAAACxBsAMAALAEwQ4AAMASBDsAAABLEOwAAAAs\nQbADAACwBMEOAADAEgS7cmTt2rUKDQ297DIwxQkNDdWqVas8XJX3rV27tlQXri5PcnJy9MUXXzhv\nx8fHa8GCBV6sCCgb+/btU2ho6GWXWboWy5Yt0+HDh91Ylffl5+fro48+8nYZbrN27Vrt2LHD+Xfd\nunVdfk+DexDsyhkfHx9vl1DuPPHEEzpy5Ii3y3CLCRMmFLk4+KJFi9S5c2cvVgSUndLMb/v379fg\nwYN18uRJN1bkfUuXLtXUqVO9XYbbPPHEE87wHRUVpVWrVnn1utu/Rt65Ej0ASdJvfvMbb5cAlJnS\nXOiosLDQyn98CwsLvV2Cx/j6+uq2227zdhm/OhyxK2ObNm1S7969FRkZqQYNGqhnz57auXPnFe8b\nGhqqhQsXqn379oqMjNSAAQN06NChIvfZuHGjunTpooiICHXp0kUOh+O6+pKklStXqmvXrmrQoIEi\nIyPVr1+/Iv2tWbNG3bt3V8OGDfXggw/qs88+c67btm2bnnrqKUVGRio+Pl6zZ892rjt8+LAGDx6s\nqKgotWjRQv/7v/+rU6dOSfrPxzNLly5VfHy8oqOj9fzzzzv/K4+Pj5ck9e/fX2+//bYk6ZNPPlHH\njh0VHh6u++67T0OGDNGJEyec67p3765Zs2apWbNmioyM1LBhw3TmzBlnPV9++aUefvhhNWjQQI88\n8kiRj7N//PFH9ejRQw0aNFC7du00Z86cYp+vt99+WwMHDlSfPn0UGxurL7/8UidPntTLL7+sZs2a\nKSwsTPHx8Zo3b57z/p988omWLl2q1q1bO8d38Uexf/vb39S2bVtFRESoW7du+uGHH4rtH7gRrVix\nQvHx8YqMjNRzzz2n48ePO9dlZGSob9++atiwoe6//35NmTJFBQUFkqT7779fktS+fXstWbJEkvTu\nu++qTZs2CgsLU+PGjfXqq68673+pgoICTZgwQa1atVJYWJiaN2+uyZMnO9cbYzR16lTFxcUpMjJS\nffv2VVZWlnP9hx9+qLZt26phw4bq0aOHUlNTneu+/fZb55zy8MMPa+nSpc51b7/9tgYNGqRRo0Y5\n58ePP/5Y0vmPKl966SVlZ2erbt262r9//1XnEEnq3bu33n77bSUmJqpBgwaKi4vT4sWLnevPnj2r\n1157TX/4wx8UExOjwYMHKycnx7l+1qxZatWqlaKiotS7d2+lpaUV+1rFx8frjTfeUFxcnB544AHl\n5eVd9X3l0vn60tOLjhw5oueff15NmjTRfffdp6SkJOXm5hbbP67TdV/dFtfsxIkTJjY21rz55ptm\n7969ZuvWraZ79+6mT58+xhhj1qxZY0JDQ82ZM2eMMcaEhISYJk2amK+//tps377d9OrVyyQkJDjb\nCwkJMc2aNTOrVq0ymZmZ5vHHHzddunRxqa9L7dmzx9SvX9/MnTvX7Nu3z6xbt860bdvWvPzyy8YY\nY3bt2mXCwsLMm2++aXbv3m0WLVpkwsLCzKZNm0xOTo5p1KiReemll8yuXbvMihUrTMOGDc2XX35p\njDGmW7duZtiwYWbXrl1m06ZNpkePHubZZ581xpy/6HFISIi5//77TUpKitm0aZPp0KGDGTRokDHG\nmJ9//tmEhISYpUuXmlOnTpl169aZsLAws3TpUrN//36zatUq06RJEzNz5kxjjDGLFy829evXN//9\n3/9tdu3aZVauXGkaNGhg5s6da4wxJiUlxdSrV8/MmTPHZGVlmZkzZ5oGDRqYAwcOmCNHjpjo6Gjz\n/vvvm6ysLLNixQrTrFkz8+GHH17xOUtOTjYhISHm/fffN+np6ebo0aPmz3/+s0lISDBbt241WVlZ\nJjk52dSrV88cPHjQnDx50gwZMsT86U9/Mr/88osxxphWrVqZ+fPnG2OMmTZtmmnUqJFZtmyZyczM\nNOPHjzcNGjQw+/fvv57NDShXLuzrrVq1MmvWrDGbN282Dz30kHn++eeNMcacOXPGtGrVyowfP978\n9NNPZs2aNaZdu3ZmwoQJxhhjNm/ebEJCQsyGDRvMmTNnzKeffmpiY2PNqlWrzP79+82XX35pIiIi\nzOeff37F/qdNm2Zat25tNmzYYPbt22fmz59vQkNDzY8//miMMWbKlCmmadOmZsWKFeann34ygwYN\nMg899JAxxpiFCxeahg0bmk8//dRkZWWZ0aNHmyZNmpi8vDyzbds207BhQ7N48WKTlZVlPv30UxMd\nHW1WrlxpjDk/T4SFhZkhQ4aY9PR08/HHH5v69eubb7/91uTn55u//e1vpmnTpubnn382BQUFV51D\njDHm8ccfNxEREWbBggVmz549ZvTo0SY8PNw5p7z44oumTZs2Zu3atSY9Pd306tXLDBgwwBhjzNy5\nc839999vvv/+e7N7927z1ltvmejoaJOdnX3F56xVq1amcePGxuFwmLS0tBLfVy6dry9+T8vPzzft\n2rUzTz/9tHE4HGbjxo2mc+fOztrgPgS7MnTkyBHz3nvvFVn28ccfmxYtWhhjrhzsZs2a5bxvVlaW\nCQkJMVu2bHGuvxBYjDHm66+/NvXq1XOpr0vt3r37sgAzadIk89hjjxljjBk3bpzp1q1bkfWzZ882\n69atM3PnzjUtWrQw586dc65bvHixWbFihUlJSTH33XdfkXUZGRkmJCTEHDx40DnZL1261Lk+JSXF\n1K1b1+Tk5DjH+d133xljjNmyZYv59NNPi9TxwgsvmBdeeMHZb2hoqDl69Khz/TPPPGOSkpKMMcYM\nHjzYDBkypMjjp0yZYnbu3GmmTJly2SSzYMEC88ADD1zxOUtOTjbR0dFFln3yySfG4XA4b589e9aE\nhISY77//3hhjzPDhw83QoUOd6y8Odo0bNy7yehpzPhSPGzfuiv0DN5IL+/pXX33lXLZ69WpTr149\nc/ToUfP3v//dGaQuWLVqlQkPDzeFhYXOx2dkZBhjzs+XK1asKHL/xx57zEyaNOmK/S9fvtz88MMP\nRZa1aNHCfPzxx8YYY5o0aWI++ugj57rs7Gzz+uuvmxMnTpiEhATzxhtvONedPXvWjBs3zhw8eNC8\n+OKLZtSoUUXaffPNN83TTz9tjDk/TzRq1Mjk5eU517/44ovOuWbx4sXmD3/4g3NdSXPI448/XmSe\nOn78uAkJCTGrV682x48fN/Xr1zf/+te/nOvT09PNlClTjDHGxMXFOf/hvqB79+5m+vTpV3zOWrVq\nZUaPHu287cr7ysXz9cXvad98842JiIhwBtALtYWEhJjt27dfsX9cH86xK0PVq1dXQkKC5syZI4fD\noczMTKWlpemWW24p9jHR0dHOv3//+9+rWrVq2rVrl+rXry9JCgoKcq6/5ZZbVFhYqPz8/Gvuq3bt\n2qpUqZLeeecd7dixQ7t27dKOHTsUFhYm6fxHJOHh4UUe89RTT0k6f/Jv3bp1VaFCBee6C18ImDdv\nno4fP66YmJgij73pppuUmZmp3//+9/Lx8SkyzvDwcBUWFiojI6PIckmqX7++/P39NXXqVO3atUs7\nd+5URkaGHnzwwSLPQ7Vq1Zy3q1Sp4vwoYNeuXerSpUuRNgcPHixJSk9P16pVqxQZGelcV1hYqIKC\nAp07d06+vpfvLhc//5L0yCOPaMWKFVq8eLEyMzPlcDjk4+NT7MdDF+Tk5OiXX3657DmOiopSenr6\nVR8L3Ch8fHzUoEED5+369eursLBQu3fv1q5du5SRkVFk/5Okc+fOae/evbrppqJnDsXGxmrLli2a\nPHmyMjIytH37du3Zs+eyueaC1q1ba82aNZowYYIyMjK0bds2HT58WIWFhcrJyVFOTo5zvpOk2267\nTcOGDZN0ft7o37+/c52fn5+SkpIknZ83du7cWeTj0MLCwiLnltWrV08VK1Z03g4PDy/2NA9X5pA6\ndeo4/65SpYrzecrMzFRBQUGRcQQHB2vw4ME6deqUDhw4oOHDh2v48OHO9fn5+apdu/YVa5HOv+9c\ncD3vYRdkZGQoKChIt956a5HaqlWrpvT0dN17770ltgHXEOzK0OHDh5WQkKB7771XzZs3V6dOnbRr\n1y5Nnz692MdcGiYKCwuLLLs4TF1gjLnmvrZv367HHntMLVq00H333aeePXvq22+/1dq1ayWdn8iK\nc7V1586d05133ql33333snU1atTQzz//fNk4L5xMfKUg9e9//1uJiYnq2LGjGjdurL59+2r27NlF\nTsq+3loLCgrUvn17DRo06LJ1V6pFkipVqlTkdlJSkn744Qd16tRJCQkJatiwoeLi4ort84LivjVW\nUFBg9cnV+PW5OKCZ858a6eabb1ZBQYGio6P12muvXfaY3/72t5edX7xo0SKNHj1aXbt2VatWrTR4\n8GC9+uqrxfb71ltv6cMPP1RCQoI6dOigl156Sb1795ZU/P53QUnzxpNPPqlHH3202HFeOk8XFBRc\nFlQvcGUOuVI9xpgS65TOfzM/JCSkyDp/f/9iH3fxHHc972EXXBxsL62LOc69CHZlaOnSpapcubLe\ne+8957J//etfV31MWlqaIiIiJEmZmZk6fvz4ZTulO/r6+9//rgYNGhQ5mfivf/2rMzDdddddWr9+\nfZHHPP/88woODtZdd92lZcuWyRjj/NbahAkTlJubq7Zt2+rgwYOqUqWK8xugu3bt0sSJEzVq1ChJ\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x21039fd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_iter = 500\n",
    "acc_ratios = []\n",
    "for i in range(100):\n",
    "    start_alpha = np.random.rand(1)*10 - 3\n",
    "    start_beta = np.random.rand(1)*40 - 10\n",
    "    trace, acc = metropolis(n_iter, (start_alpha, start_beta), [3.0,12.0], doPrint=False) #3.0, 12.0\n",
    "    acc_ratios.append(acc/np.double(n_iter))\n",
    "\n",
    "acc_ratios = np.array(acc_ratios)\n",
    "plt.subplot(1,2,1)\n",
    "plt.hist(acc_ratios[:,0])\n",
    "plt.xlabel(\"alpha acceptance ratio\")\n",
    "plt.subplot(1,2,2)\n",
    "plt.hist(acc_ratios[:,1])\n",
    "plt.xlabel(\"beta acceptance ratio\")\n",
    "\n",
    "print np.mean(acc_ratios, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iterations left:  200000\n",
      "Iterations left:  190000\n",
      "Iterations left:  180000\n",
      "Iterations left:  170000\n",
      "Iterations left:  160000\n",
      "Iterations left:  150000\n",
      "Iterations left:  140000\n",
      "Iterations left:  130000\n",
      "Iterations left:  120000\n",
      "Iterations left:  110000\n",
      "Iterations left:  100000\n",
      "Iterations left:  90000\n",
      "Iterations left:  80000\n",
      "Iterations left:  70000\n",
      "Iterations left:  60000\n",
      "Iterations left:  50000\n",
      "Iterations left:  40000\n",
      "Iterations left:  30000\n",
      "Iterations left:  20000\n",
      "Iterations left:  10000\n",
      "[ 0.314505  0.361505]\n"
     ]
    }
   ],
   "source": [
    "n_iter = 200000\n",
    "trace, acc = metropolis(n_iter, (11,17), [3.0,12.0]) #[3.0,12.0])\n",
    "print acc/np.double(n_iter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "burnin = 10000    # MY BURN IN \n",
    "# throw away the burnin samples\n",
    "alpha = trace[burnin:,0]; beta=trace[burnin:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x23d74c50>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n586dIywsTJ7Tu0WzZs3ivffe45NPPjG7hS2ur3Xr1mRlZZm1ZWVlERAQoFIi27Z//35iY2O5++67\nmTVrFjqdTu1INumHH35gzZo1hIWFERYWxqlTp3jllVeYN2+e2tFsjp+fH2VlZWaDFCaTSQYtbsGp\nU6euKHTs7e2xt6+1Y2DVrmXLlpSWlprVPllZWVc8TnVV1TSpx2Zs375dZlv/DcuXL1fCwsKUzMxM\ntaPYnMuzrRctWqSUlpYqy5YtU7p27aoUFRWpHc3m5ObmKl26dFHmzZundpRap2fPnjLb+hYVFxcr\n3bt3V6ZPn66UlZUpu3btUkJCQiyazSrMHTp0SAkODla++eYbRVEqfneHhoYq+/fvVzmZbflrzfPS\nSy8po0aNUoqKipS0tDQlPDxcZluL6jd37lwuXrxITEwMISEh6PV6QkJCZNKHBXQ6HfPmzWPVqlWE\nh4ezePFi5syZg5OTk9rRbM6KFSs4e/Yss2fPRq/XV/0cTps2Te1oNu+vzzoLyzk6OrJw4ULS0tLo\n2rUrr732GmPHjqVjx45qR7M5bdq0Yfr06Xz11Vd07tyZSZMmMWXKFIKCgtSOZtMmTZpEaWkp3bt3\n51//+hdjxoyx6OdToygyfi6EEEIIISwjI49CCCGEEMJiUjwKIYQQQgiLSfEohBBCCCEsJsWjEEII\nIYSwmBSPQgghhBDCYlI8CiGEEEIIi0nxKIQQQgghLCbFoxBC3EY7duwgMDDwiq3UriUwMJBff/21\nmlMJIcTtI8WjEELcZrIrixCiNpPiUQghhBBCWEyKRyGEuAVpaWkMHToUvV5Pp06deOyxxzh8+PAV\n/QIDA1m+fDn9+vVDr9czYsQITp8+bdZnz549DBw4kI4dOzJw4EAOHDhw0+8jhBDWYvXiMSMjg8GD\nB6PX6xkwYABpaWlX7bd69Wp69+6NXq8nLi6O/Pz8qtdSU1OJiYkhNDSUvn37snr1amvFF0IILl68\nyPDhwwkJCWH16tV8/fXXmEwm3nvvvav2T0pK4tVXX2Xp0qVcvHiRF154wez1pUuXMnLkSL777jtc\nXV156623bul9hBDCKhQrKikpUaKiopQlS5YoZWVlyvLly5UuXbooly5dMut34MABJTQ0VNm7d69S\nUlKivPnmm8qwYcMURVGU8vJypUuXLsratWsVRVGUnTt3Ku3bt1dOnDhhzUsRQtRhubm5yueff27W\n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\nkWIAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x222ae3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of alpha\n",
    "plt.subplot(2,1,1) \n",
    "fig=plt.hist(alpha, bins=100, normed=True)\n",
    "xx= np.linspace(-3,7,101)\n",
    "pp_a = np.sum(pp, axis=1)\n",
    "plt.plot(xx, pp_a*6.0, 'r', label=u'True distribution') \n",
    "plt.legend()\n",
    "plt.xlabel(\"alpha\")\n",
    "plt.ylabel(\"counts\")\n",
    "\n",
    "# histogram of beta\n",
    "plt.subplot(2,1,2) \n",
    "fig=plt.hist(beta, bins=100, normed=True)\n",
    "xx = np.linspace(-10, 30,100)\n",
    "pp_b = np.sum(pp, axis=0)\n",
    "plt.plot(xx, pp_b*1.5, 'r', label=u'True distribution') \n",
    "plt.legend()\n",
    "plt.xlabel(\"beta\")\n",
    "plt.ylabel(\"counts\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x23884080>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nbW1ttLa2kpSURFJSEhcvXmTPnj388MMPqgkfNjg4iN1u92ibnp4mIiJiUepiRYfwlJQUZmZm+Oqr\nr5ibm6O5uZnx8fHb/rMV37F69WrS09OpqalhamqK3t5eTp06RU5ODgA5OTk0NjYyOjrK5cuXsdvt\nPPfcc0s8arlXLl++zCuvvEJxcTHvvvuu2a668G1xcXEMDAxw4sQJDMOgo6ODH3/8kfz8fNWFj2pr\na6Orqwun04nT6SQ8PJza2lpef/111YQPCw4Oxmaz4XA4MAyDn376idbWVl588cXFqYt7uq/LEvjt\nt9+M/Px8IzEx0Xj++efN7WLEd/z8888eWxRevXrVKCsrM5KSkoy0tDTj2LFj5rH5+Xmjrq7OSE1N\nNZKTk42PP/7YWFhYWIphyyL47LPPjNjYWCMhIcGwWq2G1Wo1EhISjNraWuPatWuqCx929uxZ44UX\nXjAef/xxIy8vz3A6nYZh6O+F3JCenm5uUaia8G3t7e1Gdna2YbVajaysLMPhcBiGsTh14WcY2mVe\nRERERMSbVvRyFBERERGRlUghXERERETEyxTCRURERES8TCFcRERERMTLFMJFRERERLxMIVxERERE\nxMsUwkVEREREvEwhXERkGYmNjeXMmTMAjI+P09rauqj9HTlyhPn5eQAaGhooKChY1P5EROQGfViP\niMgyMjY2RkhICKtWreK9995jZmaGmpqaRemrq6uLXbt20dvbS2BgIJOTk8zOzrJmzZpF6U9ERP62\naqkHICIif3vkkUe81tfCwgJ+fn7mY4vFgsVi8Vr/IiK+TMtRRESWkZvLURoaGmhpaeHbb78lIyMD\ngImJCd5//32SkpJ48sknefvttxkfHwfA7XYTGxvLwYMHSU5OpqysDICWlhays7PZvHkzW7Zs4a23\n3mJiYgK3201RURGGYRAfH09XVxcNDQ3k5+ebY+nt7WXXrl0kJCTw9NNPY7PZzGNOp5PU1FSOHTtG\neno68fHxvPrqq1y5cgWA+fl5PvroI5566imsVitFRUUMDw976zaKiCx7CuEiIstQSUkJ27dvJzMz\nk6NHjwJQXl7O6Ogohw4d4ssvv2RycpLXXnvN47zOzk6am5spKyvjl19+4YMPPqC0tBSHw0FdXR1O\np5PDhw8TERFBfX09fn5+tLe3Y7VaAcyZcZfLRVFREZs3b6alpYWKigqamppobGw0+7p69SpHjx7l\n008/5dChQ/T19WG32wFoamri9OnT2O12Tp48ydq1a9m3b583bp2IyIqg5SgiIsuQxWIhKCgIf39/\n1q5dyx9//IHD4aCzs5PQ0FAAPvnkE5KTk+nu7iYsLAyAl156iaioKAAGBgaorKzk2WefBSA8PJyt\nW7cyNDSEn58fISEhAISGhhIQEODR/5EjR9iwYYMZnB999FH+/PNP6urqKCkpAW7MdpeXlxMbGwtA\nTk4O/f39wI2Z+aCgICIiIggNDeXDDz9kZGRkMW+ZiMiKohAuIrICjIyMYBgGmZmZ3Pp++oWFBVwu\nlxnCIyMjzWNxcXEEBwdjs9k4d+4cQ0NDjIyMkJWVdVf9xcfHe7QlJiZy/fp1xsbGzLbo6Gjz64ce\neojZ2VkACgoKaGtrY9u2bSQkJJCRkUFeXt5/u3gRkfuQQriIyAowNzdHUFAQx48fv+3YunXruHbt\nGgAPPvig2d7Z2UlpaSnZ2dmkpKRQUlLCF198wd1sinXrz7lpYWEBwNzSELhtBv2mmJgYvv/+e06f\nPk1HRweNjY18/fXXtLS0EBwcfMf+RUTud1oTLiKyAsTExDA9Pc309DRRUVFERUWxZs0aKisruXjx\nIoDHTidwY112Tk4OlZWV7Nixg7i4OM6fP2+G8H9+/602btxIT0+PR1t3dzcPP/ww69evv+N4jx8/\nznfffUdGRgb79+/nm2++4fz58wwODv6/ly4icl9SCBcRWaZWr16N2+1mdHSUDRs2kJaWxjvvvEN3\ndzdDQ0Ps3buXc+fOmUtC/jnDHRYWRk9PD7/++isjIyMcOHCAvr4+ZmZmAMwZ6cHBQbPtpsLCQn7/\n/Xeqq6txuVw4HA7q6+vZuXMn/v53fuqYmJigsrKSM2fO4Ha7aW5uxmKxEBMTcy9ujYjIiqcQLiKy\njNw6O52bm4vb7SY3NxeA6upqNm3aRGlpKTt37iQgIIDPP/+cwMDA284FePPNN4mIiKCwsJDdu3cz\nNjbGG2+8Yc5GP/bYY2zdupXdu3fT0dHhcW5YWBh2u53u7m5yc3OpqqqiuLiYPXv23NV1FBYWUlBQ\nQEVFBdu3b8fhcHDw4EHWrVv3n++NiMj9RJ+YKSIiIiLiZZoJFxERERHxMoVwEREREREvUwgXERER\nEfEyhXARERERES9TCBcRERER8TKFcBERERERL1MIFxERERHxMoVwEREREREv+wv+Zgmiq0I9zAAA\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x23ea1b38>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[12,8])\n",
    "\n",
    "burnin = 500    # MY BURN IN \n",
    "# throw away the burnin samples\n",
    "alpha = trace[burnin:,0]; beta=trace[burnin:,1]\n",
    "\n",
    "# trace plot for alpha during burnin\n",
    "plt.subplot(4,1,1) \n",
    "plt.plot(trace[:burnin,0])\n",
    "plt.ylim(-4,12)\n",
    "plt.xlabel(\"iterations\")\n",
    "plt.ylabel(\"alpha start\")\n",
    "\n",
    "# trace plot for alpha at the end \n",
    "# where we hopefully converged\n",
    "plt.subplot(4,1,2) \n",
    "plt.plot(alpha[-burnin:])\n",
    "plt.ylim(-4,12)\n",
    "plt.xlabel(\"iterations\")\n",
    "plt.ylabel(\"alpha end\")\n",
    "\n",
    "# trace plot for beta during burnin\n",
    "plt.subplot(4,1,3) \n",
    "plt.plot(trace[:burnin,1])\n",
    "plt.ylim(0,60)\n",
    "plt.xlabel(\"iterations\")\n",
    "plt.ylabel(\"beta start\")\n",
    "\n",
    "# trace plot for beta at the end \n",
    "# where we hopefully converged\n",
    "plt.subplot(4,1,4) \n",
    "plt.plot(beta[-burnin:])\n",
    "plt.ylim(0,60)\n",
    "plt.xlabel(\"iterations\")\n",
    "plt.ylabel(\"beta end\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAngAAAG4CAYAAADWl5oTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XuQ1PWd//tn329zYW4wwMAAgygoEEYi6KpJMAn18xyB\nOsvZcMgaSYyAGzdUzB/WrpuYWi223C1KU5YESYn5pdza7Fn1l+IQ3XjZ34pJ0ARJQhBQZHqGuc90\nT0/fv93f7v6ePwYbJszAADMgPa9HVSrT38/78+3Ph6qRF9/L52OzLMtCREREREqG/WoPQERERETG\nlwKeiIiISIlRwBMREREpMQp4IiIiIiVGAU9ERESkxCjgiYiIiJSYMQe8UCjEbbfdxttvvw3AkSNH\nWLRoEc3NzSxbtozm5mZ2795drN+xYwe33norK1asYPv27Wg1FhEREZErwznWwkcffZRoNFr8fOzY\nMe6880527dp1Tu2LL77I/v372bdvHwCbN29mz5493H///eMwZBERERE5nzFdwfvZz35GIBCgvr6+\neOzo0aMsXLhwxPq9e/dy3333UVNTQ01NDVu2bOGVV14ZnxGLiIiIyHld8ApeMBjkhRde4D/+4z9Y\nt25d8fixY8dwu93cddddWJbF6tWrefjhh3G5XLS0tDB//vxi7dy5c2ltbZ2QCYiIiIjIcOe9gpfP\n53nkkUf43ve+R0VFxbC26upqVq1axS9+8Qt++tOf8t577/HMM88AkE6n8Xq9xVqv10uhUCCbzU7A\nFERERETkbOe9gvfss8+ycOFCbr/99nPadu7cWfy5oaGBrVu38tRTT/Hwww/j9XoxDKPYbhgGDocD\nt9s9pkEZhsGRI0eoq6vD4XCMdS4iIiIiJSOfz9Pf389NN9007MLZWJw34L322muEQiFee+01AOLx\nON/5znfYunUrkUiEhx56iEAgAAyFMo/HA0BTUxPBYJAlS5YA0NLSQlNT05gHdeTIEb761a9e1ERE\nREREStG//uu/snz58ovqc8GAd7ZVq1bx2GOPceedd/LlL38ZgO9+97t0dnby3HPPsWHDBgDWrFnD\n888/z8qVK3E4HOzevXvY83sXUldXV5zQ2S92iIiIiEwWPT09fPWrXy3moosx5mVSAGw2W/H/d+3a\nxRNPPMHKlSvxer1s2LCBe++9F4CNGzcSDodZv349pmmydu1aNm3aNObv+eS2bH19PQ0NDRczRBER\nEZGScimPq9msT+EKxB0dHdx111289dZbCngiIiIyKV1OHtJWZSIiIiIlRgFPREREpMQo4ImIiIiU\nGAU8ERERkRKjgCciIiJSYhTwREREREqMAp6IiIhIiVHAExERESkxCngiIiIiJUYBT0RERKTEKOCJ\niIiIlBjn1R6AyGTwxnttFD51uz6fX8Gy+B+3zrnawxARkUuggCdyBVjA6pWNV3sYF+X199qu9hBE\nROQS6RatiIiISIlRwBMREREpMQp4IiIiIiVGAU9ERESkxCjgiYiIiJQYBTwRERGREqOAJyIiIlJi\nFPBERERESowCnoiIiEiJUcATERERKTEKeCIiIiIlRgFPREREpMQo4ImIiIiUGAU8ERERkRKjgCci\nIiJSYhTwREREREqMAp6IiIhIiVHAExERESkxCngiIiIiJUYBT0RERKTEKOCJiIiIlBgFPBEREZES\nM+aAFwqFuO2223j77bcBiMViPPTQQyxfvpxVq1bx0ksvDavfsWMHt956KytWrGD79u1YljW+IxcR\nERGREY054D366KNEo9Hi53/4h38gEAhw4MABnn76af7lX/6Fw4cPA/Diiy+yf/9+9u3bx6uvvsr7\n77/Pnj17xn/0IiIiInKOMQW8n/3sZwQCAerr6wFIpVK89dZbfPvb38blcrFkyRLuuecefv7znwOw\nd+9e7rvvPmpqaqipqWHLli288sorEzcLERERESm6YMALBoO88MIL/OAHPyjeZm1ra8PlcjFz5sxi\n3dy5c2lpaQGgpaWF+fPnD2trbW0d56GLiIiIyEjOG/Dy+TyPPPII3/ve96ioqCgeT6VSeDyeYbVe\nrxfDMABIp9N4vd5hbYVCgWw2O55jFxEREZERnDfgPfvssyxcuJDbb7992HGfz3dOWDMMA7/fDwwP\ne5+0ORwO3G73eI1bREREREZx3oD32muv8eqrr3LLLbdwyy230N3dzXe+8x3++7//G9M06enpKdYG\ng0GampoAaGpqIhgMFttaWlqKbSIiIiIysZzna3zttdeGfV61ahWPPfYYn/vc5zh+/Dg7duzg8ccf\n56OPPmLfvn38+Mc/BmDNmjU8//zzrFy5EofDwe7du1m3bt3EzUJEREREis4b8P6czWYr/vz4448X\nw14gEOCRRx5h8eLFAGzcuJFwOMz69esxTZO1a9eyadOmcR24iIiIiIzsogLeW2+9Vfy5srKSp59+\nesQ6u93Otm3b2LZt2+WNTkREREQumrYqExERESkxCngiIiIiJUYBT0RERKTEKOCJiIiIlBgFPBER\nEZESo4AnIiIiUmIU8ERERERKjAKeiIiISIlRwBMREREpMQp4IiIiIiVGAU9ERESkxCjgiYiIiJQY\nBTwRERGREqOAJyIiIlJiFPBERERESowCnoiIiEiJUcATERERKTEKeCIiIiIlRgFPREREpMQo4ImI\niIiUGAU8ERERkRKjgCciIiJSYhTwREREREqMAp6IiIhIiVHAExERESkxCngiIiIiJUYBT0RERKTE\nKOCJiIiIlBgFPBEREZESo4AnIiIiUmIU8ERERERKjAKeiIiISIlRwBMREREpMQp4IiIiIiVmTAHv\n1Vdf5e6772bZsmXcc889vPnmmwAcOXKERYsW0dzczLJly2hubmb37t3Ffjt27ODWW29lxYoVbN++\nHcuyJmYWIiIiIlLkvFBBa2srjz76KD/5yU9YunQpBw4cYPPmzbzzzjscO3aMO++8k127dp3T78UX\nX2T//v3s27cPgM2bN7Nnzx7uv//+8Z+FiIiIiBRd8ArenDlz+M1vfsPSpUvJ5XL09/dTVlaGy+Xi\n6NGjLFy4cMR+e/fu5b777qOmpoaamhq2bNnCK6+8Mu4TEBEREZHhLngFD8Dn89HR0cHq1auxLIsf\n/OAHBAIBjh07htvt5q677sKyLFavXs3DDz+My+WipaWF+fPnF88xd+5cWltbJ2oeIiIiInLamF+y\nmDFjBocPH2bPnj380z/9E++++y7V1dWsWrWKX/ziF/z0pz/lvffe45lnngEgnU7j9XqL/b1eL4VC\ngWw2O/6zEBEREZGiMQc8u92Ow+Fg5cqVrF69mrfeeoudO3eyadMmvF4vDQ0NbN26lTfeeAMYCnSG\nYRT7G4aBw+HA7XaP/yxEREREpOiCt2jffvttfvKTn/DCCy8Uj5mmiWVZPPnkkzz00EMEAgFgKMR5\nPB4AmpqaCAaDLFmyBICWlhaampomYg4i15SjwTDHWwcI+K7+P3YG4wZf+dL1V3sYIiIyzi4Y8G68\n8UY++OAD9u7dyz333MP+/fvZv38/P/vZz9i6dSsA3/3ud+ns7OS5555jw4YNAKxZs4bnn3+elStX\n4nA42L17N+vWrZvY2YhcAzLZPLcvncnUav/VHgqvv9d2tYcgIiIT4IIBr7a2lh/96Eds376df/zH\nf2TOnDns3LmTpqYmdu3axRNPPMHKlSvxer1s2LCBe++9F4CNGzcSDodZv349pmmydu1aNm3aNNHz\nEREREZn0xvQW7c0338zLL798zvGmpqZht27PZrfb2bZtG9u2bbu8EYqIiIjIRdFWZSIiIiIlRgFP\nREREpMQo4ImIiIiUGAU8ERERkRKjgCciIiJSYhTwREREREqMAp6IiIhIiVHAExERESkxCngiIiIi\nJUYBT0RERKTEKOCJiIiIlBgFPBEREZESo4AnIiIiUmIU8ERERERKjAKeiIiISIlRwBMREREpMQp4\nIiIiIiXGebUHIHIt6IilORFJ4LTbLql/i2HwTnsIgNb+GJ25LJXJ1EWfp8rr5qa6iksag4iITB4K\neCJjEE5nuLl+ChUe1yX1T3cluWNWLQBlqQIz68qYWu2/6PN8EhJFRETOR7doRUREREqMAp6IiIhI\niVHAExERESkxCngiIiIiJUYBT0RERKTE6C1akUuQMUz+8Lt2XC7HmOr7gmEOWUM/n+qNE+uI0hFw\nj1rvcNhZ+tlZ4zFUERGZhBTwRC5BOmVSN62ceQvqxlQfskHzikYAbB/2XXCZlEPvto3LOEVEZHLS\nLVoRERGREqOAJyIiIlJiFPBERERESowCnoiIiEiJUcATERERKTEKeCIiIiIlRgFPREREpMQo4ImI\niIiUmDEFvFdffZW7776bZcuWcc899/Dmm28CEIvFeOihh1i+fDmrVq3ipZdeGtZvx44d3HrrraxY\nsYLt27djWdb4z0BEREREhrngThatra08+uij/OQnP2Hp0qUcOHCAzZs388477/D973+fQCDAgQMH\nOHbsGA888AALFixgyZIlvPjii+zfv599+/YBsHnzZvbs2cP9998/4ZMSERERmcwueAVvzpw5/OY3\nv2Hp0qXkcjn6+/spKyvD6XTy1ltv8e1vfxuXy8WSJUu45557+PnPfw7A3r17ue+++6ipqaGmpoYt\nW7bwyiuvTPiERERERCa7Me1F6/P56OjoYPXq1ViWxQ9+8APa29txuVzMnDmzWDd37lzeeOMNAFpa\nWpg/f/6wttbW1vEdvchV0hpPEUkZmOH4mOr7TJMPT9d2pg0yURsRKz9qfadpEgjHqfa5qfN7xmXM\nIiIyeYwp4AHMmDGDw4cPc/DgQbZu3co3v/lNPJ7hf/F4vV4MwwAgnU7j9XqHtRUKBbLZLG63e5yG\n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\ny5cv5ytf+cpEOZ1Os2vXLq677rpZjGru6enp4d///d959NFHcWQu+Cn279/P0qVL+Yd/+Ac2b97M\n+9//ft566y2qq6tnO7Q5oaamht///d/nL//yL1m5ciV/+Id/yMMPP8y8efNmO7RZdd9997F9+/aK\nZbd6e3vRNI22traJuqv5nj3dZ6RpGk899RT19fUTdb/85S9Zvnz5aY81Y2vRno3XX3+dj3/84yiK\nUlHf2trKN77xDZ577jmeffZZ3n777VmKcPad7jPasWNHRbtHH32Uxx9//FKHOKcUi0X8fn9Fnd/v\nR9f1WYpo7spmszz44IOsXr2a22+/fbbDmTPK5TIPPfQQX/rSlwiHw7MdzpyUTqd57bXX2LRpEy+8\n8AL79u3jT/7kT5g/fz7r1q2b7fBmneM4+Hw+/vmf/5nbb7+dl19+mc9//vOsWLGCa6+9drbDmzUN\nDQ1T6orFIl6vt6LO5/Ndtffs6T6jkz3++OP09PTw1a9+9bTtZjXB27RpE4cOHZpSbxgG9913H48/\n/jg+n++q/gV9qs/oRNu3b+d//a//xcMPPzzx6O1qNV0yVywWCQQCsxTR3DQwMMDWrVvp6OjgH//x\nH2c7nDnlySef5LrrrmPz5s2zHcqc5fF4qKmp4ROf+AQAN954I3fddRc7duyQBA94/vnn2bdvH1/8\n4hcBuO2229iyZQvbt2/noYcemuXo5ha/349pmhV1uq7LPXsahmHwV3/1Vxw9epRnnnmGurq607af\nk+/g7du3j0gkwqc+9Sk6OzvZunUrqVSKzs7Oq/r9suk8+eSTfPnLX+app56qeFx7tVq8eDE9PT0V\ndT09PSxdunSWIpp79u/fz/33388tt9zCk08+icfjme2Q5pSf/OQn/PjHP6azs5POzk6Gh4f5i7/4\nC55++unZDm3OWLRoEZZlVfz4tm37qv4xfqLh4eEpSYvb7cbtntU+lTmpo6ODUqlU8d3e09Mz5VWb\nq106neaBBx4gm83y3//937S2tp55pxkcCHLRvPbaazKKdhrbtm1zOjs7ne7u7tkOZc54dxTtM888\n45RKJecHP/iBc/PNNzvFYnG2Q5sTotGos2nTJufpp5+e7VAuG7fffruMoj2JruvObbfd5nzjG99w\nLMty3nzzTWft2rVX9cjHEx0+fNhZvXq188Mf/tBxnPHvsHXr1jn79++f5cjmhpO/0z/zmc84X/jC\nF5xisejs3bvX2bBhw1X/t3TyZ/TAAw84W7dudSzLOutjyM+Jy9i3vvUt8vk89957LzD+3oeiKGzb\nto3FixfPcnSzw+Px8PTTT/Pwww/z9a9/nY6ODv7lX/4Fn88326HNCc8++yzJZJJvfvObPPnkk8D4\nCL+PfvSj/Pmf//ksRzc3nfz+qwCv18t3vvMd/vZv/5abb76ZqqoqvvSlL7FmzZrZDm1OuOaaa/jG\nN77BE088wd/93d/R0tLCV77yFVasWDHboc1Jjz32GI888gi33XYbwWCQhx56SP6WTrBnzx527dqF\n1+tl/fr1E/eklStXnnb+ScVxpE9dCCGEEOJKMiffwRNCCCGEEOdPEjwhhBBCiCuMJHhCCCGEEFcY\nSfCEEEIIIa4wkuAJIYQQQlxhJMETQgghhLjCSIInhBBCCHGFkQRPCCGEEOIKIwmeEEIIIcQV5v8H\n9bx8bQqvdYMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x23961978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "burnin = 1    # MY BURN IN \n",
    "# throw away the burnin samples\n",
    "alpha = trace[burnin:,0]; beta=trace[burnin:,1]\n",
    "\n",
    "subsetSize = 1000\n",
    "for i in range(20):\n",
    "    #plt.hist(alpha[subsetSize*i:subsetSize*(i+1)], alpha=0.4)\n",
    "    plt.hist(alpha[subsetSize*i:subsetSize*(i+1)], histtype=\"step\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try to have multiple chains"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n"
     ]
    },
    {
     "data": {
      "image/png": "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\njYiIiIiIiIiIqA+DRkRERERERERE1IdBIyIiIiIiIiIi6sOgERERERERERER9WHQiIiIiIiIiIiI\n+jBoREREREREREREfRg0IiIiIiIiIiKiPgwaERERERERERFRHwaNiIiIiIiIiIioD4NGRERERERE\nRETUh0EjIiIiIiIiIiLqw6ARERERERERERH1YdCIiIiIiIiIiIj6MGhERERERERERER9GDQiIiIi\nIiIiIqI+DBoREREREREREVEfBo2IiIiIiIiIiKgPg0ZERERERERERNSHQSMiIiIiIiIiIurDoBER\nEREREREREfVh0IiIiIiIiIiIiPowaERERERERERERH0YNCIiIiIiIiIioj4MGhERERERERERUR8G\njYiIiIiIiIiIqA+DRkRERERERERE1IdBIyIiIiIiIiIi6sOgERERERERERER9dEO+wS/8Au/gDt3\n7kBRFEgpcebMGfzDP/zDLK6NiIiIiIiIiIjm5FBBI9u28e677+KVV15BoVCY1TUREREREREREdGc\nHao87c0338TKygoDRkRERERERERED5kDM41834dlWX1fF0LgJz/5CVRVxa/92q/h5s2beOqpp/B7\nv/d7uHTp0pFcLBERERERERER3R8HBo2+853v4Dd+4zcghOj5+qlTp/Cbv/mbePrpp/GlL30JxWIR\nf/Znf4YvfOEL+MY3vgHDMEY+r+/7AIDNzc1DXD4REREREREREcXiOEscdzkMIaWUh36WhKtXr+Kv\n/uqv8Mwzz4x83Pe+9z38+q//+ix/NBERERERERERAXjppZdw9erVQz3HoRph/93f/R3Onj2LF198\nEQDgeR48z4Npmgf+2StXruCll17C6uoqVFU9zGUQERERERERERHCDKOdnR1cuXLl0M91qKDR9vY2\nvvKVr+DLX/4yFhcX8cd//Me4ePEinnjiiQP/bCqVOnTEi4iIiIiIiIiIep0/f34mz3OooNEXv/hF\nNJtNfO5zn0Or1cKHPvQh/Pmf//lMLoyIiIiIiIiIiOZn5j2NiIiIiIiIiIjowafM+wKIiIiIiIiI\niOj4YdCIiIiIiIiIiIj6MGhERERERERERER9GDQiIiIiIiIiIqI+DBoREREREREREVGfuQSNXn/9\ndfzKr/wKnn32WXz2s5/Fq6++Oo/LIHqovfbaa/jYxz7W+d+1Wg2/8zu/g6tXr+JnfuZn8LWvfa3n\n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\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x292e5550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[20,8])\n",
    "\n",
    "n_iter = 500\n",
    "for i in range(10):\n",
    "    start_alpha = np.random.rand(1)*10 - 3\n",
    "    start_beta = np.random.rand(1)*40 - 10\n",
    "    trace, acc = metropolis(n_iter, (start_alpha, start_beta), [10.0,50.0])\n",
    "    plt.plot(trace[-500:,0], alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n",
      "Iterations left:  500\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x26fd2a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[20,8])\n",
    "\n",
    "n_iter = 500\n",
    "for i in range(10):\n",
    "    start_alpha = np.random.rand(1)*40 - 20\n",
    "    start_beta = np.random.rand(1)*40 - 10\n",
    "    trace, acc = metropolis(n_iter, (start_alpha, start_beta), [0.5,0.05]) #10.0,50.0\n",
    "    plt.plot(trace[-500:,0], alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
10/1: !wget https://github.com/AM207/2016/blob/master/Lectures/Lecture07_MCMC.ipynb
10/2: !wget http://am207.github.io/2016/Lectures/Lecture07_MCMC.ipynb
10/3: !wget https://github.com/AM207/2016/blob/master/Lectures/Lecture07_MCMC.ipynb
10/4: !git clone https://github.com/AM207/2016/blob/master/Lectures/Lecture07_MCMC.ipynb
10/5: !git pull https://github.com/AM207/2016/blob/master/Lectures/Lecture07_MCMC.ipynb
10/6: !git init
10/7: !git pull https://github.com/AM207/2016/blob/master/Lectures/Lecture07_MCMC.ipynb
10/8: !git pull https://github.com/AM207/2016/blob/master/Lectures/
10/9: !git clone https://github.com/AM207/2016.git
10/10: !git checkout https://github.com/AM207/2016.git
10/11: !git checkout https://github.com/AM207/2016/tree/master/Lectures
11/1: run montecarlino_test.py
11/2: !pip install montecarlino
11/3: run montecarlino_test.py
11/4: !vi montecarlino_test.py
11/5: !pip install montecarlino
11/6: !vi montecarlino_test.py
11/7: run montecarlino_test.py
11/8: pwd
12/1:
import matplotlib.pyplot as plt
%pylab
import pandas as pd
filename = 'worldcitiespop.txt'
data = pd.read_csv(filename, low_memory=False)
plot(data.Longitude, data.Latitude, ',')
12/2:
load geoid;
figure(1) 
axesm ('mercator','MapLatLimit',[20 25],'MapLonLimit',[119 121])
contourfm(geoid,geoidrefvec, 'LineStyle', 'none');
geoshow('TWN_county.shp', 'FaceColor', [0.5 1.0 0.3]);
12/3: geoshow('landareas.shp','FaceColor', [0.5 1.0 0,5])
12/4: geoshow('landareas.shp','FaceColor', [0.5, 1.0, 0.5])
12/5: plt.geoshow('landareas.shp','FaceColor', [0.5, 1.0, 0.5])
13/1:
#!/usr/bin/env python
'''
Test combinations of contouring, filled contouring, and image plotting.
For contour labelling, see contour_demo.py.

The emphasis in this demo is on showing how to make contours register
correctly on images, and on how to get both of them oriented as
desired.  In particular, note the usage of the "origin" and "extent"
keyword arguments to imshow and contour.
'''
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import mlab, cm

# Default delta is large because that makes it fast, and it illustrates
# the correct registration between image and contours.
delta = 0.5

extent = (-3, 4, -4, 3)

x = np.arange(-3.0, 4.001, delta)
y = np.arange(-4.0, 3.001, delta)
X, Y = np.meshgrid(x, y)
Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = (Z1 - Z2) * 10

levels = np.arange(-2.0, 1.601, 0.4)  # Boost the upper limit to avoid truncation errors.

norm = cm.colors.Normalize(vmax=abs(Z).max(), vmin=-abs(Z).max())
cmap = cm.PRGn

plt.figure()


plt.subplot(2, 2, 1)

cset1 = plt.contourf(X, Y, Z, levels,
                 cmap=cm.get_cmap(cmap, len(levels) - 1),
                 norm=norm,
                 )
# It is not necessary, but for the colormap, we need only the
# number of levels minus 1.  To avoid discretization error, use
# either this number or a large number such as the default (256).

# If we want lines as well as filled regions, we need to call
# contour separately; don't try to change the edgecolor or edgewidth
# of the polygons in the collections returned by contourf.
# Use levels output from previous call to guarantee they are the same.
cset2 = plt.contour(X, Y, Z, cset1.levels,
                colors='k',
                hold='on')
# We don't really need dashed contour lines to indicate negative
# regions, so let's turn them off.
for c in cset2.collections:
    c.set_linestyle('solid')

# It is easier here to make a separate call to contour than
# to set up an array of colors and linewidths.
# We are making a thick green line as a zero contour.
# Specify the zero level as a tuple with only 0 in it.
cset3 = plt.contour(X, Y, Z, (0,),
                colors='g',
                linewidths=2,
                hold='on')
plt.title('Filled contours')
plt.colorbar(cset1)
#hot()


plt.subplot(2, 2, 2)

plt.imshow(Z, extent=extent, cmap=cmap, norm=norm)
v = plt.axis()
plt.contour(Z, levels, hold='on', colors='k',
        origin='upper', extent=extent)
plt.axis(v)
plt.title("Image, origin 'upper'")

plt.subplot(2, 2, 3)

plt.imshow(Z, origin='lower', extent=extent, cmap=cmap, norm=norm)
v = plt.axis()
plt.contour(Z, levels, hold='on', colors='k',
        origin='lower', extent=extent)
plt.axis(v)
plt.title("Image, origin 'lower'")

plt.subplot(2, 2, 4)

# We will use the interpolation "nearest" here to show the actual
# image pixels.
# Note that the contour lines don't extend to the edge of the box.
# This is intentional. The Z values are defined at the center of each
# image pixel (each color block on the following subplot), so the
# domain that is contoured does not extend beyond these pixel centers.
im = plt.imshow(Z, interpolation='nearest', extent=extent, cmap=cmap, norm=norm)
v = plt.axis()
plt.contour(Z, levels, hold='on', colors='k',
        origin='image', extent=extent)
plt.axis(v)
ylim = plt.get(plt.gca(), 'ylim')
plt.setp(plt.gca(), ylim=ylim[::-1])
plt.title("Image, origin from rc, reversed y-axis")
plt.colorbar(im)

plt.show()
14/1: run embedding_in_qt4.py
15/1:
from numpy import *
help (f2py)
16/1: from numpy import hello
16/2: from hello import *
16/3: ??hello
16/4: ?hello
16/5: who
16/6: ??foo
16/7: help foo
16/8: help( foo)
17/1: import asc_ran
17/2: asc_ran
17/3: asc_ran.foo()
17/4: asc_ran.asc_ran
17/5: !lst
17/6: asc_ran.asc_ran()
17/7: !lst
17/8: hist
17/9: !vi asc_ran.py
18/1: import numpy
18/2: help(setup)
18/3: from numpy.distutils.core import setup
18/4: help(setup)
18/5: ?setup
19/1: #!/home/kuang/miniconda/bin/python2.7
19/2:
from cx_Freeze import main
main()
20/1: !cat tt.py
20/2:
import jieba
ret = open("test.txt", "r").read()
seglist = jieba.cut(ret, cut_all=False)
20/3: print seglist[*]
20/4: print seglist[0..]
20/5: print seglist[0-]
20/6: print seglist[0-*]
20/7: print seglist[0-100]
20/8: seglist = jieba.cut(ret, cut_all=False)
20/9:
import json
hash = {}
for item in seglist: 
  if item in hash:
    hash[item] += 1
  else:
    hash[item] = 1
json.dump(hash,open("count.json","w"))

fd = open("count.csv","w")
fd.write("word,count\n")
for k in hash:
  fd.write("%s,%d\n"%(k.encode("utf8"),hash[k]))
20/10: !cat test.txt
21/1:
import jieba
ret = open("test.txt", "r").read()
seglist = jieba.cut(ret, cut_all=False)

import json
hash = {}
for item in seglist: 
  if item in hash:
    hash[item] += 1
  else:
    hash[item] = 1
json.dump(hash,open("count.json","w"))
#import uniout
fd = open("count.csv","w")
fd.write("word,count\n")
for k in hash:
#  fd.write("%s,%d\n"%(k.encode("big5hkscs"),hash[k]))
    fd.write("%s,%d\n"%(k.encode("utf8"),hash[k]))
21/2:
import jieba
ret = open("test.txt", "r").read()
seglist = jieba.cut(ret, cut_all=False)

import json
hash = {}
for item in seglist: 
  if item in hash:
    hash[item] += 1
  else:
    hash[item] = 1
json.dump(hash,open("count.json","w"))
#import uniout
fd = open("count.csv","w")
fd.write("word,count\n")
for k in hash:
#  fd.write("%s,%d\n"%(k.encode("big5hkscs"),hash[k]))
    fd.write("%s,%d\n"%(k.encode("utf8"),hash[k]))
21/3:
import jieba
ret = open("test.txt", "r").read()
seglist = jieba.cut(ret, cut_all=False)

import json
hash = {}
for item in seglist: 
  if item in hash:
    hash[item] += 1
  else:
    hash[item] = 1
json.dump(hash,open("count.json","w"))
#import uniout
fd = open("count.csv","w")
fd.write("word,count\n")
for k in hash:
#  fd.write("%s,%d\n"%(k.encode("big5hkscs"),hash[k]))
    fd.write("%s,%d\n"%(k.encode("utf8"),hash[k]))
21/4:
import jieba
ret = open("test.txt", "r").read()
seglist = jieba.cut(ret, cut_all=False)

import json
hash = {}
for item in seglist: 
  if item in hash:
    hash[item] += 1
  else:
    hash[item] = 1

json.dump(hash,open("count.json","w"))
#import uniout
fd = open("count.csv","w")
fd.write("word,count\n")
for k in hash:
#  fd.write("%s,%d\n"%(k.encode("big5hkscs"),hash[k]))
    fd.write("%s,%d\n"%(k.encode("utf8"),hash[k]))
21/5:
#encoding=utf-8
import jieba

sentence = "獨立音樂需要大家一起來推廣，歡迎加入我們的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word

sentence = "独立音乐需要大家一起来推广，欢迎加入我们的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word
21/6:
#encoding=utf-8
import jieba
jieba.set_dictionary('dict.txt.big')

sentence = "獨立音樂需要大家一起來推廣，歡迎加入我們的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word

sentence = "独立音乐需要大家一起来推广，欢迎加入我们的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word
21/7:
#encoding=utf-8
import jieba
jieba.set_dictionary('dict.txt.big')

sentence = "獨立音樂需要大家一起來推廣，歡迎加入我們的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word

sentence = "独立音乐需要大家一起来推广，欢迎加入我们的行列！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word
21/8:
#encoding=utf-8
import jieba
jieba.set_dictionary('dict.txt.big')

sentence = "獨立音樂需要大家一起來推廣，歡迎加入我們的行列配置圖！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word

sentence = "独立音乐需要大家一起来推广，欢迎加入我们的行列配置圖！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word
21/9:
#encoding=utf-8
import jieba
#jieba.set_dictionary('dict.txt.big')

sentence = "獨立音樂需要大家一起來推廣，歡迎加入我們的行列配置圖！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word

sentence = "独立音乐需要大家一起来推广，欢迎加入我们的行列配置圖！"
print "Input：", sentence
words = jieba.cut(sentence, cut_all=False)
print "Output 精確模式 Full Mode："
for word in words:
    print word
21/10:
import jieba
import jieba.analyse

jieba.set_dictionary('dict.txt.big')

content = open('test.txt', 'rb').read()

print "Input：", content

tags = jieba.analyse.extract_tags(content, 10)

print "Output："
print ",".join(tags)
21/11:
import jieba
import jieba.analyse

jieba.set_dictionary('dict.txt.big')

content = open('test.txt', 'rb').read()

# print "Input：", content

tags = jieba.analyse.extract_tags(content, 10)

print "Output："
print ",".join(tags)
21/12:
import jieba
import jieba.analyse

jieba.set_dictionary('dict.txt.big')

content = open('test.txt', 'rb').read()

# print "Input：", content

tags = jieba.analyse.extract_tags(content, 50)

print "Output："
print ",".join(tags)
22/1: run pt.py
22/2: !more pt.py
22/3: !vi pt.py
23/1: from PIL import Image
23/2:
im = Image.open('a_image.tif')
im.show()
23/3:
im = Image.open('a_image.tif')
im.show()
23/4:
import numpy
imarray = numpy.array(im)
imarray.shape
23/5: imarray
23/6:
im = Image.open('a_image.tif')
im.show()
23/7: imarray[2::,:::]
23/8: imarray[2::,]
23/9: imarray[2:2:,]
23/10: imarray[2:2:,0:330]
23/11: imarray[2:3,0:330]
23/12: imarray[2:3,330:330]
23/13: imarray[2:3,329:330]
23/14: imarray[,329:330]
23/15: imarray[:::,329:330]
23/16: imarray[:,329:330]
23/17: imarray[:,328:329]
23/18: imarray[:,327:328]
23/19: imarray[:,327:328]=0
23/20: imarray
23/21: Image.fromarray(imarray)
23/22: Image.fromarray(imarray).show()
23/23: imarray.save('s_inmage2.tif')
23/24: Image.fromarray(imarray).show().save('s_inmage2.tif')
23/25:
import glob, os
Image.fromarray(imarray).show().save('s_inmage2.tif')
23/26:
import glob, os
Image.fromarray(imarray).show()
imarray.save('s_inmage2.tif')
23/27:
import glob, os
Image.fromarray(imarray).show()
23/28: imarray.save('s_inmage2.tif')
23/29:
import glob, os
im2=Image.fromarray(imarray).show()
23/30: im2.save('s_inmage2.tif')
23/31:
import glob, os
im2.save('s_inmage2.tif')
23/32:
im2=Image.fromarray(imarray).show()
im2
23/33:
import glob, os
im2.save('s_inmage2.tif')
23/34: im2
23/35:
import glob, os
image.im2.save('s_image2.tif')
23/36:
import glob, os
Image.im2.save('s_image2.tif')
23/37:
import glob, os
Image.save('s_image2.tif')
23/38: help save
23/39: help show
23/40: help show()
23/41: help .show()
23/42: help Image.show()
23/43:
from PIL import Image
import glob, os
Image.save('s_image2.tif')
23/44:
from PIL import Image
import glob, os
Im2.save('s_image2.tif')
23/45: im2=Image.fromarray(imarray).rotate(45).show()
23/46:
from PIL import Image
import glob, os
im2.save('s_image2.tif')
23/47:
from PIL import Image
import glob, os
save('s_image2.tif')
23/48:
from PIL import Image
import glob, os
im2=Image.save('s_image2.tif')
23/49:
from PIL import Image
import glob, os
im2=Image.write('s_image2.tif')
23/50: ??help save
23/51: ??save
23/52:
from PIL import Image
import glob, os
im2=Image.write(-f 's_image2.tif')
23/53:
from PIL import Image
import glob, os
im2=Image.write(-f, 's_image2.tif')
23/54:
from PIL import Image
import glob, os
im2=Image.save(-f, 's_image2.tif')
23/55: im2=Image.fromarray(imarray)
23/56:
import glob, os
im2=Image.fromarray(imarray).save('s_image2.tif')
23/57:
import glob, os
im2=Image.fromarray(imarray).save('s_image2.tif')
23/58: im2.save('s_image2.tif')
23/59:
from PIL import Image
import glob, os

size = 128, 128

for infile in glob.glob("*.tif"):
    file, ext = os.path.splitext(infile)
    im = Image.open(infile)
    im.thumbnail(size)
    im.save(file + ".thumbnail", "JPEG")
23/60:
from PIL import Image
import glob, os

size = 128, 128

for infile in glob.glob("*.tif"):
    file, ext = os.path.splitext(infile)
    im = Image.open(infile)
    im.thumbnail(size)
    im.save(file + ".thumbnail", "tif")
23/61:
from PIL import Image
import glob, os

size = 128, 128

for infile in glob.glob("*.tif"):
    file, ext = os.path.splitext(infile)
    im = Image.open(infile)
    im.thumbnail(size)
    im.save(file + ".thumbnail.tif")
23/62:
im = Image.open('a_image2.tif')
im.show()
23/63:
im = Image.open('s_image2.tif')
im.show()
23/64:
im = Image.open('s_image2.tif')
im.show()
23/65:
import numpy
imarray = numpy.array(im)
imarray.shape
23/66: imarray
23/67:
im = Image.open('s_image2.tif')
im.show()
23/68: import cv2
24/1:
import cv2
import numpy as np
cap=Image.fromarray(imarray).show()
24/2:
from PIL import Image
import cv2
import numpy as np
cap=Image.fromarray(imarray).show()
24/3:
from PIL import Image
cap = Image.open('s_image2.tif')
im.show()
import cv2
import numpy as np
24/4:
from PIL import Image
cap = Image.open('s_image2.tif').show()
import cv2
import numpy as np
24/5:
from PIL import Image
cap = Image.open('s_image2.tif').show()
import cv2
import numpy as np
while(1):

 # Capture Video from Camera
 _, frame = cap.read()

 # Convert BGR to HSV
 hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

 # define range of blue color in HSV
 lower = np.array([0,0,0])
 upper = np.array([255,70,70])

 # Threshold the HSV image to get only blue colors
 mask_black = cv2.inRange(hsv, lower, upper)
 _, contours, _ = cv2.findContours(mask_black, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
 for cnt in contours: 
   x,y,w,h = cv2.boundingRect(cnt)
   cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
   # cv2.rectangle(frame,(x,y),((x+w),(y-h)),(255,0,0),2)
   # cv2.rectangle(frame,(x+(w/2),y+(h/2)-10),(x+(w/2),y+(h/2)+10),(255,0,0),2)
 # contours, hierarchy = cv2.findContours(Anti_White,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
 cv2.imshow('frame',frame)
 cv2.imshow('mask_black)',mask_black)
 k = cv2.waitKey(5) & 0xFF
 if k == 27:
  break

cv2.destroyAllWindows()
34/1:
from PIL import Image
cap = Image.open('s_image2.tif').show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    _, frame = cap.read()

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/2:
from PIL import Image
cap = Image.open('s_image2.tif').show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    frame = cap

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/3:
from PIL import Image
cap = Image.open('s_image2.tif').show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    frame = np.array(cap)

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/4:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    frame = np.array(cap)[,,,255]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/5:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    frame = np.array(cap)[:,:,:,255]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/6:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,:,255]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/7:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    cv2.imshow('frame',frame)
    cv2.imshow('mask_blue)',mask_blue)
    cv2.imshow('mask_green',mask_green)
    cv2.imshow('mask_red',mask_red)

    cv2.imshow('res_blue',res_blue)
    cv2.imshow('res_green',res_green)
    cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/8:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    show('frame',Image.fromarray(frame))
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/9:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    show(Image.fromarray(frame))
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/10:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    Image.show(Image.fromarray(frame))
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/11: ??show
34/12: ??Image.show()
34/13:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    Image.fromarray(frame).show()
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/14:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    Image.fromarray(frame).show()
    Image.fromarray(mask_blue).show()
    Image.fromarray(mask_green).show()
    Image.fromarray(mask_red).show()
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/15:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    Image.fromarray(frame).show()
    Image.fromarray(mask_blue).show()
    Image.fromarray(mask_green).show()
    Image.fromarray(mask_red).show()
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/16:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
while(1):

    # Capture Video from Camera
    im = np.array(cap)
    frame = im[:,:,0:3]

    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # define range of blue color in HSV
    lower_blue = np.array([110,50,50])
    upper_blue = np.array([130,255,255])

    # define range of green color in HSV 
    lower_green = np.array([50,100,100])
    upper_green = np.array([70,255,255])

    # define range of red color in HSV 
    lower_red = np.array([-10,100,100])
    upper_red = np.array([10,255,255])

    # Threshold the HSV image to get only blue colors
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    # Threshold the HSV image to get only green colors
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    # Threshold the HSV image to get only red colors   
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image

    res_blue = cv2.bitwise_and(frame,frame, mask= mask_blue)
    res_green = cv2.bitwise_and(frame,frame, mask= mask_green)
    res_red = cv2.bitwise_and(frame,frame, mask= mask_red)
    Image.fromarray(frame).show()
    #Image.fromarray(mask_blue).show()
    #Image.fromarray(mask_green).show()
    #Image.fromarray(mask_red).show()
    Image.fromarray(res_red).show()
    #cv2.imshow('mask_blue)',mask_blue)
    #cv2.imshow('mask_green',mask_green)
    #cv2.imshow('mask_red',mask_red)

    #cv2.imshow('res_blue',res_blue)
    #cv2.imshow('res_green',res_green)
    #cv2.imshow('res_red',res_red)
    k = cv2.waitKey(5) & 0xFF
    if k == 27:
        break

cv2.destroyAllWindows()
34/17:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv
34/18:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv[:,:,0]
34/19:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=hsv[:,:,0]
from itertools import groupby
34/20:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=hsv[:,:,0]
from itertools import groupby
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
34/21:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
b=hsv[:,:,0]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
34/22:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv[:,:,0]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
34/23:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv[:,:,0]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
34/24:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
b=hsv[:,:,0]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
b
34/25:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
b=[hsv[:,:,0]]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
b
34/26:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
array.size(hsv[:,:,0])
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/27:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
(hsv[:,:,0]).shape
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/28:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV).shape
(hsv[:,:,0])
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/29:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV).shape
hsv[:,:,0]
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/30:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv[:,:,0].shape
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/31:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv.shape
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/32:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
im.shape
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
hsv.shape
from itertools import groupby
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/33:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
im.shape
#from itertools import groupby
#a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/34:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
im.shape
from itertools import groupby
a = [hsv[x,y,0] for x=range(820), y=range(918)]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/35:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
im.shape
from itertools import groupby
a = [hsv[x,y,0] for x in range(820), y in range(918)]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/36:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
im.shape
from itertools import groupby
a(x+y) = [hsv[x,y,0] for x in range(820), y in range(918)]
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/37:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,F)
#from itertools import groupby
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/38:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#from itertools import groupby
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
#[len(list(group)) for key, group in groupby(a)]
34/39:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
from itertools import groupby
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
[len(list(group)) for key, group in groupby(a)]
34/40:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
34/41:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
print(counter.most_common(10))
34/42:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
print(counter.most_common(20))
34/43:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
counter.most_common.shape
34/44:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
counter.most_common
34/45:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
import matplotlib.pyplot as plt
import plotly.plotly as py
#counter.most_common
34/46:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py
plt.hist(a)
34/47:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py
plt.hist(a)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/48:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(x, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/49:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/50:
from PIL import Image
import numpy
im = Image.open('s_image2.tif')
imarray = numpy.array(im)
imarray.shape
34/51:
from PIL import Image
import numpy
im = Image.open('s_image3.tif')
imarray = numpy.array(im)
imarray.shape
34/52:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*536,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/53:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2
G = cv2.pyrDown(cap)
cap = cv2.pyrUp(G)    
import numpy as np
im = np.array(cap)
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*536,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/54:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im)
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*536,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/55:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im)
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],820*918,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/56:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
a=np.reshape(hsv[:,:,0],len(hsv[:,:,0]),'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/57:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=len(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/58:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/59:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/60:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
34/61:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
print mn
34/62:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
print mn[1]
34/63:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        a=im[i,j,0:3]
        if stdev(a) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/64:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        a=im[i,j,0:3]
        if np.stdev(a) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/65:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        a=im[i,j,0:3]
        if statistics.stdev(a) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/66:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        a=im[i,j,0:3]
        if statistics.stdev(a) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/67:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        a=im[i,j,0:3]
        if statistics.stdev(a) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/68:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/69:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/70:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/71:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 5 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/72:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 10 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/73:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 30 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(0,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/74:
from PIL import Image
cap = Image.open('s_image3.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 30 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(1,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/75:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 30 :
            im[i,j,0:3]=[0,0,0]
            
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(1,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/76:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 30 :
            frame[i,j,0:3]=[0,0,0]
            
Image.fromarray(frame).show()
break
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py

bins = np.linspace(1,179, 90)

plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
34/77:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        if statistics.stdev(im[i,j,0:3]) < 20 :
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/78:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(tmpRGB, cv2.COLOR_BGR2HSV)        
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/79:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
print tmpRGB=im[2,2,0:3]
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(tmpRGB, cv2.COLOR_BGR2HSV)        
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/80:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
print im[2,2,0:3]
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(tmpRGB, cv2.COLOR_BGR2HSV)        
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/81:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
tmpRGB=im[2,2,0:3]
print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(tmpRGB, cv2.COLOR_BGR2HSV)        
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/82:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
tmpRGB=im[2,2,0:3]
print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(im[i,j,0:3], cv2.COLOR_BGR2HSV)    
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/83:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
tmpRGB=im[2,2,0:3]
print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(im[i,j,0:4], cv2.COLOR_BGR2HSV)    
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/84:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
mn=frame.shape
tmpRGB=im[2,2,0:3]
print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = cv2.cvtColor(im[i,j,0:2], cv2.COLOR_BGR2HSV)    
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/85:
import cv2
cv2.cvtColor([248 235 209], cv2.COLOR_BGR2HSV)
34/86:
import cv2
cv2.cvtColor([248, 235, 209], cv2.COLOR_BGR2HSV)
34/87:
import cv2
cv2.cvtColor((248, 235, 209), cv2.COLOR_BGR2HSV)
34/88:
import cv2
a=[248, 235, 209]
cv2.cvtColor(a, cv2.COLOR_BGR2HSV)
34/89:
import cv2, numpy
a=array[248, 235, 209]
cv2.cvtColor(a, cv2.COLOR_BGR2HSV)
34/90:
import cv2, numpy
a=array([248, 235, 209])
cv2.cvtColor(a, cv2.COLOR_BGR2HSV)
34/91:
import cv2, numpy
a=[248, 235, 209]
b=array(a)
cv2.cvtColor(b, cv2.COLOR_BGR2HSV)
34/92:
import cv2, numpy
a=[248, 235, 209]
b=numpy.array(a)
cv2.cvtColor(b, cv2.COLOR_BGR2HSV)
34/93:
import cv2, numpy
a=[248, 235, 209,255]
b=numpy.array(a)
cv2.cvtColor(b, cv2.COLOR_BGR2HSV)
34/94:
import cv2, numpy
a=[248, 235, 209,255]
b=numpy.array(a)
print b
cv2.cvtColor(b, cv2.COLOR_BGR2HSV)
34/95:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/96:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/97:
import cv2, numpy
a=[248, 235, 209,255]
b=numpy.array(a)
print b
cv2.cvtColor(b, cv2.COLOR_BGR2HSV)
34/98:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 10 and tmphsv[2] > 150:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/99:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 20 or tmphsv[2] > 150:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/100:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 15 or tmphsv[2] > 200:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/101:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 10 and abs(tmphsv[0]-85)< 10:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/102:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 10 :#and abs(tmphsv[0]-85)< 10:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/103:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
mn=frame.shape
tmpRGB=im[2,2,0:3]
#print tmpRGB
for i in range(mn[0]):
    for j in range(mn[1]):
        tmpRGB=im[i,j,0:3]
        tmphsv = hsv[i,j,0:3]   
        if statistics.stdev(tmpRGB) < 15 :#and abs(tmphsv[0]-85)< 10:
            frame[i,j,0:3]=[255,255,255]
            
Image.fromarray(frame).show()
34/104:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics, pp

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
ppservers=()
job_server = pp.Server(ppservers=ppservers)
print "Starting pp with", job_server.get_ncpus(), "workers"
job1 = job_server.submit(maskrgb, (frame,), ("math",))
result = job1()
Image.fromarray(frame).show()
36/1: run mskrgb.py
36/2: !vi mskrgb.py
37/1:
from PIL import Image
cap = Image.open('s_image2.tif') #.show()
import cv2, statistics, pp

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(1,179, 90)
plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')

c
40/1: run test_int.py
40/2: ??
40/3: ?
40/4: help
40/5: ?
40/6: %
40/7: %?
40/8: %%
40/9: interval??
40/10: a
40/11: interval(a)
40/12: interval.empty(a)
40/13: interval.separation(a)
40/14: help
40/15: help()
37/2:
from PIL import Image
cap = Image.open('lu_2.tiff') #.show()
import cv2, statistics, pp

import numpy as np
im = np.array(cap)
#G = cv2.pyrDown(im) #http://docs.opencv.org/master/dc/dff/tutorial_py_pyramids.html
#im = cv2.pyrUp(G)    
frame = im[:,:,0:3]
hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
lenhsv=np.size(hsv[:,:,0])
#print lenhsv
a=np.reshape(hsv[:,:,0],lenhsv,'F')
#http://stackoverflow.com/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list
import collections
counter=collections.Counter(a)
#counter.most_common
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(1,179, 90)
plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()

plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')

c
41/1: a=[235,146,94]
41/2: b=[239,229,204]
41/3: c=a-b
41/4: c=a[]-b[]
41/5: c=a[:,:,:]-b[:,:,:]
41/6: c[:,:,:]=a[:,:,:]-b[:,:,:]
41/7: c=map(operator.sub, a, b)
41/8: zip(a,b)
41/9: c=[x-y for x,y in zip(a,b)]
41/10: c
41/11: abs(c)
41/12: c=[abs(x-y) for x,y in zip(a,b)]
41/13: c
41/14: sum(c)_
41/15: sum(c)
42/1:  sum(abs(x-y) for x,y in zip(orange,rgb))
42/2: orange=[235,146,94]
42/3: rgb=[235,146,94]
42/4:  sum(abs(x-y) for x,y in zip(orange,rgb))
42/5: rgb=[230,140,90]
42/6:  sum(abs(x-y) for x,y in zip(orange,rgb))
42/7: abs(x-y) for x,y in zip(orange,rgb)
42/8: abs(x-y), for x,y in zip(orange,rgb)
42/9: (abs(x-y) for x,y in zip(orange,rgb))
42/10: [abs(x-y) for x,y in zip(orange,rgb)]
42/11: sum([abs(x-y) for x,y in zip(orange,rgb)])
42/12: a=[abs(x-y) for x,y in zip(orange,rgb)]
42/13: a
42/14:
if[abs(x-y) for x,y in zip(orange,rgb)]<5:
    print 'true'
else
42/15:
if[abs(x-y) for x,y in zip(orange,rgb)]<5:
    print 'true'
else:
    print 'false'
42/16: rgb=[235,146,94]
42/17:
if[abs(x-y) for x,y in zip(orange,rgb)]<5:
    print 'true'
else:
    print 'false'
42/18: a=[abs(x-y) for x,y in zip(orange,rgb)]
42/19: A
42/20: a
42/21: if a=0:
42/22:
if a<[10,10,10]:
    print 'true'
42/23: a=[100,-1,-1]
42/24:
if a<[10,10,10]:
    print 'true'
42/25: b=[10,10,10]
42/26:
if a<b:
    print 'true'
42/27: a=[100,20,11]
42/28:
if a<b:
    print 'true'
42/29: a,b
42/30:
if a>b:
    print 'true'
42/31: a=[1,20,11]
42/32:
if a>b:
    print 'true'
43/1: from math import sqrt
43/2: from joblib import Parallel, delayed
43/3: Parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))
44/1: from PIL import Image
44/2: import cv2, statistics, pp
44/3: import numpy as np
44/4: cap = Image.open('lu_1.tiff') #.show()
44/5: im = np.array(cap)
44/6: orange=[235,146,94]
44/7: white=[255,255,255]
44/8: frame = im[:,:,0:3]
44/9: mn=frame.shape
44/10: mn
44/11: l=[10,10,10]
44/12:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=frame[i,j,0:3]
        del=[abs(x-y) for x,y in zip(orange,rgb)]
44/13: rgb
44/14:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=frame[i,j,0:3]
        [abs(x-y) for x,y in zip(orange,rgb)]
44/15:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=frame[i,j,0:3]
        for x,y in zip(orange,rgb):
            del=abs(x-y)
44/16:
for i in range(10):
    for j in range(10]):
        rgb=frame[i,j,0:3]
        print [abs(x-y) for x,y in zip(orange,rgb)]
44/17:
for i in range(10):
    for j in range(10):
        rgb=frame[i,j,0:3]
        print [abs(x-y) for x,y in zip(orange,rgb)]
44/18:
for i in range(10):
    for j in range(10):
        rgb=frame[i,j,0:3]
        if [abs(x-y) for x,y in zip(orange,rgb)] < l:
            print 'true'
44/19: l=[30,10,10]
44/20:
for i in range(10):
    for j in range(10):
        rgb=frame[i,j,0:3]
        if [abs(x-y) for x,y in zip(orange,rgb)] < l:
            print 'true'
44/21:
for i in range(10):
    for j in range(10):
        rgb=frame[i,j,0:3]
        if [abs(x-y) for x,y in zip(orange,rgb)] < l:
            print 'true'
44/22: !pwd
44/23: cd python-kmeans-dominant-colors/
44/24: !pwd
44/25: run km -i ../legend.tiff -c 10
45/1: run km -i ../leg_1.tiff -c 10
45/2: clt
45/3: bar
45/4: image
45/5: bar.shape
45/6: print bar[i,0,0:3] for i in range[bar.shape[0])
45/7: print bar[0,0,0:3]
45/8: print bar[1,0,0:3]
45/9: print bar[50,0,0:3]
45/10: print bar[49,0,0:3]
45/11: print bar[0:50:5,0,0:3]
45/12: print bar[0,0:300:30,0:3]
45/13: print bar[0,0:300,0:3]
45/14: print bar[0,0:300:4,0:3]
45/15: print bar[0,0:300:4,0:3]
45/16: image.shape
45/17: fit
45/18: ?fit
45/19: ??fit
45/20: ??clt.fit
45/21: image2 = cv2.imread(args["image"])
45/22: aa=image2.shape
45/23: aa
45/24: image3 = image.reshape((aa[0], aa[1], 3))
45/25: Image.fromarray(image3).save('/autofs/sino4/kuang/leg_3.tiff')
45/26: from PIL import Image
45/27: Image.fromarray(image3).save('/autofs/sino4/kuang/leg_3.tiff')
45/28: !cp ../leg_2.tiff /autofs/sino4/kuang/
45/29: !history
45/30: his
45/31: history
45/32: !cp ../leg_1.tiff /autofs/sino4/kuang/
45/33: hist.shape
45/34: hist
45/35: clt.shape
45/36: clt.cluster_centers_
45/37: run km -i ../leg_1.tiff -c 12
45/38: clt.cluster_centers_
45/39: print i for i in range(10)
45/40: print i in range(10)
45/41: print i for i in range(10)
45/42: print (i for i in range(10))
45/43:
for i in range(10):
    print i
45/44:
for i in range(0:10):
    print i
45/45:
for i in range(0,10):
    print i
45/46:
for i in range(0,10):
    if i eq 3:
        print i
45/47:
for i in range(0,10):
    if i == 3:
        print i
45/48: orange=[235,146,94]
45/49: hsv_o=cv2.cvtColor(orange,cv2.COLOR_BGR2HSV)
45/50: ??cv2.cvtColor
45/51: orange=([235,146,94])
45/52: hsv_o=cv2.cvtColor(orange,cv2.COLOR_BGR2HSV)
45/53: orange=[[235,146,94]]
45/54: orange
45/55: hsv_o=cv2.cvtColor(orange,cv2.COLOR_BGR2HSV)
45/56: np.array(orange)
45/57: import numpy as np
45/58: np.array(orange)
45/59: hsv_o=cv2.cvtColor(np.array(orange),cv2.COLOR_BGR2HSV)
45/60: ??cvtColor
45/61: ??cv2.cvtColor
45/62: ?cv2.cvtColor
45/63: orange=[235 146 94]
45/64: orange=[]
45/65: orange[0]=235
45/66: orange=[0:3]
45/67: orange[0:3]=[235, 146, 94]
45/68: orange
45/69: ??orange
45/70: orange=np.array([235, 146, 94])
45/71: ??orange
45/72: hsv_o=cv2.cvtColor(orange,cv2.COLOR_BGR2HSV)
45/73: ??image
45/74: ?image
45/75: hsv_o=cv2.cvtColor(image,cv2.COLOR_BGR2HSV)
46/1: history
46/2: run km -i ../leg_1.tiff -c 12
46/3: !cd python-kmeans-dominant-colors/
46/4: run km -i ../leg_1.tiff -c 12
46/5: !pwd
46/6: cd python-kmeans-dominant-colors/
46/7: run km -i ../leg_1.tiff -c 12
46/8: ??clt.fit
46/9: !grep fit km.py
46/10: kmeans.labels_
46/11: kmeans.labels
46/12: kmeans = KMeans(n_clusters=12, random_state=0).fit(image)
46/13: kmeans.shape
46/14: kmeans.labels_.shape
46/15: kmeans.labels_[1]
46/16: kmeans.labels_[10]
46/17: kmeans.labels_[100]
46/18: kmeans.labels_[1000]
46/19: kmeans.labels_[10000]
46/20: kmeans.labels_[100000]
46/21: aa
46/22: run km -i ../lu_1.tiff -c 14
46/23: print bar[0,0:300:4,0:3]
46/24: clt.cluster_centers_
46/25: kmeans = KMeans(n_clusters=12, random_state=0).fit(image)
47/1:
center=array([[ 254.99995845,  254.99999535,  254.99999429],
       [ 160.53612799,  189.76168255,  158.24972137],
       [ 252.35662529,  240.20074325,  213.59678933],
       [ 231.82257014,  135.49018606,   99.64456562],
       [ 224.28424382,  196.65315634,  188.84180291],
       [  99.43564318,  160.79184258,  187.17751869],
       [ 246.17260466,  197.8532722 ,   51.48907729],
       [ 100.98888431,  152.82392011,  115.5320874 ],
       [ 212.47539072,  185.00097071,  145.58538411],
       [ 139.30267003,  118.71212194,   84.57981817],
       [ 249.13349374,  234.36485683,  204.63120998],
       [ 168.8551857 ,  151.90845265,  123.20945563],
       [ 183.22450566,  212.14537998,  171.82284266],
       [ 184.2339442 ,  196.54325766,   88.58472374]])
47/2:
center=([[ 254.99995845,  254.99999535,  254.99999429],
       [ 160.53612799,  189.76168255,  158.24972137],
       [ 252.35662529,  240.20074325,  213.59678933],
       [ 231.82257014,  135.49018606,   99.64456562],
       [ 224.28424382,  196.65315634,  188.84180291],
       [  99.43564318,  160.79184258,  187.17751869],
       [ 246.17260466,  197.8532722 ,   51.48907729],
       [ 100.98888431,  152.82392011,  115.5320874 ],
       [ 212.47539072,  185.00097071,  145.58538411],
       [ 139.30267003,  118.71212194,   84.57981817],
       [ 249.13349374,  234.36485683,  204.63120998],
       [ 168.8551857 ,  151.90845265,  123.20945563],
       [ 183.22450566,  212.14537998,  171.82284266],
       [ 184.2339442 ,  196.54325766,   88.58472374]])
47/3: center
47/4: center[0]
47/5: int(center[0])
47/6: import numpy as np
47/7: np.int(center[0])
47/8: a=[round(r) for r in center]
47/9: a=[int(r) for r in center]
47/10: !top
46/26: kmeans.label_.shape
46/27: image2=kmeans.label_
46/28: kmeans.shape
46/29: kmeans
46/30: history
46/31: kmeans.labels_.shape
46/32: mn=np.array(Image.open('../lu_1.tiff')).shape
46/33: import numpy as np
46/34: mn=np.array(Image.open('../lu_1.tiff')).shape
46/35: from PIL import Image
46/36: mn=np.array(Image.open('../lu_1.tiff')).shape
46/37: mn
46/38: catelog=np.reshape(kmeans.labels_,mn[0],mn[1],'F')
46/39:
catelog=np.reshape(kmeans.labels_,(-1,mn[0])
)
46/40: catelog=np.reshape(kmeans.labels_,(-1,mn[0]))
46/41: catelog
46/42: catelog.shape
46/43: catelog.size
46/44: catelog=np.reshape(kmeans.labels_,(-1,mn[1]))
46/45: catelog.shape
46/46: catelog
46/47:
centers=[[ 254.99995845,  254.99999535,  254.99999429],
       [ 160.53612799,  189.76168255,  158.24972137],
       [ 252.35662529,  240.20074325,  213.59678933],
       [ 231.82257014,  135.49018606,   99.64456562],
       [ 224.28424382,  196.65315634,  188.84180291],
       [  99.43564318,  160.79184258,  187.17751869],
       [ 246.17260466,  197.8532722 ,   51.48907729],
       [ 100.98888431,  152.82392011,  115.5320874 ],
       [ 212.47539072,  185.00097071,  145.58538411],
       [ 139.30267003,  118.71212194,   84.57981817],
       [ 249.13349374,  234.36485683,  204.63120998],
       [ 168.8551857 ,  151.90845265,  123.20945563],
       [ 183.22450566,  212.14537998,  171.82284266],
       [ 184.2339442 ,  196.54325766,   88.58472374]]
46/48: centers.size
46/49: centers.shape
46/50: centers
46/51: centers[0]
46/52: centers[0].shape
46/53: a = numpy.array(centers)
46/54: a = np.array(centers)
46/55: a.shape
46/56: a[catelog[155,10]]
46/57: round(160.53612799)
46/58: int(round(160.53612799))
46/59:
for i in a.shape[0]:
    for j in a.shape[1]:
        x[i,j]=int(round(a[i,j]))
46/60: x=a
46/61:
for i in a.shape[0]:
    for j in a.shape[1]:
        x[i,j]=int(round(a[i,j]))
46/62:
for i in a.shape[0]:
    for j in a.shape[1]:
        x[i,j]=round(a[i,j])
46/63: a.shape
46/64:
for i in range(14):
    for j in range(3):
        x[i,j]=round(a[i,j])
46/65:
for i in range(14):
    for j in range(3):
        x[i,j]=int(round(a[i,j]))
46/66: x
46/67: cap.shape
46/68: im.shape
46/69: from PIL import Image
46/70: cap = Image.open('../lu_1.tiff')
46/71: im = np.array(cap)
46/72: im.shape
46/73: catelog.shape
46/74: mn=im.shape
46/75:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=x[catelog[i,j],0:3]
        im[i,j,0:3]=rgb
46/76: Image.fromarray(frame).save('lu_3.tiff')
46/77: Image.fromarray(im).save('lu_3.tiff')
46/78: clt.cluster_centers_
46/79: x
46/80: ?clt.fit
46/81: rgb_to_name(x[0,0:3])
46/82: import webcolors
46/83: rgb_to_name(x[0,0:3])
46/84:
def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
[200~def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name
46/85:
def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
[200~def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]

def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name
46/86:
def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]
def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name
46/87: closest_colour(x[1,0:3])
46/88: closest_colour(a[1,0:3])
46/89: for i in range(14):closest_colour(a[1,0:3])
46/90:
for i in range(14):
    print i, closest_colour(a[i,0:3])
46/91: image = cv2.imread(args["../lu1957.tiff"])
46/92: !pwd
46/93: image = cv2.imread("../lu1957.tiff")
46/94: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
46/95: image = image.reshape((image.shape[0] * image.shape[1], 3))
46/96: clt
46/97: kmeans=clt.fit(image)
46/98: im = cv2.imread("../lu1957.tiff")
46/99: im.shape
46/100: mn=im.shape
46/101: x = np.array(clt.cluster_centers_)
46/102: category=np.reshape(kmeans.labels_,(-1,mn[0]))
46/103:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/104: category.shape
46/105: x.shape
46/106: category=np.reshape(kmeans.labels_,(-1,mn[1]))
46/107:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/108: Image.fromarray(im).save('lu_3.tiff')
46/109: im[1,1,0:3]
46/110: im[100,100,100:3]
46/111: im[100,100,0:3]
46/112: im[1000,1000,0:3]
46/113: im[1000,2000,0:3]
46/114: category[1000,2000]
46/115: x[1,0:3]
46/116: image = cv2.imread("../lu1957.tiff")
46/117: image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
46/118: image = image.reshape((image.shape[0] * image.shape[1], 3))
46/119: kmeans=clt.fit(image)
46/120: image = cv2.imread("../lu_1.tiff")
46/121: image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
46/122: image = image.reshape((image.shape[0] * image.shape[1], 3))
46/123: kmeans=clt.fit(image)
46/124: category=np.reshape(kmeans.labels_,(-1,mn[1]))
46/125:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/126: x = np.array(clt.cluster_centers_)
46/127: x = cv2.cvtColor(x, cv2.COLOR_HSV2BGR)
46/128: a = cv2.cvtColor(x, cv2.COLOR_HSV2BGR)
46/129: x.shape
46/130: cv2.cvtColor(x[0,0:3], cv2.COLOR_HSV2BGR)
46/131: cv2.cvtColor(x[0,0:3], cv2.COLOR HSV2BGR)
46/132: cv2.cvtColor(x[0,0:3], cv2.COLOR.HSV2BGR)
46/133: cv2.cvtColor(x[0,0:3], cv2.COLOR_HSV2BGR)
46/134: x
46/135: cv2.cvtColor([0,0,3], cv2.COLOR_HSV2BGR)
46/136: cv2.cvtColor(([0,0,3]), cv2.COLOR_HSV2BGR)
46/137: cv2.cvtColor(np.array([0,0,3]), cv2.COLOR_HSV2BGR)
46/138:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/139: im_rgb=cv2.cvtColor(im, cv2.COLOR_HSV2BGR)
46/140: Image.fromarray(im_rgb).save('lu_4.tiff')
46/141: history
46/142:
x = np.array(clt.cluster_centers_)
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
im_rgb=cv2.cvtColor(im, cv2.COLOR_HSV2BGR)
Image.fromarray(im_rgb).save('lu_4.tiff')
46/143: image = cv2.imread("../lu1957.tiff")
46/144:
image = image.reshape((image.shape[0] * image.shape[1], 3))
kmeans=clt.fit(image)
46/145:
image = image.reshape((image.shape[0] * image.shape[1], 3))
kmeans=clt.fit(image)
46/146: image = cv2.imread("../lu_1.tiff")
46/147:
image = image.reshape((image.shape[0] * image.shape[1], 3))
kmeans=clt.fit(image)
46/148: image = cv2.imread("../lu_1.tiff")
46/149:
image = image.reshape((image.shape[0] * image.shape[1], 3))
kmeans=clt.fit(image)
46/150: n_jobs
46/151: clt
46/152:
clt=KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,
    n_clusters=14, n_init=10, n_jobs=-1, precompute_distances='auto',
    random_state=None, tol=0.0001, verbose=0)
46/153: history
46/154: x = np.array(clt.cluster_centers_)
46/155: kmeans=clt.fit(image)
46/156: x = np.array(clt.cluster_centers_)
46/157: clt
46/158: category=np.reshape(kmeans.labels_,(-1,mn[1]))
46/159:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/160: Image.fromarray(im).save(args["lu_4.tiff"])
46/161: Image.fromarray(im).save("lu_4.tiff")
46/162: image = cv2.imread("../lu_1.tiff")
46/163: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
46/164: image = image.reshape((mn[0] * mn[1], 3))
46/165: kmeans=clt.fit(image)
46/166:
category=np.reshape(kmeans.labels_,(-1,mn[1]))
x = np.array(clt.cluster_centers_)
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
46/167: Image.fromarray(im).save("lu_4.tiff")
46/168:
for i in range(14):
    print i, closest_colour(x[i,0:3])
46/169: x
46/170:
for i in range(14):
    for j in range(3):
        a[i,j]=int(round(x[i,j]))
46/171: a
46/172:
for k in range(1,14):
    for i in range(mn[0]):
        for j in range(mn[1]):
            if category[i,j] == k:
                im[i,j,0:3]=x[category[i,j],0:3]
            else:    
                im[i,j,0:3]=x[0,0:3]
46/173:
for k in range(1,14):
    for i in range(mn[0]):
        for j in range(mn[1]):
            if category[i,j] == k:
                im[i,j,0:3]=x[category[i,j],0:3]
            else:    
                im[i,j,0:3]=x[0,0:3]
    im.save(str(k)+closest_colour(x[k,0:3])+".mbnail.tif")
46/174: import glob, os
46/175: k
46/176: im.save(str(k)+closest_colour(x[k,0:3])+".mbnail.tif")
46/177: Image.fromarray(im).save(str(k)+closest_colour(x[k,0:3])+".tif")
46/178:
for k in range(2,14):
    for i in range(mn[0]):
        for j in range(mn[1]):
            if category[i,j] == k:
                im[i,j,0:3]=x[category[i,j],0:3]
            else:    
                im[i,j,0:3]=x[0,0:3]
    Image.fromarray(im).save(str(k)+closest_colour(x[k,0:3])+".tif")
46/179: k
49/1: from PIL import Image
49/2: cap = Image.open('lu_4.tiff')
49/3: im = np.array(cap)
49/4: import numpy as np
49/5: im = np.array(cap)
49/6:
center=([[ 254.99995845,  254.99999535,  254.99999429],
       [ 160.53612799,  189.76168255,  158.24972137],
       [ 252.35662529,  240.20074325,  213.59678933],
       [ 231.82257014,  135.49018606,   99.64456562],
       [ 224.28424382,  196.65315634,  188.84180291],
       [  99.43564318,  160.79184258,  187.17751869],
       [ 246.17260466,  197.8532722 ,   51.48907729],
       [ 100.98888431,  152.82392011,  115.5320874 ],
       [ 212.47539072,  185.00097071,  145.58538411],
       [ 139.30267003,  118.71212194,   84.57981817],
       [ 249.13349374,  234.36485683,  204.63120998],
       [ 168.8551857 ,  151.90845265,  123.20945563],
       [ 183.22450566,  212.14537998,  171.82284266],
       [ 184.2339442 ,  196.54325766,   88.58472374]])
49/7: import webcolors
49/8:
def closest_colour(requested_colour):
        min_colours = {}
        for key, name in webcolors.css3_hex_to_names.items():
                r_c, g_c, b_c = webcolors.hex_to_rgb(key)
                rd = (r_c - requested_colour[0]) ** 2
                gd = (g_c - requested_colour[1]) ** 2
                bd = (b_c - requested_colour[2]) ** 2
                min_colours[(rd + gd + bd)] = name
            return min_colours[min(min_colours.keys())]
49/9:
def get_colour_name(requested_colour):
        try:
                closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
            except ValueError:
49/10:     return actual_name, closest_name
49/11: actual_name, closest_name = get_colour_name(requested_colour)
49/12: print "Actual colour name:", actual_name, ", closest colour name:", closest_name
49/13:
def closest_colour(requested_colour):
        min_colours = {}
        for key, name in webcolors.css3_hex_to_names.items():
                r_c, g_c, b_c = webcolors.hex_to_rgb(key)
                rd = (r_c - requested_colour[0]) ** 2
                gd = (g_c - requested_colour[1]) ** 2
                bd = (b_c - requested_colour[2]) ** 2
                min_colours[(rd + gd + bd)] = name
            return min_colours[min(min_colours.keys())]
49/14:
def get_colour_name(requested_colour):
        try:
                closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
            except ValueError:
49/15:         closest_name = closest_colour(requested_colour)
49/16:         actual_name = None
49/17:     return actual_name, closest_name
49/18: requested_colour = (119, 172, 152)
49/19: actual_name, closest_name = get_colour_name(requested_colour)
49/20: print "Actual colour name:", actual_name, ", closest colour name:", closest_name
49/21:
def closest_colour(requested_colour):
        min_colours = {}
        for key, name in webcolors.css3_hex_to_names.items():
                r_c, g_c, b_c = webcolors.hex_to_rgb(key)
                rd = (r_c - requested_colour[0]) ** 2
                gd = (g_c - requested_colour[1]) ** 2
                bd = (b_c - requested_colour[2]) ** 2
                min_colours[(rd + gd + bd)] = name
        return min_colours[min(min_colours.keys())]
49/22:
def get_colour_name(requested_colour):
        try:
                closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
            except ValueError:
49/23:         closest_name = closest_colour(requested_colour)
49/24:         actual_name = None
49/25:
def get_colour_name(requested_colour):
        try:
                closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
        except ValueError:
            closest_name = closest_colour(requested_colour)
            actual_name = None
        return actual_name, closest_name
49/26: center.shape
49/27: a=np.array(center)
49/28: a.shape
49/29:
for i in range(14):
        print i, closest_colour(a[i,0:3])
49/30: im[100,100,0:3]
49/31: lu=im
49/32: mn=im.shape
49/33:
for i in range(mn[0]):
    for j in range(mn[1]):
        for k in range[14]:
            c=i
49/34:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),a[i,0:3])
49/35: cols
49/36:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),a[i,0:3])
        l.append(list(cols))
49/37: l=[np.zero]
49/38: l=[zero()]
49/39: l=[]
49/40:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),a[i,0:3])
        l.append(list(cols))
49/41: l
49/42:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),int(a[i,0:3]))
        l.append(list(cols))
49/43:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),([int(s) for s in a[i,0:3])))
        l.append(list(cols))
49/44:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),[int(s) for s in a[i,0:3]]))
        l.append(list(cols))
49/45:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),[int(s) for s in a[i,0:3]])
        l.append(list(cols))
49/46: l
49/47: l=[]
49/48:
for i in range(14):
        cols=(i, closest_colour(a[i,0:3]),[int(s) for s in a[i,0:3]])
        l.append(list(cols))
49/49: l
49/50: cols=l
49/51: cols[13]
49/52: cols[13](1)
49/53: cols.shape
49/54: print tuple(cols)
49/55: print tuple(cols[1])
49/56: print tuple(cols[1]).shape
49/57: cols=np.array(cols)
49/58: cols=np.array(cols,14,3)
49/59: cols=np.array(cols)
49/60: clos
49/61: cols
49/62: l=np.array(cols[0])
49/63: l=[]
49/64: cols[1][1]
49/65: if cols[1][1] =u'darkseagreen':
49/66: if cols[1][1] ='darkseagreen':
49/67:
if cols[1][1] ==u'darkseagreen':
    print 'true'
49/68:
if cols[0][1] ==u'darkseagreen':
    print 'true'
49/69:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=im[i,j,0:3]
        lu=0
        ncol=closest_colour(rgb)
        for k in range(14):
            if cols[k][1]=ncol:
49/70:
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=im[i,j,0:3]
        l=0
        ncol=closest_colour(rgb)
        for k in range(14):
            if cols[k][1]==ncol:
                if k==1 or k==11:
                    l=1
                if k==2 or k==12:
                    l=0
                if (k-3)*(k-5)*(k-8)*(k-9)==0:
                    l=3
                if k==4:
                    l=2
                if k==6:
                    l=4
                if k==7:
                    l=5
                if k==10:
                    l=6
                if k==13:
                    l==7
        lu[i,j,0]=l
49/71:
for i in range(mn[0]):
for i in range(mn[0]):
    for j in range(mn[1]):
        rgb=im[i,j,0:3]
        l=0
        ncol=closest_colour(rgb)
        for k in range(14):
            if cols[k][1]==ncol:
                if k==1 or k==11:
                    l=1
                if k==2 or k==12:
                    l=0
                if (k-3)*(k-5)*(k-8)*(k-9)==0:
                    l=3
                if k==4:
                    l=2
                if k==6:
                    l=4
                if k==7:
                    l=5
                if k==10:
                    l=6
                if k==13:
                    l==7
        lu[i,j,0]=l
50/1: import webcolors
50/2: import PIL import Image
50/3: from PIL import Image
50/4: import numpy as np
50/5: cap = Image.open('lu_4.tiff')
50/6: pwd
50/7: cd python-kmeans-dominant-colors/
50/8: cap = Image.open('lu_4.tiff')
50/9: im = np.array(cap)
50/10: mn=im.shape
50/11: lu=[]
50/12:
cols=[[0 u'white']\
[1 u'tan']\
[0 u'papayawhip']\
[3 u'dimgrey']\
[2 u'goldenrod']\
[3 u'darkseagreen']\
[4 u'darkkhaki']\
[5 u'thistle']\
[3 u'silver']\
[3 u'grey']\
[6 u'cadetblue']\
[1 u'rosybrown']\
[0 u'blanchedalmond']\
[7 u'salmon']]
50/13:
cols=[[0 u'white']
[1 u'tan']
[0 u'papayawhip']
[3 u'dimgrey']
[2 u'goldenrod']
[3 u'darkseagreen']
[4 u'darkkhaki']
[5 u'thistle']
[3 u'silver']
[3 u'grey']
[6 u'cadetblue']
[1 u'rosybrown']
[0 u'blanchedalmond']
[7 u'salmon']]
50/14:
cols=[[0, u'white']\
[1 u'tan']\
[0 u'papayawhip']\
[3 u'dimgrey']\
[2 u'goldenrod']\
[3 u'darkseagreen']\
[4 u'darkkhaki']\
[5 u'thistle']\
[3 u'silver']\
[3 u'grey']\
[6 u'cadetblue']\
[1 u'rosybrown']\
[0 u'blanchedalmond']\
[7 u'salmon']]
50/15:
cols=[[0,u'white']
[1,u'tan']
[0,u'papayawhip']
[3,u'dimgrey']
[2,u'goldenrod']
[3,u'darkseagreen']
[4,u'darkkhaki']
[5,u'thistle']
[3,u'silver']
[3,u'grey']
[6,u'cadetblue']
[1,u'rosybrown']
[0,u'blanchedalmond']
[7,u'salmon']]
50/16:
cols=[[0,u'white'],
[1,u'tan'],
[0,u'papayawhip'],
[3,u'dimgrey'],
[2,u'goldenrod'],
[3,u'darkseagreen'],
[4,u'darkkhaki'],
[5,u'thistle'],
[3,u'silver'],
[3,u'grey'],
[6,u'cadetblue'],
[1,u'rosybrown'],
[0,u'blanchedalmond'],
[7,u'salmon']]
50/17: cols[1][1]
50/18: lu=im
50/19:
for i in range(mn[0]):
        for j in range(mn[1]):
                rgb=im[i,j,0:3]
                name_color=closest_colour(rgb)
                l=0
                for k in range(14):
                        if cols[k][1]==name_color:
                                l=cols[k][0]
                lu[i,j,0]=l
50/20:
def closest_colour(requested_colour):
        min_colours = {}
        for key, name in webcolors.css3_hex_to_names.items():
                r_c, g_c, b_c = webcolors.hex_to_rgb(key)
                rd = (r_c - requested_colour[0]) ** 2
                gd = (g_c - requested_colour[1]) ** 2
                bd = (b_c - requested_colour[2]) ** 2
                min_colours[(rd + gd + bd)] = name
            return min_colours[min(min_colours.keys())]
50/21:
def closest_colour(requested_colour):
        min_colours = {}
        for key, name in webcolors.css3_hex_to_names.items():
                r_c, g_c, b_c = webcolors.hex_to_rgb(key)
                rd = (r_c - requested_colour[0]) ** 2
                gd = (g_c - requested_colour[1]) ** 2
                bd = (b_c - requested_colour[2]) ** 2
                min_colours[(rd + gd + bd)] = name
        return min_colours[min(min_colours.keys())]
50/22:
for i in range(mn[0]):
        for j in range(mn[1]):
                rgb=im[i,j,0:3]
                name_color=closest_colour(rgb)
                l=0
                for k in range(14):
                        if cols[k][1]==name_color:
                                l=cols[k][0]
                lu[i,j,0]=l
46/180: history
46/181: history>a
46/182: history>/home/kuang/qt_program/tiff/a.txt
46/183: from webcolors import closest_colour
46/184:
import sys
sys.path.append(".")
import close
46/185: sys.path.append(".")
46/186: import close
46/187: closest_colour([ 169.,  152.,  123.])
46/188: n_init
46/189: n_init=10
46/190: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
46/191: random_state=ny.RandomState
46/192: random_state=np.RandomState
46/193: from ..utils import check_random_state
46/194: from utils import check_random_state
46/195: np.random.RandomState()
46/196: random_state=np.random.RandomState()
46/197: random_state
46/198: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
46/199: seeds
46/200: seeds
46/201: cols
46/202:
cols=[[0,u'white'],
[1,u'tan'],
[0,u'papayawhip'],
[3,u'dimgrey'],
[2,u'goldenrod'],
[3,u'darkseagreen'],
[4,u'darkkhaki'],
[5,u'thistle'],
[3,u'silver'],
[3,u'grey'],
[6,u'cadetblue'],
[1,u'rosybrown'],
[0,u'blanchedalmond'],
[7,u'salmon']]
46/203: cols
46/204: cols.shape
46/205: cols[5][0]
46/206:
def col2lu(name_color):
    cols=[[0,u'white'],
    [1,u'tan'],
    [0,u'papayawhip'],
    [3,u'dimgrey'],
    [2,u'goldenrod'],
    [3,u'darkseagreen'],
    [4,u'darkkhaki'],
    [5,u'thistle'],
    [3,u'silver'],
    [3,u'grey'],
    [6,u'cadetblue'],
    [1,u'rosybrown'],
    [0,u'blanchedalmond'],
    [7,u'salmon']]
    l=0
    for k in range(14):
        if cols[k][1]==name_color:
             l=cols[k][0]
    return l
46/207: col2lu('salmon')
46/208: from joblib import parallel, delayed
46/209: result=parallel(n_jobs=10)((delayed(col2lu)(closest_colour(im[i,j,0:3])) for j in range(mn[1]) for i in range(mn[0])))
46/210: im.shape
46/211: closest_colour( [ 189.765166  ,  216.24978272,   81.24665392])
46/212: i
46/213: j
46/214: closest_colour(im[i,j,0:3])
46/215: result=parallel(n_jobs=10)((delayed(col2lu)(closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
46/216: result
46/217: result=parallel(n_jobs=10)((delayed(col2lu)(closest_colour([ 189.765166  ,  216.24978272,   81.24665392])) for j in range(mn[1])) for i in range(mn[0]))
46/218: delayed
46/219: parallel
46/220: result=parallel(n_jobs=10)(delayed(col2lu)(closest_colour([ 189.765166  ,  216.24978272,   81.24665392])) for j in range(mn[1]))
46/221: result=parallel(n_jobs=10)delayed(col2lu)closest_colour([189.7651,216.24978, 81.24665392])
46/222: result=parallel(n_jobs=10)delayed(col2lu)(closest_colour([189.7651,216.24978, 81.24665392]))
46/223: result=parallel(n_jobs=10)(delayed(col2lu)(closest_colour([189.7651,216.24978, 81.2465392])))
46/224: Parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))
46/225: parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))
46/226: from joblib import Parallel, delayed
46/227: Parallel
46/228: Parallel(n_jobs=2)(delayed(sqrt)(i ** 2) for i in range(10))
46/229: Parallel(n_jobs=2)(delayed(np.sqrt)(i ** 2) for i in range(10))
46/230: result=Parallel(n_jobs=10)(delayed(col2lu)(closest_colour([189.7651,216.24978, 81.2465392])))
46/231: result=Parallel(n_jobs=-1)(delayed(col2lu)(closest_colour([189.7651,216.24978, 81.2465392])))
46/232: result
46/233: result=Parallel(n_jobs=1)(delayed(col2lu)(closest_colour([189.7651,216.24978, 81.2465392])))
46/234: result=Parallel(n_jobs=1)(delayed(col2lu)(closest_colour([189.7651,216.24978, 81.2465392])) for i in range(3))
46/235: result
46/236: result=Parallel(n_jobs=10)((delayed(col2lu)(closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
46/237: result=Parallel(n_jobs=-1)((delayed(col2lu)(closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
46/238: result
46/239: history
51/1: import sys
51/2: sys.path.append(".")
51/3: import close
51/4: closest_colour([119, 172, 152])
51/5: ??close
51/6: close.closest_colour([119, 172, 152])
51/7: import col2lu
51/8: from joblib import Parallel, delayed
51/9: im.shape
51/10: cap = Image.open('../lu_1.tiff')
51/11: from PIL import Image
51/12: cap = Image.open('../lu_1.tiff')
51/13: import numpy as np
51/14: im = np.array(cap)
51/15: mn=im.shape
51/16: lu=[]
51/17: lu=[]
51/18: result=Parallel(n_jobs=10)((delayed(col2lu.c2l)(close.closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
51/19: Parallel
51/20: c2l
51/21: col2lu.c2l
51/22: close.closest_colour
51/23: result=Parallel(n_jobs=-1)((delayed(col2lu.c2l)(close.closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
51/24: im.shape
51/25: i,j
51/26: from single import match
51/27: from single import match
51/28: import single
51/29: from single import match
51/30: from single import match
51/31: Parallel(n_jobs=-1)(delayed(match)(im))
51/32: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
51/33: n_init=10
51/34: random_state=np.RandimState
51/35: random_state=np.RandomState
51/36: random_state=np.random.RandomState
51/37: seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
51/38: random_state=np.RandomState
51/39: random_state=numpy.RandomState
51/40: random_state=numpy.randomstate
51/41: random_state=np.randomstate
51/42: random_state
51/43: history
51/44: history|grep random
51/45: random_state.randint
51/46: import k_means
51/47: import sklearn
51/48: from ..utils import check_random_state
51/49:
sys.path.append("/home/kuang/miniconda/lib/python2.7/site-packages/sklearn/utils"

)
51/50: import check_random_state
51/51: import check_random
51/52: import random
51/53: ??random
51/54: Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(10))
51/55: Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(0))
51/56: Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
51/57: im2=im
51/58: Parallel(n_jobs=-1)(delayed(match)(im,im2) for seed in range(1))
51/59: from single import match
51/60: Parallel(n_jobs=-1)(delayed(match)(im,im2) for seed in range(1))
51/61: from single import match
51/62: Parallel(n_jobs=-1)(delayed(match)(im,im2) for seed in range(1))
51/63: im2=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
46/240: result=Parallel(n_jobs=-1)((delayed(col2lu)(closest_colour(im[i,j,0:3])) for j in range(mn[1])) for i in range(mn[0]))
46/241: result=Parallel(n_jobs=-1)(delayed(single)(im) for i in range(1))
46/242: from single import match
46/243: result=Parallel(n_jobs=-1)(delayed(match)(im) for i in range(1))
46/244: match(im)
46/245: cols
46/246: cols=[]
46/247: cols=col2lu.col_nam_14()
46/248: import col2lu
46/249: cols=col2lu.col_nam_14()
46/250: col2lu.col_nam_14
46/251: col2lu
46/252: c2l
46/253: col2lu.c2l
46/254: col2lu.col_nam_14
46/255: from col2lu import col_nam_14
46/256: from col2lu import col_nam_14
46/257: from col2lu import col_nam_14
46/258: cols
46/259: from col2lu import col_nam_14
46/260: import col2lu
46/261: col2lu.col_nam_14
46/262: col2lu.col_nam_14()
46/263:
def appendTo(element, arr = []):
    arr.append(element)
    return arr
46/264: appendTo(20, [4, 5, 6])
46/265: appendTo(20)
46/266: appendTo(30)
46/267: arr
46/268: appendTo()
46/269: appendTo(,)
46/270: appendTo([])
46/271: appendTo('[]')
46/272: appendTo(10, 20)
46/273: appendTo(10 20)
46/274: appendTo(10 [2])
46/275: l[]
46/276: l=[]
46/277: appendTo(l)
46/278: appendTo(20,[1])
46/279: number = [1, 5, 2, 3, 9, 7]
46/280: len(number)
46/281: size(number)
46/282: number.size
46/283: number.len
46/284: number.shape
52/1:
def read_blocks(input_file, i, j):
    empty_lines = 0
    blocks = []
    for line in open(input_file):
        # Check for empty/commented lines
        if not line or line.startswith('#'):
            # If 1st one: new block
            if empty_lines == 0:
                blocks.append([])
            empty_lines += 1
        # Non empty line: add line in current(last) block
        else:
            empty_lines = 0
            blocks[-1].append(line)
    return blocks[i:j + 1]
52/2:
for block in read_blocks(s, 1, 2):
    print '-> block'
    for line in block:
        print line
52/3: s='s'
52/4:
for block in read_blocks(s, 1, 2):
    print '-> block'
    for line in block:
        print line
52/5: !ls ?
52/6: pwd
52/7: cd python-kmeans-dominant-colors/
52/8:
for block in read_blocks(s, 1, 2):
    print '-> block'
    for line in block:
        print line
52/9: import numpy
52/10: block2=numpy.loadtxt('filename',comments='#')
52/11: block2=numpy.loadtxt('s',comments='#')
52/12: block2
52/13: block2[0][1]
52/14: block2[0][4]
52/15: block2[0][3]
52/16: block2[1][3]
52/17: import .col2lu
52/18: import .home.kuang.qt_program.tiff.python-kmeans-dominant-colors.col2lu
52/19: import home.kuang.qt_program.tiff.python-kmeans-dominant-colors.col2lu
52/20: import col2lu
52/21: col2lu.col_nam_14()
52/22: cols=col2lu.col_nam_14()
52/23: col2lu.c2l(cols,'white')
52/24: import PIL import Image
52/25: import PIL import Image
52/26: from PIL import Image
52/27: cap = Image.open('../lu_1.tiff')
52/28: im = np.array(cap)
52/29: import numpy as np
52/30: im = np.array(cap)
52/31: mn=im.shape
52/32: import close
52/33: import sklearn.cluster
52/34:
def match(im):
    mn=im.shape
    im2=im
    for i in range(mn[0]):
        for j in range(mn[1]):
            im2[i,j,0]=col2lu.c2l(close.closest_colour(im[i,j,0:3]))
    return im2
52/35: im2=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/36: import joblib
52/37: im2=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/38: from joblib import Parallel, delayed
52/39: im2=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/40:
def match(im):
    mn=im.shape
    im2=im
    for i in range(mn[0]):
        for j in range(mn[1]):
            im2[i,j,0]=col2lu.c2l(cols,close.closest_colour(im[i,j,0:3]))
    return im2
52/41: im2=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/42: im2=match(im)&
52/43: im2=match(im)
52/44: result=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/45:
def match(im):
    mn=im.shape
    im2=[]
    for i in range(mn[0]):
        for j in range(mn[1]):
            im2.append[i,j]=col2lu.c2l(cols,close.closest_colour(im[i,j,0:3]))
    return im2
52/46: im2=match(im)
52/47:
def match(im):
    mn=im.shape
    im2=[]
    for i in range(mn[0]):
        for j in range(mn[1]):
            im2.append=col2lu.c2l(cols,close.closest_colour(im[i,j,0:3]))
    return im2
52/48: im2=match(im)
52/49:
def match(im):
    mn=im.shape
    im2=[]
    for i in range(mn[0]):
        for j in range(mn[1]):
            im2.append(col2lu.c2l(cols,close.closest_colour(im[i,j,0:3])))
    return im2
52/50: im2=match(im)
52/51: history
52/52: result=Parallel(n_jobs=-1)(delayed(match)(im) for seed in range(1))
52/53:
def match_ij(i,j,im,im2)
    im2[i,j,0]=col2lu.c2l(close.closest_colour(im[i,j,0:3]))
    return im2
52/54:
def match_ij(i,j,im,im2):
    im2[i,j,0]=col2lu.c2l(close.closest_colour(im[i,j,0:3]))
    return im2
52/55: im2=im
52/56: match_ij(1,1,im,im2)
52/57:
def match_ij(i,j,im,im2):
    im2[i,j,0]=col2lu.c2l(close.closest_colour(cols,im[i,j,0:3]))
    return im2
52/58: match_ij(1,1,im,im2)
52/59:
def match_ij(i,j,im,im2):
    im2[i,j,0]=col2lu.c2l(cols,close.closest_colour(im[i,j,0:3]))    
    return im2
52/60: match_ij(1,1,im,im2)
52/61: match_ij(1,1,im,im2)[1,1]
52/62: im2=Parallel(n_jobs=-1)((delayed(match_ij)(i,j,im,im2) for j in range(mn[0])) for i in range(mn[0]))
52/63: im2=Parallel(n_jobs=-1)(delayed(match_ij)(i,j,im,im2) for j in range(mn[0]))for i in range(mn[0]))
52/64: im2=Parallel(n_jobs=-1)(delayed(match_ij)(i,j,im,im2) for j in range(mn[0])) for i in range(mn[0]))
52/65: i=1
52/66: im2=Parallel(n_jobs=-1)(delayed(match_ij)(i,j,im,im2) for j in range(mn[0])))
52/67: im2=Parallel(n_jobs=-1)(delayed(match_ij)(i,j,im,im2) for j in range(mn[0]))
52/68:
def match(self, i1, i2):
    return i1 == i2
52/69: match(a, a)
52/70: match('a', 'a')
52/71: match(1,'a', 'a')
52/72: np.ones(250)
54/1: import numpy as np
54/2: from joblib import Parallel, delayed
54/3:
class Matcher(object):
    def match_all(self, arr1, arr2):
        args = ((elem1, elem2) for elem1 in arr1 for elem2 in arr2)

        results = Parallel(n_jobs=-1)(delayed(_parallel_match)(self, e1, e2) for e1, e2 in args)
        # ...

    def match(self, i1, i2):
        return i1 == i2

def _parallel_match(m, i1, i2):
    return m.match(i1, i2)

matcher = Matcher()
matcher.match_all(np.ones(250), np.ones(250))
54/4: matcher.match_all(np.ones(250), np.ones(250))
54/5: results
54/6: matcher.result
54/7:
def match_all(self, arr1, arr2):
    args = ((elem1, elem2) for elem1 in arr1 for elem2 in arr2)
    results = Parallel(n_jobs=-1)(delayed(_parallel_match)(self, e1, e2) for e1, e2 in args)
    return results
54/8: matcher.match_all(np.ones(250), np.ones(250))
54/9: matcher.match_all(np.ones(25000), np.ones(25000))
54/10: results
54/11: results=matcher.match_all(np.ones(2500), np.ones(2500))
54/12: results=matcher.match_all(np.ones(250), np.ones(250))
54/13: results
54/14: _parallel_match)(self, e1, e2)
54/15: _parallel_match(self, e1, e2)
54/16: _parallel_match(e1, e2)
54/17: e1=1
54/18: e2=2
54/19: _parallel_match(e1, e2)
54/20: _parallel_match(,e1, e2)
54/21: _parallel_match(match,e1, e2)
54/22: match(match,e1, e2)
54/23: matcher.match(match,e1, e2)
54/24: matcher.match(m,e1, e2)
54/25: matcher.match(e1,,e1, e2)
54/26: matcher.match(e1,e1, e2)
54/27: matcher.match(e1, e2)
54/28: _parallel_match(e1, e2)
54/29: _parallel_match(matcher,e1, e2)
54/30: matcher.match_all(np.ones(250), np.ones(250)).shape
54/31: results=[matcher.match_all(np.ones(250), np.ones(250))]
54/32: results
54/33: import itertools
54/34: import multiprocessing
54/35:
class Matcher(object):
    def match_all(self, a1, a2):
        args = ((elem1, elem2) for elem1 in a1 for elem2 in a2)
        args = zip(itertools.repeat(self), args)

        pool = multiprocessing.Pool()
        results = np.fromiter(pool.map(_parallel_match, args))
        return results
    def match(self, i1, i2):
        return i1 == i2
def _parallel_match(*args):
    return args[0][0].match(*args[0][1:][0])
matcher = Matcher()
matcher.match_all(np.ones(250), np.ones(250))
54/36: import numpy as np
54/37:
class Matcher(object):
    def match_all(self, a1, a2):
        args = ((elem1, elem2) for elem1 in a1 for elem2 in a2)
        args = zip(itertools.repeat(self), args)

        pool = multiprocessing.Pool()
        results = np.fromiter(pool.map(_parallel_match, args))
        return results
    def match(self, i1, i2):
        return i1 == i2
def _parallel_match(*args):
    return args[0][0].match(*args[0][1:][0])
matcher = Matcher()
matcher.match_all(np.ones(250), np.ones(250))
54/38:
class Matcher(object):
    def match_all(self, a1, a2):
        args = ((elem1, elem2) for elem1 in a1 for elem2 in a2)
        args = zip(itertools.repeat(self), args)

        pool = multiprocessing.Pool()
        results = np.fromiter(pool.map(_parallel_match, args))
        
    def match(self, i1, i2):
        return i1 == i2
def _parallel_match(*args):
    return args[0][0].match(*args[0][1:][0])
matcher = Matcher()
matcher.match_all(np.ones(250), np.ones(250))
54/39:
from multiprocessing import Pool
import numpy

numToFactor = 976

def isFactor(x):
    result = None
    div = (numToFactor / x)
    if div*x == numToFactor:
        result = (x,div)
    return result

if __name__ == '__main__':
    pool = Pool(processes=10)
    possibleFactors = range(1,int(numpy.floor(numpy.sqrt(numToFactor)))+1)
    print 'Checking ', possibleFactors
    result = pool.map(isFactor, possibleFactors)
    cleaned = [x for x in result if not x is None]
    print 'Factors are', cleaned
54/40:
from multiprocessing import Pool
import numpy

numToFactor = 9760

def isFactor(x):
    result = None
    div = (numToFactor / x)
    if div*x == numToFactor:
        result = (x,div)
    return result

if __name__ == '__main__':
    pool = Pool(processes=10)
    possibleFactors = range(1,int(numpy.floor(numpy.sqrt(numToFactor)))+1)
    print 'Checking ', possibleFactors
    result = pool.map(isFactor, possibleFactors)
    cleaned = [x for x in result if not x is None]
    print 'Factors are', cleaned
54/41:
from multiprocessing import Pool
import numpy

numToFactor = 97600

def isFactor(x):
    result = None
    div = (numToFactor / x)
    if div*x == numToFactor:
        result = (x,div)
    return result

if __name__ == '__main__':
    pool = Pool(processes=10)
    possibleFactors = range(1,int(numpy.floor(numpy.sqrt(numToFactor)))+1)
    print 'Checking ', possibleFactors
    result = pool.map(isFactor, possibleFactors)
    cleaned = [x for x in result if not x is None]
    print 'Factors are', cleaned
54/42: cols
54/43: from  col2lu import c2l, col_nam_14
54/44: pwd
54/45: cd python-kmeans-dominant-colors/
54/46: from  col2lu import c2l, col_nam_14
54/47: col_nam_14()
54/48: cols
54/49: cols=col_nam_14()
54/50: cols
54/51: !46
54/52: from  col2lu import c2l, col_nam_14
54/53: c2l('cadetblue')
54/54: from  col2lu import c2l, col_nam_14
54/55: c2l('cadetblue')
55/1: from  col2lu import c2l, col_nam_14
55/2: cd python-kmeans-dominant-colors/
55/3: from  col2lu import c2l, col_nam_14
55/4: c2l('cadetblue')
55/5: cols=col_nam_14()
55/6: c2l('cadetblue')
55/7:     cols
55/8: from  col2lu import c2l, col_nam_14
55/9: cols=col_nam_14
55/10: cols
55/11: cols=col_nam_14()
55/12: cols
55/13: c2l('cadetblue')
55/14: global cols
55/15: c2l('cadetblue')
55/16: cols
55/17:
for k in range(14):
    if cols[k][1]==name_color:
        l=cols[k][0]
return l
55/18: name_color='goldenrod'
55/19:
for k in range(14):
    if cols[k][1]==name_color:
        l=cols[k][0]
return l
55/20:
for k in range(14):
    if cols[k][1]==name_color:
        l=cols[k][0]
l
56/1: import col2lu
56/2: global cols=col2lu.col_nam_14()
56/3: global colscol2lu.col_nam_14()
56/4: global cols
56/5: cols=col2lu.col_nam_14()
56/6: col2lu.c2l('white')
56/7: import col2lu
56/8: cols=col2lu.col_nam_14()
56/9: col2lu.c2l('white')
56/10: global cols
56/11: col2lu.c2l('white')
56/12:
def c2l(name_color):
    global cols
    l=0
    for k in range(14):
        if cols[k][1]==name_color:
             l=cols[k][0]
    return l
56/13: c21('white')
56/14: c2l('white')
56/15:
def c2l(name_color):
    global cols
    l=0
    for k in range(14):
        if cols[k][1]==name_color:
             l=cols[k][0]
    return l
56/16: pool = Pool(processes=10)
56/17: from multiprocessing import Pool
56/18: import numpy as np
56/19: pool = Pool(processes=10)
56/20: from PIL import Image
56/21: cap = Image.open('../lu_1.tiff')
56/22: im = np.array(cap)
56/23: mn=im.shape
56/24: lu=[]
56/25: from clos import closest_colour
56/26: from close import closest_colour
56/27: rgb=[]
56/28: rgb=(im[i,j,0:3] for i in range(mn[0]) for j in range(mn[1]))
56/29: rgb
56/30: rgb.append[i,j]=im[i,j,0:3] for i in range(mn[0]) for j in range(mn[1])
56/31: rgb.append[i,j]=(im[i,j,0:3] for i in range(mn[0]) for j in range(mn[1]))
56/32: rgb=[]
56/33: rgb.append[i,j]=(im[i,j,0:3] for i in range(mn[0]) for j in range(mn[1]))
56/34:
for i in range(mn[0]):
    for j in range(mn[1]):
        k=i+j
        rgb[k,0:3]=im[i,j,0:3]
56/35: rgb = im.reshape((mn[0] * mn[1], 3))
56/36: rgb.shape
56/37: result = pool.map(closest_colour,rgb)
58/1: run lu.py
58/2: run lu.py
58/3: run lu.py
58/4: run lu.py
58/5:  mn=im.shape
58/6: run lu.py
58/7: !vi lu.py
58/8: run lu.py
59/1: run lu2.py
59/2: !vi lu2.py
59/3: run lu2.py
59/4: !vi lu2.py
59/5: run lu2.py
59/6: !vi lu2.py
59/7: run lu2.py
59/8: !vi lu2.py
59/9: run lu2.py
59/10: result
59/11: !vi lu2.py
59/12: run lu2.py
58/9: result
58/10: global cols
58/11:
cols=[[0,u'white'],
    [1,u'tan'],
    [0,u'papayawhip'],
    [3,u'dimgrey'],
    [2,u'goldenrod'],
    [3,u'darkseagreen'],
    [4,u'darkkhaki'],
    [5,u'thistle'],
    [3,u'silver'],
    [3,u'grey'],
    [6,u'cadetblue'],
    [1,u'rosybrown'],
    [0,u'blanchedalmond'],
    [7,u'salmon']]
58/12:
def c2l(name_color):
    global cols
    l=0
    for k in range(14):
        if cols[k][1]==name_color:
             l=cols[k][0]
    return l
58/13: c2l('rosybrown')
58/14: c2l('salmon')
58/15: pool = Pool(processes=60)
58/16: lu = pool.map(c2l, result)
58/17: lu[5000]
58/18: lu.shape
58/19: lua=np.array(lu)
58/20: lua
58/21: lua.shape
58/22: mn
58/23: lu2=lua.reshape(3600,-1)
58/24: lu2.shape
58/25: lu2[1800,2500]
58/26: np.savetxt('lu_1.npy',lu2)
58/27: np.savetxt('lu_1.txt',lu2)
58/28: np.save('lu_1.npy',lu2)
58/29: np.savetxt('lu_1.txt',lu2,fmt='%1u')
60/1: import numpy as np
60/2: np.load('lu_1.npy',lu2)
60/3: lu2=[]
60/4: np.load('lu_1.npy',lu2)
60/5: lu.shape
60/6: lu2.shape
60/7: lu=np.array(lu2)
60/8: lu.shape
60/9: lu
60/10: len(lu2)
60/11: len(lu)
60/12: lu2
60/13: lu2=np.load('lu_1.npy')
60/14: len(lu2)
60/15: lu2.shape
60/16: pts=np.loadtxt('point.txt')
60/17: pts
60/18: pts[1][1]
60/19: pts[0][1]
60/20: mn=lu2.shape
60/21:
for j in range(mn[1]):
    for in range(mn[0]):
60/22:
for j in range(mn[1]):
    for i in range(mn[0]):
        if lu2[i,j] != 0:
            break
60/23: print i,j lu2[i,j]
60/24: print i,j, lu2[i,j]
60/25:
for j in range(mn[1]):
    for i in range(mn[0]):
        notfound=1
        if lu2[i,j] != 0:
            notfound=0
            break
        else:
            notfound=1
    if notfound ==0:
        break
print i,j,lu2[i,j]
60/26:
for j in range(mn[1],0,-1):
    for i in range(mn[0]):
        notfound=1
        if lu2[i,j] != 0:
            notfound=0
            break
        else:
            notfound=1
    if notfound ==0:
        break
print i,j,lu2[i,j]
60/27:
for j in range(mn[1]-1,0,-1):
    for i in range(mn[0]):
        notfound=1
        if lu2[i,j] != 0:
            notfound=0
            break
        else:
            notfound=1
    if notfound ==0:
        break
print i,j,lu2[i,j]
60/28: imin=1901
60/29: imax=961
60/30: jmin=1270
60/31: jmax=3842
60/32: dy=(pts[1][1]-pts[0][1])/(jmax-jmin+1)
60/33: dy
60/34: dy=-dy
60/35: pts
60/36:
for i in range(mn[0]):
    for j in range(mn[1]):
                notfound=1
                if lu2[i,j] != 0:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
            print i,j,lu2[i,j]
60/37:
for i in range(mn[0]):
    for j in range(mn[1]):
        notfound=1
        if lu2[i,j] != 0:
            notfound=0
            break
        else:
            notfound=1
    if notfound ==0:
        break
print i,j,lu2[i,j]
i_E=i
j_E=j
60/38:
for i in range(mn[0]-1,0,-1):
    for j in range(mn[1]):
        notfound=1
        if lu2[i,j] != 0:
            notfound=0
            break
        else:
            notfound=1
    if notfound ==0:
        break
print i,j,lu2[i,j]
i_E2=i
j_E2=j
60/39: i_W=i_E
60/40: j_W=j_E
60/41: i_E=i_E2
60/42: j_E=j_E2
61/1: run load_surfer.py
61/2: load_surfer
61/3: load_surfer('test.grd')
61/4: import numpy
61/5: load_surfer('test.grd')
61/6: from numpy import fromiter, ma
61/7: load_surfer('test.grd')
61/8: global numpy
61/9: load_surfer('test.grd')
62/1: import numpy
62/2: run load_surfer.py
62/3: load_surfer('test.grd')
62/4: !vi load_surfer.py
62/5: run load_surfer.py
62/6: load_surfer('test.grd')
62/7: x, y, grd, (ny,nx)=load_surfer('test.grd')
62/8: x
62/9: y
62/10: grd
62/11: nx
62/12: ny
62/13: cmax=max(grd)
62/14: cmax
62/15: cmin=min(grd)
62/16: cmin
62/17: grd.shape
62/18: output=('DSAA',(nx,ny),(x[0],x[nx-1]),(y[0],y[ny-1]),(cmin,cmax),grd)
62/19: fname='output.grd'
62/20: fo=open(fname, "rw+")
62/21: fo=open(fname)
62/22: fo=open(fname, "rw+")
62/23:
for i in output:
    fo.write(i)
62/24: fo.writelines(output)
62/25: fo.save(output)
62/26:
for i in output:
    numpy.savetxt(fo,i)
62/27: output[0:4]
62/28: output[0:5]
62/29:
for i in output[0:4]:
    numpy.savetxt(fo,i)
62/30: numpy.savetxt(fo,'DSAA')
62/31: numpy.savetxt(fo,nx)
62/32: numpy.savetxt(fo,grd)
62/33: numpy.savetxt(fo,x)
62/34: numpy.savetxt(fo,nx)
62/35: numpy.save(fo,nx)
62/36: numpy.save(fo,'DSAA')
62/37: numpy.save(fo,(nx,ny))
62/38: numpy.savetxt(fo,'DSAA')
62/39: fo.write(output[0])
62/40: fo.write(output[1])
62/41: output[1]
62/42: fo
62/43: numpy.savetxt(fo,grd)
62/44: numpy.array(output[1])
62/45: numpy.savetxt(fo,numpy.array(output[1]))
62/46: numpy.savetxt(fo,numpy.array(output[2]))
62/47: numpy.savetxt(fo,numpy.array(output[3]))
62/48: numpy.savetxt(fo,numpy.array(output[4]))
62/49: numpy.savetxt(fo,numpy.array(output[5]))
62/50: close(fo)
62/51: fo.close
62/52: fo
62/53: fo.close()
62/54: fo
62/55: history
62/56: fo=open(fname, "rw+")
62/57: fo.write(output[0])
62/58:
for i in output[1:]:
    numpy.savetxt(fo,numpy.array(i))
62/59: fo.write(output[0]+"\n")
62/60:
for i in output[1:]:
    numpy.savetxt(fo,numpy.array(i))
62/61: fo.close()
62/62: fo=open(fname, "rw+")
62/63: fo.write(output[0]+"\n")
62/64:
for i in output[1:]:
    numpy.savetxt(fo,numpy.array(i))
62/65: fo.close()
63/1: history
63/2: run surfer_interpolate.py
63/3: run load_surfer.py
63/4: load_surfer('output.grd')
63/5: fo.close()
63/6: load_surfer('test.grd')
63/7: fo=open('output.grd','+rw')
63/8: fo=open('output.grd','rw+')
63/9: output=('DSAA\n',(nx,ny),(x[0],x[nx-1]),(y[0],y[ny-1]),(min(grd),max(grd)),grd)
63/10: x, y, grd, (ny,nx)=load_surfer('test.grd')
63/11: output=('DSAA\n',(nx,ny),(x[0],x[nx-1]),(y[0],y[ny-1]),(min(grd),max(grd)),grd)
63/12: fo.write(output[0])
63/13:
for i in output[1:4]:
    numpy.savetxt(fo,numpy.array(i),fmt='%i')
64/1: run load_surfer.py
64/2: x,y,grd,(nx,ny)=load_surfer('output.grd')
64/3: run s.py
64/4: output[1]
64/5: i
64/6: i=1
64/7: a=numpy.array(output[i])
64/8: a
64/9: fo=open('output.grd','rw+')
64/10: numpy.savetxt(fo,a,fmt='%i')
64/11: fo.close()
64/12: a.shape
64/13: a=a.reshape(2,-1)
64/14: a.shape
64/15: a=a.reshape(1,-1)
64/16: a.shape
64/17: fo=open('output.grd','rw+')
64/18: numpy.savetxt(fo,a,fmt='%i')
64/19: fo.close()
64/20: x,y,grd,(nx,ny)=load_surfer('output.grd')
64/21: x,y,grd,(nx,ny)=load_surfer('output.grd')
64/22: load_surfer('output.grd')
64/23: cd ../tiff/python-kmeans-dominant-colors/
64/24: from save_surfer import save_surfer
64/25: from save_surfer import save_surfer
64/26: from save_surfer import save_surfer
64/27: from save_surfer import save_surfer
64/28: lu=numpy.loadtxt('lu_1.txt')
64/29: lu.shape
64/30: pts=numpy.loadtxt('point.txt')
64/31: pts
64/32: delx=(pts[0][1]-pts[1][1])/(3842-1270)
64/33: delx
64/34: y0=pts[1][1]-1270*delx
64/35: y0
64/36: x0=pts[0][1]-1901*delx
64/37: x0
64/38: x0=pts[1][0]-1901*delx
64/39: x0
64/40: (nx,ny)=lu.shape
64/41: nx
64/42: ny
64/43: fname='lu_1.grd'
64/44: save_surfer(fname,nx,ny,x0,y0,delx,lu)
64/45: xn=(nx-1)*delx+x0
64/46: yn=(ny-1)*delx+y0
64/47: grd=lu
64/48: output=('DSAA\n',(nx,ny),(x0,xn),(y0,yn),(min(grd),max(grd)),grd)
64/49: cmin=min(grd)
64/50: grd
64/51: cmin=numpy.min(grd)
64/52: cmin
64/53: cmax=numpy.max(grd)
64/54: cmax
64/55: from save_surfer import save_surfer
64/56: save_surfer(fname,nx,ny,x0,y0,delx,lu)
64/57: from save_surfer import save_surfer
64/58: save_surfer(fname,nx,ny,x0,y0,delx,lu)
64/59: grd.all
64/60: min.all(grd)
64/61: min(grd.all)
64/62: min(grd.all())
64/63: min(numpy.all(grd))
64/64: min(grd)
64/65: min(lu)
64/66: lu.shape
64/67: cmin=min(lu)
64/68: lu=numpy.array(lu)
64/69: min(lu)
64/70: lu
64/71:
for i in lu:
    if i > 8 or i < 0:
        print i
64/72:
if any(lu) > 7:
    print 'true'
64/73: lu[2000,2000]
64/74: x=lu.reshape(3600*5000)
64/75: x
64/76: min(x)
64/77: max(x)
64/78: save_surfer(fname,nx,ny,x0,y0,delx,lu.reshape(nx*ny))
64/79: save_surfer(fname,nx,ny,x0,y0,delx,lu.reshape(nx*ny))
64/80: x=numpy.matrix.transpose(lu)
64/81: x.shape
64/82: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/83: history
64/84: lu=numpy.matrix.transpose(lu)
64/85: (nx,ny)=lu.shape
64/86:
for j in range(mn[1]):
        for i in range(mn[0]):
                notfound=1
                if lu2[i,j] != 0:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
            print i,j,lu2[i,j]
64/87:
for j in range(mn[1]):
        for i in range(mn[0]):
                notfound=1
                if lu2[i,j] != 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
            i_s,j_s=i,j
64/88:
for j in range(mn[1]):
        for i in range(mn[0]):
                notfound=1
                if lu2[i,j] != 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
            i_s,j_s=(i,j)
64/89:
for j in range(mn[1]):
        for i in range(mn[0]):
                notfound=1
                if lu2[i,j] != 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
            (i_s,j_s)=(i,j)
64/90:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if lu[i,j] != 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
(i_s,j_s)=(i,j)
print *,i,j,lu[i,j]
64/91:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if lu[i,j] != 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/92:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if lu[i,j] == 7:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/93:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if lu[i,j] == 7.0:
                        notfound=0
                        break
                else:
                        notfound=1
                if notfound ==0:
                        break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/94:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/95: print i_s,j_s
64/96:
for j in range(ny-1,0,-1):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_n,j_n)=(i,j)
print i,j,lu[i,j]
64/97: pts
64/98: delx=(pts[0][1]-pts[1][1])/(3842-1270)
64/99: delx=(pts[0][1]-pts[1][1])/(j_n-j_s+1)
64/100: delx
64/101: y0=pts[1][1]-j_s*delx
64/102: x0=pts[0][1]-j_s*delx
64/103: print (fname,nx,ny,x0,y0,delx)
64/104: x0=pts[0][1]-i_s*delx
64/105: print (fname,nx,ny,x0,y0,delx)
64/106: x0=pts[1][0]-i_s*delx
64/107: print (fname,nx,ny,x0,y0,delx)
64/108: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/109: lu=numpy.loadtxt('lu_1.txt')
64/110: mn=lu.shape
64/111: do j in range(mn[1]):
64/112:
for j in range(mn[1]):
    k=mn[1]-j
    fro i in range(mn[0]):
64/113:
for j in range(mn[1]):
    k=mn[1]-j
    for i in range(mn[0]):
        lu2[i,k]=lu[i,j]
64/114: lu2=lu
64/115:
for j in range(mn[1]):
    k=mn[1]-j-1
    for i in range(mn[0]):
        lu2[i,k]=lu[i,j]
64/116: lu=numpy.matrix.transpose(lu2)
64/117: (nx,ny)=lu.shape
64/118:
for j in range(ny):
            for i in range(nx):
                        notfound=1
                        if abs(lu[i,j]-7) < 0.5:
                                    notfound=0
                                    break
                        else:
                                    notfound=1
                    if notfound ==0:
64/119:             break
64/120: (i_s,j_s)=(i,j)
64/121:

for j in range(ny):
    for i in range(nx):
        notfound=1
                        if abs(lu[i,j]-7) < 0.5:
                                    notfound=0
                                    break
                        else:
                                    notfound=1
                    if notfound ==0:
64/122:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/123:
for j in range(ny-1,0,-1):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_n,j_n)=(i,j)
print i,j,lu[i,j]
64/124: x0=pts[1][0]-i_s*delx
64/125: y0=pts[1][1]-j_s*delx
64/126: delx=(pts[0][1]-pts[1][1])/(j_n-j_s+1)
64/127: x0=pts[1][0]-i_s*delx
64/128: y0=pts[1][1]-j_s*delx
64/129: print (fname,nx,ny,x0,y0,delx)
64/130: pts
64/131: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/132: history
64/133: lu=numpy.loadtxt('lu_1.txt')
64/134: mn=lu.shape
64/135: lu2=lu
64/136: lu=numpy.matrix.transpose(lu)
64/137: mn=lu.shape
64/138: mn
64/139: lu2=lu
64/140:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2[i,k]=lu[i,j]
64/141: (nx,ny)=lu.shape
64/142:
for j in range(ny):
            for i in range(nx):
                        notfound=1
                        if abs(lu[i,j]-7) < 0.5:
                                    notfound=0
                                    break
                        else:
                                    notfound=1
                    if notfound ==0:
64/143:             break
64/144: print i,j,lu[i,j]
64/145:
        for i in range(nx):
                    notfound=1
                    if abs(lu[i,j]-7) < 0.5:
                                notfound=0
                                break
                    else:
                                notfound=1
                if notfound ==0:
64/146:             break
64/147: (i_n,j_n)=(i,j)
64/148: y0=pts[1][1]-j_s*delx
64/149: x0=pts[1][0]-i_s*delx
64/150: y0=pts[1][1]-j_s*delx
64/151:
for j in range(ny):
        for i in range(nx):
                    notfound=1
                    if abs(lu[i,j]-7) < 0.5:
                                notfound=0
                                break
                    else:
                                notfound=1
        if notfound ==0:
            break
64/152:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_s,j_s)=(i,j)
print i,j,lu[i,j]
64/153:
for j in range(ny-1,0,-1):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_n,j_n)=(i,j)
print i,j,lu[i,j]
64/154: delx=(pts[0][1]-pts[1][1])/(j_n-j_s+1)
64/155: x0=pts[1][0]-i_s*delx
64/156: y0=pts[1][1]-j_s*delx
64/157: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/158: lu=numpy.loadtxt('lu_1.txt')
64/159: lu2=[]
64/160:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2[i,k].append=lu[i,j]
64/161:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2.append[i,k](lu[i,j])
64/162:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2.append(lu[i,j])
64/163: mn
64/164:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2.append(lu[i,j])
64/165: lu.shape
64/166: lu=numpy.matrix.transpose(lu)
64/167: lu.shape
64/168:
for j in range(mn[1]):
        k=mn[1]-j-1
        for i in range(mn[0]):
                lu2.append(lu[i,k])
64/169: lu2.shape
64/170: lu=numpy.array(lu2).reshape(5000,-1)
64/171: lu=numpy.array(lu2)
64/172: lu.shape
64/173: mn
64/174: history
64/175: lu=numpy.loadtxt('lu_1.txt')
64/176: lu2=[]
64/177: lu=numpy.matrix.transpose(lu)
64/178: lu=numpy.loadtxt('lu_1.txt')
64/179: (nx,ny)=lu.shape
64/180: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/181: lu2=numpy.rot90(lu,3)
64/182: (nx,ny)=lu2.shape
64/183: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu2).reshape(nx*ny))
64/184:
for j in range(ny):
        for i in range(nx):
                notfound=1
                if abs(lu2[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_s,j_s)=(i,j)
print i,j,lu2[i,j]
64/185: lu=lu2
64/186:
for j in range(ny-1,0,-1):
        for i in range(nx):
                notfound=1
                if abs(lu[i,j]-7) < 0.5:
                        notfound=0
                        break
                else:
                        notfound=1
        if notfound ==0:
            break
(i_n,j_n)=(i,j)
print i,j,lu[i,j]
64/187: delx=(pts[0][1]-pts[1][1])/(j_n-j_s+1)
64/188: x0=pts[1][0]-i_s*delx
64/189: y0=pts[1][1]-j_s*delx
64/190: print (fname,nx,ny,x0,y0,delx)
64/191: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/192: pts
64/193: x0=pts[0][0]-i_n*delx
64/194: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
64/195: !vi points.txt
64/196: !vi point.txt
64/197: pts=numpy.loadtxt('point.txt')
64/198: pts
64/199: dely=(pts[0][1]-pts[1][1])/(j_n-j_s+1)
64/200: delx=(pts[0][0]-pts[1][0])/(i_n-i_s+1)
64/201: print dely, delx
64/202: delx=(dely+delx)/2
64/203: x0=pts[0][0]-i_n*delx
64/204: y0=pts[1][1]-j_s*delx
64/205: save_surfer(fname,nx,ny,x0,y0,delx,numpy.matrix.transpose(lu).reshape(nx*ny))
66/1: run load_surfer.py
66/2: load_surfer('lu_1.grd')
66/3: x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
66/4: lu
66/5: lu.shape
66/6: nx,ny
66/7: x[0],y[0]
66/8: delx=(x[nx-1]-x[0])/(nx-1)
66/9: delx
66/10: dely=(y[ny-1]-y[0])/(ny-1)
66/11: dely
66/12: y[ny-1]
66/13: y
66/14: y.shape
66/15: dely=(y[len(y)]-y[0])/(ny-1)
66/16: dely=(y[len(y)-1]-y[0])/(ny-1)
66/17: dely
66/18: xc,yc,top_m,(nyc,nxc)=load_surfer('1011d4.lu_TOPO_M.grd')
66/19: xc,yc,top_m,(nyc,nxc)=load_surfer('1011d4.lu_TOPO_M.grd')
66/20: delyc=(yc[len(yc)-1]-yc[0])/(nyc-1)
66/21: delxc=(xc[len(xc)-1]-xc[0])/(nxc-1)
66/22: delyc delxc
66/23: delyc. delxc
66/24: delyc, delxc
66/25: history
66/26: !top
66/27: lu
66/28: lu.shape
66/29: history
66/30: lu=lu.reshape(5000,-1)
66/31: lu.shape
66/32: lu=lu.reshape(5000*3600)
66/33: x.shape
66/34: global xc,yc
66/35:
def inside(xx,yy):
    if xx>xc[0] and xx<xc[len(xc)-1] and yy>yc[0] and yy<yc[len(yc)-1]:
        return True
    else:
        return False
66/36: inside(x[0],y[0])
66/37: inside(x[9000000],y[9000000])
66/38: inside(200000,2600000)
66/39: xy=zip(x,y)
66/40: xy.shape
66/41: xy
66/42: inside(xy[0])
66/43: xy=tuple(x,y)
66/44: inside(tuple(xy[0]))
66/45: inside(x[0:1],y[0:1])
66/46: inside(x[i],y[i]) for i in range[2]
66/47: ii=inside(x[i],y[i]) for i in range[2]
66/48: bul=filter(inside, (x,y))
66/49: bul=filter(inside, x,y)
66/50:
def inside(xy):
    xx=xy[0]
    yy=xy[1]
    if xx>xc[0] and xx<xc[len(xc)-1] and yy>yc[0] and yy<yc[len(yc)-1]:
        return True
    else:
        return False
66/51: bul=filter(inside, (x,y))
66/52: bul[0]
66/53: bul
66/54: xy
66/55: bul=filter(inside, xy)
66/56: bul
66/57: bul.shape
66/58: numpy.array(bul)
66/59: bul.shape
66/60: bul=numpy.array(bul)
66/61: bul.shape
66/62: history
66/63: !top
66/64: history
66/65: xit
67/1: from load_surfer import load_surfer
67/2:
x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
delx=(x[nx-1]-x[0])/(nx-1)
dely=(y[len(y)-1]-y[0])/(ny-1)
xc,yc,top_m,(nyc,nxc)=load_surfer('1011d4.lu_TOPO_M.grd')
delyc=(yc[len(yc)-1]-yc[0])/(nyc-1)
delxc=(xc[len(xc)-1]-xc[0])/(nxc-1)
67/3:
def inside(i):
    xx=xy[i][0]
    yy=xy[i][1]
    if xx>xc[0] and xx<xc[len(xc)-1] and yy>yc[0] and yy<yc[len(yc)-1]:
        return True
    else:
        return False
67/4: global xc,yc
67/5: xy=zip(x,y)
67/6: global xy
67/7: xy[1000][0]
67/8: xy[1000][1]
67/9: bul=filter(inside, range(len(xy)))
67/10: bul=numpy.array(bul)
67/11: import numpy
67/12: bul=numpy.array(bul)
67/13: bul.shape
67/14: bul=filter(not(inside), range(len(xy)))
67/15:
def outside(i):
    xx=xy[i][0]
    yy=xy[i][1]
    if xx>xc[0] and xx<xc[len(xc)-1] and yy>yc[0] and yy<yc[len(yc)-1]:
        return False
    else:
        return True
67/16: bul=filter(outside), range(len(xy)))
67/17: bul=filter(outside, range(len(xy)))
67/18: bul=numpy.array(bul)
67/19: bul.shape
67/20:
for i in bull:
    lu[i]=0
67/21:
for i in bull[:]:
    lu[i]=0
67/22:
for i in bul[:]:
    lu[i]=0
67/23: from save_surfer import save_surfer
67/24: lu.shape
67/25: lu=lu.reshape(5000,-1)
67/26: fname='lu_10.grd'
67/27: save_surfer(fname,nx,ny,x[0],y[0],delx,numpy.matrix.transpose(lu).reshape(nx*ny))
67/28: save_surfer(fname,nx,ny,x[0],y[0],delx,numpy.matrix.transpose(lu).reshape(nx*ny))
67/29: bul
67/30: nx,ny
67/31:  x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
67/32: lu=lu.reshape(5000,-1)
67/33: save_surfer(fname,nx,ny,x[0],y[0],delx,numpy.matrix.transpose(lu).reshape(nx*ny))
67/34:  x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
67/35: load_surfer('lu_1.grd')
67/36: lu=lu.reshape(3600,-1)
67/37: lu=numpy.matrix.transpose(lu)
67/38: lu=lu.reshape(3600*5000)
67/39:
for i in bul[:]:
    lu[i]=0
67/40: lu=lu.reshape(5000,-1)
67/41: save_surfer(fname,nx,ny,x[0],y[0],delx,numpy.matrix.transpose(lu).reshape(nx*ny))
67/42: save_surfer(fname,nx,ny,x[0],y[0],delx,numpy.matrix.transpose(lu).reshape(nx*ny))
67/43:
def outside(i):
     xx,yy=xy[i]
     if xx>xcmin and xx<xcmax and yy>ycmin and yy<ycmax:
         return False
     else:
         return True
67/44: xcmin,ycmin = min(x), min(y)
67/45: xcmin,ycmin
67/46: xcmax,ycmax = max(x), max(y)
67/47: xcmax,ycmax
67/48: global xcmin,ycmin, xcmax,ycmax
67/49: x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
67/50:  xy=zip(x,y)
67/51: xcmin,ycmin,xcmax,ycmax = min(xc), min(yc), max(xc), max(yc)
67/52: xcmin,ycmin,xcmax,ycmax
67/53: global xy
67/54: i
67/55: x1,y1=xy[2000]
67/56: x1,y1
67/57: x1
67/58: y1
67/59: bul=numpy.array(filter(outside, range(len(xy))))
67/60: bul
67/61:
for i in bul[:]:
    lu[i]=0
67/62: save_surfer(fname,nx,ny,x[0],y[0],delx,lu)
67/63: lu=numpy.matrix.transpose(lu.reshape(3600,-1))
67/64: top_m=numpy.matrix.transpose(top_m.reshape(nyc,-1))
67/65: top_m.shape
67/66: x=numpy.matrix.transpose(x.reshape(3600,-1))
67/67: y=numpy.matrix.transpose(y.reshape(3600,-1))
67/68: yc=numpy.matrix.transpose(yc.reshape(nyc,-1))
67/69: xc=numpy.matrix.transpose(xc.reshape(nyc,-1))
67/70: x
67/71: x.shape
67/72: x[0,1]
67/73: x[0,2]
67/74: x[1,0]
67/75: x[1,1]
67/76: y[1,0]
67/77: y[1,1]
67/78:
for i in range(nx):
    if xc[0][0] > x[i][0]:
        print i
        break
67/79:
for i in range(nx):
    if xc[0][0] < x[i][0]:
        print i
        break
67/80:
for i in range(nx-1,0):
    if xc[0][0] > x[i][0]:
        print i
        break
67/81:
for i in range(nx-1,0):
    if xc[nxc-1][0] > x[i][0]:
        print i
        break
67/82:
for i in range(nx-1,0,-1):
    if xc[nxc-1][0] > x[i][0]:
        print i
        break
67/83:
for i in range(nx-1,0,-1):
    if xc[nxc-1][nyc-1] > x[i][nyc-1]:
        print i
        break
67/84:
for i in range(ny-1,0,-1):
    if yc[nxc-1][nyc-1] > y[nx-1][i]:
        print i
        break
67/85:
for i in range(ny):
    if yc[0][0] < y[0][i]:
        print i
        break
67/86: dM=(3685-1681)/(nxc-1)
67/87: dM
67/88: dN=(3417-93)/(nyc-1)
67/89: print dN
67/90: history
67/91:
for i in xrange(nx):
    if xc[0][0] < x[i][0]:
        i1=i
        break
for i in xrange(nx):
    ii=nx-i-1
    if xc[nxc][0] > x[ii][0]:
        i2=ii
        break
for i in range(ny):
    if yc[0][0] < y[0][i]:
        j1=i
        break
for i in range(ny):
    ii=ny-i-1
    if yc[0][nyc] > y[0][ii]:
        j2=i
        break
dM=(i2-i1)/(nxc-1)
dM
dN=(j2-j1)/(nyc-1)
dN
67/92:
for i in xrange(nx):
    if xc[0][0] < x[i][0]:
        i1=i
        break
for i in xrange(nx):
    ii=nx-i-1
    if xc[nxc-1][0] > x[ii][0]:
        i2=ii
        break
for i in range(ny):
    if yc[0][0] < y[0][i]:
        j1=i
        break
for i in range(ny):
    ii=ny-i-1
    if yc[0][nyc-1] > y[0][ii]:
        j2=i
        break
dM=(i2-i1)/(nxc-1)
dM
dN=(j2-j1)/(nyc-1)
67/93: dN, dM, i1,i2,j1,j2
67/94:
for i in range(ny):
    ii=ny-i-1
    if yc[0][nyc-1] > y[0][ii]:
        j2=ii
        break
dM=(i2-i1)/(nxc-1)
dM
dN=(j2-j1)/(nyc-1)
dN
67/95: dN, dM, i1,i2,j1,j2
67/96: lu2=[]
67/97:
for i in xrange(i1,i2,1):
    for j in xrange(j1,j2,1):
        ii=i-i1
        lu2[i,j]
67/98:
for i in xrange(i1,i2,1):
    for j in xrange(j1,j2,1):
        ii=i-i1
        jj=j-j1
        lu2[ii,jj].append(lu[i,j])
67/99:
for i in xrange(i1,i2,1):
    for j in xrange(j1,j2,1):
        lu2.append(lu[i,j])
67/100: lu2.shape
67/101: lu2=numpy.array(lu2)
67/102: lu2=lu2.reshape((i2-i1+1),-1)
67/103: lu2.shape
67/104: lu2=lu2.reshape((i2-i1),-1)
67/105: lu2.shape
67/106: fname
67/107: save_surfer(fname,(i2-i1),(j2-j1),xc[0][0],yc[0][0],delx,numpy.matrix.transpose(lu2).reshape((i2-i1)*(j2-j1)))
67/108: delx,delxc
67/109: delxc/delx
67/110: j2-j1
67/111: history
67/112: x2
67/113: x2,y2 =[]
67/114: x2,y2 =[],[]
67/115:
for i in xrange(i1,i2,1):
    for j in xrange(j1,j2,1):
        x2.append(x[i,j])
        y2.append(y[i,j])
67/116: xc.shape
67/117: yc.shape
67/118: top_m.shape
67/119: xyc=zip(xc,yc)
67/120: top=dict(xyc,top_m)
67/121: top=dict(zip(xyc,top_m))
67/122: top=dict(zip(xc,yc,top_m))
67/123: top=dict(zip(xyc,list(top_m)))
67/124: xyc.type
67/125: xyc.shape
67/126: xyc=numpy.array(xyc)
67/127: xyc.shape
67/128: xyc
67/129: xyc[0,1,0],yc[0,0]
67/130: xyc[0,1,100],yc[0,100]
67/131: xyc[20,1,100],yc[20,100]
67/132: xyc[20,3,100],yc[20,100]
67/133: history
67/134: xyc=[]
67/135:
for i in xrange(nxc):
    for j in xrange(nyc):
        xyc.append(zip(xc[i,j],yc[i,j]))
67/136:
for i in xrange(nxc):
    for j in xrange(nyc):
        a=zip(xc[i,j],yc[i,j])
        xyc.append(a)
67/137: xyc=zip(xc,yc)
67/138: xyc
67/139: xyc[0]
67/140: xyc[0][0]
67/141: xc.shape,yc.shape
67/142: xyc=[]
67/143:
for i in xrange(nxc):
    for j in xrange(nyc):
        a=(xc[i,j],yc[i,j])
        xyc.append(a)
67/144: xyc[0,0,0]
67/145: xyc[0][0][0]
67/146: xyc
67/147: xyc[1]
67/148: xyc.shape
67/149: xyc=numpy.array(xyc)
67/150: xyc.shape
67/151: top1=top_m.reshape(nxc*nyc)
67/152: top1.shape
67/153: tt=dict(zip(xyc,top1))
67/154: xyc=numpy.array('i',xyc)
67/155: import array
67/156: xyc=array('i',xyc)
67/157: xyc=array.array('i',xyc)
67/158: xc=array.array('i',xc)
67/159: array.array('i')
67/160: xc=array.array(xc)
67/161: xc=array.array(list[xc])
68/1: from load_surferer import load_surfer
68/2: from load_surfer import load_surfer
68/3: x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
68/4: x,y,lu,(ny,nx)=load_surfer('lu_10.grd')
68/5: delx=(x[nx-1]-x[0])/(nx-1)
68/6: dely=(y[len(y)-1]-y[0])/(ny-1)
68/7: xc,yc,top_m,(nyc,nxc)=load_surfer('1011d4.lu_TOPO_M.grd')
68/8: delyc=(yc[len(yc)-1]-yc[0])/(nyc-1)
68/9: delxc=(xc[len(xc)-1]-xc[0])/(nxc-1)
68/10: import numpy as np
68/11: x[1000]
68/12: xc[1000]
68/13: xc[0]
68/14: xc[0].astype(int)
68/15: xc=xc.astype(int)
68/16: yc=yc.astype(int)
68/17: lu=lu.astype(int)
68/18: lu[1000]
68/19: lu[10000000]
68/20: lu[100000]
68/21:
for item in (x,y,lu):
    a=item
68/22:
for item in (x,y,lu):
    item=np.matrix.transpose(item.reshape(3324,-1))
68/23:
for item in (xc,yc,top_m):
    item=np.matrix.transpose(item.reshape(nyc,-1))
68/24:
for i in xrange(0,nx-1,24):
    ii=i/24
    for j in xrange(0,ny-1,24):
        jj=j/24
        if top_m[ii,jj]<0:
            lu[i,j]=7
68/25: lu.shape
68/26: xc.shape
68/27: xc,yc,top_m,(nyc,nxc)=load_surfer('1011d4.lu_TOPO_M.grd')
68/28:  x,y,lu,(ny,nx)=load_surfer('lu_10.grd')
68/29: x=np.matrix.transpose(x.reshape(3324,-1))
68/30: y=np.matrix.transpose(y.reshape(3324,-1))
68/31: lu=np.matrix.transpose(lu.reshape(3324,-1))
68/32: xc=np.matrix.transpose(xc.reshape(nyc,-1))
68/33: yc=np.matrix.transpose(yc.reshape(nyc,-1))
68/34: top_m=np.matrix.transpose(top_m.reshape(nyc,-1))
68/35: xc.shape
68/36: lu.shape
68/37:
for i in xrange(0,nx-1,24):
    ii=i/24
    for j in xrange(0,ny-1,24):
        jj=j/24
        if top_m[ii,jj]<0:
            lu[i,j]=7
68/38:
for i in xrange(0,nx-1,24):
    ii=i/24
    if ii < nxc:
        for j in xrange(0,ny-1,24):
            jj=j/24
            if jj < nyc:
                if top_m[ii,jj]<0:
                lu[i,j]=7
68/39:
for i in xrange(0,nx-1,24):
    ii=i/24
    if ii < nxc:
        for j in xrange(0,ny-1,24):
            jj=j/24
            if jj < nyc:
                if top_m[ii,jj]<0:
                    lu[i,j]=7
68/40: fname='lu_10.grd'
68/41: save_surfer(fname,nx,ny,x[0],y[0],delx,lu)
68/42: from save_surfer import save_surfer
68/43: save_surfer(fname,nx,ny,x[0],y[0],delx,lu)
68/44:  x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
68/45: lu=numpy.matrix.transpose(lu.reshape(3600,-1))
68/46: import numpy
68/47: lu=numpy.matrix.transpose(lu.reshape(3600,-1))
68/48: x=numpy.matrix.transpose(x.reshape(3600,-1))
68/49: y=numpy.matrix.transpose(y.reshape(3600,-1))
68/50: xc[0][0]
68/51:
for i in xrange(nx):
        if xc[0][0] < x[i][0]:
                i1=i
                break
    for i in xrange(nx):
68/52:         i2=ii
68/53:
for i in xrange(ny):
        if yc[0][0] < y[0][i]:
                j1=i
                break
    for i in xrange(ny):
68/54:
    if yc[0][nyc-1] > y[0][ii]:
            j2=ii
            break
68/55: run i1i2.py
68/56: global nx,ny,x,y,xc,yc
68/57: run i1i2.py
68/58: nx
68/59:
for i in xrange(nx):
        if xc[0][0] < x[i][0]:
                i1=i
                break
    for i in xrange(nx):
68/60:         i2=ii
68/61:         break
68/62:
    if yc[0][0] < y[0][i]:
            j1=i
            break
68/63:
    if yc[0][nyc-1] > y[0][ii]:
            j2=ii
            break
68/64:
for i in xrange(nx):
        if xc[0][0] < x[i][0]:
                i1=i
                break
68/65:
for i in xrange(nx):
        ii=nx-i-1
        if xc[nxc-1][0] > x[ii][0]:
                i2=ii
                break
68/66:
for i in xrange(ny):
        if yc[0][0] < y[0][i]:
                j1=i
                break
68/67:
for i in xrange(ny):
        ii=ny-i-1
        if yc[0][nyc-1] > y[0][ii]:
                j2=ii
                break
68/68: lu2=[]
68/69:
for i in xrange(i1,i2,1):
        for j in xrange(j1,j2,1):
            lu2.append(lu[i,j])
68/70: lu2=lu2.reshape((i2-i1),-1)
68/71: lu2=np.array(lu2)
68/72: lu2=lu2.reshape((i2-i1),-1)
68/73: nx2=i2-i1
68/74: ny2=j2-j1
68/75: x02=x[i1,j1]
68/76: y02=y[i1,j1]
68/77: save_surfer(fname,nx2,ny2,x02,y02,delx,lu2)
68/78: save_surfer(fname,nx2,ny2,x02,y02,delx,numpy.matrix.transpose(lu2).reshape(nx2*ny2))
68/79: history
68/80:
for i in xrange(0,nx2):
        ii=i/24
        if ii < nxc:
                for j in xrange(0,ny2):
                        jj=j/24
                        if jj < nyc:
                                if top_m[ii,jj]<0:
                                        lu2[i,j]=7
68/81: save_surfer(fname,nx2,ny2,x02,y02,delx,numpy.matrix.transpose(lu2).reshape(nx2*ny2))
68/82:
for i in xrange(0,nx2):
        ii=i/24
        if ii < nxc:
                for j in xrange(0,ny2):
                        jj=j/24
                        if jj < nyc:
                                if top_m[ii,jj]<0:
                                        lu2[i,j]=6
68/83: save_surfer(fname,nx2,ny2,x02,y02,delx,numpy.matrix.transpose(lu2).reshape(nx2*ny2))
68/84: dict_x, dict_y,dict_n=np.loadtxt('dict.txt')
68/85: dict_x, dict_y,dict_n=np.loadtxt('dict.txt')
68/86: a=np.loadtxt('dict.txt')
68/87: more a
68/88: a
68/89: a[1]
68/90: a=a*1000
68/91: a[1]
68/92: a.shape
68/93: ndict=a.shape[0]
68/94: mnx=min(a[:,1])
68/95: mnx=min(a[:,0])
68/96: mny=min(a[:,1])
68/97: mxy=max(a[:,1])
68/98: mxx=max(a[:,0])
68/99: mnx,mny,mxx,mxy
68/100: nxd=mxx-mnx
68/101: nyd=mxy-mny
68/102: ddict=[]
68/103:
for i in xrange(nxd):
    ix=i+mnx
    for j in xrange(nyd):
        iy=j+mny
        icheck=0
        for k in xrange(ndict):
            if a[k,0]==ix and a[k,1]==iy:
                ddict.append(a[k,2])
                icheck=1
        if icheck==0
68/104:
for i in xrange(nxd):
    ix=i+mnx
    for j in xrange(nyd):
        iy=j+mny
        icheck=0
        for k in xrange(ndict):
            if a[k,0]==ix and a[k,1]==iy:
                ddict.append(a[k,2])
                icheck=1
        if icheck==0:
            ddict.append(0)
68/105: nxd=int(mxx-mnx)
68/106: nxd
68/107: nxd=int(mxx-mnx)/1000
68/108: nxd
68/109: nyd=int(mxy-mny)/1000
68/110:
for i in xrange(nxd):
    ix=i*1000+mnx
    for j in xrange(nyd):
        iy=j*1000+mny
        icheck=0
        for k in xrange(ndict):
            if a[k,0]==ix and a[k,1]==iy:
                ddict.append(a[k,2])
                icheck=1
        if icheck==0:
            ddict.append(0)
68/111: history
68/112: ddict.shape
68/113: ddict=np.array(ddict)
68/114: ddict.shape
68/115: nxd,nyd
68/116: ddict=ddict.reshape(377,-1)
68/117: fname_d='dict.grd'
68/118: save_surfer(fname_f,nxd,nyd,mnx,mny,1000.,numpy.matrix.transpose(ddict).reshape(nxd*nyd))
68/119: save_surfer(fname_d,nxd,nyd,mnx,mny,1000.,numpy.matrix.transpose(ddict).reshape(nxd*nyd))
68/120: history
68/121: a=a.stype(int)
68/122: a=a.astype(int)
68/123: a[100]
68/124:
ddict=[]
for i in xrange(nxd):
    ix=int(i*1000+mnx)
    for j in xrange(nyd):
        iy=int(j*1000+mny)
        icheck=False
        for k in xrange(ndict):
            if a[k,0]==ix and a[k,1]==iy:
                ddict.append(int(a[k,2]/1000))
                icheck=True
                break
        if icheck==False:
            ddict.append(0)
68/125: !top
71/1: history
72/1: run i1i2.py
72/2: nxc,nyc ndct.shape
72/3: nxc,nyc, ndct.shape
72/4: run rd_dict.py
72/5: nxd,nyd
72/6: ddict.shape
72/7: np.matrix.transpose(ddict).reshape(nxd*nyd).shape
72/8: run rd_dict.py
72/9: run i1i2.py
72/10: run i1i2.py
72/11: save_surfer(fname_d,xc[0],yc[0],nx2,ny2,1000.,np.matrix.transpose(lu2).reshape(nx2*ny2))
72/12: xc.shape
72/13: save_surfer(fname_d,xc[0,0],yc[0,0],nx2,ny2,delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
72/14: xc[0,0],yc[0,0]
72/15: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
74/1: run paint.py
74/2: run pain.py
74/3: run pain.py
74/4: run pain.py
74/5:
import Image
import ImageDraw
import cv
74/6:
import image
import ImageDraw
import cv
74/7:
from PIL import Image, ImageDraw
import cv
74/8:
from PIL import Image, ImageDraw
import cv2
74/9: run pain.py
74/10: run pain.py
74/11: run pain.py
74/12: run pain.py
74/13: run pain.py
74/14:
from PIL import Image, ImageDraw
import cv2
74/15: run pain.py
74/16: run pain.py
75/1: import numpy as np
75/2: black=[255,255,255]
75/3: lower=np.array(black-15)
75/4: a=black-15
75/5: a=black-[15,15,15]
75/6: import cv2
75/7: img = cv2.imread('lu1957.tiff')
75/8: img.shape
75/9: global mn=img.shape
75/10: frame=img
75/11:
for i in frame:
    i=0
75/12: frame[1,3,1]
75/13: frame=255
75/14: frame[1,3,1]
75/15: frame=img
75/16: frame[:,:,:]=255
75/17: frame[1,3,1]
75/18: !vi inpaint.py
75/19: run inpaint.py
75/20: !vi inpaint.py
75/21: run inpaint.py
75/22: !vi inpaint.py
75/23: !vi inpaint.py
75/24: run inpaint.py
75/25: run inpaint.py
75/26: run inpaint.py
75/27: run inpaint.py
75/28: run inpaint.py
75/29: mn
75/30: run inpaint.py
75/31: run inpaint.py
75/32: !top
75/33: run inpaint.py
75/34: frame = np.array([0]*3)
75/35: frame
75/36: frame[:]
75/37: frame[0:3]=[255,255,255]
75/38: frame[:]
75/39: run inpaintP.py
75/40: mn=img.shape
75/41: img.reshape(mn[0]*mn[1],-1)
75/42: img=img.reshape(mn[0]*mn[1],-1)
75/43: img.shape
75/44: img=img.reshape(mn[0],mn[1],-1)
75/45: img.shape
76/1: import numpy as np
76/2: import cv2
76/3: import statistics, pp
76/4: from PIL import Image
76/5: img = cv2.imread('lu1957.tiff')
76/6: mask=img
76/7: mask[:,:,:]=0
76/8: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
76/9: mask[100:200,300:400,:]=255
76/10: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
76/11: mask=mask.astype(int)
76/12: mask
76/13: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
76/14: mask.shape
76/15: mask.type
76/16: mask = Image.new('L', img.size)
76/17: mask = Image.new('L', img.size,)
76/18: mask = Image.new('L', img.size,,)
76/19: mask = Image.new('L', img.size,[0,0,0],)
76/20: mask = Image.new('L', img.size,[0,0,0])
76/21: mask = Image.new('L', img.shape,[0,0,0])
76/22: mask = Image.new('L', img.shape[0,1,:],[0,0,0])
76/23: mask = Image.new('L', img.shape[0],img.shape[1])
76/24: mask = Image.new('L', [img.shape[0],img.shape[1]])
76/25: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
76/26: mask = np.array(Image.new('L', [img.shape[0],img.shape[1]]))
76/27: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
76/28: mask.shape
76/29: maskdraw = ImageDraw.Draw(mask)
76/30: from PIL import Image, ImageDraw
76/31: maskdraw = ImageDraw.Draw(mask)
76/32: mask = Image.new('L', [img.shape[0],img.shape[1]])
76/33: maskdraw = ImageDraw.Draw(mask)
76/34:
for x in range(img.size[0]):
    for y in range(img.size[1]):
         if img[x,y,0:3] == (0,0,0):
            maskdraw.point((x,y), 255)
76/35:
for x in range(img.shape[0]):
    for y in range(img.shape[1]):
         if img[x,y,0:3] == (0,0,0):
            maskdraw.point((x,y), 255)
76/36:
for x in range(img.shape[0]):
    for y in range(img.shape[1]):
         if img[x,y,0:3] == [0,0,0]:
            maskdraw.point((x,y), 255)
77/1: run inpaint.py
77/2: img.size
77/3: mn=img.shape
77/4: mask = Image.new('L', mn)
77/5: mask = Image.new('L', [mn[0]*mn[1],mn[2]])
77/6: maskdraw = ImageDraw.Draw(mask)
77/7: from PIL import Image, ImageDraw
77/8: maskdraw = ImageDraw.Draw(mask)
77/9: .shape
77/10: maskdraw.shape
77/11: maskdraw
77/12: mask
77/13: cv_im = cv.CreateImageHeader(img.size, cv.IPL_DEPTH_8U, 3)
77/14: cv_im = cv2.CreateImageHeader(img.size, cv.IPL_DEPTH_8U, 3)
77/15: mask.shape
77/16: mask
77/17: mask[:,0:3]=0
77/18: mask[:,0:3]=0
77/19: mask=img
77/20: mask[:,0:3]=0
77/21: mask.shape
77/22: mask
77/23: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/24: maskBGR.convertTo(mask, CV_8UC1)
77/25: cv2.convertTo(mask, CV_8UC1)
77/26: ??cv2
77/27: ?cv2
77/28: help cv2
77/29: help cv
77/30: mask=cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
77/31: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/32: Image.fromarray(dst).save('lu_4.tiff')
77/33: mask[1000:2000,3000:4000,:]=255
77/34: mask.reshape[3600,5000,-1]
77/35: mask.reshape(3600,5000,-1)
77/36: mask=mask.reshape(3600,5000,-1)
77/37: mask[1000:2000,3000:4000,:]=255
77/38: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/39: Image.fromarray(dst).save('lu_4.tiff')
77/40:  mask[1000:2000,3000:4000,:]
77/41:  mask[1000:2000,3000:4000,0:3]
77/42: mask[1000:2000,3000:4000,0:3]=[255,255,255]
77/43: mask[1000:2000,3000:4000,:]=[255,255,255]
77/44: mask.shape
77/45: mask=img
77/46: mask.shape
77/47: mask[:,:,:]=0
77/48: mask.shape
77/49: mask[1000:2000,3000:4000,0:3]=[255,255,255]
77/50: mask=cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
77/51: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/52: Image.fromarray(dst).save('lu_4.tiff')
77/53: Image.fromarray(mask).save('lu_4.tiff')
77/54: mask[990:1990,2990:3990,0:3]=[0,0,0]
77/55: mask.shape
77/56: mask=img
77/57: mask[:,:,:]=0
77/58: mask[1000:2000,3000:4000,0:3]=[255,255,255]
77/59: mask[990:1990,2990:3990,0:3]=[0,0,0]
77/60: mask=cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
77/61: Image.fromarray(mask).save('lu_4.tiff')
77/62: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/63: Image.fromarray(mask).save('lu_4.tiff')
77/64: Image.fromarray(dst).save('lu_4.tiff')
77/65: Image.fromarray(img).save('lu_4.tiff')
77/66: img = cv2.imread('lu1957.tiff')
77/67: Image.fromarray(img).save('lu_4.tiff')
77/68: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/69: Image.fromarray(dst).save('lu_4.tiff')
77/70: run inpaint.py
77/71: run inpaint.py
78/1: run inpaint.py
78/2: !vi inpaint.py
78/3: fromp inpaintP.py import maskrgb
78/4: fromp inpaintP import maskrgb
78/5: from inpaintP import maskrgb
79/1: run inpaint.py
79/2: from inpaintP import maskrgb
79/3: mn=img.shape
79/4: img=img.reshape(mn[0]*mn[1],-1)
79/5: pool = Pool(processes=10)
79/6: mask = pool.map(maskrgb,img)
79/7: mask=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
79/8: img = cv2.imread('lu1957.tiff')
79/9: mask=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
79/10: Image.fromarray(mask).save('lu_4.tiff')
79/11: Image.fromarray(mask).save('lu_gray.tiff')
77/72: mask = cv2.imread('lu_gray.tiff')
77/73: mask=cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
77/74: Image.fromarray(mask).save('lu_4.tiff')
77/75: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
77/76: Image.fromarray(dst).save('lu_4.tiff')
77/77: mask
77/78: mask.shape
77/79: mask[1800,2500]
77/80: max(np.array(mask))
77/81: max(np.array(mask).all)
77/82: max(np.array(mask.all))
77/83: a=np.array(mask)
77/84: max(a)
77/85: a.shape
77/86: max(a[0:])
77/87: max(a[0:a.size])
77/88: a.size
77/89: a=a.reshape(a.size)
77/90: max(a)
77/91: mask = cv2.imread('lu_gray.tiff',0)
77/92: Image.fromarray(mask).save('lu_41.tiff')
77/93: mask = cv2.imread('lu_gray.tiff',255)
77/94: Image.fromarray(mask).save('lu_41.tiff')
77/95: mask.shape
77/96:
for i in xrange(1800):
    for j in xrange(2500):
        if mask[i,j] > 15:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/97: Image.fromarray(mask).save('lu_41.tiff')
77/98: mask = cv2.imread('lu_gray.tiff',0)
77/99:
for i in xrange(1800):
    for j in xrange(2500):
        if mask[i,j] > 25:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/100: Image.fromarray(mask).save('lu_41.tiff')
77/101: mask.shape
77/102: Image.fromarray(mask).save('lu_41.tiff')
77/103: mask = cv2.imread('lu_gray.tiff',0)
77/104:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] > 15:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/105: Image.fromarray(mask).save('lu_41.tiff')
77/106: mask = cv2.imread('lu_gray.tiff',0)
77/107:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] > 5:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/108: Image.fromarray(mask).save('lu_41.tiff')
77/109:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] >200:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/110: mask = cv2.imread('lu_gray.tiff',0)
77/111:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] >200:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/112: Image.fromarray(mask).save('lu_41.tiff')
77/113: mask = cv2.imread('lu_gray.tiff',0)
77/114:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] >250:
            mask[i,j]=255
        else:
            mask[i,j]=0
77/115: pool
77/116:
def msk(mask):
    for i in xrange(3600):
        for j in xrange(5000):
            if mask[i,j] >250:
                mask[i,j]=255
            else:
                mask[i,j]=0
    return mask
77/117:
def msk(mask,L):
    for i in xrange(3600):
        for j in xrange(5000):
            if mask[i,j] >L:
                mask[i,j]=255
            else:
                mask[i,j]=0
    return mask
77/118: mask = cv2.imread('lu_gray.tiff',0)
77/119: mask=loop.map(msk,(mask,250))
77/120: mask=pool.map(msk,(mask,250))
79/12: !top
80/1: mask = cv2.imread('lu_gray.tiff',0)
80/2:
from PIL import Image
import cv2
80/3: mask = cv2.imread('lu_gray.tiff',0)
80/4:
def msk(mask,L):
    for i in xrange(3600):
        for j in xrange(5000):
            if mask[i,j] >L:
                mask[i,j]=255
            else:
                mask[i,j]=0
    return mask
80/5: mask=msk(mask,250)
80/6: Image.fromarray(mask).save('lu_41.tiff')
80/7: mask = cv2.imread('lu_gray.tiff',0)
80/8: mask=msk(mask,225)
80/9: Image.fromarray(mask).save('lu_41.tiff')
80/10: mask = cv2.imread('lu_gray.tiff',0)
80/11: mask=msk(mask,180)
80/12: Image.fromarray(mask).save('lu_41.tiff')
80/13: mask = cv2.imread('lu_gray.tiff',0)
80/14: mask=msk(mask,150)
80/15: Image.fromarray(mask).save('lu_41.tiff')
80/16: mask = cv2.imread('lu_gray.tiff',0)
80/17: mask=msk(mask,100)
80/18: Image.fromarray(mask).save('lu_41.tiff')
80/19: mask = cv2.imread('lu_gray.tiff',0)
80/20: mask=msk(mask,125)
80/21: Image.fromarray(mask).save('lu_41.tiff')
80/22: mask = cv2.imread('lu_gray.tiff',0)
80/23: mask=msk(mask,137)
80/24: Image.fromarray(mask).save('lu_41.tiff')
80/25: history
80/26: import statistics, pp
80/27: img = cv2.imread('lu1957.tiff')
80/28: dst = cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
80/29: Image.fromarray(dst).save('lu_4.tiff')
80/30:
for i in xrange(3600):
    for j in xrange(5000):
        if mask[i,j] == 255:
            mask[i,j]=0
        else:
            mask[i,j]=255
80/31: cv2.INPAINT_TELEA
80/32: dst=pool.apply_async(cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA),img,mask,10,cv2.INPAINT_TELEA)
80/33: from multiprocessing import Pool
80/34: pool = Pool(processes=10)
80/35: dst=pool.apply_async(cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA),img,mask,10,cv2.INPAINT_TELEA)
80/36: dst=cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
80/37: Image.fromarray(dst).save('lu_4.tiff')
80/38: img = cv2.imread('lu_1.tiff')
80/39: dst=cv2.inpaint(img,mask,10,cv2.INPAINT_TELEA)
80/40: Image.fromarray(dst).save('lu_4.tiff')
80/41: cd python-kmeans-dominant-colors/
80/42: from load_surfer import load_surfer
80/43: x,y,lu,(ny,nx)=load_surfer('lu_1.grd')
80/44: xc,yc,ndict,(nyc,nxc)=load_surfer('dict.grd')
80/45: x=np.matrix.transpose(x.reshape(ny,-1))
80/46: import numpy as np
80/47: x=np.matrix.transpose(x.reshape(ny,-1))
80/48: y=np.matrix.transpose(y.reshape(ny,-1))
80/49: lu=np.matrix.transpose(lu.reshape(ny,-1))
80/50: xc=np.matrix.transpose(xc.reshape(nyc,-1))
80/51: yc=np.matrix.transpose(yc.reshape(nyc,-1))
80/52: mv ndict ndct
80/53: ndict=np.matrix.transpose(ndict.reshape(nyc,-1))
80/54:
for i in xrange(nx):
    if xc[0][0] < x[i][0]:
        i1=i
        break
for i in xrange(nx):
    ii=nx-i-1
    if xc[nxc-1][0] > x[ii][0]:
        i2=ii
        break
for i in xrange(ny):
    if yc[0][0] < y[0][i]:
        j1=i
        break
for i in xrange(ny):
    ii=ny-i-1
    if yc[0][nyc-1] > y[0][ii]:
        j2=ii
        break
80/55: i1,i2,j1,j2
80/56: print xc[0][0], x[i1][0]
80/57: print xc[nxc-1][0], x[i2][0]
80/58: print xc[1][0], x[i1+1][0]
80/59: print xc[1][0], x[i1+3][0]
80/60: print xc[1][0], x[i1+8][0]
80/61: pwd
80/62: run dictX8.py
80/63: run dictX8.py
80/64: ndct2=np.array(ndct2).reshape(nx2,-1)
80/65: fname_d='ndctX8.grd'
80/66: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delx,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/67: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/68: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/69: fname_d='dictX8.grd'
80/70: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/71: delxc=delxc/8
80/72: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/73: from dictX8 import smoth
80/74: from dictX8 import smoth
80/75:
for k in xrange[8]:
    ndct2=smoth(ndct2)
80/76:
for k in xrange(8):
    ndct2=smoth(ndct2)
80/77: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/78: delxc=(xc[nxc-1][0]-xc[0][0])/(nx2-1)
80/79: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nx2*ny2))
80/80: ndct=smoth(ndct)
80/81: delxc=(xc[nxc-1][0]-xc[0][0])/(nxc-1)
80/82: save_surfer(fname_d,nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct).reshape(nxc*nyc))
80/83:
for k in xrange(8):
    ndct=smoth(ndct)
80/84: save_surfer(fname_d,nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct).reshape(nxc*nyc))
80/85: xxc,yyc,ndict,(nyc,nxc)=load_surfer('dict.grd')
80/86: ndict=np.matrix.transpose(ndict.reshape(nyc,-1))
80/87:
for i in xrange(nx2):
    for j in xrange(ny2):
        ic=i/8
        jc=j/8
        if ndct[i,j] < 1000:
            ndct2[i,j]=0
        else:
            ndct2[i,j]=ndict[ic,jc]
80/88:
for i in xrange(nx2):
    for j in xrange(ny2):
        ic=i/8
        jc=j/8
        if ic < nxc and jc < nyc:
            if ndct[i,j] < 1000:
                ndct2[i,j]=0
            else:
                ndct2[i,j]=ndict[ic,jc]
80/89: nxc,nyc
80/90: history
80/91: ndcts=[]
80/92:
for i in xrange(nxc):
    for j in xrange(nyc):
        if ndct[i,j] < 1000:
            ndct2[i,j]=0
        else:
            ndct2[i,j]=ndict[i,j]
80/93: fname_d='dict2.grd'
80/94: save_surfer(fname_d,nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nxc*nyc))
80/95: ndct2.shape
80/96: bdct2=ndct
80/97:
for i in xrange(nxc):
    for j in xrange(nyc):
        if ndct[i,j] < 1000:
            ndct2[i,j]=0
        else:
            ndct2[i,j]=ndict[i,j]
80/98: save_surfer(fname_d,nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nxc*nyc))
80/99: ndct2=ndct
80/100:
for i in xrange(nxc):
    for j in xrange(nyc):
        if ndct[i,j] < 1000:
            ndct2[i,j]=0
        else:
            ndct2[i,j]=ndict[i,j]
80/101: save_surfer(fname_d,nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nxc*nyc))
80/102: save_surfer('dictX8.grd',nxc,nyc,xc[0,0],yc[0,0],delxc,np.matrix.transpose(ndct2).reshape(nxc*nyc))
80/103: x
80/104: xx, yy = np.mgrid[-1:1:20j, -1:1:20j]
80/105: xx
80/106: xx.shape
80/107: x.shape
80/108: ndict.shape
80/109: history
80/110: xxc,yyc,ndict,(nyc,nxc)=load_surfer('dict.grd')
80/111: ndict=np.matrix.transpose(ndict.reshape(nyc,-1))
80/112: tck = interpolate.bisplrep(x, y, ndict, s=0)
80/113: from scipy import interpolate
80/114: tck = interpolate.bisplrep(x, y, ndict, s=0)
80/115: len(x),len(y),len(ndict)
80/116: nxc,nyc
80/117: len(xc),len(yc),len(ndict)
80/118: tck = interpolate.bisplrep(xc, yc, ndict, s=0)
81/1: from load_surfer import load_surfer
81/2: run i1i2.py
81/3: fname_d='lu_11.grd'
81/4: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
81/5: from save_surfer import save_surfer
81/6: save_surfer(fname_d,nx2,ny2,xc[0,0],yc[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
81/7: ndct.shape
81/8: nx2/8
81/9: ny2/8
81/10: delx/8,delxc
81/11: delx/8
81/12: delxc
81/13: delx*8
81/14: run i1i2.py
81/15: run i1i2.py
81/16: run i1i2.py
81/17: run i1i2.py
81/18: run i1i2.py
81/19: ic=[0]*7
81/20: ic
81/21: lu2[100,100]
81/22: ic[lu2[100,100]]=1
81/23: lu2.astype(int)
81/24: lu2=lu2.astype(int)
81/25: ic[lu2[100,100]]=1
81/26: ic
81/27: ic[:]=0
81/28: ic[:]=[0]
81/29: ic
81/30: a.index(max(ic))
81/31: ic.index(max(ic))
81/32: ic[lu2[100,100]]=1
81/33: ic=[0]*7
81/34: ic[lu2[100,100]]=1
81/35: ic.index(max(ic))
81/36: ic
81/37: sum(ic)
81/38: sum(ic,mask=6)
81/39: run i1i2.py
81/40: run i1i2.py
81/41: nx,ny
81/42: x.shape
81/43: lu.shape
81/44: from load_surfer import load_surfer
81/45: x,y,lu,(nx,ny)=load_surfer('lu_1.grd')
81/46: lu.shape
81/47: lst
82/1: run i1i2.py
82/2: run lu_top.py
82/3: run lu_top.py
82/4: history
82/5: run lu_top.py
82/6: run lu_top.py
82/7: run lu_top.py
82/8: run lu_top.py
82/9: nx2
82/10: run lu_top.py
82/11: run lu_top.py
82/12: x2.shape
82/13: xt.shape
82/14: i,j
82/15: i+1,j
82/16: run lu_top.py
82/17: run lu_top.py
82/18: xt.shape
82/19: xt[:,0]
82/20:
for i in xrange(nxt-1):
    for ii in xrange(nx2):
        j=0
        jj=0
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:
            print i,ii
82/21:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    for ii in xrange(nx2):
        c=[]
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:
            c.append(ii)
    mini[i]=min(c)
    maxi[i]=max(c)
82/22:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    for ii in xrange(nx2):
        c=[]
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:
            c.append(ii)
    if c != []:        
        mini[i]=min(c)
        maxi[i]=max(c)
82/23: mini
82/24: maxi
82/25:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    for ii in xrange(nx2):
        c=[]
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:
            c.append([ii])
    if c != []:        
        mini[i]=min(c)
        maxi[i]=max(c)
82/26: mini
82/27:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    for ii in xrange(nx2):
        c=[]
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:        
            c.append([ii])
            print i,ii,c
    if c != []:        
        mini[i]=min(c)
        maxi[i]=max(c)
82/28:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    c=[]
    for ii in xrange(nx2):
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:        
            c.append([ii])
            print i,ii,c
    if c != []:        
        mini[i]=min(c)
        maxi[i]=max(c)
82/29: mini
82/30: maxi
82/31:
jj=0
j=0
mini=[0]*nxt
maxi=[0]*nxt
for i in xrange(nxt-1):
    c=[]
    for ii in xrange(nx2):
        if x2[ii,jj] > xt[i,j] and x2[ii,jj] <= xt[i+1,j]:        
            c.append(ii)
            print i,ii,c
    if c != []:        
        mini[i]=min(c)
        maxi[i]=max(c)
82/32: history
82/33: run lu_top.py
82/34: run lu_top.py
82/35: x2.shape
82/36: nx2,ny2
82/37: !head -n4 lu_11.grd
83/1: run lu_top.py
83/2: grd
83/3: xc,yc,ndct,(nxc,nyc)=load_surfer('dict.grd')
83/4: x2,y2,lu2,(nx2,ny2)=load_surfer('lu_11.grd')
83/5: x2,y2,lu2,(nx2,ny2)=load_surfer('lu_1.grd')
83/6: run i1i2.py
83/7: save_surfer(fname_d,nx2,ny2,x2[0,0],y2[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
83/8: save_surfer(fname_d,nx2,ny2,x2[0,0],y2[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
83/9: x2,y2,lu2,(nx2,ny2)=load_surfer('lu_11.grd')
83/10: lu2=lu2.astype(int)
83/11: save_surfer(fname_d,nx2,ny2,x2[0,0],y2[0,0],delx,np.matrix.transpose(lu2).reshape(nx2*ny2))
83/12: x2,y2,lu2,(nx2,ny2)=load_surfer('lu_11.grd')
83/13: lu2.shape
83/14: load_surfer('lu_11.grd')
83/15: load_surfer('lu_12.grd')
83/16: load_surfer('lu_11.grd')
83/17: load_surfer('lu_10.grd')
83/18: lu2.shape
83/19: lu2.size
83/20: load_surfer('dict.grd')
83/21: load_surfer('lu_10.grd')
83/22: load_surfer('lu_10.grd')
84/1: from load_surfer import load_surfer
84/2: load_surfer('lu_10.grd')
84/3: load_surfer('lu_10.grd')
84/4: load_surfer('lu_10.grd')
84/5: load_surfer('lu_10.grd')
84/6: print nx,ny,nx*ny,grd.shape
84/7: load_surfer('lu_10.grd')
84/8: load_surfer('lu_10.grd')
84/9: load_surfer('lu_10.grd')
84/10: load_surfer('lu_10.grd')
85/1: from load_surfer import load_surfer
85/2: load_surfer('lu_10.grd')
85/3: from load_surfer import load_surfer
85/4: load_surfer('lu_10.grd')
86/1: from load_surfer import load_surfer
86/2:  load_surfer('lu_10.grd')
86/3: !ls *py
87/1: run "lu_top.py"
87/2: lu2.shape
87/3: nx2.ny2
87/4: nx2,ny2
87/5: lu2[6686530]
87/6: lu2[6686529]
87/7: del lu2[6686529]
87/8: del list(lu2[6686529])
87/9: lu=list(lu2)
87/10: len(lu)
87/11: del lu[6686529]
87/12: lu2=np.array(lu)
87/13: lu2.shape
87/14: lu2=np.matrix.transpose(lu2.reshape(ny2,-1))
87/15: load_surfer('lu_10.grd')
87/16: history
87/17: x,y,lu2,ny,nx=load_surfer('lu_11.grd')
87/18: x,y,lu2,(ny,nx)=load_surfer('lu_11.grd')
87/19: len(lu2),x.shape,len(y)
88/1: from load_surfer import load_surfer
88/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
88/3: run i1i2.py
89/1: from load_surfer import load_surfer
89/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
89/3: x2
89/4: tmp,xtmp,ytmp=[]
89/5: tmp,xtmp,ytmp=[],[],[]
89/6: tmp
89/7: ytmp
90/1: from load_surfer import load_surfer
90/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
90/3: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
91/1: from load_surfer import load_surfer
91/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
92/1: from load_surfer import load_surfer
92/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
93/1: from load_surfer import load_surfer
93/2: x2,y2,lu2,(ny2,nx2)=load_surfer('lu_11.grd')
94/1: run lu_top.py
94/2: xc.shape
94/3: x2.shape
95/1: run lu_top.py
95/2: run lu_top.py
96/1: run lu_top.py
96/2: run lu_top.py
96/3: !lst
96/4: run lu_top.py
96/5: mini
96/6: maxi
96/7: ic
96/8:
for i in xrange(nxt):
    for j in xrange(nyt):
       if mini[i]*maxi[i]*minj[j]*maxj[j] >0:
           ic=[0]*8
           for ii in xrange(mini[i],maxi[i]):
               for jj in xrange(minj[j],maxj[j]):
                   k=lu2[ii,jj].astype(int)
                   ic[k]=ic[k]+1
           k=max(ic)
           print i,j, ic
           if k > 0:
               lu3[i,j]=ic.index(ic[0:8])
96/9: ic
96/10: i
96/11: minj
96/12: maxj
96/13: history
96/14: run lu_top.py
96/15: lu3[i,j]=ic.index(ic)
96/16: ic.index(ic)
96/17: k.index(ic)
96/18: max(ic).index(ic)
96/19: index(ic)
96/20: ic.index(max(ic))
96/21: run lu_top.py
96/22: run lu_top.py
96/23: f=[0]*nxt*nyt*27
96/24: f=np.array(f).reshape(nxt,nyt,-1)
96/25: f.shape
96/26:
for i in xrange(nxt):
    for j in xrange(nyt):
        f[i,j,27]=top_m[i,j]
        if top_m[i,j]<0:
            f[i,j,1]=1
96/27:
f=[0]*nxt*nyt*28
f=np.array(f).reshape(nxt,nyt,-1)
96/28:
for i in xrange(nxt):
    for j in xrange(nyt):
        f[i,j,27]=top_m[i,j]
        if top_m[i,j]<0:
            f[i,j,1]=1
96/29: cd ../..
96/30: cd Monte\ Carlo
96/31: run IWWM.py
96/32: ws
96/33: ws['A2']
96/34: print ws['A2']
96/35: wb.load("sample.xlsx")
96/36:
from openpyxl import Workbook
wb = Workbook()
96/37: wb.load("sample.xlsx")
96/38:
from openpyxl import load_workbook
wb2= load_workbook('test.xlsx')
96/39:
from openpyxl import load_workbook
wb2= load_workbook('sample.xlsx')
96/40: a=wb2['A3']
96/41: a=wb2.active['A3']
96/42: print a
96/43: print a+1
96/44: print a.value+1
96/45:     wb2= load_workbook('IWWM.xlsx').active
96/46: wb2
96/47: wb2= load_workbook('IWWM.xlsx').active
96/48: wb2.get_sheet_names()
96/49: wb2=load_workbook('IWWM.xlsx')
96/50: wb2.get_sheet_names()
96/51: wb2.get_sheet_names()
96/52: wb2=load_workbook('sample.xlsx')
96/53: wb2.get_sheet_names()
96/54: wb2=load_workbook('IWWM.xlsx')
96/55: wb2.get_sheet_names()
96/56: data=wb2.2006
96/57: data=wb2.sheet('2006')
96/58: ws=wb2['2006']
96/59: ws['A2'].value
96/60: !cat IWWM.txt
96/61: ws['B26'].value*(ws['D26'].value*ws['E26'].value)*10^(-3)*25
96/62: ws['B26'].value*(ws['D26'].value*ws['E26'].value)*0.001*25
96/63: ws['B3'].value
96/64: ws['B3'].value.astype(int)
96/65: ws['B3'].value+1
96/66:
a=[]
for i in xrange(2,25):
    a.append( ws.cell(row=i, column=2).value)
96/67: a
96/68: history
96/69:
B=[0]*2
D=[0]*2
E=[0]*2 #list from 0,1, and append 2..26
for i in xrange(2,27):
    B.append(ws.cell(row=i, column=2).value)
    D.append(ws.cell(row=i, column=4).value)
    E.append(ws.cell(row=i, column=5).value)
96/70: B[26]*D[26]*E26]*0.025
96/71: B[26]*D[26]*E[26]*0.025
96/72: ws['B26'].value*(ws['D26'].value*ws['E26'].value)*0.001*25
97/1: from openpyxl import Workbook, load_workbook
97/2: wb2= load_workbook('IWWM.xlsx').active
97/3: ws=wb2['2006']
97/4: wb2.get_sheet_names()
97/5: wb2.get_sheet_names()
97/6: history
97/7: wb2=wb2.Workbook
97/8: wb2= load_workbook('IWWM.xlsx')
97/9: ws=wb2['2006'].active
97/10: ws=wb2['2006']
97/11: A=[0]*2
97/12:
B=[0]*2
for i in xrange(2,27):
    A.append(ws.cell(row=i, column=1).value)
    B.append(ws.cell(row=i, column=2).value)
97/13: A
97/14: B
97/15: import math
97/16: from scipy import stats
97/17: shape, loc, scale = stats.lognorm.fit(degrees, floc=0)
97/18: shape, loc, scale = stats.lognorm.fit(B[2:26], floc=0)
97/19: sigma = shape
97/20: mu = math.log(scale)
97/21: print sigma, mu
97/22: fit_ccdf = stats.lognorm.sf(x, [sigma], floc=1, scale=scale)
97/23: shape, loc, scale = stats.lognorm.fit((A[2:26],B[2:26]), floc=0)
97/24: print sigma, mu
97/25: sigma = shape
97/26: mu = math.log(scale)
97/27: print sigma, mu
97/28: fit_ccdf = stats.lognorm.sf(A[2:26], [sigma], floc=1, scale=scale)
97/29: ??stats.lognorm.sf
97/30: fit_ccdf = stats.lognorm.sf(A[2:26], [sigma], loc=1, scale=scale)
97/31: fit_ccdf
97/32: ??stats.lognorm.sf
97/33: fit_ccdf = stats.lognorm.sf(A[2:26], [sigma], scale=mu)
97/34: fit_ccdf
97/35: logN(mu,sigma)
97/36: from sci.stat import logN
97/37: from scipy.stat import logN
97/38: from scipy.stats import logN
97/39: from scipy.stats import LogN
97/40: from scipy.stats import LogNormal as LogN
97/41: import scipy.stats
97/42: LogN
97/43: ??scipy.stats
97/44: from scipy.stats import lognormal as LogN
97/45: lognormal
97/46: scipy.stats.lognormal
97/47: ??scipy.stats
97/48: scipy.stats.lognorm
97/49: from scipy.stats import lognorm
97/50: lognorm {mu,sigma)
97/51: lognorm (mu,sigma)
97/52: a=lognorm (mu,sigma)
97/53: a
97/54: history
97/55: q
96/73: pwd
98/1: run logn.py
98/2:
from openpyxl import Workbook, load_workbook
wb2= load_workbook('IWWM.xlsx')
ws=wb2['2006']
A=[0]*2
B=[0]*2
D=[0]*2
E=[0]*2 #list from 0,1, and append 2..26
for i in xrange(2,27):
    A.append(ws.cell(row=i, column=1).value)
    B.append(ws.cell(row=i, column=2).value)
    D.append(ws.cell(row=i, column=4).value)
    E.append(ws.cell(row=i, column=5).value)
98/3:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
yr=np.array(A[2:27])
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),100)
plt.hist(br, bins, alpha=0.5)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/4: B
98/5: br
98/6:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
yr=np.array(A[2:27])
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),100)
plt.hist(br, bins, alpha=5)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/7:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
yr=np.array(A[2:27])
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),100)
plt.hist(br, bins, alpha=0.1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/8: bins
98/9:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
yr=np.array(A[2:27])
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),10)
plt.hist(br, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/10:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
yr=np.array(A[2:27])
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),20)
plt.hist(br, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/11:
from scipy import stats
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
fit_ccdf = stats.lognorm.sf(yr, [sigma], scale=mu)
98/12:
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
fit_ccdf = stats.lognorm.sf(yr, [sigma], scale=mu)
98/13: sigma,mu
98/14: fit_ccdf
98/15: yr
98/16: sigma,mu
98/17: sigma,mu, mean(yr)
98/18: sigma,mu, stats.mean(yr)
98/19: sigma,mu, stats.moment(yr)
98/20:
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
fit_ccdf = stats.lognorm(yr, sigma, scale=mu)
98/21: fit_ccdf
98/22:
bin_f=np.linspace(min(fit_ccdf),max(fit_ccdf),20)
plt.hist(fit_ccdf, bin_f, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/23: min(fit_ccdf),max(fit_ccdf)
98/24: mean(br, loc=0, scale=1)
98/25: stats.mean(br, loc=0, scale=1)
98/26: bpdf=stats.lognorm.pdf(yr, sigma, scale=mu)
98/27: print bpdf=stats.lognorm.pdf(yr, sigma, scale=mu)
98/28: print stats.lognorm.pdf(yr, sigma, scale=mu)
98/29: print stats.lognorm.pdf(yr, sigma, loc=0, scale=1)
98/30:
print sigma, mu
print stats.lognorm.pdf(yr, sigma, loc=0, scale=1)
96/74: pwd
96/75: cd ../bike
96/76: a=np.loadtxt('105_1.txt')
96/77: a=loadtxt('105_1.txt')
96/78: a=read('105_1.txt')
96/79: import sys
96/80: name='105_1.txt'file = open(name, 'r', encoding='UTF-8')
96/81: name='105_1.txt'file = open(name, 'r', encoding='UTF-8')
96/82: name='105_1.txt'file = open(name, 'r', encoding='UTF-8')
96/83: name='105_1.txt'
96/84: file = open(name, 'r', encoding='UTF-8')
99/1: name='105_1.txt'
99/2: filename='105_1.txt'
99/3: lines = tuple(open(filename, 'r'))
99/4: lines
99/5: lines.shape
99/6: lines.size
99/7: lines[0]
99/8: lines = tuple(open(filename, 'r')).decode('utf-8')
99/9: lines = tuple(open(filename, 'r',decode('utf-8')))
99/10:
with open(filename) as f:
    a=f.read().decode('big5')
99/11: a
99/12: a[1]
99/13: a.shape
99/14:
with open(filename) as f:
    a=f.read().decode('utf-8')
99/15: !system
99/16: !
99/17: linwa
99/18: lines
99/19:
for k in lines:
    write ("%s,%d\n"%(k.encode("utf8")),lines[k])
99/20:
for k in lines:
    print ("%s,%d\n"%(k.encode("utf8")),lines[k])
99/21: print lines[1]
99/22: a,b,c= lines
99/23: a,b,c= lines[:]
99/24: a,b,c= lines[1]
99/25: history
99/26: 4139 in lines
99/27: 4550 in lines
99/28: '4550' in lines
99/29: '4550' in lines[:]
99/30: len(lines)
99/31: s1={lines}
99/32: s1[5]
99/33: s1[lines[5]]
99/34: s1
99/35: print s1
99/36: print lines[1]
99/37: len(s1)
99/38: mv lines s1
99/39: s1=lines
99/40: lines = tuple(open(filename, 'r'))
99/41: s2 = tuple(open('105_2.txt', 'r'))
99/42: s3 = tuple(open('105_3.txt', 'r'))
99/43: s4 = tuple(open('105_4.txt', 'r'))
99/44: tmp=s1|s2
99/45: s1 = read(open('105_1.txt', 'r'))
99/46: s1 = open('105_1.txt', 'r').read
99/47: s1
99/48: s1 = open('105_1.txt', 'r').read()
99/49: s1
99/50: print s1[1]
99/51: len(s1)
99/52: print s1
99/53: 4139 in s1
99/54: line1[1]
99/55: lines[1]
99/56: a,b,c=tuple(lines[1])
99/57: a,b,c=lines[1]
99/58: a=filename.readlines
99/59: a=open(filename).readlines
99/60: a
99/61: a[1]
99/62:  f = open(filename, 'r')
99/63: a=f.read
99/64: a
99/65: a=f.read()
99/66: a
99/67: a[1]
99/68: print a
99/69: print a[0]
99/70: print a[1]
99/71: print a[0:5]
99/72: print a[0:10]
99/73: import numpy as np
99/74: b=np.array(a)
99/75: a.size
99/76: len(a)
99/77: a.shape
99/78: b.shape
99/79: history
99/80: !top
100/1: import csv
100/2: filename='105_1.txt'csv.reader(open('
100/3: o=open('105_1.txt','r')
100/4: csv.reader(o,delimiter=',')
100/5: a=csv.reader(o,delimiter=',')
100/6: a
101/1: run csvv.py
101/2: ??reader
101/3: import csv
101/4: ??csv.reader
101/5: data=csv.reader(open('105_1.txt','r'),delimiter=',')
101/6: data
101/7: data[1]
101/8:
for idx, row in enumerate(data):
    print idx,row
101/9:
for idx, row in enumerate(data):
    print idx,row[1]
101/10:
lst=[]
for idx, row in enumerate(data):
    lst.append(row)
101/11: lst
101/12:
for idx, row in enumerate(data):
    print idx,row
101/13: data
101/14: data=csv.reader(open('105_1.txt','r'),delimiter=',')
101/15:
lst=[]
for idx, row in enumerate(data):
    lst.append(row)
101/16: lst
101/17: lst[1]
101/18: 4139 in lst
101/19: lst[1][1]
101/20: lst[1,1]
101/21: s1=lst
101/22: data=csv.reader(open('105_2.txt','r'),delimiter=',')
101/23:
s2=[]
for idx, row in enumerate(data):
    s2.append(row)
101/24: data=csv.reader(open('105_3.txt','r'),delimiter=',')
101/25:
s3=[]
for idx, row in enumerate(data):
    s3.append(row)
101/26: data=csv.reader(open('105_4.txt','r'),delimiter=',')
101/27:
s4=[]
for idx, row in enumerate(data):
    s4.append(row)
101/28: len(s1),len(s2),len(s3),len(s4)
101/29: all=s1|s2|s3|s4
101/30: d1={s1}
101/31: history>cc.py
101/32: !cat cc.py
101/33: history
96/85:
import csv
data=csv.reader(open('105_1.txt','r'),delimiter=',')
s1=[]
for row in enumerate(data):
    s1.append(row)
96/86: s1[50]
96/87: s1[50][0]
96/88: s1[50][1:3]
96/89:
import csv
data=csv.reader(open('105_1.txt','r'),delimiter=',')
s1=[]
for idx, row in enumerate(data):
    s1.append(row)
96/90: s1[50][1:2]
96/91: s1[50]
96/92:
import csv
data=csv.reader(open('105_2.txt','r'),delimiter=',')
s2=[]
for idx, row in enumerate(data):
    s2.append(row)
96/93:
import csv
data=csv.reader(open('105_3.txt','r'),delimiter=',')
s3=[]
for idx, row in enumerate(data):
    s3.append(row)
96/94:
import csv
data=csv.reader(open('105_4.txt','r'),delimiter=',')
s4=[]
for idx, row in enumerate(data):
    s4.append(row)
96/95: len(s1),len(s2),len(s3),len(s4)
96/96: d1={}
96/97:
for x in s1:
    d1.append(x)
96/98: d1=set()
96/99:
for x in s1:
    d1.add(x)
96/100:
for x in xrange(len(s1)):
    d1.add(s1[x])
96/101:
for x in xrange(len(s1)):
    print (s1[x])
96/102:
for x in xrange(len(s1)):
    d1.add((s1[x][0],s1[x][1],s1[x][2]))
96/103:
d2=set()
for x in xrange(len(s2)):
    d2.add((s2[x][0],s2[x][1],s2[x][2]))
96/104: d1
96/105: len(d1)
96/106: history
96/107: len(s1),len(s2),len(s3),len(s4)
96/108: len(d2)
96/109: len(d1|d2)
96/110: d12=d1|d2
96/111: d12-d1
96/112: print d12-d1
96/113: print d12-d2
96/114:
d3=set()
for x in xrange(len(s3)):
    d3.add((s3[x][0],s3[x][1],s3[x][2]))
d4=set()
for x in xrange(len(s4)):
    d4.add((s4[x][0],s4[x][1],s4[x][2]))
96/115: d1234=d1|d2|d3|d4
96/116: len(d1234)
96/117: d1-d2
96/118: (d1-d2).encode('tf-8')
96/119: # encoding: utf-8
96/120: d1-d2
96/121: d1-d2[1]
96/122:
for x in d1-d2:
    print x.decode('utf8')
96/123:
for x in d1-d2:
    print x(*).decode('utf8')
96/124:
for x in d1-d2:
    print x(0:3).decode('utf8')
96/125:
for x in d1-d2:
    for y in x:
    print y.decode('utf8')
96/126:
for x in d1-d2:
    for y in x:
        print y.decode('utf8')
96/127:
for x in d1-d2:
    for y in x:
        print y
96/128:
for x in d1-d2:
    for y in x:
        print y.decode('big5')
96/129:
for x in d2-d3:
    for y in x:
        print y.decode('big5')
96/130:
for x in d3-d4:
    for y in x:
        print y.decode('big5')
96/131: '4139' in d1234
96/132: '低放處置專案' in d1234
96/133: '低放處置專案' in s1
96/134: '低放處置專案' in s1[:][0]
96/135: 4139 in s1[:][2]
96/136: s1[:][1]
96/137: s1
96/138: s1[0:][1]
96/139: s1[0][:]
96/140: s1[0][1]
96/141: s1[0:][1]
96/142: s1[0:len(s1)][1]
96/143: print s1[0:len(s1)][1]
96/144:
for i in d1234:
    if i[1]=='4550':
        print i[0].decode('big5'),i[2].decode('big5')
96/145:
for i in d1234:
    if i[1]=='4139':
        print i[0].decode('big5'),i[2].decode('big5')
102/1: import csv
102/2: s1=[]
102/3: s1.append(row) for idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=','))
102/4: (s1.append(row) for idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/5: s1
102/6: (print row for idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/7: (print idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/8: print (idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/9: print (row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/10: print ( in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/11: s1.append(row) for row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/12: s1.append(row), for row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/13: (s1.append(row) for row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')))
102/14:
for idx, row in enumerate(csv.reader(open('105_1.txt','r'),delimiter=',')):
    s1.append(row)
102/15: s1[10]
102/16: s1[10]0].decode('big5')
102/17: s1[10][0].decode('big5')
102/18: s1[10][0].decode('utf8')
102/19: s1[10][0].encode('big5')
102/20: run csvv.py
102/21: s1,s2=[]
102/22: s1,s2=[]*2
102/23: run csvv.py
102/24: d_all=d1|d2|d3|d4
102/25: len(d_all)
102/26: d[50][0].decode('big5')
102/27: d_all[50][0].decode('big5')
102/28:
for i in d_all:
    for j in i:
        if j=='4139':
            print j[0:].decode('big5')
102/29:
for i in d_all:
    if i[1]=='4139':
        print i[0:].decode('big5')
102/30:
for i in d_all:
    if i[1]=='4139':
        for j in xrange(3):
            print i[j].decode('big5')
102/31:
for i in d_all:
    if i[1]=='4139':
        for j in xrange(0,3,2):
            print i[j].decode('big5')
102/32:
for i in d_all:
    if i[1]=='4139':
        print i[0].decode('big5')
102/33:
for i in d_all:
    if i[1]=='4139':
        for j in i:
        print j.decode('big5')
102/34:
for i in d_all:
    if i[1]=='4139':
        for j in i:
            print j.decode('big5')
102/35:
for i in d_all:
#    if i[1]=='4139':
    for j in i:
        print j.decode('big5')
102/36:
for x in d1-d2:
        for y in x:
                print y.decode('big5')
102/37:
for x in d1-d2:
        for y in x:
                print y.decode('big5')
102/38: d_all
102/39: s1
102/40: d1
102/41: d1-d2
102/42: history
102/43:
for x in d1-d2:
        for y in x:
                print y.decode('utf8')
102/44:
for x in d1-d2:
        for y in x:
                print y
102/45:
for x in d_all:
    if x[1]=='4139':
        for y in x:
                print y.decode('utf8')
102/46:
for x in d_all:
    if x[1]=='4139':
        for y in x:
                print y
102/47: n_all=[]
102/48:
for x in d_all:
    n_all.append(x[1])
102/49: '4139' in n_all
102/50: '4999' in n_all
102/51: run csvv.py
102/52: n1
102/53: len(n1),len(n2),len(n3)
102/54: len(n1),len(n2),len(n3),len(n4)
102/55: history
102/56: a=('4139' in n1)
102/57: a
102/58: a.astype(int)
102/59: int(a)
102/60: int('4139' in n1)
102/61: run csvv.py
102/62: x
102/63: lis=list(x)
102/64: lis
102/65: lis.append(100)
102/66: lis
102/67: run csvv.py
102/68: tup(lis)
102/69: tuple(lis)
102/70: run csvv.py
102/71:
for x in d_all2:
        if x[1]=='4262':
                for y in x:
                        print y# .decode('big5')
102/72:
for x in d_all2:
        if x[1]=='6214':
                for y in x:
                        print y# .decode('big5')
102/73:
for x in d_all2:
        if x[1]=='5401':
                for y in x:
                        print y# .decode('big5')
102/74: run csvv.py
102/75:
for x in d_all2:
        if [0]=='5401':
                for y in x:
                        print y# .decode('big5')
102/76: '5401' in n1
102/77:
for x in d_all2:
        if x[0]=='5401':
                for y in x:
                        print y# .decode('big5')
102/78: len(d_all)
102/79: d1-d2
102/80: print d1-d2
102/81:
for x in d_all2:
        if x[0]=='6487':
                for y in x:
                        print y# .decode('big5')
102/82: d4-d3
102/83: d3-d4
102/84: d3-d2
102/85:
for x in d_all2:
        if x[0]=='4538':
                for y in x:
                        print y# .decode('big5')
102/86:
for x in d_all2:
        if x[0]=='6754':
                for y in x:
                        print y# .decode('big5')
102/87: from openpyxl import Workbook, load_workbook
102/88: wb2= load_workbook('mailbox.xlsx')
102/89: ws=wb2['Sheet1']
102/90: B=[0]
102/91: D=[0]
102/92: B=[]
102/93: D=[]
102/94:
for i in xrange(2,101):
    B.append(ws.cell(row=i, column=2).value)
        D.append(ws.cell(row=i, column=4).value)
102/95:
for i in xrange(2,101):
    B.append(ws.cell(row=i, column=2).value)
    D.append(ws.cell(row=i, column=4).value)
102/96: B
102/97: wb2= load_workbook('mailbox.xlsx')
102/98: wb2.close
102/99:
for i in xrange(2,101):
    B.append(ws.cell(row=i, column=2).value)
    D.append(ws.cell(row=i, column=4).value)
102/100: B
102/101: history
103/1: run csvv.py
103/2: len(D)
103/3: B
103/4: char(B[4])
103/5: str(B[4])
103/6: str(B[3])
103/7: str(100,-4)
103/8: D[100]
103/9: BB=[]
103/10:
for i in len(B):
    BB.append(str(B[i]))
103/11: len(B)
103/12:
for i in xrange(101):
    BB.append(str(B[i]))
103/13: BB
103/14: d_all2[50]
103/15: '4139' in BB
103/16: BB.index('4139')
103/17: D[BB.index('4139')]
104/1: run csvv.py
104/2: run csvv.py
104/3: run csvv.py
104/4:
for x in d_all2:
        if x[0]=='4139':
                for y in x:
                        print y
104/5:
for x in d_all2:
        if x[6]=='-':
                for y in x:
                        print y
104/6:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1]
104/7: #-*- coding: utf-8 -*-.
104/8:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1]
104/9: #-*- coding: big5 -*-.
104/10:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1]
104/11:
for x in d_all2:
        if x[6]=='-':
                print x[1]
104/12:
for x in d_all2:
        if x[6]=='-':
                print 'u',x[1]
104/13:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1].decode('big5')
104/14:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1].encode('big5')
104/15:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1]
96/146: run csvv.py
96/147: run csvv.py
96/148: history
104/16: #encoding 'utf-8'
104/17:
for x in d_all2:
        if x[6]=='-':
                print x[0],x[1]
96/149: run csvv.py
105/1: run csvv.py
105/2: n4.index('4139')
105/3: s4[n4.index('4139')]
105/4: s4[20]
105/5: n4[20]
105/6: s4[0:][1].index('4139')
105/7: s4[0:][1]
105/8: s4[:][1]
105/9: run csvv.py
105/10:
for x in d_all2:
        if x[0]=='6487':
                for y in x:
                    print y
105/11:
with open('105_all.csv', 'w') as f:
    writer = csv.writer(f)
    for row in d_all2:
        writer.writerows(row)
105/12:
with open('105_all.csv', 'w') as f:
    writer = csv.writer(f)
    for row in d_all2:
        writer.writerows(list(row))
105/13:
with open('105_all.csv', 'w') as f:
    writer = csv.writer(f)
    for row in d_all2:
        writer.writerows(list(row)[0:7])
105/14:
for row in d_all2:
    print (list(row)[0:7])
105/15:
for row in d_all2:
    print row[0:7]
105/16:
for row in d_all2:
    f.write row[0:7]
105/17:
for row in d_all2:
    f.write(row[0:7])
105/18: f
105/19: f=open('105_all.csv','w')
105/20:
for row in d_all2:
    f.write(row[0:7])
105/21:
for row in d_all2:
    f.write(str(row[0:7]))
105/22:
for row in d_all2:
    f.write(str(row[0:7]),\n)
105/23:
for row in d_all2:
    f.write(str(row[0:7]),'\n')
105/24:
for row in d_all2:
    f.write(str(row[0:7]+'\n'))
105/25:
for row in d_all2:
    f.write(str(row[0:7])+'\n')
105/26:
for row in d_all2:
    f.write(str(row[0:7]).decode('big5')+'\n')
105/27: #encoding=utf_8
105/28:
for row in d_all2:
    f.write(str(row[0:7]).decode('big5')+'\n')
105/29:
for row in d_all2:
    f.write(str(row[0:8]).decode('big5')+'\n')
105/30: import uniout
105/31:
for row in d_all2:
    f.write(str(row[0:8]).decode('big5')+'\n')
105/32:
for row in d_all2:
    f.write(str(row[0:8]).decode('string_escape')+'\n')
106/1: run csvv.py
106/2: f.close
107/1: run csvv.py
96/150: n1
96/151: n0={'5993','3715','4479','6083','6303','6487','6517','4644','6214','6355','6407','6656'}
96/152: n0-n4
96/153: n4-d4
96/154: n4
96/155: set(n4)-n0
96/156: n0-set(n4)
96/157: n0-d_all2
96/158: n_all=set(n1)|set(n2)|set(n3)|set(n4)
96/159: n0-n_all
96/160: '4479' in n1
96/161: '4479' in n2
96/162: '4479' in n3
96/163: '4479' in n4
96/164: '4479' in n0
96/165: n0-set(n4)
108/1: run plotn.py
108/2: run logn.py
108/3: run IWWM.py
108/4: B
108/5: shape, loc, scale
108/6: mean(B)
108/7: stats.mean(B)
108/8: stats.average(B)
108/9: ??stats
108/10: stats.gmean(B)
108/11: stats.gmean(B[2:26])
108/12: fit_ccdf = stats.lognorm.sf(B[2:26], [sigma], scale=mu)
108/13: fit_ccdf
108/14: fit_ccdf = stats.lognorm.sf(B[2:26], sigma, scale=mu)
108/15: fit_ccdf
108/16: fit_ccdf = stats.lognorm(B[2:26], sigma, scale=mu)
108/17: fit_ccdf
108/18: E
108/19: F
108/20: F=B
108/21: import numpy as np
108/22: np.allclose(F,B)
108/23: np.allclose(F,A)
108/24: F[3]=0
108/25: np.allclose(F,B)
108/26: F
108/27: B
108/28: run IWWM.py
108/29: B
108/30: F
108/31: np.allclose(F,B)
108/32: stats.lognorm.mean(sigma,loc=0,scale=mu)
108/33: exp(stats.lognorm.mean(sigma,loc=0,scale=mu))
108/34: import math
108/35: exp(stats.lognorm.mean(sigma,loc=0,scale=mu))
108/36: math.exp(stats.lognorm.mean(sigma,loc=0,scale=mu))
108/37: scale
108/38: np.mean(B[2:26])
108/39: np.gmean(B[2:26])
108/40: stats.gmean(B[2:26])
108/41: from montecarlino import bootstrap_interval
108/42: from numpy import mean, std, random
108/43: from mcerp import N
108/44: x1 = np.array([0.80, 0.83, 1.89, 1.04, 1.45, 1.38, 1.91, 1.64, 0.73, 1.46])
108/45: print bootstrap_interval(np.median, x1)
108/46: np.median(x1)
108/47: print bootstrap_interval(np.mean, x1)
108/48: print bootstrap_interval(stats.gmean, B[2:26])
108/49: B[2:26]
108/50: f=[]
108/51:
for i in B[2:26]:
    f.append(math.log(i))
108/52: print bootstrap_interval(mean,f)
108/53: print bootstrap_interval(np.mean,f)
108/54: history
108/55: print bootstrap_interval(np.median,f)
108/56: f
108/57: x1
108/58: print bootstrap_interval(np.median,np.array(f))
108/59: print math.exp(bootstrap_interval(np.median,np.array(f)))
108/60: print math.exp(np.array(bootstrap_interval(np.median,np.array(f))))
108/61: a=bootstrap_interval(np.median,np.array(f))
108/62: math.exp(np.array(a))
108/63: math.exp(np.array(i)) for i in a
108/64: math.exp(np.array(i))
108/65: math.exp(np.array(i))
108/66: math.exp(np.array(i))
108/67: math.exp(np.array(i))
108/68: math.exp(np.array(i)):
108/69:
for i in a:
    print math.exp(i)
108/70: history
96/166: n0
98/31: vr=np.ramdom(10)
98/32: vr=np.ramdom.random(10)
98/33: vr=np.random.random(10)
98/34:
vr=np.random.random(10)
vr
98/35:
vr=np.random.random(100)
vr
98/36:
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
ran_p=np.random.random(100)
fit_p = stats.lognorm.ppf(ran_p, [sigma], scale=mu)
fit_p
98/37:
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
ran_p=np.random.random(100)
fit_p = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
fit_p
98/38:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
ran_p=np.random.random(100)
fit_p = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),20)
plt.hist(fit_p, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/39:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
ran_p=np.random.random(1000)
fit_p = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),20)
plt.hist(fit_p, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/40:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from scipy import stats
import math
shape, loc, scale = stats.lognorm.fit(br, floc=0)
sigma = shape
mu = math.log(scale)
ran_p=np.random.random(10000)
fit_p = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
br=np.array(B[2:27])
bins=np.linspace(min(br),max(br),20)
plt.hist(fit_p, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/41:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
B_q.shape
98/42:
a=[0.025,0.975]
stats.norm.ppf(a, [1,], scale=0.25)
98/43:
a=[0.025,0.975]
stats.norm.ppf(a, [0.1,], scale=0.25)
98/44:
a=[0.025,0.975]
stats.beta.ppf(a, a=2,b=5, scale=0.25)
98/45:
a=[0.025,0.975]
stats.beta.ppf(a, a=2,b=2, scale=0.25)
98/46:
a=[0.025,0.975]
stats.beta.ppf(a, a=3,b=2, scale=0.25)
98/47:
a=[0.025,0.975]
stats.beta.ppf(a, a=3,b=3, scale=0.25)
98/48:
a=[0.025,0.975]
stats.beta.ppf(a, a=3,b=2, scale=0.25)
98/49:
a=[0.025,0.975]
stats.beta.ppf(a, a=3,b=1, scale=0.25)
98/50:
a=[0.025,0.975]
stats.beta.ppf(a, a=5,b=1, scale=0.25)
98/51:
a=[0.025,0.975]
stats.beta.ppf(a, a=1,b=3, scale=0.25)
98/52:
a=[0.025,0.975]
stats.beta.ppf(a, a=2,b=6, scale=0.25)
98/53:
l=[0.025,0.975]
stats.beta.ppf(l, a=2,b=6, scale=0.25)
98/54:
l=[0.025,0.975]
stats.beta.ppf(l, a=3,b=9, scale=0.25)
98/55:
l=[0.025,0.975]
stats.beta.ppf(l, a=30,b=90, scale=0.25)
98/56:
l=[0.025,0.975]
stats.beta.ppf(l, a=0.30,b=0.90, scale=0.25)
98/57:
l=[0.025,0.975]
stats.beta.ppf(l, a=3,b=9, scale=0.25)
98/58:
l=[0.025,0.975]
#stats.beta.ppf(l, a=3,b=9, scale=0.25)
interval(0.95, 3, 9, loc=0, scale=0.25)
98/59:
l=[0.025,0.975]
#stats.beta.ppf(l, a=3,b=9, scale=0.25)
stats.beta.interval(0.95, 3, 9, loc=0, scale=0.25)
98/60:
l=[0.025,0.975]
stats.beta.ppf(l, a=3,b=9, scale=0.25)
stats.beta.interval(0.95, 3, 9, loc=0, scale=0.25)
98/61:
l=[0.025,0.975]
stats.beta.ppf(l, a=3,b=9, scale=0.25)
stats.beta.interval(0.95, 3, 9, loc=0, scale=0.25)
98/62:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=9, scale=0.25)
print stats.beta.interval(0.95, 3, 9, loc=0, scale=0.25)
98/63:
l=[0.025,0.975]
print stats.beta.ppf(l, a=2,b=2, scale=0.25)
98/64:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=3, scale=0.25)
98/65:
l=[0.025,0.975]
print stats.beta.ppf(l, a=1,b=1, scale=0.25)
98/66:
l=[0.025,0.975]
print stats.beta.ppf(l, a=0.1,b=0.1, scale=0.25)
98/67:
l=[0.025,0.975]
print stats.beta.ppf(l, a=1,b=2, scale=0.25)
98/68:
l=[0.025,0.975]
print stats.beta.ppf(l, a=1,b=3, scale=0.25)
98/69:
l=[0.025,0.975]
print stats.beta.ppf(l, a=0.5,b=0.5, scale=0.25)
98/70:
l=[0.025,0.975]
print stats.norm.ppf(l, s=0.1, scale=0.25)
98/71:
l=[0.025,0.975]
print stats.norm.ppf(l, [0.1], scale=0.25)
98/72:
l=[0.025,0.975]
print stats.beta.ppf(l, a=2,b=5, scale=0.25)
98/73:
l=[0.025,0.975]
print stats.beta.ppf(l, a=2,b=5, scale=1)
98/74:
l=[0.025,0.975]
print stats.beta.ppf(l, a=2,b=4, scale=1)
98/75:
l=[0.025,0.975]
print stats.beta.ppf(l, a=2,b=6, scale=1)
98/76:
l=[0.025,0.975]
print stats.beta.ppf(l, a=1,b=3, scale=1)
98/77:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=9, scale=1)
98/78:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=8, scale=1)
98/79:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=7, scale=1)
98/80:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=6 scale=1)
98/81:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=5, scale=1)
98/82:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=3, scale=1)
98/83:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=4, scale=1)
98/84:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=5, scale=1)
98/85:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=4, scale=1)
98/86:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=12, scale=1)
98/87:
l=[0.025,0.975]
print stats.beta.ppf(l, a=3,b=9, scale=1)
98/88:
l=[0.025,0.975]
s=0.1
print stats.norm.ppf(l, [s], scale=0.8)
98/89:
l=[0.025,0.975]
s=0.05
print stats.norm.ppf(l, [s], scale=0.8)
98/90:
l=[0.025,0.975]
s=0.01
print stats.norm.ppf(l, [s], scale=0.8)
98/91:
l=[0.025,0.975]
s=0.01
print stats.norm.ppf(10, [s], scale=0.8)
98/92:
l=[0.025,0.975]
s=0.01
print stats.norm.ppf(l, [s], loc=0,scale=0.8)
98/93:
l=[0.025,0.975]
s=0.01
print stats.norm.ppf(l, [s], scale=1)
98/94:
l=[0.025,0.975,0.5]
s=0.01
print stats.norm.ppf(l, [s], scale=1)
98/95:
l=[0.025,0.975,0.5]
s=0.01
print stats.norm.ppf(l, [s], scale=1)+0.8
98/96:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=1)+0.8
98/97:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=0.1)+0.8
98/98:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=0.8)+0.8
98/99:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=1)+0.8
98/100:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=0.1)+0.8
98/101:
l=[0.025,0.975,0.5]
s=0.001
print stats.norm.ppf(l, [s], scale=0.01)+0.8
98/102:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s], scale=0.01)+0.8
98/103:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s], scale=0.)+0.8
98/104:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s], scale=0.1)+0.8
98/105:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s], scale=1)+0.8
98/106:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s])+0.8
98/107:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s],scale=0.1)+0.8
98/108:
l=[0.025,0.975,0.5]
s=0.05
print stats.norm.ppf(l, [s],scale=0.1)+0.8
98/109:
l=[0.025,0.975,0.5]
s=0.03
print stats.norm.ppf(l, [s],scale=0.1)+0.8
98/110:
l=[0.025,0.975,0.5]
s=0.01
print stats.norm.ppf(l, [s],scale=0.1)+0.8
98/111:
l=[0.025,0.975,0.5]
s=0.01
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/112:
l=[0.025,0.975,0.5]
s=0.02
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/113:
l=[0.025,0.975,0.5]
s=0.03
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/114:
l=[0.025,0.975,0.5]
s=0.04
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/115:
l=[0.025,0.975,0.5]
s=0.05
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/116:
l=[0.025,0.975,0.5]
s=0.1
print stats.norm.ppf(l, [s],scale=0.1)+0.7
98/117:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(l, [0.1],scale=0.1)+0.7
G_q = [0]*len(B_q)
for i in xrange(len(G_q)):
    G_q[i]=B_q[i]*D_q[i]*E_q[i]*0.025
sigma_G, loc, mu_G = stats.norm.fit(G_q, floc=0)
stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/118:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(l, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
sigma_G, loc, mu_G = stats.norm.fit(G_q, floc=0)
stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/119:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
sigma_G, loc, mu_G = stats.norm.fit(G_q, floc=0)
stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/120:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
stats.norm.fit(G_q, floc=0) #sigma_G, loc, mu_G = 
#stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/121:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
#stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/122:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
98/123:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
print bootstrap_interval(np.median, G_q)
98/124:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
print bootstrap_interval(mu_G, G_q)
98/125:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
#print bootstrap_interval(mu_G, G_q)
np.mediate(G_q)
98/126:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
#print bootstrap_interval(mu_G, G_q)
np.median(G_q)
98/127:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
np.median(G_q)
98/128:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)
from montecarlino import bootstrap_interval
print bootstrap_interval(np.median, G_q)
np.median(G_q)
98/129:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print stats.norm.interval(0.95,[sigma_G],scale=mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
98/130:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
98/131:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
from mcerp import N
N(mean(G_q),std(G_q))
98/132:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
from mcerp import N
print mean(G_q),std(G_q)
98/133:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
from mcerp import N
print np.mean(G_q),np.std(G_q)
98/134:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/mu_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
from mcerp import N
print N(np.mean(G_q),np.std(G_q))
98/135:
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
mu_G, sigma_G = stats.norm.fit(G_q) #sigma_G, loc, mu_G = 
print mu_G, sigma_G
print (stats.norm.interval(0.95,[sigma_G],scale=mu_G)-mu_G)/sigma_G
#from montecarlino import bootstrap_interval
#print bootstrap_interval(np.median, G_q)
from mcerp import N
print N(np.mean(G_q),np.std(G_q))
98/136:
plt.hist(G_q, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/137:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/138: stats.gamma.fit(G_q)
98/139: stats.gamma.fit(G_q,loc=0)
98/140: stats.gamma.fit(G_q,loc=0,scale=499.8610873829582)
98/141: stats.gamma.fit(G_q,loc=0,scale=1)
98/142: stats.gamma.fit(G_q)
98/143:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
plt.hist(H_q, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/144: l
98/145: stats.gamma.ppf(l, fit_alpha, loc=fit_loc, scale=fit_beta)
98/146:
stats.gamma.ppf(l, fit_alpha, loc=fit_loc, scale=fit_beta)
fit_beta
98/147:
print stats.gamma.ppf(l, fit_alpha, loc=fit_loc, scale=fit_beta)
print np.mean(gr)
98/148:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = gamma(fit_alpha)
ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/149:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha)
ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/150:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha)
plt.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/151:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha)
ax.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/152:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha)
plt.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/153:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
#plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha)
plt.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/154:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
#plt.hist(gr, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/155:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.hist(gr, bins, alpha=0.2)
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/156:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, 10000*rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.hist(gr, bins, alpha=0.2)
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/157:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, 10000*rv.pdf(x), 'k-', lw=2, label='frozen pdf')
#plt.hist(gr, bins, alpha=0.2)
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/158:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, 1000000*rv.pdf(x), 'k-', lw=2, label='frozen pdf')
#plt.hist(gr, bins, alpha=0.2)
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/159:
gr=np.array(G_q)
bins=np.linspace(min(gr),max(gr),20)
fig, ax = plt.subplots(1, 1)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
x = np.linspace(min(gr),max(gr), 100)
rv = stats.gamma(fit_alpha, loc=fit_loc, scale=fit_beta)
plt.plot(x, 1000000*rv.pdf(x), 'k-', lw=2, label='frozen pdf')
plt.hist(gr, bins, alpha=0.2)
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/160:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
plt.hist(G_q, bins, alpha=0.2)
bins=np.linspace(min(gr),max(gr),100)
plt.hist(H_q, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/161:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
plt.hist(G_q, bins, alpha=0.2)
hr=np.array(H_q)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(H_q, bins, alpha=0.2)
plt.title("B Histogram")
plt.xlabel("B")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/162:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
plt.hist(G_q, bins, alpha=0.2)
hr=np.array(H_q)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(H_q, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/163:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
hr=np.array(H_q)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(G_q, bins, alpha=0.2)
plt.plot(H_q, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/164:
fit_alpha, fit_loc, fit_beta=stats.gamma.fit(G_q)
H_q = stats.gamma.ppf(ran_p, fit_alpha, loc=fit_loc, scale=fit_beta)
hr=np.array(H_q)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(G_q, bins, alpha=0.2)
plt.hist(H_q, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
#plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
98/165: gr_s=sort(gr)
98/166: gr_s=sorted(gr)
98/167:
for i in xrange(len(l)):
    print gr_s[10000*l(i)]
98/168:
print l
for i in xrange(len(l)):
    print gr_s[10000*l(i)]
98/169:
print l,len(l)
for i in xrange(len(l)):
    print gr_s[10000*l(i)]
98/170:
print l,len(l)
for i in xrange(len(l)):
    print gr_s[10000*l[i]]
98/171:
print l,len(l)
for i in xrange(len(l)):
    print gr_s[int(10000*l[i])]
98/172:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr_s=sorted(gr)
98/173:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr_s=sorted(gr)
98/174:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr=np.array(G_q)    
gr_s=sorted(gr)
for i in xrange(len(l)):
    print gr_s[int(10000*l[i])]
98/175:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr=np.array(G_q)    
gr_s=sorted(gr)
for i in xrange(len(l)):
    print gr_s[int(10000*l[i])]
98/176:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr=np.array(G_q)    
gr_s=sorted(gr)
for i in xrange(len(l)):
    print gr_s[int(10000*l[i])]
98/177:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
gr=np.array(G_q)    
gr_s=sorted(gr)
for i in xrange(len(l)):
    print gr_s[int(10000*l[i])]
98/178:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
D_q = stats.beta.ppf(ran_p, a=3,b=9, scale=1)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
98/179: print stats.beta.ppf(l, a=3,b=9, scale=1)
98/180: print stats.beta.interval(0.95,a=3,b=9, scale=1)
98/181: print stats.beta.interval(0.95,a=3,b=9, scale=100)
98/182: print stats.beta.interval(0.95,a=3,b=9, scale=2)
98/183: print stats.beta.interval(0.95,a=3,b=9, scale=3)
98/184: print stats.beta.interval(0.95,a=4,b=9, scale=3)
98/185: print stats.beta.interval(0.95,a=3,b=9, scale=3)
98/186: print stats.beta.interval(0.95,a=2.5,b=9, scale=3)
98/187: print stats.beta.interval(0.95,a=1.5,b=9, scale=3)
98/188: print stats.beta.interval(0.95,a=1.5,b=9.5, scale=3)
98/189: print stats.beta.interval(0.95,a=1.5,b=10, scale=3)
98/190: print stats.beta.interval(0.95,a=2,b=5, scale=3)
98/191: print stats.beta.interval(0.95,a=2,b=5, scale=4)
98/192: print stats.beta.interval(0.95,a=2,b=5, scale=2)
98/193: print stats.beta.interval(0.95,a=2,b=7, scale=2)
98/194: print stats.beta.interval(0.95,a=2,b=8, scale=2)
98/195: print stats.beta.interval(0.95,a=2,b=8, scale=3)
98/196: print stats.beta.interval(0.95,a=2,b=8, scale=1)
98/197: print stats.beta.interval(0.95,a=2,b=10, scale=1)
98/198: print stats.beta.interval(0.95,a=2,b=10, scale=2)
98/199: print stats.beta.interval(0.95,a=1,b=8, scale=2)
98/200: print stats.beta.interval(0.95,a=1.5,b=8, scale=2)
98/201: print stats.beta.interval(0.95,a=3,b=8, scale=2)
98/202: print stats.beta.interval(0.95,a=3,b=10, scale=2)
98/203:
data=[0.18]*25
for i in xrange(950):
    data.append(0.25)
for i in xrange(975,1000):
    data.append(0.33)   
stats.beta.fit(data)
98/204: len(data)
98/205:
data=[0.18]*25
for i in xrange(950):
    data.append(0.25)
for i in xrange(975,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
98/206:
data=[0.18]*25
for i in xrange(950):
    data.append(0.25)
for i in xrange(975,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
98/207:
data=[0.18]*25
for i in xrange(950):
    data.append(0.25)
for i in xrange(975,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/208:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/209:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/210:
data_a,data_b,data_l,data_s=stats.beta.fit(data,a=data_a)
print data_a,data_b,data_l,data_s
98/211:
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=data_l)
print data_a,data_b,data_l,data_s
98/212:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=data_l)
print data_a,data_b,data_l,data_s
98/213:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=data_s)
print data_a,data_b,data_l,data_s
98/214:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0)
print data_a,data_b,data_l,data_s
98/215:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=1)
print data_a,data_b,data_l,data_s
98/216:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_l)
print data_a,data_b,data_l,data_s
98/217:
data_a,data_b,data_l,data_s,c=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_l)
print data_a,data_b,data_l,data_s
98/218:
data_a,data_b,data_l=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_l)
print data_a,data_b,data_l,data_s
98/219:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_l)
print data_a,data_b,data_l,data_s
98/220:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=data_l)
print data_a,data_b,data_l,data_s
98/221:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_l/2)
print data_a,data_b,data_l,data_s
98/222:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,loc=0,scale=data_s)
print data_a,data_b,data_l,data_s
98/223:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=data_s)
print data_a,data_b,data_l,data_s
98/224:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=data_l)
print data_a,data_b,data_l,data_s
98/225:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=data_s)
print data_a,data_b,data_l,data_s
98/226:
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
data_a,data_b,data_l,data_s=stats.beta.fit(data,scale=0.25)
print data_a,data_b,data_l,data_s
98/227:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=0.25)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/228:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=0, scale=0.25)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/229:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=0, scale=1)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/230:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=0, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/231:
data=[0.18]*50
for i in xrange(50,950):
    data.append(0.25)
for i in xrange(950,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/232:
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q2 = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
hr=np.array(D_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(D_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(D_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/233:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
print data_a,data_b,data_l,data_s
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
98/234:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
E_q = stats.norm.ppf(ran_p, [0.1],scale=0.1)+0.7
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
98/235:
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
stats.norm.fit(data)
98/236:
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
hr=np.array(E_q2)
bins=np.linspace(min(hr),max(hr),100)
plt.hist(E_q2, bins, alpha=0.2)
plt.title("G and H Histogram")
plt.xlabel("G and H")
plt.ylabel("Frequency")
fig = plt.gcf()
plt.show()
hr_s=sorted(np.array(E_q2))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print hr_s[j]
98/237:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print
98/238:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print np.mean(gr_s)
98/239:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print np.median(gr_s)
98/240:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=scale)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print np.mode(gr_s)
98/241: print stats.mean(gr_s)
98/242: print stats.means(gr_s)
98/243: print np.mean(gr_s)
98/244:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215490)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
98/245:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = []
for i in xrange(len(B_q)):
    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
109/1: run McNab.py
109/2: psi
109/3: pi
109/4: num_trials
109/5: time.clock()
109/6: run M2.py
109/7: num_trials
109/8: psi
98/246:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025#[]
#for i in xrange(len(B_q)):
#    G_q.append(B_q[i]*D_q[i]*E_q[i]*0.025)
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
    print br_s[j],dr_s[j],er_s[j],gr_s[j]
98/247:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
#    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print br_s(l)
98/248:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
#    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print br_s[l]
98/249:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
#    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print br_s[l[*]]
98/250:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
#    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print br_s[l[0:3]]
98/251:
ran_p=np.random.random(10000)
B_q = stats.lognorm.ppf(ran_p, [sigma], scale=215149)
ran_p=np.random.random(10000)
data=[0.18]*150
for i in xrange(150,850):
    data.append(0.25)
for i in xrange(850,1000):
    data.append(0.33)   
data_a,data_b,data_l,data_s=stats.beta.fit(data)
D_q = stats.beta.ppf(ran_p, a=data_a,b=data_b,loc=data_l, scale=data_s)
ran_p=np.random.random(10000)
data=[0.64]*150
for i in xrange(150,850):
    data.append(0.8)
for i in xrange(850,1000):
    data.append(0.96)   
data_m,data_s=stats.norm.fit(data)
E_q = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
G_q = B_q*D_q*E_q*0.025
br_s=sorted(np.array(B_q))
dr_s=sorted(np.array(D_q))
er_s=sorted(np.array(E_q))
gr_s=sorted(np.array(G_q))
for i in xrange(len(l)):
    j=int(10000*l[i])
#    print br_s[j],dr_s[j],er_s[j],gr_s[j]
print br_s[int(l[0:3])]
109/9: c
109/10: !more wind.txt
109/11: from matlab import gaussianPlume
109/12: from matlab import gaussian
109/13: import matlab
109/14: ??matlab
109/15: help matlab
109/16: ?matlab
109/17: matlab
109/18: ??
109/19: help
109/20: help (matlab)
110/1: from bs4 import BeautifulSoup
110/2: # -*- coding: UTF-8 -*-
110/3: BASEURL = 'http://www.airparif.asso.fr/'
110/4: doc = BeautifulSoup(urlopen(BASEURL))
110/5: from urllib import urlopen
110/6: doc = BeautifulSoup(urlopen(BASEURL))
110/7: doc
110/8: print doc >a
110/9: open('a',+w)
110/10: of=open('a',+'w')
110/11: of=open('a')
110/12: !cat >a
111/1: # -*- coding: UTF-8 -*-
111/2: from bs4 import BeautifulSoup
111/3: from urllib import urlopen
111/4: BASEURL = 'http://www.airparif.asso.fr/'
111/5: doc = BeautifulSoup(urlopen(BASEURL))
111/6: of=open('a')
111/7: of.write doc
111/8: of.write(doc)
111/9: fname=a
111/10: fname='a'
111/11: fo=open(fname,'rw+')
111/12: of.write(doc)
111/13: fo.write(doc)
111/14: fo.write("%s",doc)
111/15: print("%s",doc)
111/16: fo.save("%s",doc)
111/17: fo.print("%s",doc)
111/18: fo.write(doc,fmt='s%')
111/19: fo.write(doc,'s%')
111/20: fo.write(doc)
111/21: print doc
111/22: divs = doc.select('.indices_txt')
111/23: divs
111/24: divs[0]
111/25: divs[1]
111/26: sibling = divs[1].nextSibling
111/27: sibling
111/28: data = sibling.nextSibling
111/29: data
111/30: data = BeautifulSoup(data)
111/31: data
111/32: divs = data.select('.selected')
111/33: map(lambda d: int(d.text), divs)
111/34: data=\n<div class="indices_data">\n<a class="tooltip" data-tooltip="def1-tip"><div class="indice_low selected">34</div></a>\n<a class="tooltip" data-tooltip="def1-tip"><div class="indice_medium selected">\r\n                        58</div></a>\n<div><img alt="Indice" src="/_img/bkgd/avant-11h.png"/></div>\n</div>
111/35: help map
111/36: help(map)
111/37: map(lambda d: float(d.text), divs)
111/38: map(lambda d: float(d.text), data)
111/39: map(lambda d: float(d.text), list(data))
111/40: history
111/41: sec='http://portalltd.secltd/EmpTelData'
111/42: doc_sec=BeautifulSoup(sec)
111/43: doc_sec
111/44: sec='http://sip.secltd/default.aspx'
111/45: doc_sec
111/46: doc_sec=BeautifulSoup(sec)
111/47: sec='http://sip.secltd/'
111/48: doc_sec=BeautifulSoup(sec)
111/49: epa='http://taqm.epa.gov.tw/taqm/tw/'
111/50: doc_epa=BeautifulSoup(epa)
111/51: epa
111/52: doc_epa
111/53: BASEURL
111/54: doc_sec = BeautifulSoup(urlopen(sec))
111/55: doc_epa = BeautifulSoup(urlopen(epa))
111/56: doc_epa
111/57: epa
111/58: sec='http://portalltd.secltd/EmpTelData'
111/59: doc_sec = BeautifulSoup(urlopen(sec))
111/60: epa
111/61: data
111/62: divs = BeautifulSoup(BeautifulSoup(urlopen(BASEURL)).select('.indices_txt')[1].nextSibling.nextSibling).select('.selected')
111/63: divs
111/64: !grep indices_data data.txt
111/65: !grep indices_data doc.txt
111/66: map(lambda d: int(d.text), divs)
111/67: epa
111/68: div_songshan=BeautifulSoup(doc_epa).select('Songshan')
111/69: doc_epa.select('AreaPsi')
111/70: soc_epa
111/71: doc_epa
111/72: doc_epa.select('Songshan')
111/73: a=doc_epa.select('Songshan')
111/74: a
111/75: help(BeautifulSoup.select)
111/76: a=doc_epa.select('table')
111/77: a
111/78: a=doc_epa.select(map id='AreaPsi')
111/79: a=doc_epa.select('map id=AreaPsi')
111/80: cd ../
111/81: cd water_pollution/
111/82: pwd
111/83: fname='篩選行業別.xls'
111/84: fname='篩選行業別.xlsx'
111/85: from openpyxl import Workbook, load_workbook
111/86: wb2= load_workbook(fname)
111/87: pwd
111/88: cd 7243C水保處/
111/89: wb2= load_workbook(fname)
111/90: wb2
111/91: ws=wb2['102-104行業']
111/92: fname
111/93: fname.decode('string_escape')
111/94: print fname.decode('string_escape')
111/95: ws_name='102-104行業'
111/96:  ws=wb2[fname]
111/97:  ws=wb2[ws_name]
111/98: ws_name='\u102-104行業'
111/99:  ws=wb2[ws_name]
111/100: fname
111/101: ws_name='102-104行業'.encode('string_escape')
111/102: ws_name
111/103:  ws=wb2[ws_name]
111/104: ws_name='102-104行業'.decode('string_escape')
111/105:  ws=wb2[ws_name]
111/106: ws_name='102-104'
111/107:  ws=wb2[ws_name+'*']
111/108: ws=wb2['102-104']
111/109: wb2.close
112/1: from openpyxl import Workbook, load_workbook
112/2: wb2= load_workbook('7243C水保處/篩選行業別.xlsx')
112/3: ws=wb2['102-104']
112/4:
A=[0]*2
B=[0]*2
for i in xrange(2,81):
    A.append(ws.cell(row=i, column=1).value)
    B.append(ws.cell(row=i, column=2).value)
112/5:
A=[0]*2
for i in xrange(2,81):
    if ws.cell(row=i, column=1).value ==1: A.append(ws.cell(row=i, column=1).value)
112/6: A
112/7:
A=[0]*2
for i in xrange(2,81):
    if ws.cell(row=i, column=2).value ==1: A.append(ws.cell(row=i, column=1).value)
112/8: A
112/9:
A=[0]*2
for i in xrange(2,81):
    if ws.cell(row=i, column=2).value == '1': A.append(ws.cell(row=i, column=1).value)
112/10: A
112/11:
A=[0]*2
for i in xrange(2,81):
    if ws.cell(row=i, column=2) == '1': A.append(ws.cell(row=i, column=1).value)
112/12: A
112/13:
A=[0]*2
for i in xrange(2,81):
    if int(ws.cell(row=i, column=2).value) == 1: A.append(ws.cell(row=i, column=1).value)
112/14:
A=[0]*2
B=[0]*2
for i in xrange(2,81):
    A.append(ws.cell(row=i, column=1).value)
    B.append(ws.cell(row=i, column=2).value)
112/15: A
112/16: B
112/17: history
112/18: wb2= load_workbook('7243C水保處/篩選行業別.xlsx',data_only='true')
112/19: ws=wb2['102-104']
112/20:
A=[0]*2
for i in xrange(2,81):
    if int(ws.cell(row=i, column=2).value) == 1: A.append(ws.cell(row=i, column=1).value)
112/21:
A=[0]*2
for i in xrange(2,81):
    if ws.cell(row=i, column=2).value ==1: A.append(ws.cell(row=i, column=1).value)
A
112/22: A.decode('string_escape')
112/23: print array(A.decode('string_escape'))
112/24: import numpy as np
112/25: print np.array(A.decode('string_escape'))
112/26: print A.decode('string_escape')
112/27: print A
112/28: print A.decode('big5')
112/29: print tuple(A).decode('big5')
112/30: fname='160617  國家溫室氣體清冊需求資料-水保處提供.xlsx'
112/31: wb2= load_workbook(fname,data_only='true')
112/32: ws2=wb2['sheet1']
112/33: '103-1' in A
112/34: 0 in A
112/35: '103-1*' in A
112/36: '103-1 \u7d19\u6f3f\u88fd\u9020\u696d' in A
112/37: u'103-1' in A
112/38: a
112/39: A
112/40: A=np.array(A)
112/41: u'103-1' in A
112/42: split(A)
112/43: A.split()
112/44: A[3].split()
112/45: len(A[1])
112/46: len(A[3])
112/47: len(A[0])
112/48:
class=[]
for i in xrange(len(A)):
    if len(A[i])>1:
        class.append(A[i].split[0])
112/49:
cat_nam=[]
for i in xrange(len(A)):
    if len(A[i])>1:
        cat_nam.append(A[i].split[0])
112/50: A[3].split()[1]
112/51:
cat_nam=[]
for i in xrange(len(A)):
    if len(A[i])>1:
        cat_nam.append(A[i].split()[0])
112/52: cat_nam
112/53: '103-1' in cat_nam
112/54: ws2
112/55: history
112/56: ctrl_nam=[0]*3
112/57:
ctrl_no=[]
plant_cat=[]
plant_eqip=[]
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    if cat_tmp in cat_nam:
        ctrl_no.append(ws2.cell(row=i, column=1).value)
        plant_cat.append(cat_tmp)
        plant_eqip.append(ws2.cell(row=i, column=12).value)
112/58: len(ctrl_no)
112/59: plant_cat[10000]
112/60: ctrl_no[10000]
112/61: plant_eqip[10000]
112/62: print plant_eqip[10000]
112/63: ctrl_no[10001]
112/64: print plant_eqip[10001]
112/65: history
112/66: wb2= load_workbook('7243C水保處/處理設備.xlsx',data_only='true')
112/67:
ws=wb2['102-104']
equip_nam=[]
for i in xrange(2,672):
    if ws.cell(row=i, column=3).value ==1: equip_nam.append(ws.cell(row=i, column=2).value)
112/68: equip_nam
112/69: print equip_nam
112/70: print equip_nam.decode('string_escape')
112/71: print fname
112/72: print str(equip_nam[0:20])
112/73: print str(equip_nam[0:20]).decode('string_escape')
112/74: print str(equip_nam[0:20]).decode('big5')
112/75: print str(equip_nam[0:20]).encode('big5')
112/76: str(equip_nam[0:20]).encode('big5')
112/77: str(equip_nam[0:20]).decode('string_escape')
112/78:
for i in equip_nam:
    print i.decode('string_escape')
112/79:
for i in equip_nam:
    print i.decode('big5')
112/80:
for i in equip_nam:
    print i
112/81:
equip_nam=[]
for i in xrange(2,672):
    if ws.cell(row=i, column=3).value ==1:
        equip_nam.append(ws.cell(row=i, column=1).value+ws.cell(row=i, column=2).value)
112/82:
for i in equip_nam:
    print i
112/83: 'T07厭氣塘' in equip_nam
112/84: u'T07厭氣塘' in equip_nam
112/85:
for i in cat_nam:
    print i
112/86:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value)
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctrl_no.append(ws2.cell(row=i, column=1).value)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/87:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctrl_no.append(ws2.cell(row=i, column=1).value)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/88: len(ctrl_no)
112/89: ctrl_no
112/90:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant={}
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value
        if ctr_tmp !in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/91:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant={}
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value
        if ctr_tmp not in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/92:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant=set()
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value
        if ctr_tmp !in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/93:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant=set()
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=11).value+ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value
        if ctr_tmp not in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/94: plant
112/95: len(plant)
112/96: len(ctrl_no)
112/97:
for i in plant_equ:
     print i
112/98: len(equip_nam)
112/99: p='T01厭氣污泥床(上流式厭氣污泥床)'
112/100: p in equip_nam
112/101: p=u'T01厭氣污泥床(上流式厭氣污泥床)'
112/102: p in equip_nam
112/103:
s=[]
for i in plant_equ:
    if i == p: s.append(i)
112/104: len(s)
112/105:
s=[]
for i in xrange(len(plant_equ)):
    if plant_equ[i] == p and plant_cat[i]=='111-1': s.append(i)
112/106: len(s)
112/107: cat_nam
112/108: p=[' 王晟旭'; ' 何忠陽'; ' 李文杰'; ' 李文達'; ' 李玉滄'; ' 李安爵'; ' 李佳慧'; ' 李宙耕'; ' 李偉誠'; ' 李榮瑞'; ' 李憶芬'; ' 沈美豐'; ' 辛希'; ' 阮仲如'; ' 卓逸程'; ' 周易陵'; ' 周昶佑'; ' 周郁翔'; ' 周國偉'; ' 林文宗'; ' 林家輝'; ' 林錦昌'; ' 邱華榮'; ' 姜鴻菊'; ' 胡雁翠'; ' 胡達振'; ' 范為善'; ' 袁宏績'; ' 高福助'; ' 張永霖'; ' 張哲嘉'; ' 張雁翔'; ' 許呈任'; ' 許惠燿'; ' 許德利'; ' 郭力豪'; ' 陳立仁'; ' 陳芬佩'; ' 陳姿萍'; ' 陳建方'; ' 陳美玲'; ' 陳婉寧'; ' 陳森煌'; ' 游明海'; ' 游明進'; ' 黃文俊'; ' 黃旭'; ' 黃富昌'; ' 黃琳玲'; ' 黃雅琪'; ' 楊弘池'; ' 楊宜蒼'; ' 楊軫軫'; ' 楊翠芬'; ' 溫良志'; ' 葛文忠'; ' 鄒年喬'; ' 廖志祥'; ' 廖國銘'; ' 廖裕為'; ' 劉欽正'; ' 蔡豐吉'; ' 鄧新民'; ' 鄭明文'; ' 鄭維祐'; ' 燕睿成'; ' 蕭文魁'; ' 賴芃劭'; ' 謝其泉'; ' 鍾君佩'; ' 簡哲凡'; ' 藍文基'; ' 魏經理永坤'; ' 曠永銓'; ' 羅川城'; ' 羅順禹'; ' 蘇俊明'; ' 蘇哲雋'; ' 蘇袁弘'; '孫副總世勤'; '翁明仁'; '黃經理聖賢'; '趙清山'; '劉志賢'; '羅協理薪又']
112/109: ws
112/110: wb
112/111:
wb= load_workbook('7243C水保處/處理設備.xlsx',data_only='true')
ws=wb['102-104']
equip_nam=[]
for i in xrange(2,672):
    if ws.cell(row=i, column=3).value ==1: equip_nam.append(ws.cell(row=i, column=2).value)
for i in equip_nam:
     print i
112/112:
wb= load_workbook('7243C水保處/處理設備.xlsx',data_only='true')
ws=wb['102-104']
equip_nam=set()
for i in xrange(2,672):
    equ_tmp=ws.cell(row=i, column=2).value
    equ_filter=ws.cell(row=i, column=3).value
    if equ_filter ==1 and: equ_tmp not in equip_nam: equip_nam.add(equ_tmp)
for i in equip_nam:
     print i
112/113:
wb= load_workbook('7243C水保處/處理設備.xlsx',data_only='true')
ws=wb['102-104']
equip_nam=set()
for i in xrange(2,672):
    equ_tmp=ws.cell(row=i, column=2).value
    equ_filter=ws.cell(row=i, column=3).value
    if equ_filter ==1 and equ_tmp not in equip_nam: equip_nam.add(equ_tmp)
for i in equip_nam:
     print i
112/114:
fname='160617  國家溫室氣體清冊需求資料-水保處提供.xlsx'
wb2= load_workbook(fname,data_only='true')
ws2=wb2['sheet1']
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant=set()
for i in xrange(3,93031):
#    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=12).value
#    if cat_tmp in cat_nam and equ_tmp in equip_nam:
    if equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value
        if ctr_tmp not in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/115: len(ctrl_no)
112/116: len(plant_equ)
112/117: len(plant)
112/118: fname3='列管事業名單-厭氧設備篩.xlsx'
112/119: wb3= load_workbook(fname3,data_only='true')
112/120: !pwd
112/121: fname3=u'7243C水保處/列管事業名單-厭氧設備篩.xlsx'
112/122: wb3= load_workbook(fname3,data_only='true')
112/123: ws3=wb3['name']
112/124: plant3=set()
112/125: ws3.cell
112/126: len(ws3.cell)
112/127:
for i in xrange(1,241):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/128: len(plant3)
112/129: plant3-plant
112/130: plant
112/131: plant[1]
112/132: for i in plant: print trim(i)
112/133: for i in plant: print strip(i)
112/134: for i in plant: print i.strip()
112/135:
plant=set()
for i in xrange(3,93031):
    equ_tmp=ws2.cell(row=i, column=12).value
    if equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value.strip()
        if ctr_tmp not in plant: plant.add(ctr_tmp)
112/136: plant
112/137: plant3-plant
112/138: len(plant)
112/139: for i in plant3-plant: print i
112/140: history
112/141: plant3=set()
112/142:
for i in xrange(2,241):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/143: len(plant3)
112/144:
for i in xrange(2,242):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/145:
for i in xrange(2,):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/146:
for i in xrange(2,*):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/147:
for i in xrange(2,99999):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/148: len(plant3)
112/149: plant3-plant
112/150:
for i in xrange(2,241):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/151:
plant3=set()
for i in xrange(2,241):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/152: len(plant3)
112/153:
plant3=set()
for i in xrange(2,242):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
112/154: len(plant3)
112/155: plant3
112/156: plant3-plant
112/157: plant-plant3
112/158: cat_nam
112/159:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant=set()
for i in xrange(3,93031):
    cat_tmp=ws2.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws2.cell(row=i, column=12).value
    if cat_tmp in cat_nam and equ_tmp in equip_nam:
        ctr_tmp=ws2.cell(row=i, column=1).value.strip()
        if ctr_tmp not in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
112/160: len(plant)
112/161: plant3-plant
112/162: plant
112/163: plant3
112/164: plant-plant3
112/165: 3minus1=plant3-plant1
112/166: p3_1=plant3-plant1
112/167: p3_1=plant3-plant
112/168: len(p3_1)
112/169: len(plant_equ)
112/170: len(equip_nam)
113/1: run wp.py
113/2: run wp.py
113/3: run wp.py
113/4: fname1=u'7243C水保處/篩選行業別.xlsx'
113/5: run wp.py
113/6: run wp.py
114/1: run wp.py
114/2: len(plant)
114/3: fname='表1水污染源管制資料管理系統之欄位資料篩選項目需求表-基本資料.csv'
114/4: tab1=read_csv(fname,index_col=0, sep=',')
114/5: from numpy import *
114/6: tab1=read_csv(fname,index_col=0, sep=',')
114/7: from pandas import *
114/8: tab1=read_csv(fname,index_col=0, sep=',')
114/9: tab1=read_csv(fname,index_col=0, sep=',')
114/10: kkey=list(tab1.columns)
114/11: krec = list(tab1.index)
114/12: kkey
114/13: for i in kkey: print i
114/14: for i in kkey: print i.decode('utf_8')
114/15: for i in kkey: print i.decode('big5')
114/16: len(krec)
114/17: krec[0]
114/18: kkey[0]
114/19: kkey[0].decode('big5')
114/20: print kkey[0].decode('big5')
114/21: krec=krec.strip()
114/22: ctrl_num=[]
114/23: ctrl_num.app(krec[i].strip()) for i in xrange(len(krec))
114/24: for i in xrange(len(krec)): ctrl_num.app(krec[i].strip())
114/25: for i in xrange(len(krec)): ctrl_num.append(krec[i].strip())
114/26: ctrl_num[0]
114/27: 事業名稱[0]
114/28: kkey
114/29: tab1_df=tab1.stack()
114/30: len(tab1_df)
114/31: len(ctrl_num)
114/32: tab1_df[0][0]
114/33: print  tab1_df[0][0]
114/34: print  tab1_df[0][0].decode('big5')
114/35: print  tab1_df[1][0]
114/36: print  tab1_df[0][1]
114/37: tab1_df.columns
114/38: tab1_df=tab1_df.reset_index()
114/39: tab1_df.columns
114/40: tab1_df.columns[0]
114/41: print tab1_df.columns[0]
114/42: print tab1_df.columns[0].decode('big5')
114/43: for i in xrange(10):print tab1_df.columns[i].decode('big5')
114/44: print tab1_df.columns[1]
114/45: print tab1_df.rows[1]
114/46: tab1_df
114/47: tab1_df[1]
114/48: tab1_df(1)
114/49:  wind_bins_df.columns = kkey
114/50:  tab1_df.columns = kkey
114/51: tab1_df=tab1.stack()
114/52: my_array = ones(3, dtype=([('foo', int), ('bar', float)]))
114/53: my_array = np.ones(3, dtype=([('foo', int), ('bar', float)]))
114/54: _____(my_array['foo'])
114/55: __(my_array['foo'])
114/56: my_array['foo']
114/57: my_array2 = my_array.view(recarray)
114/58: my_array2,foo
114/59: my_array2.foo
114/60: tab1
114/61: history
114/62: tab1=read_csv(fname,index_col=0, sep=',')
114/63: len(tab1)
114/64: len(krec)
114/65: len(kkey)
114/66: tab1
114/67: tab1[1][1]
114/68: history
114/69: kkey
114/70: for i in xrange(13): print kkey[i]
114/71: for i in xrange(13): print kkey[i].decode('big5')
114/72: tab1[tab1['處理設備名稱']=='厭氣塘']
114/73: tab1[tab1[u'處理設備名稱']==u'厭氣塘']
114/74: read_csv('tdf.csv')
114/75: df=read_csv('tdf.csv')
114/76: import pandas.util.testing as tm; tm.N = 3
114/77: df[df['variable'] == 'A']
114/78: df.pivot(index='date', columns='variable', values='value')
114/79: df
114/80: df['date']
114/81: df.date
114/82: df[index='date']
114/83: df[df['variable'] == 'A']
114/84: df['date']
114/85: df['value']
114/86: df.dataframe
114/87: df.DataFrame
114/88: df.head()
114/89: tab1.head()
114/90: tab1.head().decode('big5')
114/91: tab1.head()
114/92: df.head()
114/93: df['date']
114/94: df(['date'])
114/95: df[date]
114/96: s='date'
114/97: df[s]
114/98: df.loc
114/99: df.loc['date']
114/100: df
114/101: df.loc[1]
114/102: tab1.loc['L0300307']
114/103: tab1.loc[1]
114/104: tab1.loc['L0300307    ']
114/105: df[1]
114/106: df[col]
114/107: df[s]
114/108: df.col[s]
114/109: df.column[s]
114/110: df.columns[s]
114/111: df.columns
114/112: tab1.columns
114/113: history
114/114: df=read_csv('tdf.csv',sep='\t')
114/115: df
114/116: df.columns
114/117: df=read_csv('tdf.csv',sep=' ')
114/118: df.columns
114/119: df=read_csv('tdf.csv',sep=' ')
114/120: df.columns
114/121: df['date']
114/122: df['date'].head
114/123: df['date'].head()
114/124: history
114/125: tab1['處理設備名稱']
114/126: tab1[u'處理設備名稱']
114/127: history
114/128: tab1=read_csv(fname,index_col=0, sep=',')
114/129: tab1.columns
114/130: tab1=read_csv(fname,index_col=1, sep=',')
114/131: tab1.columns
114/132: tab1[tab1['equipment_name']=='厭氣塘']
114/133: tab1['equipment_name']=='厭氣塘'
114/134: tab1['equipment_name'].index('厭氣塘')
114/135: tab1[tab1['equipment_name']=='厭氣塘']
114/136: a=tab1['equipment_name'].index('厭氣塘')
114/137: a=tab1['equipment_name']=='厭氣塘'
114/138: tab1[a]
114/139: tab1[a=='true']
114/140: a
114/141: a.head
114/142: a.head()
114/143: history
114/144: df[df['variable'] == 'A']
114/145: df['variable'] == 'A'
114/146: tab1[tab1['control_number']=='L0300307    ']
114/147: tab1[tab1['equipment_name']=='厭氣塘']
114/148: s=u'厭氣塘'
114/149: tab1[tab1['equipment_name']==s]
114/150: s=u'厭氣塘'.decode('big5')
114/151: s=u'厭氣塘'.encode('big5')
114/152: s
114/153: tab1[tab1['equipment_name']==s]
114/154: s=u'厭氣塘'.encode('utf_8')
114/155: tab1[tab1['equipment_name']==s]
114/156: tab1['equipment_name'].head()
114/157: tab1['equipment_name'].head().decode('big5')
114/158: for i in tab1['equipment_name'].head(): print i.decode('big5')
114/159: for i in tab1['equipment_name']: if i == '厭氣塘': print i.decode('big5')
114/160:
for i in tab1['equipment_name']:
     if i == '厭氣塘': print i.decode('big5')
114/161:
for i in tab1['equipment_name']:
     if i.decode('big5') == '厭氣塘': print i.decode('big5')
114/162:
for i in tab1['equipment_name']:
     if i == '厭氣塘'.encode('big5): print i.decode('big5')
114/163:
for i in tab1['equipment_name']:
     if i == '厭氣塘'.encode('big5): 
          print i.decode('big5')
114/164:
for i in tab1['equipment_name']:
     if i == '厭氣塘'.encode('big5'): 
          print i.decode('big5')
114/165:
for i in tab1['equipment_name']:
     if i == '厭氣塘': 
          print i.decode('big5')
114/166:
for i in tab1['equipment_name']:
     if i.strip() == '厭氣塘': 
          print i.decode('big5')
114/167:
for i in tab1['equipment_name']:
     if i.strip().decode('utf_8') == '厭氣塘': 
          print i.decode('big5')
114/168: s
114/169: print s
114/170: print s.strip()
114/171:
for i in tab1['equipment_name']:
     if i == s: 
          print i.decode('big5')
114/172:
for i in df['variable']:
     if i == 'A': 
          print i.decode('big5')
114/173:
for i in tab1['equipment_name'].head():
    print i.decode('big5')
114/174: equip_nam
114/175:
for i in tab1['equipment_name'].head():
    if i in equip_nam: print i.decode('big5')
114/176:
for i in tab1['equipment_name']:
    if i in equip_nam: print i.decode('big5')
114/177: s=tab1['equipment_name']
114/178:
for i in s:
    if i in equip_nam: print i.decode('big5')
114/179: s
114/180:
for i in s.head():
    print i.decode('big5')
114/181:
for i in s.head():
    print i
114/182: s[0]
114/183: s[0].decode('big5')
114/184: print s[0].decode('big5')
114/185:
for i in s:
    if i.strip() in equip_nam: print i.decode('big5')
114/186: equip_nam
114/187: equip_nam2=set()
114/188: for i in equip_nam:equip_nam2.add(i.strip())
114/189: equip_nam2
114/190: for i in s:if i.strip() in equip_nam: print i.decode('big5')
114/191:
for i in s:
    if i.strip() in equip_nam2: print i.decode('big5')
114/192:
for i in xrange(len(s)):
    if s[i].strip() in equip_nam2: print i.decode('big5')
114/193: len(s)
114/194:
for i in xrange(len(s)):
    s_tmp=s[i].strip()
    if s_tmp in equip_nam2: print s_tmp.decode('big5')
114/195:
for i in xrange(1000):
    s_tmp=s[i].strip()
    if s_tmp in equip_nam2: print s_tmp.decode('big5')
114/196: print s[1000].strip().decode('big5')
114/197: print s[0:1000].strip().decode('big5')
114/198: len(ctrl_num)
114/199: len(plant)
114/200: s=plant|plant3
114/201: plant3
115/1: run wp.py
115/2:
fname3=u'7243C水保處/列管事業名單-厭氧設備篩.xlsx'
wb3= load_workbook(fname3,data_only='true')
ws3=wb3['name']
plant3=set()
for i in xrange(2,672):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
115/3: len(plant3)
115/4: plant3
115/5:
fname3=u'7243C水保處/列管事業名單-厭氧設備篩.xlsx'
wb3= load_workbook(fname3,data_only='true')
ws3=wb3['name']
plant3=set()
for i in xrange(2,242):
    ctr_tmp=ws3.cell(row=i, column=1).value
    if ctr_tmp not in plant3: plant3.add(ctr_tmp)
115/6: len(plant3)
115/7: plant3.head()
115/8: plant3
115/9: len(plant)
115/10: plant-plant3
115/11: cat_nam
115/12: equip_nam
115/13: s=[]
115/14:
for i in equip_nam:
    s.append(i)
115/15: s
115/16: s[0][1]
115/17: s[0][0]
115/18: print s[0][0].decode('big5')
115/19: print s[0][0].decode('string_escape')
115/20: print s[0][0]
115/21:
ctrl_no=[]
plant_cat=[]
plant_equ=[]
plant=set()
for i in xrange(3,93031):
    cat_tmp=ws3.cell(row=i, column=7).value.split()[0]
    equ_tmp=ws3.cell(row=i, column=12).value
#    if cat_tmp in cat_nam and equ_tmp in equip_nam:
    if equ_tmp[0][0] == s[0][0]:
        ctr_tmp=ws3.cell(row=i, column=1).value.strip()
        if ctr_tmp not in plant: plant.add(ctr_tmp)
        ctrl_no.append(ctr_tmp)
        plant_cat.append(cat_tmp)
        plant_equ.append(equ_tmp)
115/22: ws3
115/23: i=1
115/24: cat_tmp=ws3.cell(row=i, column=7).value.split()[0]
115/25:
fname=u'160617  國家溫室氣體清冊需求資料-水保處提供.xlsx'
wb3= load_workbook(fname,data_only='true')
ws3=wb3['sheet1']
115/26: history
116/1: run wp.py
116/2: s[0][0]
116/3: print s[0][0]
116/4: len(plant)
116/5: len(plant3)
116/6: plant-plant3
116/7: 000-0 in plant_cat
116/8: '000-0' in plant_cat
116/9: '105-1' in plant_cat
116/10: 'X0595583' in ctrl_no
116/11: 'H43B4234' in ctrl_no
116/12: ctrl_no
116/13: 'T5700586' in ctrl_no
116/14: 'H43B4234' in plant3
116/15: 'H43B4234' in plant
119/1: s='國家溫室氣體清冊需求資料'
119/2: if s =='國家溫室氣體清冊需求資料':print 'true'
119/3: print '▒O▒▒▒▒۹▒~▒▒▒▒▒▒▒q'.decode('big5')
119/4: print '▒O▒▒▒▒۹▒~▒▒▒▒▒▒▒q'
119/5: print '▒O▒▒▒▒۹▒~▒▒▒▒▒▒▒q'
119/6: s2='▒O▒▒▒▒۹▒~▒▒▒▒▒▒▒q'
119/7: print s2.decode('big5')
119/8: print s2.decode('string_escape')
119/9: print s2.decode('utf8')
119/10: print s2.decode('ascii')
119/11: # -*- coding: utf_8
119/12:  print s2
119/13: print s2.decode('big5')
119/14: if s2 =='力隆砂石實業有限公司':print 'true'
119/15: if s2.decode('big5') =='力隆砂石實業有限公司':print 'true'
119/16: cat s2
119/17: print s2
119/18: run wp.py
119/19: len(plant)
119/20: len(plant3)
119/21: a=list(plant)
119/22: a[0]
119/23: s
119/24: print s
119/25: print s.decode('big5')
119/26: print s.decode('string_escape')
119/27: print s[0].decode('string_escape')
119/28: print s[0].decode('big5')
119/29: print str(s[0]).decode('big5')
119/30: cat_nam
119/31: equip_nam
119/32: print equip_nam
119/33: print i for i in equip_nam
119/34: print i (for i in equip_nam)
119/35: for i in equip_nam:print i
119/36: for i in s:print i
119/37: for i in s: print i
119/38: for i in s[0][0]: print i
119/39: s2
119/40: print s2
119/41: s
119/42: s[0][0]
119/43: s2=u'\xe2\x96\x92O\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xdb\xb9\xe2\x96\x92~\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92\xe2\x96\x92q'
119/44: s2
119/45: print s2
119/46: print s2.decode('string_escape')
119/47: print s2.decode('utf8')
119/48: s2=u'力隆砂石實業有限公司'
119/49: s2
119/50: print s2
119/51: plant3-plant
119/52: len(cat_nam)
119/53: for i in equip_nam:startwith(s[0][0])
119/54:
for i in equip_nam:
    if i startwith(s[0][0]): print 'true'
119/55:
for i in equip_nam:
    if i startswith(s[0][0]): print 'true'
119/56:
for i in equip_nam:
    if i.startswith(s[0][0]): print 'true'
119/57:
for i in equip_nam:
    if i.startswith(s[0][0]): print i
119/58:
for i in equip_nam:
    if i.startswith('厭'): print i
119/59:
for i in equip_nam:
    if i.startswith(u'厭'): print i
119/60: history
119/61: for i in wb: print i
119/62: for i in wb2: print i
119/63: len(wb3)
119/64: wb3
119/65: wb3[1]
119/66: wb3[0]
119/67: a=wb3['樞紐']
119/68: a=wb3[u'樞紐']
119/69: s3=u'樞紐'
119/70: a=wb3[s3]
119/71: s3=u'name'
119/72: a=wb3[s3]
119/73: fname3
119/74: print fname3
119/75: s3='name'
119/76: a=wb3[s3]
119/77: wb3
119/78: a=wb3['name']
120/1: filenm='a.txt'
120/2:
lines = tuple(open(filename, 'r'))
f = open(filename, 'r')
a=f.read()
120/3: filename='a.txt'
120/4:
lines = tuple(open(filename, 'r'))
f = open(filename, 'r')
a=f.read()
120/5: a
120/6: a.split('\n')
120/7: a=a.split('\n')
120/8: len(a)
120/9: 'W0600021' in a
120/10: run wp.py
120/11: cat2=set()
120/12:
for i in xrange(3,93031):
    ctr_tmp=ws3.cell(row=i, column=1).value.strip()
    cat_tmp=ws3.cell(row=i, column=7).value
    if ctr_tmp in a: cat2.add(cat_tmp)
120/13: cat2
120/14: for i in cat2:print i
120/15: cat_nam
120/16: cat2.sorted()
120/17: sorted(cat2)
120/18: cat_nam
120/19: len(cat_nam),len(cat2)
120/20: import pandas as pd
120/21: ls *.csv
120/22: fn_tab1=u'表1水污染源管制資料管理系統之欄位資料篩選項目需求表-基本資料.csv'
120/23: read_csv(fn_tab1)
120/24: pd.read_csv(fn_tab1)
120/25: tab1_df=pd.read_csv(fn_tab1)
120/26: tab1[tab1['equipment_name']==s]
120/27: tab1=pd.read_csv(fn_tab1)
120/28: equip_nam[1]
120/29: sorted(equip_nam)[1]
120/30: s
120/31: s2
120/32: s2=sorted(equip_nam)[1]
120/33: tab1[tab1['equipment_name']==s2]
120/34: a
120/35: b
120/36: b=tab1['equipment_name']
120/37: s2 in b
120/38: b
120/39: b[2]
120/40: print b[2]
120/41: print u+b[2]
120/42: for i in b.head:print i
120/43: for i in b.head():print i
120/44: for i in b.head():print i.decode'(big5')
120/45: for i in b.head():print i.decode('string_escape')
120/46: for i in b.head():print i.decode('string_escape').decode('big5')
120/47: print s2.decode('string_escape').decode('big5')
120/48: print s2
120/49: c=[]
120/50: for i in b:c.append(i.decode('string_escape').decode('big5').strip())
120/51: c.head
120/52: c.head()
120/53: len(c)
120/54: c[0:1]
120/55: b[0:1]
120/56: s2
120/57: s2 in c
120/58: history
120/59: tab1[tab1['control_number']=='F0800835']
120/60: b=tab1['control_number']=='F0800835'
120/61: tab1[b]
120/62: b.head()
120/63: b
120/64: 'True' in b
120/65: 'False' in b
120/66: False in b
120/67: True in b
120/68: tab1.where(tab1['control_number']=='F0800835')
120/69: tab1.head()
120/70: tab1[tab1['control_number']=='A3405533']
120/71: tab1[tab1['control_number']>'A3405533']
120/72: tab1.head()
120/73: tab1[tab1['control_number']>'A34B0361']
120/74: tab1.query('control_number=="F0800835"')
120/75: tab1.query('control_number == "F0800835"')
120/76: df.index
120/77: tab1.index
120/78: tab1.index(1)
120/79: tab1.index.names
120/80: tab1.columns.names
120/81: tab1.columns
120/82: tab1.columns[0]
120/83: tab1.query('control_number == "F0800835"')
120/84: tab1.query('control_number == u"F0800835"')
120/85: tab1.head(10)
120/86: tab1.query('control_number' )
120/87: tab1.query('control_number'=='F0800835' )
120/88: tab1.query("'control_number'=='F0800835'" )
120/89: tab1.query("control_number=='F0800835'" )
121/1:
import pandas as pd
fn_tab1=u'表1水污染源管制資料管理系統之欄位資料篩選項目需求表-基本資料.csv'
tab1=pd.read_csv(fn_tab1)
121/2: tab1.query("control_number=='F0800835'" )
121/3: tab1.query('control_number == "F0800835" ' )
121/4: tab1.loc[tab1['control_number']=='A34B0361']
121/5: tab1.loc[tab1['control_number']=='A34B0361    ']
121/6: tab1.loc[tab1['control_number']=='F0800835    ']
121/7: a=tab1.loc[tab1['control_number']=='F0800835    ']
121/8: for i in a:print i.decode('string_escape').decode('big5')
121/9: a
121/10: list(a)
121/11: list(a.row)
121/12: tab1=tab1.set_index(['control_number'])
121/13: tab1.head()
121/14: tab1('A3405533    ')
121/15: tab1['A3405533    ']
121/16: tab1.loc['A3405533    ']
121/17: tab1.loc['F0800835    ']
121/18: # -*- coding: utf_8
121/19: tab1.loc['F0800835    ']
121/20: tab1.loc['F0800835    ']
121/21: tab1[tab1.control_number=='A34B0361    ']
121/22: tab1.loc[tab1.control_number=='A34B0361    ']
121/23:
d = {'foo':[100, 111, 222], 
     'bar':[333, 444, 555]}
df = pd.DataFrame(d)
df[df.foo == 222]
121/24: for i in df:print i
121/25: df
123/1: from openpyxl import Workbook, load_workbook
123/2: fname=u'160617  國家溫室氣體清冊需求資料-水保處提供.xlsx'
123/3: wb3= load_workbook(fname,data_only='true')
123/4: wsname=u'11業'
123/5: ws1=wb3[wsname]
123/6: cat_nam=set()
123/7:
for i in xrange(2,13):
    cat_ftr=ws1.cell(row=i, column=1).value
123/8:
for i in xrange(2,13):
    cat_tmp=ws1.cell(row=i, column=1).value
    if cat_tmp not in cat_nam: cat_nam.add(cat_tmp)
123/9: cat_nam
123/10: for i in cat_nam: print i
123/11: reg_nam=set()
123/12:
for i in xrange(2,4):
    reg_tmp=ws1.cell(row=i, column=2).value
    if reg_tmp not in reg_nam: reg_nam.add(reg_tmp)
123/13: for i in reg_nam: print i
123/14: ws3=wb3['sheet1']
123/15: plant=set()
123/16:
for i in xrange(3,9):
    cat_tmp=ws3.cell(row=i, column=7).value.split()[1]
    print cat_tmp
123/17:
for i in xrange(3,93032):
    plt_tmp=ws3.cell(row=i, column=1).value.split()[0]
    cat_tmp=ws3.cell(row=i, column=7).value.split()[1]
    reg_tmp=ws3.cell(row=i, column=10).value.split()[0]
    if cat_tmp in cat_nam and reg_tmp in reg_nam and plt_tmp not in plant: plant.add(plt_tmp)
123/18: len(plant)
123/19: a=u'食品'
123/20: a in cat_nam
123/21: a+'*' in cat_nam
123/22: a+'*'
123/23: help startwith
123/24: help startwith()
123/25: help startswith()
123/26: help startswith
123/27: a.startswith('食')
123/28: '食' in a
123/29: u'食' in a
123/30: ws2=wb3['sheet2']
123/31: plant2=[]
123/32: COD=[]
123/33: 'Z6303006
123/34: 'Z6303006' in plant
123/35: 'Z6303006   ' in plant
123/36: 'Z6303006  ' in plant
123/37:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=ws2.cell(row=i, column=4).value
        cmd_ou_tmp=ws2.cell(row=i, column=6).value
        cod_in_tmp=ws2.cell(row=i, column=5).value
        cod_ou_tmp=ws2.cell(row=i, column=7).value
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
123/38:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=ws2.cell(row=i, column=4).value.float
        cmd_ou_tmp=ws2.cell(row=i, column=6).value
        cod_in_tmp=ws2.cell(row=i, column=5).value
        cod_ou_tmp=ws2.cell(row=i, column=7).value
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
123/39:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=float(ws2.cell(row=i, column=4).value)
        cmd_ou_tmp=ws2.cell(row=i, column=6).value
        cod_in_tmp=ws2.cell(row=i, column=5).value
        cod_ou_tmp=ws2.cell(row=i, column=7).value
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
123/40:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=float(ws2.cell(row=i, column=4).value)
        cmd_ou_tmp=float(ws2.cell(row=i, column=6).value)
        cod_in_tmp=float(ws2.cell(row=i, column=5).value)
        cod_ou_tmp=float(ws2.cell(row=i, column=7).value)
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
123/41:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=float(ws2.cell(row=i, column=4).value)
        cmd_ou_tmp=float(ws2.cell(row=i, column=6).value)
        cod_in_tmp=float(ws2.cell(row=i, column=5).value)
        cod_ou_tmp=float(ws2.cell(row=i, column=7).value)
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
        print i
123/42:
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=float(ws2.cell(row=i, column=4).value)
        cmd_ou_tmp=float(ws2.cell(row=i, column=6).value)
        cod_in_tmp=float(ws2.cell(row=i, column=5).value)
        cod_ou_tmp=float(ws2.cell(row=i, column=7).value)
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
        print i
123/43: history
124/1: run wp2.py
124/2: fname
124/3: fname=u'160617  國家溫室氣體清冊需求資料-水保處提供.xlsx'
124/4: wsname=u'11業'
124/5: wb3= load_workbook(fname,data_only='true')
124/6: from openpyxl import Workbook, load_workbook
124/7: wb3= load_workbook(fname,data_only='true')
124/8:
ws1=wb3[wsname]
cat_nam=set()
for i in xrange(2,13):
    cat_ftr=ws1.cell(row=i, column=1).value
for i in xrange(2,13):
    cat_tmp=ws1.cell(row=i, column=1).value
    if cat_tmp not in cat_nam: cat_nam.add(cat_tmp)
cat_nam
for i in cat_nam: print i
reg_nam=set()
for i in xrange(2,4):
    reg_tmp=ws1.cell(row=i, column=2).value
    if reg_tmp not in reg_nam: reg_nam.add(reg_tmp)
for i in reg_nam: print i
ws3=wb3['sheet1']
plant=set()
for i in xrange(3,9):
    cat_tmp=ws3.cell(row=i, column=7).value.split()[1]
    print cat_tmp
for i in xrange(3,93032):
    plt_tmp=ws3.cell(row=i, column=1).value.split()[0]
    cat_tmp=ws3.cell(row=i, column=7).value.split()[1]
    reg_tmp=ws3.cell(row=i, column=10).value.split()[0]
    if cat_tmp in cat_nam and reg_tmp in reg_nam and plt_tmp not in plant: plant.add(plt_tmp)
len(plant)
ws2=wb3['sheet2']
plant2=[]
COD=[]
for i in xrange(3,40671):
    ctr_tmp=ws2.cell(row=i, column=1).value.strip()
    yrm_tmp=ws2.cell(row=i, column=2).value.strip()
    if ctr_tmp in plant and '102' in yrm_tmp:
        plant2.append(ctr_tmp)
        cmd_in_tmp=float(ws2.cell(row=i, column=4).value)
        cmd_ou_tmp=float(ws2.cell(row=i, column=6).value)
        cod_in_tmp=float(ws2.cell(row=i, column=5).value)
        cod_ou_tmp=float(ws2.cell(row=i, column=7).value)
        cod_tmp=cmd_in_tmp*cod_in_tmp-cmd_ou_tmp*cod_ou_tmp
        COD.append(cod_tmp/10**6)
        print i
124/9: len(plant2)
124/10:
plant2_set=set()
for i in xrange(len(plant2)):
    if plant2[i] not in plant2_set: plant2_set.add(plant2[i])
124/11: len(plant2_set)
124/12: cod_sum=0
124/13:
for i in xrange(len(plant2)):
    if COD[i] > 0: cod_sum=cod_sum+COD[i]
print cod_sum
124/14: i_sum=0
124/15:
for i in xrange(len(plant2)):
    if COD[i] > 0: i_sum=i_sum+1
print i_sum
124/16: plant3_set=set()
124/17:
for i in xrange(len(plant2)):
    if COD[i] > 0 and plant2[i] not in plant3_set: plant3_set.add(plant2[i])
len(plant3_set)
124/18: history
125/1: run wp2.py
125/2: run wp2.py
126/1: help
126/2: help()
126/3: history
126/4: !vi wp2.py
126/5: pwd
126/6: cat wp2.py
126/7: run wp2.py
126/8: fname
126/9: print fname
126/10: history
126/11: print wsname
126/12: cat_nam
126/13: for i in cat_nam: print i
126/14: history
127/1: for i in xrange(0,11,2):print i
127/2: for i in xrange(0,12,2):print i
128/1: run readuamiv.py
128/2: HNO3
128/3: a=con_file.variables['HNO3']
128/4: a=con_file.variables['NO2']
128/5: a
128/6: a.units
128/7: a.max
128/8: a.max()
128/9: a.mean()
128/10: a.mimn()
128/11: a.min()
128/12: uamiv()
128/13: help uamiv
128/14: help uamiv()
128/15: help( uamiv)
128/16: help(a)
128/17: a
128/18: b=con_file.variables['HNO3']
128/19: b=con_file.variables['NO']
128/20: c=a+b
128/21: c.max()
128/22: b.max()
128/23: a.max()
128/24: a.dimensions
128/25: a.mean(:,1,24,25)
128/26: a.shape
128/27: a.mean(0:744,0,24,25)
128/28: help(a.mean())
128/29: a.mean(axis=0)
128/30: a.mean(axis=0,1,2)
128/31: b=a.mean(axis=0)
128/32: b.dimensions
128/33: b.shape
129/1: run test/py
129/2: run test.py
129/3: !vi test.py
129/4: run test.py
129/5: !vi test.py
129/6: run test.py
129/7: print "Gridded emission NOx average over space in %s" % gefile.variables['NO'].units, eval('NO[:] + NO2[:]', globals(), gefile.variables).sum(3).sum(2).sum(1)
129/8: help(ncf2uamiv)
129/9: !vi
129/10: !vi test.py
129/11: outncf
129/12: gopath
129/13: ncf2uamiv(outncf, gopath)
129/14: !vi test.py
129/15: !vi test.py
129/16: run test.py
129/17: !vi test.py
129/18: run test.py
129/19: run test.py
130/1: run test.py
130/2: run test.py
131/1: run wp2.py
131/2: i
131/3: run wp2.py
132/1: import yum
133/1: yr=[]
133/2: for i in xrange(10,17):yr.append(str(i))
133/3: yr
133/4: stn=['07','38','51','57']
133/5:
for i in yr:
    for j in stn:
        fn='20'+i+'/HS0131.0'+j
        print fn
133/6:
for i in yr:
    for j in stn:
        fn='20'+i+'/HS0131.0'+j
        !ls fn
133/7: !ls fn
133/8: yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
133/9:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            fn='20'+i+'/HS'+k+'.0'+j
133/10:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if mod(float(i),4)==0 and k=='0228':yn='0229'
            fn='20'+i+'/HS'+yn+'.0'+j
            print fn
133/11:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn='20'+i+'/HS'+yn+'.0'+j
            print fn
133/12: history
133/13: filenm={}
133/14:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn='20'+i+'/HS'+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
133/15: filenm=set()
133/16:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn='20'+i+'/HS'+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
133/17: '2016/HS160229.001' in filenm
133/18: '2016/HS160229.007' in filenm
133/19: '2016/HS160229.051' in filenm
133/20: filenm
133/21: filenm=set()
133/22:
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn='20'+i+'/HS'+i+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
133/23: '2016/HS160229.051' in filenm
133/24:
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            k=1
            for s in line.split(','):
                if k == 3 and s=='63': print line
                if k >=4:break
                k=k+1
133/25: fname
133/26:
with open(fname) as ftext:
    k=1
    for line in ftext:
        if k<5:print line
        k=k+1
133/27:
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            k=1
            for s in line.split(','):
                if k == 3 and s==63: print line
                if k >=4:break
                k=k+1
133/28:
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            k=1
            for s in line.split(','):
                if k == 3 and s==63: print line
                if k >=4:skip
                k=k+1
133/29: fname
133/30:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            print k,s
            if k >=4:break
            k=k+1
133/31:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if s == 63:print line
            if k >=4:continue
            k=k+1
133/32:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if s == 63:
                print line
                continue
            k=k+1
133/33:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if k==3:print k,s         
            k=k+1
133/34: fname
133/35:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if k==3 and s==10:print line
            k=k+1
133/36:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if k==3 and float(s)==10:print line
            k=k+1
133/37:
with open(fname) as ftext:
    for line in ftext:
        k=1
        for s in line.split(','):
            if k==3 and float(s)==63:print line
            k=k+1
133/38: fname
133/39: history
133/40: fname
134/1: run a.py
134/2: history
134/3: run a.py
134/4: (y,m,d,h,s,C)=([],[],[],[],[],[])
134/5:
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','):
                t.append(i)
            if float(t[2])==63:
                ymd=float(t[3])
                md=ymd%10000
                ss=float(t[0])
                for i in xrange(4,4+24-1):
                    y.append(ymd/10000)
                    m.append(md/100)
                    d.append(md%100)
                    h.append(i-3)
                    s.append(ss)
                    C.append(float(t[i]))
134/6: t
134/7: len(t)
134/8: run a.py
134/9: len(t)
134/10: run a.py
134/11: y[1000]
134/12: y[1000]=2016
134/13: y[1000]
134/14: run a.py
134/15: y[1000]
134/16: s[1000]
134/17: run a.py
134/18: s[1000]
134/19: h[1000]
134/20: C[1000]
134/21: m[1000]
134/22: d[1000]
134/23: run a.py
134/24: d[1000]
134/25: C[1000]
134/26: m[1000]
134/27: k=1000
134/28: (y(k),m(k),d(k),h(k),s(k),C(k))
134/29: y(k),m(k),d(k),h(k),s(k),C(k)
134/30: y[k],m[k],d[k],h[k],s[k],C[k]
134/31: int(stn[1])
134/32: int(stn[0])
134/33: import numpy as np
134/34:
data = np.ma.arange(len(C))
data = np.ma.masked_where(h==1, C)
data_mean = np.mean(data)
134/35: data_mean
134/36:
data = np.ma.arange(len(C))
data = np.ma.masked_where(s==38, C)
print np.mean(data)
134/37:
data = np.ma.arange(len(C))
data = np.ma.masked_where(s==38, y)
print np.mean(data)
134/38: data = np.ma.arange(len(C))
134/39: data
134/40: data = np.ma.masked_where(s==38, C)
134/41: print np.mean(data)
134/42: data_1=np.ma.array(C, float)
134/43: data_1=np.ma.array(h, float)
134/44: data_1=np.ma.array(C, float)
134/45: data_2=np.ma.array(h, float)
134/46: data_3 = np.ma.masked_where(data_2==5, data_1)
134/47: print np.nanmean(data_3)
134/48: print np.nanmean(np.ma.masked_where(data_2==15, data_1))
134/49: data_2=np.ma.array(s, float)
134/50: np.nanmean(np.ma.masked_where(data_2==38, data_1))
134/51: np.nanmean(np.ma.masked_where(data_2==51, data_1))
134/52: np.nanmean(np.ma.masked_where(data_2==57, data_1))
134/53: np.nanmean(np.ma.masked_where(data_2==7, data_1))
134/54: np.mean(np.ma.masked_where(data_2==7, data_1))
134/55: np.max(np.ma.masked_where(data_2==7, data_1))
134/56: np.max(np.ma.masked_where(data_2==38, data_1))
134/57: data_2=np.ma.array(h, int)
134/58: for i in xrange(1,24):np.max(np.ma.masked_where(data_2==i, data_1))
134/59: for i in xrange(1,24):print np.mean(np.ma.masked_where(data_2==i, data_1))
134/60: data_2=np.ma.array(s, int)
134/61: data_2=np.ma.array(h, int)
134/62: data_3=np.ma.array(h, int)
134/63: for i in xrange(1,24):print np.mean(np.ma.masked_where(data_3==j and data_2==i, data_1))
134/64:
data_1=np.ma.array(C, float)
data_2=np.ma.array(h, int)
data_3=np.ma.array(s, int)
for i in stn:
    ss=int(i)
    for j in xrange(1,24):
        print np.mean(np.ma.masked_where(data_3==ss and data_2==j, data_1))
134/65: ss
134/66: j
134/67: print np.mean(np.ma.masked_where(data_3==ss and data_2==j, data_1))
134/68: ss=data_3*100+data_2
134/69: ss[1]
134/70:
data_1=np.ma.array(C, float)
data_2=np.ma.array(h, int)+np.ma.array(s, int)*100
for i in stn:
    ss=int(i)
    for j in xrange(1,24):
        sn=ss*100+j
        print np.mean(np.ma.masked_where(data_2==sn, data_1))
134/71:
data_1=np.ma.array(C, float)
data_2=np.ma.array(h, int)+np.ma.array(s, int)*100
for i in stn:
    ss=int(i)
    for j in xrange(1,24):
        sn=ss*100+j
        print sn,np.mean(np.ma.masked_where(data_2==sn, data_1))
134/72: data_2=np.ma.array(s, int)+np.ma.array(y, int)*100
134/73: data_1=np.ma.array(C, float)
134/74: print np.mean(np.ma.masked_where(data_2==3815, data_1))
134/75: for i in xrange(100):print C[i]
134/76: for i in xrange(len(C)):if C[i]<0:C[i]=0
134/77: for i in xrange(len(C)): if C[i]<0:C[i]=0
134/78:
for i in xrange(len(C)): 
     if C[i]<0:C[i]=0
134/79: data_1=np.ma.array(C, float)
134/80: print np.mean(np.ma.masked_where(data_2==3815, data_1))
134/81: print np.nanmean(np.ma.masked_where(data_2==3815, data_1))
134/82: print np.nanmean(np.ma.masked_where(data_2==3810, data_1))
134/83: print np.nanmean(data_1)
134/84: print np.nanmean(np.ma.masked_where(data_2=='3810', data_1))
134/85: print np.nanmean(np.ma.masked_equal(data_2, 3810, data_1))
134/86: np.nanmean(np.ma.masked_where(data_2==3810, data_1))
134/87: len(y)
134/88: len(s)
134/89: len(C)
134/90: tmp=[]
134/91:
for i in len(C):
    if data_2==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/92:
for i in len(C):
    if data_2[i]==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/93:
for i in len(C):
    if s[i]*100+y[i]==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/94:
for i in xrange(len(C)):
    if s[i]*100+y[i]==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/95: i
134/96: y[100]
134/97:
for i in xrange(len(C)):
    if s[i]*100+y[i]%100==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/98:
for i in xrange(len(C)):
    if s[i]*100+(y[i])%100==3810:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/99: len(tmp)
134/100:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if yrst ==201038:
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/101: len(tmp)
134/102: s[100]
134/103: i
134/104: yrst=y[i]*100+s[i]
134/105: yrst
134/106:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2010 and s[i]==38:
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/107:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2010 :
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/108: yyy=set()
134/109:
for i in y:
    if i not in yyy: yyy.add(y)
134/110:
for i in xrange(len(y)):
    if y[i] not in yyy: yyy.add(y[i])
134/111: yyy
134/112:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2011 :
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/113: tmp=[]
134/114:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2011 :
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/115:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2011 and s[i]==38:
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/116: tmp=[]
134/117:
for i in xrange(len(C)):
    yrst=y[i]*100+s[i]
    if y[i] ==2011 and s[i]==38:
        print y[i],s[i]
        tmp.append(C[i])
tmp=np.array(tmp)
print np.mean(tmp)
134/118: run a.py
134/119: data_1=np.ma.masked_where(data_1>0, data_1)
134/120: data_2=np.ma.array(y, int)*100+np.ma.array(s, int)
134/121: data_2=np.ma.masked_where(data_2==201038, data_2)
134/122: print np.mean(np.ma.masked_where(data_2, data_1))
134/123: data_2=np.ma.array(y, int)*100+np.ma.array(s, int)
134/124: print np.mean(np.ma.masked_where(data_2=201038, data_1))
134/125: data_1=np.ma.array(C, float)
134/126: data_3=np.ma.masked_where(data_1>0, data_1)
134/127: print np.mean(np.ma.masked_where(data_2=201038, data_3))
134/128: print np.mean(np.ma.masked_where(data_2==201038, data_3))
134/129: print np.nanmean(np.ma.masked_where(data_2==201038, data_3))
134/130: print np.mean(data_3)
134/131: data_3=np.ma.masked_where(data_1<=0, data_1)
134/132: print np.mean(data_3)
134/133: print np.nanmean(np.ma.masked_where(data_2<>201038, data_3))
134/134: print np.nanmean(np.ma.masked_where(data_2!=201038, data_3))
134/135: data_2=np.ma.array(y, int)*100+np.ma.array(s, int)
134/136: data_2[1000]
134/137: print np.nanmean(np.ma.masked_where(data_2 != 201038, data_3))
135/1: run a.py
135/2: run a.py
135/3: min(C)
135/4: run nh3.py
135/5: min(C)
135/6: len(C)
135/7: run a.py
135/8: len(C)
135/9: C=[]
135/10: run nh3.py
135/11: len(C)
135/12: run nh3.py
135/13: len(C)
135/14: min(C)
135/15:
data_1=np.ma.array(C, float)
data_2=np.ma.array(y, int)*100+np.ma.array(s, int)
print np.mean(np.ma.masked_where(data_2!=201138, data_1))
135/16: import numpy as np
135/17:
data_1=np.ma.array(C, float)
data_2=np.ma.array(y, int)*100+np.ma.array(s, int)
print np.mean(np.ma.masked_where(data_2!=201138, data_1))
135/18: stn
135/19: for i stn:
135/20:
for i in stn:
    for j in yr:
        ij=200000+int(j)*100+int(i)
        print ij
135/21:
for i in stn:
    for j in yr:
        ij=200000+int(j)*100+int(i)
        aa=np.mean(np.ma.masked_where(data_2!=201138, data_1))
        print ij,aa
135/22:
for i in stn:
    for j in yr:
        ij=200000+int(j)*100+int(i)
        aa=np.mean(np.ma.masked_where(data_2!=ij, data_1))
        print ij,aa
135/23: history
135/24: 201007 in data_2
135/25: 201107 in data_2
135/26: run nh3.py
135/27: run nh3.py
135/28: d={'date':Series(y*10000+m*100+d),'hour':Series(h),'NH3':Series(C)}
135/29: from pandas import *
135/30: d={'date':Series(y*10000+m*100+d),'hour':Series(h),'NH3':Series(C)}
135/31: d
135/32: d={'date':Series(y*10000+m*100+d),'hour':Series(h),'NH3':Series(C)}
136/1: run nh3.py
136/2: d
136/3: data=DataFrame(d)
136/4: ymd=y*10000+m*100+d
136/5:
ymd=[]
for i in xrange(len(y)):
    ymd.append(int(y[i])*10000+int(m[i])*100+int(d[i]))
ymd[1000]
136/6:
d={'date':Series(ymd),'station':Series(s),'hour':Series(h),'NH3':Series(C)}
data=DataFrame(d)
136/7:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in range(1,25):
    dat = data[data['hour']==temp]
    stt =  dat['station']
    dates_f = [ss for ss in stt]
    ax.plot(dates_f, dat['NH3'], label = "hou: {0}".format(temp))

plt.xlabel("Date")
plt.ylabel("NH3")
ax.legend()
plt.show()
136/8:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in stn:
    dat = data[data['station']==int(temp)]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3")
ax.legend()
plt.show()
136/9:
(s2,h2,C2)=([],[],[])
for i in stn:
    for j in xrange(1,25):
        s2.append(i)
        h2.append(j)
        ij=int(j)*100+int(i)
        aa=np.mean(np.ma.masked_where(data_2!=ij, data_1))
        C2.append(aa)
136/10:
(s2,h2,C2)=([],[],[])
for i in stn:
    for j in xrange(1,25):
        s2.append(i)
        h2.append(j)
        ij=int(j)*100+int(i)
        aa=np.mean(np.ma.masked_where(data_2!=ij, data_1))
        C2.append(aa)
d2={'station':Series(s2),'hour':Series(h2),'NH3':Series(C2)}
data=DataFrame(d2)
136/11:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in stn:
    dat = data[data['station']==int(temp)]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3")
ax.legend()
plt.show()
136/12:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in stn:
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3")
ax.legend()
plt.show()
136/13:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in stn:
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/14: run nh3.py
136/15: run nh3.py
136/16: run nh3.py
136/17: run nh3.py
136/18: run nh3.py
136/19: run nh3.py
136/20:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for temp in stn[0]:
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/21:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,1):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/22:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,2,2):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/23:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,6,3):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/24:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(1,2):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/25:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(1,3):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/26: run nh3.py
136/27: run nh3.py
136/28:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(1,3):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/29:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,5,4):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/30:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,4):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/31:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NH3'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NH3(ppb)")
ax.legend()
plt.show()
136/32: len(C)
136/33: run NO2.py
136/34:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = data[data['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NO2'], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NO2(ppb)")
ax.legend()
plt.show()
136/35: len(C)
136/36: len(C)
136/37: run nh3.py
136/38: len(C)
136/39: a=Nan(10)
136/40: a=nan(10)
136/41: a=NaN(10)
136/42: shape(d),shape(d2)
136/43: np.shape(d),np.shape(d2)
136/44:
np.shape(d),np.shape(d2)
d2
136/45:
np.shape(d),np.shape(d2)
d2.shape
136/46:
np.shape(d),np.shape(d2)
data
136/47: run NO2.py
136/48: run NO2.py
136/49: dataNO2
136/50: result=merge(dataNO2,data,on=['MO2','NH3'])
136/51: result=merge(dataNO2,data,on=['NO2','NH3'])
136/52: result=merge(dataNO2,data,on=['Station','hour'])
136/53:
dataNO2
data
result=merge(dataNO2,data,on=['Station','hour'])
136/54:
dataNO2
data
136/55: dataNO2
136/56: result=merge(dataNO2,data,on=['station','hour'])
136/57: result
136/58:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, dat['NO2'],dat['NH3'] label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/59:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f, [dat['NO2'],dat['NH3']], label = "station: {0}".format(temp))

plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/60:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f,dat['NO2'], label = "station: {0}".format(temp))
    ax.plot(dates_f,dat['NH3'], label = "station: {0}".format(temp))
plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/61:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
#fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]0
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f,dat['NO2'], label = "station: {0}".format(temp))
    ax.plot(dates_f,dat['NH3'], label = "station: {0}".format(temp))
plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/62:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f,dat['NO2'], label = "station: {0}".format(temp))
    ax.plot(dates_f,dat['NH3'], label = "station: {0}".format(temp))
plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/63:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
fig, ax = plt.subplots()

for i in xrange(0,4,3):
    temp=stn[i]
    dat = result[result['station']==temp]
    hr =  dat['hour']
    dates_f = [ss for ss in hr]
    ax.plot(dates_f,dat['NO2'], label = "station(NO2): {0}".format(temp))
    ax.plot(dates_f,dat['NH3'], label = "station(NH3): {0}".format(temp))
plt.xlabel("Hour")
plt.ylabel("NO2, NH3(ppb)")
ax.legend()
plt.show()
136/64: run nh3.py
136/65: run nh3.py
136/66: run nh3.py
136/67:
(s2,h2,C2)=([],[],[])
for i in stn:
    for j in xrange(1,25):
        s2.append(i)
        h2.append(j)
        ij=int(j)*100+int(i)
        aa=np.mean(np.ma.masked_where(data_2!=ij, data_1))
        C2.append(aa)
d2={'station':Series(s2),'hour':Series(h2),'NH3':Series(C2)}
data=DataFrame(d2)
136/68: run nh3.py
136/69: run nh3.py
136/70: run nh3.py
136/71: run nh3.py
136/72: run NO2.py
137/1: run wd.py
137/2: run wd.py
137/3: run wd.py
137/4: run wd.py
137/5: run wd.py
137/6: run wd.py
137/7: data_2[1000]
137/8:
aa=np.array(data_2)
max(aa)
137/9: run wd.py
137/10:
aa=np.array(data_2)
min(aa)
137/11: run wd.py
137/12: run wd.py
137/13: run wd.py
137/14: run wd.py
137/15: w1
137/16: c1
137/17: C1
137/18: len(data_1),len(data_2)
137/19:
aa=np.array(data_2)
min(aa)
137/20:
aa=np.array(data_1)
min(aa)
137/21:
aa=np.array(data_1)
max(aa)
137/22:
aa=np.array(data_2)
max(aa)
137/23:
aa=np.array(data_2)
max(aa), 'Nan' in aa
137/24:
i=5
np.mean(np.ma.masked_where(data_2!=i, data_1))
137/25:
i=5
np.mean(np.ma.masked_where(data_2!=int(i), data_1))
137/26: data_2[1000:1005]
137/27: data_2[1000:1005],data_1[1000:1005]
137/28:
i=11
np.mean(np.ma.masked_where(data_2!=int(i), data_1))
137/29:
i=11
np.nanmean(np.ma.masked_where(data_2!=int(i), data_1))
137/30:
i=11
np.nanmean(np.ma.masked_where(data_2 !=int(i), data_1))
137/31: data_2[1000]
137/32: if(data_2[1000]==11)
137/33: if data_2[1000]==11:print 'true'
137/34: if data_2[1000]!=11:print 'false'
137/35: if data_2[1000]!=12:print 'false'
137/36: len(data_1),len(data_2)
137/37: mean(data_1)
137/38: np.mean(data_1)
137/39: np.mean(data_2)
137/40:
a=np.ma.masked_where(data_2 !=int(i), data_1)
a[1000:1005]
137/41:
a=np.ma.masked_where(data_2 !=float(i), data_1)
a[1000:1005]
137/42:
a=np.ma.masked_where(data_2 !=float(i), data_1)
a[1000:1005]
137/43:
a=np.ma.masked_where(data_2 !=i, data_1)
a[1000:1005]
137/44:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_2 !=i, dat_1)
a[1000:1005]
137/45:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_2 !=11, dat_1)
a[1000:1005]
137/46:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_2 !=11, dat_1)
a
137/47:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_2 !=11., dat_1)
a
137/48:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(int(dat_2) !=11., dat_1)
a
137/49:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_1 !=11., dat_1)
a
137/50:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_1 ==11., dat_1)
a
138/1: run wd.py
138/2: data_2[1000:1005],data_1[1000:1005]
138/3: len(data_1),len(data_2)
138/4:
dat_2=[11, 10, 8, 11, 11]
dat_1=[11.0, 11.0, 13.0, 15.0, 13.0]
a=np.ma.masked_where(dat_1 ==11., dat_1)
a
139/1:  from meza import io
139/2: records = io.read('05hhrapchemdat.mdb')
139/3: print(next(records))
139/4: print records.Bas
139/5: print records['Bas']
139/6: print records.Tables
139/7: print records.tables
139/8: help records
139/9: help meza
139/10: help meza()
139/11: help
139/12: help()
140/1: T2=1
140/2: T2
140/3: T_2=2
140/4: T_2
141/1: run rd.py ../05hhrapchemdat.mdb
141/2: table_names
141/3: print table_names
141/4: tables
142/1: import openyxl
143/1: import openyxl
144/1: import openpyxl
145/1: # -*- coding: utf-8 -*-
145/2: from pandas import *
145/3: df=read_csv('point.csv')
145/4: cols=df.columns
145/5: for i in xrange(len(cols)):print i,cols[i]
145/6: print len(df)
145/7: boo=(df['HEI']>0)
145/8: df=df[boo]
145/9: print len(df)
145/10: run ptse.py
145/11: run ptse.py
145/12: run ptse.py
145/13: run ptse.py
145/14: run ptse.py
145/15: run ptse.py -i dum -c 10
145/16: print X[0:3]
145/17: print X[0:3,0:3]
145/18: X.shape
145/19: run ptse.py -i point.csv -c 10
145/20: X.shape
145/21: print X[:2,0:3]
145/22: print X[:2,5000]
145/23: z=[0]*81308
145/24: X=[X,z]
145/25: X.shape
145/26: X=np.array(X)
145/27: X.shape
145/28: X=np.array([df['UTM_E'], df['UTM_N'],z])
145/29: X.shape
145/30: kmeans=clt.fit(X)
145/31: max(df['UTM_E'])
145/32: min(df['UTM_E'])
145/33: np.mean(df['UTM_E'])
145/34: type(df['UTM_E'])
145/35: np.mean(df['UTM_N'])
145/36: a=df['UTM_E'].sort_values
145/37: a[0]
145/38: a
145/39: a[:,0]
145/40: a.shape
145/41: a=df['UTM_E']
145/42: a
145/43: a=df['UTM_N']
145/44: a
145/45: np.array(a)
145/46: a=np.array(a)
145/47: a.shape
145/48: a[1]
145/49: X[:,100]
145/50: X.shape
145/51: X=X.reshape(81308,3)
145/52: X[100,:]
145/53: history
145/54: X=np.array([df['UTM_E'], df['UTM_N'],z])
145/55: Y=X.T
145/56: Y.shape
145/57: Y[100,:],X[:,100]
145/58: kmeans=clt.fit(Y)
145/59:
for i in Y[0,:]: 
    if np.isnam(i): print i
145/60:
for i in Y[0,:]: 
    if np.isnan(i): print i
145/61:
for i in Y[1,:]: 
    if np.isnan(i): print i
145/62: len(X)
145/63:
for i in X[1,:]: 
    if np.isnan(i): print i
145/64:
for i in X[0,:]: 
    if np.isnan(i): print i
145/65: boo=(~(np.isnan(df['UTM_E'])))
145/66: df=df[boo]
145/67: len(df)
145/68: boo=(~(np.isnan(df['UTM_N'])))
145/69: df=df[boo]
145/70: len(df)
145/71: X=np.array([df['UTM_E'], df['UTM_N'],z]).T
145/72: X.shape
145/73: X=np.array([df['UTM_E'], df['UTM_N'],z])
145/74: X.shape
145/75: len(df['UTM_E'])
145/76: len(z)
145/77: z=[0]*81262
145/78: X=np.array([df['UTM_E'], df['UTM_N'],z]).T
145/79: X.shape
145/80: kmeans=clt.fit(X)
145/81: kmeans.labels_
145/82: a=set(kmeans.labels_)
145/83: len(a)
145/84: a
145/85: clt.cluster_centers_
145/86: cluster
145/87: x = np.array(clt.cluster_centers_)
145/88: x
145/89: a={'X':Series(x[0,:]),'Y':Series(x[1,:])}
145/90: DataFrame(a).to_csv('center10.dat')
145/91: a={'X':Series(x[:,0]),'Y':Series(x[:,0])}
145/92: DataFrame(a).to_csv('center10.dat').set_index('X')
145/93: DataFrame(a).set_index('X').to_csv('center10.dat')
145/94: history
145/95: fname='center'+str(args["clusters"])+'.dat'
145/96: fname
145/97: run ptse.py -i point.csv -c 10
145/98: run ptse.py -i point.csv -c 10
145/99: run ptse.py -i point.csv -c 10
145/100: run ptse.py -i point.csv -c 500
145/101: run ptse.py -i point.csv -c 100
145/102: run ptse.py -i point.csv -c 100
147/1: run ptse.py -i point.csv -c 10
147/2: boo=df['SERIAL_NO']=='E5600841'
147/3: df
147/4:
df=read_csv(args["image"])#'point.csv')
cols=df.columns
147/5: boo=df['SERIAL_NO']=='E5600841'
147/6: cols
147/7: boo=df['C_NO']=='E5600841'
147/8: df_csc=df[boo]
147/9: df_csc
147/10: df_csc1=df_csc[[df_csc['NO_S']=='PB33']]
147/11: df_csc['NO_S']
147/12: df_csc1=df_csc[([df_csc['NO_S']=='PB33'])]
147/13: df_csc1=df_csc[df_csc['NO_S']=='PB33']
147/14: df_csc1
147/15: df_csc['NO_P']
147/16: df_pv=pivot_table(df,index=["C_NO","NO_S"],values=["SERIAL_NO"],aggfunc='count')
147/17: df_pv
147/18: df_pv.sort_values('SERIAL_NO')
147/19: a=len(df_pv.sort_values('SERIAL_NO'))
147/20: df_pv.sort_values('SERIAL_NO')[a-100:a]
147/21: set(df['NO_S'])
147/22: set(df['NO_S']).sort_values
147/23: set(df['NO_S'].sort_values)
147/24: nos=df['NO_S'].sort_values
147/25: set(nos)
147/26: nos=list(df['NO_S']).sort_values
147/27: nos=list(df['NO_S'])
147/28: nos.sort_values
147/29: np.array(nos).sort_values
147/30: np.array(nos).sort
147/31: a=np.array(nos).sort
147/32: a
147/33: ldf
147/34: cno_nos=[]
147/35:
for i in xrange(ldf):
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
147/36: df['cno_nos']=Series(cno_nos,index=df.index)
147/37: len(df),ldf
147/38: ldf=len(df)
147/39:  cno_nos=[]
147/40:
for i in xrange(ldf):
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
147/41: df['cno_nos']=Series(cno_nos,index=df.index)
147/42: len(set(df['cno_nos']))
147/43: df['cno_nos'][10]
147/44: df['cno_nos'][:10]
147/45: history
147/46: print cols
147/47:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],,aggfunc=np.sum)
df_pv["cno_nos"]=df_pv.index
147/48:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum)
df_pv["cno_nos"]=df_pv.index
147/49: df_pv
147/50:
df_pv['sume'] = df_pv.sum(axis=1)
df_pv=df_pv[df_pv['sume']>0]
len(df_pv)
147/51: df_pv
147/52:
df_pv=df_pv[df_pv['NOX_EMI']>0]
len(df_pv)
147/53: df_pv
147/54: df
147/55: boo=(df['cno_nos'].map(x:x in df_pv["cno_nos"]))
147/56: boo=(df['cno_nos'].map(x: x in df_pv["cno_nos"]))
147/57: boo=(df['cno_nos'].map(lambda x:x in df_pv["cno_nos"]))
147/58: df_del=df[boo]
147/59: df_del
147/60: df_del[51038]
147/61: df_del[51038,:]
147/62: df_del.loc[51038]
147/63: df_del.loc[51039]=[0*73]
147/64: z=[0]*73
147/65: df_del.loc[51039]=z
147/66: df_del.loc[51039]
147/67: df_del.loc[51038]
147/68: df_del.loc[51039]
147/69: z=df_del.loc[51038]
147/70: df_del.loc[51039]=z
147/71: len(df_pv["cno_nos"]),len(set(df_pv["cno_nos"]))
147/72: !pad
147/73: !pwd
147/74:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum).sort_values()
147/75:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum).sort_values(index)
147/76:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum).sort_values("cno_nos")
147/77:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum)
147/78: df_pv
147/79:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'\
'ORI_QU1','DIA','HEI','TEMP','VEL']\
,aggfunc=[np.sum*10,np.mean*5])
147/80:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'\
'ORI_QU1','DIA','HEI','TEMP','VEL']\
,aggfunc=[[np.sum]*10,[np.mean]*5])
147/81:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI',\
'ORI_QU1','DIA','HEI','TEMP','VEL']\
,aggfunc=[[np.sum]*10,[np.mean]*5])
147/82:
df_pv=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI',\
'ORI_QU1','DIA','HEI','TEMP','VEL']\
,aggfunc=([np.sum]*10,[np.mean]*5))
147/83: from numpy import *
148/1: run del_dup.py
148/2: run del_dup.py
148/3: run del_dup.py
148/4: run del_dup.py
148/5:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI','SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=sum)
df_pv1=pivot_table(df,index=["cno_nos"],values=['ORI_QU1','DIA','HEI','TEMP','VEL'],aggfunc=mean)
df_pv=concat(df_pv1,df_pv2,axis=1)
148/6:
df_pv1=pivot_table(df,index=["cno_nos"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=sum)
df_pv2=pivot_table(df,index=["cno_nos"],values=['ORI_QU1','DIA','HEI','TEMP','VEL'],aggfunc=mean)
df_pv=concat(df_pv1,df_pv2,axis=1)
148/7: df_pv=concat((df_pv1,df_pv2),axis=1)
148/8: len(df_pv)
148/9: df_pv
148/10: cols
148/11: cols=df.columns
148/12: print cols
148/13:
df_pv2=pivot_table(df,index=["cno_nos"],values=['ORI_QU1','DIA','HEI','TEMP','VEL',\
'UTM_E', 'UTM_N'],aggfunc=mean)
148/14: df_pv=concat((df_pv1,df_pv2),axis=1)
148/15: run del_dup.py
148/16: run del_dup.py
148/17: ldf=len(df)
148/18: ldf
148/19:
cno_nos=[]
for i in xrange(ldf):
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
148/20: cols
149/1: run del_dup.py
149/2: ldf
149/3: df['C_NO'][100]
149/4: df['NO_S'][100]
149/5: df['NO_S'][0]
149/6: df['C_NO'][0]
149/7: df['C_NO'][ldf]
149/8: df['NO_S'][ldf]
149/9:
df=read_csv('point.csv')
ldf=len(df)
boo=(df['HEI']>0)#& (df['HEI']<70)
df=df[boo]
boo=(~(isnan(df['UTM_E'])))
df=df[boo]
boo=(~(isnan(df['UTM_N'])))
df=df[boo]
ldf=len(df)
149/10:
cno_nos=[]
for i in xrange(ldf):
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
149/11: i
149/12: df['NO_S'][2]
149/13: a=df['NO_S']
149/14: a[2]
149/15: len(a)
149/16: ldf
149/17: a[2]
149/18: a[1]
149/19: a[3]
149/20: a[2]
149/21: df
149/22: run del_dup.py
149/23: ldf
149/24: run del_dup.py
149/25: ldf
149/26: !pwd
149/27: /home/camxruns/2013/ptse/teds9.0
149/28: !vi del_dup.py
149/29:
from load_surfer import load_surfer
xc,yc,ndct,(nyc,nxc)=load_surfer('dict.grd')
xc=np.matrix.transpose(xc.reshape(nyc,-1))
yc=np.matrix.transpose(yc.reshape(nyc,-1))
ndct=np.matrix.transpose(ndct.reshape(nyc,-1))
delxc=(xc[nxc-1][0]-xc[0][0])/(nxc-1)
delyc=(yc[0][nyc-1]-yc[0][0])/(nyc-1)
149/30: delxc
149/31: nxc,nyc
149/32: xc
149/33: xc[nxc-1][0],xc[0][0]
149/34:
xc=matrix.transpose(xc.reshape(nyc,-1))
yc=matrix.transpose(yc.reshape(nyc,-1))
ndct=matrix.transpose(ndct.reshape(nyc,-1))
delxc=(xc[nxc-1][0]-xc[0][0])/(nxc-1)
delyc=(yc[0][nyc-1]-yc[0][0])/(nyc-1)
149/35: delxc
149/36: delyc
149/37: yc
149/38: yc.shape
149/39: min(xc)
149/40: min(xc[:,:])
149/41: min(xc.all)
149/42: import numpy as np
149/43: np.min(xc.all)
149/44: np.min(xc)
149/45: np.max(xc)
149/46: d=(np.max(xc)-np.min(xc))/(nxc-1)
149/47: d
149/48: d=(np.max(xc)-np.min(xc))/nxc
149/49: d
149/50: xc[:][0]
149/51: xc[:][1]
149/52: xc,yc,ndct,(nyc,nxc)=load_surfer('dict.grd')
149/53: xc.shape
149/54: xc[0][0]
149/55: xc[0][1]
149/56: xc[1][1]
149/57: xc[268][1]
149/58: np.max(xc)
149/59: land=set()
149/60:
for i in xrange(nxc):
    for j in xrange(nyc):
        if ndct[i][j] >0:
            d.add((xc[i][j],yc[i][j]))
149/61:
for i in xrange(nxc):
    for j in xrange(nyc):
        if ndct[i][j] >0:
            land.update((xc[i][j],yc[i][j]))
149/62: ndct.shape
149/63: ndct[269][377]
149/64: ndct[268][378]
149/65: ndct[268][376]
149/66:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update((xc[i][j],yc[i][j]))
149/67: nxc
149/68: xc,yc,ndct,(nxc,nyc)=load_surfer('dict.grd')
149/69: history
149/70:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update((xc[i][j],yc[i][j]))
149/71: (120000,2730000) in land
149/72: (120000,2750000) in land
149/73: (220000,2750000) in land
149/74: land
149/75:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update(tuple(xc[i][j],yc[i][j]))
149/76:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update(zip(xc[i][j],yc[i][j]))
149/77: zip(0.5,1)
149/78: a=(0.5,1)
149/79: a
149/80:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update([xc[i][j],yc[i][j]])
149/81: land=set()
149/82:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update([xc[i][j],yc[i][j]])
149/83: land
149/84: land{1]
149/85: len(land)
149/86: for i in land: print i
149/87: a=tuple(1,1.5}
149/88:
a=tuple([1,1.5]
}
149/89: a=tuple([1,1.5])
149/90: a
149/91: land=set()
149/92:
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.update(tuple([xc[i][j],yc[i][j]]))
149/93: len(land)
149/94: for i in land: print i
149/95: land
149/96:
land=set()
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            a=tuple([xc[i][j],yc[i][j]])
            land.update(a)
149/97: land
149/98: land=set()
149/99:
land=set()
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            a=tuple([xc[i][j],yc[i][j]])
            land.add(a)
149/100: len(land)
149/101: land
149/102:  (187000.0, 2524000.0) in land
149/103:  (187000, 2524000) in land
149/104:
land=set()
for i in xrange(nxc-1):
    for j in xrange(nyc-1):
        if ndct[i][j] >0:
            land.add((xc[i][j],yc[i][j]))
149/105: len(land)
149/106: (220000,2750000) in land
149/107: land
149/108:  (187000, 2524000) in land
149/109: (120000,2750000) in land
149/110: (120000,2550000) in land
149/111: (180000,2550000) in land
149/112:
XY=[]
for i in xrange(ldf):
    XY.append((int(df_pv['UTM_E'][i]/1000)*1000,int(df_pv['UTM_E'][i]/1000)*1000))
df_pv['XY']=Series(XY,index=df_pv.index)
149/113:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_pv(boo)['C_NO']
149/114:
boo=(df_pv['XY'].map(lambda x: x not in land))
len(df_pv(boo))
149/115: df_pv
149/116:
XY=[]
for i in xrange(ldf):
    XY.append((int(df_pv['UTM_E'][i]/1000)*1000,int(df_pv['UTM_N'][i]/1000)*1000))
df_pv['XY']=Series(XY,index=df_pv.index)
boo=(df_pv['XY'].map(lambda x: x not in land))
df_pv(boo)['C_NO']
149/117: XY
149/118: (200000, 2682000) in land
149/119: a=df_pv(boo)
149/120: boo.shape
149/121: len(df_pv)
149/122: a=df_pv[boo]
149/123: len(a)
149/124: a['C_NO']
149/125: a.columns
149/126: a
149/127: df_pv['cno_nos']=df_pv.index
149/128:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv(boo)
boo=(df_pv['cno_nos'].map(lambda x: x[0] != 'Z'))
df_sea=df_sea(boo)
149/129:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_pv['cno_nos'].map(lambda x: x[0] != 'Z'))
df_sea=df_sea[boo]
149/130:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_sea['cno_nos'].map(lambda x: x[0] != 'Z'))
df_sea=df_sea[boo]
149/131: df_sea
149/132:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_sea['cno_nos'].map(lambda x: x[0] != 'X' and x[0] != 'Z'))
df_sea=df_sea[boo]
149/133: df_sea
149/134:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_sea['cno_nos'].map(lambda x: x[0] != 'W' and x[0] != 'X' and x[0] != 'Z'))
df_sea=df_sea[boo]
149/135: df_sea
149/136:
a={'X':Series(df_pv['UTM_E']),'Y':Series(df_pv['UTM_N']),'cno_nos':Series(df_sea['cno_nos'])}
fname='outsideland.dat'
DataFrame(a).set_index('X').to_csv(fname)
149/137:
a={'X':Series(df_sea['UTM_E']),'Y':Series(df_sea['UTM_N']),'cno_nos':Series(df_sea['cno_nos'])}
fname='outsideland.dat'
DataFrame(a).set_index('X').to_csv(fname)
149/138:
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_sea['cno_nos'].map(lambda x: x[0] != 'N' and x[0] != 'T' and x[0] != 'V'))
df_sea=df_sea[boo]
a={'X':Series(df_sea['UTM_E']),'Y':Series(df_sea['UTM_N']),'cno_nos':Series(df_sea['cno_nos'])}
fname='outsideland2.dat'
DataFrame(a).set_index('X').to_csv(fname)
boo=(df_pv['XY'].map(lambda x: x not in land))
df_sea=df_pv[boo]
boo=(df_sea['cno_nos'].map(lambda x: x[0] != 'N' and x[0] != 'T' and x[0] != 'V'))
df_sea=df_sea[boo]
a={'X':Series(df_sea['UTM_E']),'Y':Series(df_sea['UTM_N']),'cno_nos':Series(df_sea['cno_nos'])}
fname='outsideland2.dat'
DataFrame(a).set_index('X').to_csv(fname)
149/139: a=df['CO_N']
149/140: cols
149/141: cols=df.columns
149/142: cols
149/143: a=df['C_NO']
149/144: s=set(a)
149/145:
cnt=[]
for i in s:
    cnt.append(a.count(i))
149/146: a
149/147: a=list(df['C_NO'])
149/148:
cnt=[]
for i in s:
    cnt.append(a.count(i))
149/149: cnt
149/150: a[cnt.index(max(cnt))]
149/151: max(cnt)
149/152: len(df_pv)
149/153: a=list(df_pv['HEI'])
149/154: min(a)
149/155: max(a)
149/156: a=list(df_pv[df_pv['HEI']>35])
149/157: len(a)
149/158: a=df_pv[df_pv['HEI']>35]
149/159: a
149/160: a
149/161: len(df_pv[df_pv['HEI']>35])
149/162: len(df_pv)
149/163: len(df_pv[df_pv['HEI']<=35])
149/164: len(df_pv[df_pv['HEI']>70])
149/165: history
149/166: cols
149/167: df.columns
149/168: df[df['C_NO']]['SCC']
150/1: run del_dup.py
150/2: a
150/3: df[df['cno_nos']=='Z6303006P001']['CSC']
150/4: df[df['cno_nos']=='Z6303006P001']['CCS']
150/5: df[df['cno_nos']=='Z6303006P001']['SCC']
150/6: history
150/7: a=list(df['cno_nos'])
150/8: s=set(a)
150/9:
cnt=[]
for i in s:
    cnt.append(a.count(i))
150/10: a[cnt.index(max(cnt))]
150/11: df[df['cno_nos']=='F0626473P004']['CSC']
150/12: df[df['cno_nos']=='F0626473P004']['SCC']
150/13: len(df[df['cno_nos']=='F0626473P004']['SCC'])
150/14: max(cnt)
150/15: cnt.index(max(cnt))
150/16: a[cnt.index(max(cnt))]
150/17:
cnt=[]
pt=[]
for i in s:
    cnt.append(a.count(i))
    pt.append(i)
150/18: pt[cnt.index(max(cnt))]
150/19: len(df[df['cno_nos']=='S1900685P411']['SCC'])
150/20: (df[df['cno_nos']=='S1900685P411']['SCC'])
150/21: a=df[df['cno_nos']=='S1900685P411']
150/22: a['SCC'],a['NMHC_EMI']
150/23: a_pv=pivot_table(a,index['SCC'],values=['NMHC_EMI','NOX_EMI'],aggfun=np.sum)
150/24: a_pv=pivot_table(a,index=a['SCC'],values=['NMHC_EMI','NOX_EMI'],aggfun=np.sum)
150/25: a_pv=pivot_table(a,index=a['SCC'],values=['NMHC_EMI','NOX_EMI'],aggfunc=np.sum)
150/26: a_pv
150/27: a_pv=pivot_table(a,index=a['SCC'],values=['NMHC_EMI','NOX_EMI','CO_EMI','SOX_EMI'],aggfunc=np.sum)
150/28: a_pv
150/29: a_pv=pivot_table(a,index=a['SCC'],values=['NMHC_EMI','NOX_EMI','CO_EMI','SOX_EMI','PM_EMI'],aggfunc=np.sum)
150/30: a_pv
150/31: a_pv=pivot_table(a,index=a['SCC'],values=['NMHC_EMI','NOX_EMI','CO_EMI','SOX_EMI','PM_EMI','TSP_EMI'],aggfunc=np.sum)
150/32: a_pv
150/33: a=df[df['cno_nos']=='S1900685P411'] & df['SCC']=='39999994']
150/34: a=df[df['cno_nos']=='S1900685P411' & df['SCC']=='39999994']
150/35: a=df[df['cno_nos']=='S1900685P411' && df['SCC']=='39999994']
150/36: a=df[df['cno_nos']=='S1900685P411']# & df['SCC']=='39999994']
150/37: a=a[a['SCC']=='39999994']
150/38: a=a[a['SCC']==39999994]
150/39: a
150/40: len(a)
150/41: len(set(a['NO_P')))
150/42: len(set(a['NO_P']))
150/43: boo=(df['cno_nos']==S1900685P411) &(df['NO_P']=='E516')
150/44: boo=(df['cno_nos']=='S1900685P411') &(df['NO_P']=='E516')
150/45: a=df[boo]
150/46: a
150/47: boo=(df['C_NO']=='S1900685') &(df['NO_P']=='E516')
150/48: a=df[boo]
150/49: a
150/50: boo=(df['C_NO']=='S1900685') #&(df['NO_P']=='E516')
150/51: len(df[boo])
150/52: len(set(df[boo]['NO_P']))
150/53: a=set(df[boo]['NO_P'])
150/54: a
150/55: s=set(df[boo]['NO_P'])
150/56: a=list(df[boo]['NO_P'])
150/57:
for i in s:
    if a.count(i)>1: print i
150/58:
cnt=[]
for i in s:
    cnt.append((i,a.count(i)))
150/59: cnt
150/60: cnt.sort_values()
150/61: cnt.sort
150/62: sort(cnt)
150/63:
cnt=[]
for i in s:
    if a.count(i)>1:
        cnt.append((i,a.count(i)))
150/64: cnt
150/65: history
150/66: boo=(df['C_NO']=='S1900685') &(df['NO_P']=='EI32')
150/67: a=df[boo]
150/68: a
150/69:
df_pv1=pivot_table(df,index=["CO_N","NO_S","SCC"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum)
df_pv2=pivot_table(df,index=["CO_N","NO_S","SCC"],values=['ORI_QU1','DIA','HEI','TEMP','VEL',\
'UTM_E', 'UTM_N'],aggfunc=np.mean)
df_pv=concat((df_pv1,df_pv2),axis=1)
df_pv['cno_nos']=df_pv.index
150/70: cols
150/71:
df_pv1=pivot_table(df,index=["C_NO","NO_S","SCC"],values=['TSP_EMI','PM_EMI','PM6_EMI','PM25_EMI',\
'SOX_EMI','NOX_EMI','THC_EMI','NMHC_EMI','CO_EMI','PB_EMI'],aggfunc=np.sum)
df_pv2=pivot_table(df,index=["C_NO","NO_S","SCC"],values=['ORI_QU1','DIA','HEI','TEMP','VEL',\
'UTM_E', 'UTM_N'],aggfunc=np.mean)
df_pv=concat((df_pv1,df_pv2),axis=1)
df_pv['cno_nos']=df_pv.index
150/72: len(df_pv)
150/73: df_pv
150/74: plant=set(df["C_NO"])
150/75: len(plant)
150/76: a=[]
150/77:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        if lsc2>1 and lsc2!=len(set(df_tmp2['NO_S'])):
            for i in xrange(len(df_tmp2['SCC'])):
                a.append((p,emp,sc2[i],ns2[i]))
150/78: len(a)
150/79:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        print lsc2,lns2
        if lsc2>1 and lsc2!=lns2:
            for i in xrange(len(nc2)):
                a.append((p,emp,sc2[i],ns2[i]))
150/80:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        print lsc2,lns2
        if lsc2>1 and lsc2!=lns2:
            for i in xrange(len(lnc2)):
                print p,emp,sc2[i],ns2[i]
                a.append((p,emp,sc2[i],ns2[i]))
150/81:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        if lsc2>1:
            if lsc2!=lns2:
                print lsc2,lns2
                for i in xrange(len(lnc2)):
                    print p,emp,sc2[i],ns2[i]
                    a.append((p,emp,sc2[i],ns2[i]))
150/82: history
150/83:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        if lsc2>1:
                print lsc2,lns2
150/84:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        if lsc2>1:
            print lsc2,lns2
150/85:
for p in plant:
    df_tmp=df[df['C_NO']==p]
    em=list(df_tmp['NO_P'])
    sc=list(df_tmp['SCC'])
    ns=list(df_tmp['NO_S'])
    for emp in set(em):
        df_tmp2=df_tmp[df_tmp['NO_P']==emp]
        sc2=list(df_tmp2['SCC'])
        ns2=list(df_tmp2['NO_S'])
        lsc2=len(set(sc2))
        lns2=len(set(ns2))
        print p,emp,lsc2
        if lsc2>1:
            print lsc2,lns2
150/86: df=read_csv('point.csv')
150/87:
def check_NOPandSCC():
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        for emp in set(em):                             #every sources
            df_tmp2=df_tmp[df_tmp['NO_P']==emp]
            sc2=list(df_tmp2['SCC'])                    #filtering
            ns2=list(df_tmp2['NO_S'])
            lsc2=len(set(sc2))
            lns2=len(set(ns2))
            if lsc2>1:                                  #multiple SCC's
                if lsc2!=lns2:                          #different SCC's
                    print lsc2,lns2
                    for i in xrange(len(lnc2)):
                        print p,emp,sc2[i],ns2[i]
                        a.append((p,emp,sc2[i],ns2[i]))
    return len(a)
150/88: check_NOPandSCC()
150/89:
def check_NOPandSCC():
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc2))
        lns=len(set(ns2))
        if lsc >1:
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])                    #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1:                                  #multiple SCC's
                        if lsc2!=lns2:                          #different SCC's
                            print lsc2,lns2
                            for i in xrange(len(lnc2)):
                                print p,emp,sc2[i],ns2[i]
                                a.append((p,emp,sc2[i],ns2[i]))
    return len(a)
150/90: check_NOPandSCC()
150/91:
def check_NOPandSCC():
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc))
        lns=len(set(em))
        if lsc >1:
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])                    #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1:                                  #multiple SCC's
                        if lsc2!=lns2:                          #different SCC's
                            print lsc2,lns2
                            for i in xrange(len(lnc2)):
                                print p,emp,sc2[i],ns2[i]
                                a.append((p,emp,sc2[i],ns2[i]))
    return len(a)
150/92: check_NOPandSCC()
150/93:
def check_NOPandSCC():
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc))
        lns=len(set(em))
        if lsc >1:
            print 'checking',p,lsc,lns
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])            #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1 :
                        print 'checking',p,emp,lsc2,lns2
                        if lsc2!=lns2:          #different SCC's #multiple SCC's
                        print lsc2,lns2
                        for i in xrange(len(lnc2)):
                            print p,emp,sc2[i],ns2[i]
                            a.append((p,emp,sc2[i],ns2[i]))
    return len(a)
150/94:
def check_NOPandSCC():
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc))
        lns=len(set(em))
        if lsc >1:
            print 'checking',p,lsc,lns
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])            #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1 :
                        print 'checking',p,emp,lsc2,lns2
                        if lsc2!=lns2:          #different SCC's #multiple SCC's
                            print lsc2,lns2
                            for i in xrange(len(lnc2)):
                                print p,emp,sc2[i],ns2[i]
                                a.append((p,emp,sc2[i],ns2[i]))
    return len(a)
150/95: check_NOPandSCC()
150/96:
def check_NOPandSCC(prn):
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc))
        lns=len(set(em))
        if lsc >1:
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])            #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1 :
                        if lsc2!=lns2:          #different SCC's #multiple SCC's
                            print lsc2,lns2
                            for i in xrange(len(lnc2)):
                                print p,emp,sc2[i],ns2[i]
                                a.append((p,emp,sc2[i],ns2[i]))
                        else:
                            if prn==1:print 'checking OK',p,emp,lsc2,lns2
                    else:
                       if prn==1:print 'checking OK',p,lsc,lns
    return len(a)
150/97: check_NOPandSCC(0)
150/98: check_NOPandSCC(1)
150/99:
def check_NOPandSCC(prn):
    plant=set(df["C_NO"])
    a=[]
    for p in plant:                                     #everpy plant
        df_tmp=df[df['C_NO']==p]                        #filtering
        em=list(df_tmp['NO_P'])
        sc=list(df_tmp['SCC'])
        lsc=len(set(sc))
        lns=len(set(em))
        if lsc >1:
            if lsc!=lns:                                #different SCC's
                for emp in set(em):                             #every sources
                    df_tmp2=df_tmp[df_tmp['NO_P']==emp]
                    sc2=list(df_tmp2['SCC'])            #filtering
                    ns2=list(df_tmp2['NO_S'])
                    lsc2=len(set(sc2))
                    lns2=len(set(ns2))
                    if lsc2>1 :
                        if lsc2!=lns2:          #different SCC's #multiple SCC's
                            print lsc2,lns2
                            for i in xrange(len(lnc2)):
                                print p,emp,sc2[i],ns2[i]
                                a.append((p,emp,sc2[i],ns2[i]))
                        if prn==1:print 'checking OK',p,emp,lsc2,lns2
                if prn==1:print 'checking OK',p,lsc,lns
    return len(a)
150/100: check_NOPandSCC(1)
150/101: cols
150/102: cols=df.columns
150/103: cols
150/104:
for i in clos:
    boo=(np.isnan(df[i]))
    print i,len(df[boo])
150/105:
for i in cols:
    boo=(np.isnan(df[i]))
    print i,len(df[boo])
150/106:
for i in cols:
    boo=(np.isnan(df[i][i]))
    print i,len(df[boo])
150/107:
for i in cols:
    boo=(np.isnan(list(df[i][i])))
    print i,len(df[boo])
150/108:
for ii in xrange(1:len(cols)):
    i=cols[ii]
    boo=(np.isnan(list(df[i][i])))
    print i,len(df[boo])
150/109:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    boo=(np.isnan(list(df[i][i])))
    print i,len(df[boo])
150/110: i='DICT_NO'
150/111: df[i][i]
150/112: col(i)
150/113: cols(i)
150/114: cols=list(df.columns)
150/115:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    boo=(np.isnan(list(df[i][i])))
    print i,len(df[boo])
150/116: i
150/117: ii
150/118: boo
150/119: i
150/120: df[i]
150/121: df[i][i]
150/122:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    boo=(np.isnan(list(df[i])))
    print i,len(df[boo])
150/123: type df[i]
150/124: type( df[i])
150/125: type( list(df[i]))
150/126: type( list(df[i][0]))
150/127: type(df[i][0])
150/128: type(df['SCC'][0])
150/129: type(df['SCC'][0]) == 'numpy.int64'
150/130: type(df['SCC'][0]) == numpy.int64
150/131: type(df['DICT'][0])
150/132: type(df['DICT_NO'][0])
150/133: type(df['DICT_NO'][0]) ==numpy.int64
150/134: type(df['DICT_NO'][0]) ==np.int64
150/135:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) != str:
        boo=(np.isnan(list(a)))
        print i,len(df[boo])
150/136: cols
150/137:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) != str:
        print type(a[0])
150/138:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) != str:
        print i,type(a[0])
150/139:
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) != float:
        print i,type(a[0])
150/140:
tp=[np.float64,np.int64]
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) in tp :
        print i,type(a[0])
150/141: history
150/142:
tp=[np.float64,np.int64]
for ii in xrange(1,len(cols)):
    i=cols[ii]
    a=list(df[i])
    if type(a[0]) in tp :
        boo=(np.isnan(list(a)))
        print i,len(df[boo])
150/143: history
150/144:
def check_nan()
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=list(df[i])
        if type(a[0]) in tp :
            boo=(np.isnan(list(a)))
            lnan=len(df[boo])
            if lnan!=0:print i,lnan
150/145:
def check_nan():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=list(df[i])
        if type(a[0]) in tp :
            boo=(np.isnan(list(a)))
            lnan=len(df[boo])
            if lnan!=0:print i,lnan
150/146: check_nan
150/147: check_nan()
150/148:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=list(df[i])
        if type(a[0]) in tp and i[0:1]!='EM':
            boo=(a>0))
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/149:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=list(df[i])
        if type(a[0]) in tp and i[0:1]!='EM':
            boo=(a>0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/150: check_gt_zero()
150/151: boo
150/152: boo.shape
150/153:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(list(a[0])) in tp and i[0:1]!='EM':
            boo=(a>0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/154: check_gt_zero()
150/155:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(Series(a[0])) in tp and i[0:1]!='EM':
            boo=(a>0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/156: check_gt_zero()
150/157:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(Series(a[0])) in tp and i[0:1]!='EM':
            boo=(a<=0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/158: check_gt_zero()
150/159: a
150/160: i
150/161: i='VEL'
150/162: a=df[i]
150/163: type(Series(a[0])))
150/164: type(Series(a[0]))
150/165: type(a[0])
150/166: type(a[0]) in tp and i[0:1]!='EM'
150/167:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and i[0:1]!='EM':
            boo=(a<=0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/168: check_gt_zero()
150/169: cols
150/170:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            boo=(a<=0)
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/171: check_gt_zero()
150/172: len(df)
150/173: len(df[df['NO_P']=='Y001'])
150/174: len(df[df['NO_S']=='Y001'])
150/175: len(df[df['NO_S']=='Y000'])
150/176:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            boo=(a<=0) & (df['NO_P']!='Y001')
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/177: check_gt_zero()
150/178:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            boo=(a<=0) & (df['NO_P']!='Y000')
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/179: check_gt_zero()
150/180:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            b=df[(a<=0)] 
            a=b[b['NO_P']!='Y000']
            lgtz=len(df[boo])
            if lgtz!=0:print i,lgtz
150/181: check_gt_zero()
150/182:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            b=df[(a<=0)] 
            c=b[b['NO_P']!='Y000']
            lgtz=len(c)
            if lgtz!=0:print i,lgtz
150/183: check_gt_zero()
150/184: history
150/185: len(df[df['NO_S']=='Y000'])
150/186:
def check_gt_zero():
    cols=list(df.columns)
    tp=[np.float64,np.int64]
    for ii in xrange(1,len(cols)):
        i=cols[ii]
        a=df[i]
        if type(a[0]) in tp and 'EMI' not in i:
            b=df[(a<=0)]
            c=b[b['NO_S']!='Y000']
            lgtz=len(c)
            if lgtz!=0:print i,lgtz
150/187: check_gt_zero()
150/188: !vi
150/189: df[df['VEL']<=0]
150/190: df[df['HEI']<=0]
150/191: df[df['HEI']<=0&df['NO_S']!='Y000']
150/192: df[df['HEI']<=0 & df['NO_S']!='Y000']
150/193: a=df[df['HEI']<=0]
150/194: a[a['NO_S']!='Y000']
150/195:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    doy.append(df['WY1'][i]*df['DY1'][i]**df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/196:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DY1'][i]**df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/197: cols
150/198:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DW1'][i]**df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/199: hy
150/200:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DW1'][i]*df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/201: hy
150/202: max(hy)
150/203: min(hy)
150/204: a=[2,4,6]
150/205: b=[2,2,2]
150/206: c=a/b
150/207:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DW1'][i]*df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/208: r = [i/j for i,j in zip(a, b)]
150/209: r
150/210: cols=cols[1:]
150/211: ocls
150/212: cols
150/213: cols=list(df.columns)[1:]
150/214: cols
150/215: col_em=[i for 'EMI' in cols]
150/216: col_em=cols.map(lambda x: 'EMI' in x)
150/217: col_em=filter(('EMI' in cols),cols)
150/218: col_em=cols.filter(lambda x: 'EMI' in x)
150/219: col_em=filter((lambda x: 'EMI' in x),cols)
150/220: col_em
150/221:
for sp in col_em:
    r = [i/j for i,j in zip(list(df[sp]),list(df['HY1']))]
    df[sp]=Series(r,index=df.index)
150/222: df['HY1']
150/223: df['HY1']=Series(hy,index=df.index)
150/224: ldf=len(df)
150/225: ldf
150/226:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DW1'][i]*df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
150/227: df['HY1']=Series(hy,index=df.index)
150/228:
for sp in col_em:
    r = [i/j for i,j in zip(list(df[sp]),list(df['HY1']))]
    df[sp]=Series(r,index=df.index)
150/229:
for sp in col_em:
    print sum(df[sp])*8.76*3.6
150/230:
df=read_csv('point.csv')
for sp in col_em:
    print sum(df[sp])
150/231:
(hy,cno_nos)=([],[])
for i in xrange(ldf):
    hy.append(df['WY1'][i]*df['DW1'][i]*df['HD1'][i])
    cno_nos.append(df['C_NO'][i]+df['NO_S'][i])
df['HY1']=Series(hy,index=df.index)
for sp in col_em:
    r = [i/j for i,j in zip(list(df[sp]),list(df['HY1']))]
    df[sp]=Series(r,index=df.index)
    print sum(df[sp])*8760
150/232: df['HY1']=Series([i*j*k in zip(df['WY1'],df['DW1'],df['HD1'])],index=df.index)
150/233: df['HY1']=Series([i*j*k for i,j,k in zip(df['WY1'],df['DW1'],df['HD1'])],index=df.index)
150/234: df['HY1]
150/235: df['HY1']
150/236: df['subX']=Series([[0]*ldf],index=df.index)
150/237: df['subX']
150/238: df['subX']=Series([0*ldf],index=df.index)
150/239: df['subX']
150/240: boo=df['CO_N'].map(lambda x: x[0] in WXZ)
150/241: WXZ=['W','X','Z']
150/242: cols
150/243: boo=df['C_NO'].map(lambda x: x[0] in WXZ)
150/244: df[b00]['subX']=201500
150/245: df[boo]['subX']=201500
150/246: a=df[boo]['subX']
150/247: df[boo]['subX']=[201500*len(a)]
150/248: df[boo]['subX']
150/249: len(a)
150/250: b=[201500*len(a)]
150/251: b
150/252: b=[[201500]*len(a)]
150/253: b
150/254: df[boo]['subX']=b
150/255: len(b)
150/256: b=[[201500]*len(a)]
150/257: len[b]
150/258: len(b)
150/259: b
150/260: np.array(b)
150/261: b=np.array(b)
150/262: b.shape
150/263: df['subX']
150/264: boo=df['C_NO'].map(lambda x: x[0] in WXZ)
150/265: boo.count[True]
150/266: list(boo).count[True]
150/267: len(boo)
150/268: df.ix[boo,'subX']=201500
150/269: df.loc[boo,'subX']=201500
150/270: history
150/271: df['subX']
150/272: history
150/273: df['subX']=Series([[0]*ldf],index=df.index)
150/274: df['subX']
150/275: df['subX']=Series([0*ldf],index=df.index)
150/276: df['subX']
150/277: df.loc[df['C_NO'].map(lambda x: x[0] in WXZ),'subX']=201500
150/278: df['subX']
150/279: df['UTM_E']=Series([i-j for i,j in zip(df['UTM_E'],df['subX'])],index=df.index)
150/280: a=df[boo]['UTM_E','C_NO']
150/281: a=df[boo]
150/282: a['UTM_E','C_NO']
150/283: a
150/284: b=(a['UTM_E'],a['C_NO'])
150/285: b
150/286:
boo=(df['HEI']>0)& (df['HEI']<35)
df=df[boo]
boo=(~(np.isnan(df['UTM_E'])))|(~(np.isnan(df['UTM_N'])))
df=df[boo]
ldf=len(df)
150/287: ldf
150/288: df_pv1=pivot_table(df,index=["C_NO","NO_S","SCC"],values=col_em,,aggfunc=np.sum)
150/289: df_pv1=pivot_table(df,index=["C_NO","NO_S","SCC"],values=col_em,aggfunc=np.sum)
150/290:
df_pv2=pivot_table(df,index=["C_NO","NO_S","SCC"],values=['ORI_QU1','DIA','HEI','TEMP','VEL',\
'UTM_E', 'UTM_N','HY1','HD1'],aggfunc=np.mean)
df_pv=concat((df_pv1,df_pv2),axis=1)
150/291: len(df_pv)
150/292: df_pv
150/293: df_pv.to_csv('df_pv.csv')
150/294: run del_dup.py
150/295: cols
150/296: df_pv['C_NO']=df_pv.index[0]
150/297: df_pv['C_NO']=df_pv.index
150/298: df_pv
150/299: a=df_pv['C_NO']
150/300: zip(*a)
150/301: b=zip(*a)
150/302: len(b)
150/303: c_no=b[0]
150/304: c_no
150/305: len[c]
150/306: len[c_no]
150/307: len(c_no)
150/308: len(df_pv)
150/309: df_pv
150/310: no_s=b[1]
150/311: scc=b[2]
150/312: a=(1,2 3)
150/313: a=(1,2,3)
150/314: a[1]
150/315: a[0]
150/316: df_pv['C_NO'][0]
150/317: df_pv['C_NO'][0][0]
150/318: df_pv['C_NO'][:][0]
150/319: df_pv['C_NO'][:][:]
150/320: df_pv['C_NO'][:][0]
150/321: df_pv['C_NO'][0][:]
150/322: a=((1,2,3),(4,5,6))
150/323: a
150/324: a[0][1]
150/325: a= df_pv['C_NO']
150/326: a[:][0]
150/327: a=((1,2,3),(4,5,6))
150/328: a[:][0]
150/329: a[0][:]
150/330: a[0,:]
151/1: run dl_dup.py
151/2: run del_dup.py
151/3: df_pv['cno_nos_scc']=df_pv.index
151/4: a=df_pv['cno_nos_scc']
151/5: a[0:10]
151/6: a['cno_nos_scc'][0:10]
151/7: list(a[0:10])
151/8: list(a[0:10])[1][0]
151/9: list(a[0:10])[:][0]
151/10: list(a[0:10])[0:1][0]
151/11: list(a[0:10])[0:1]
151/12: list(a[0:10])[:]
151/13: b=list(a[0:10])
151/14: zip(*b)
151/15: len(zip(*b))
151/16: cno=zip(*b)[0]
151/17: cno
151/18: cno=list(cno)
151/19: cno
151/20: cno[1][0]
151/21: cno[1][9]
151/22: cno[1][8]
151/23: cno[1][7]
151/24: cno[:][7]
151/25: [x, x in cno[:][7]]
151/26: map(x[0],cno)
151/27: cno[:]
151/28: history
151/29: a=df_pv['cno_nos_scc']
151/30: a=list(df_pv['cno_nos_scc'])
151/31: ldf_pv=len(a)
151/32: ldf_pv
151/33: cno=zip(*a)[0:ldf_pv]
151/34: cno[ldf_pv]
151/35: cno[ldf_pv-1]
151/36: cno
151/37: a
151/38: history
151/39: cno[0]
151/40: a=zip(*a)
151/41: cno=a[0]
151/42: nos=a[1]
151/43: (cno,nos,scc)=a
151/44: cnoo
151/45: cno
151/46: scc
151/47: nos
151/48: len(nos)
151/49: nos[36685-1]
151/50: nos[36685]
151/51: history
151/52: df_pv['C_NO']=Series(cno,index=df.index)
151/53: df_pv['C_NO']=Series(cno,index=df_pv.index)
151/54: df_pv['NO_S']=Series(nos,index=df_pv.index)
151/55: df_pv['SCC']=Series(scc,index=df_pv.index)
151/56: df_cv.columns
151/57: df_pv.columns
151/58: df_pv['SCC']=Series(scc,index=df_pv.index)
151/59: del df_pv['cno_nos_scc']
151/60: df_cv.columns
151/61: df_pv.columns
151/62: def check_landsea()
151/63:     from load_surfer import load_surfer
151/64:     land=set()
151/65:
    for i in xrange(nxc-1):
            for j in xrange(nyc-1):
                    if ndct[i][j] >0:
                            land.add((xc[i][j],yc[i][j]))
                XY=[]
151/66:
    for i in xrange(ldf):
            x=int(df_pv['UTM_E'][i]/1000)*1000
            y=int(df_pv['UTM_N'][i]/1000)*1000
            XY.append((x,y))
        df_pv['XY']=Series(XY,index=df_pv.index)
151/67:     df_sea=df_pv[(df_pv['XY'].map(lambda x: x not in land))]
151/68:     sea_shore=['N','T','V','F']
151/69:     a.add({'Y':Series(df_sea['UTM_N'])})
151/70:     a.add({'C_NO':Series(df_sea['C_NO'])})
151/71:
                                   def check_landsea():
        from load_surfer import load_surfer
        xc,yc,ndct,(nxc,nyc)=load_surfer('dict.grd')
        land=set()
        for i in xrange(nxc-1):
                for j in xrange(nyc-1):
                        if ndct[i][j] >0:
                                land.add((xc[i][j],yc[i][j]))
                    XY=[]
151/72:         y=int(df_pv['UTM_N'][i]/1000)*1000
151/73:         XY.append((x,y))
151/74:     sea_shore=['N','T','V','F']
151/75:     df_sea=df_sea[boo]
151/76:     a={'X':Series(df_sea['UTM_E'])}
151/77:     fname='outsideland3.dat'
151/78:
def check_landsea():
    from load_surfer import load_surfer
        xc,yc,ndct,(nxc,nyc)=load_surfer('dict.grd')
151/79:     land=set()
151/80:
    for i in xrange(nxc-1):
            for j in xrange(nyc-1):
                    if ndct[i][j] >0:
                            land.add((xc[i][j],yc[i][j]))
                XY=[]
151/81:
    for i in xrange(ldf):
            x=int(df_pv['UTM_E'][i]/1000)*1000
            y=int(df_pv['UTM_N'][i]/1000)*1000
            XY.append((x,y))
        df_pv['XY']=Series(XY,index=df_pv.index)
151/82:     sea_shore=['N','T','V','F']
151/83:     boo=(df_sea['C_NO'].map(lambda x: x[0] not in sea_shore))
151/84:     a={'X':Series(df_sea['UTM_E'])}
151/85:     a.add({'C_NO':Series(df_sea['C_NO'])})
151/86: run del_dup.py
151/87: df_pv.columns
151/88: check_landsea()
151/89: ldf=len(df_pv)
151/90: check_landsea()
151/91: i
151/92: ldf
151/93: run del_dup.py
151/94: run del_dup.py
151/95: 1lst
151/96: !lst
151/97: !more outsideland3.dat
151/98: DataFrame(a['X','Y','C_NO']).set_index('X').to_csv(fname)
151/99: a=a['X','Y','C_NO']
151/100: a.columns=['X','Y','C_NO']
151/101: a=DataFrame(a)
151/102:  a.columns=['X','Y','C_NO']
151/103: a.columns
151/104: a={'X':Series(df_sea['UTM_E'])}
151/105: run del_dup.py
151/106: run del_dup.py
151/107: !more outsideland3.dat
151/108: col_id=["C_NO","NO_S","SCC"]
151/109: df_pv1=pivot_table(df,index=col_id,values=col_em,aggfunc=np.sum)
151/110: df_pv1
151/111: df_pv2
151/112: df_pv=concat((df_pv1,df_pv2),axis=1)
151/113: col_mn=['ORI_QU1','DIA','HEI','TEMP','VEL','UTM_E', 'UTM_N','HY1','HD1']
151/114: a=pivot_table(df,index=col_id,values=col_mn,aggfunc=np.mean)
151/115: a==df_pv2
151/116: boo=(np.isnan(df['UTM_E']))
151/117: df=read_csv('point.csv')
151/118: boo=(np.isnan(df['UTM_E']))
151/119: a=df[boo]
151/120: a
151/121: a['CO_N']
151/122: cols
151/123: a['C_NO']
151/124: set(a['C_NO'])
151/125: history
152/1: import del_dup
152/2: import del_dup
152/3: import del_dup
152/4: import del_dup
152/5: print set(df[np.isnan(df['UTM_E'])])
152/6: df=read_csv('point.csv')
152/7: from pandas import *
152/8: df=read_csv('point.csv')
152/9: import numpy as np
152/10: print set(df[np.isnan(df['UTM_E'])])
152/11: print df[np.isnan(df['UTM_E'])]['C_NO']
152/12: print set(df[np.isnan(df['UTM_E'])]['C_NO'])
152/13: len(df)
152/14: boo=(~(np.isnan(df['UTM_E']))|~(np.isnan(df['UTM_N'])))
152/15: df=df[boo]
152/16: len(df)
152/17: df=read_csv('point.csv')
152/18: boo=~(np.isnan(df['UTM_E']))|~(np.isnan(df['UTM_N']))
152/19: df=df[boo]
152/20: len(df)
152/21: import del_dup
153/1: import del_dup
153/2: import del_dup
153/3: df_pv
153/4: run del_dup
153/5: sum(df[df['NO_S']=='Y000']['NOX_EMI'])
153/6: sum(df[df['NO_S']=='Y000']['NOX_THC'])
153/7: sum(df[df['NO_S']=='Y000']['THC_EMI'])
153/8: a=df[df['NO_S']=='Y000']
153/9: len(a)
153/10: df['NO_S']
153/11: df=read_csv('point.csv')
153/12: sum(df[df['NO_S']=='Y000']['THC_EMI'])
153/13: sum(df[df['NO_S']=='Y000']['NOX_EMI'])
153/14: col_em
153/15: sum(df[df['NO_S']=='Y000'][col_em])
153/16:
for i in col_em:
    print sum(df[df['NO_S']=='Y000'][i])
153/17:
for i in col_em:
    print i,sum(df[i]), sum(df[df['NO_S']=='Y000'][i])
153/18:
for i in col_em:
    a=sum(df[df['NO_S']=='Y000'][i])
    b=sum(df[i])
    print i,a/b,sum(df[i]), sum(df[df['NO_S']=='Y000'][i])
153/19: history
153/20: !head del_dup.py
153/21: lb=[-1,0,35,70,150,200]
153/22: ub=[0,35,70,150,200,250]
153/23: boo=[]
153/24:
for i in xrange(len(lb)):
    boo.append((df['HEI']>lb[i])&(df['HEI']<=ub[i]))
153/25: boo
153/26: len(boo)
153/27: !grep col_em *py
153/28: !grep cols *py
153/29: import del_dup
153/30: run del_dup
153/31: a=set(['B9100601', 'B8802151', 'B24B7118'])
153/32: df_sea=df_pv[(df_pv['XY'].map(lambda x: x not in land))]
153/33: col_em
153/34:
for sp in col_em:
    boo=(df['C_NO'].map(lambda x: x not in a))
    print i,sum(df[boo][sp])
153/35:
for sp in col_em:
    boo=(df['C_NO'].map(lambda x: x not in a))
    print sp,sum(df[boo][sp])
153/36: history
153/37: print np.mean(df[boo][sp])
153/38: col_mn=['ORI_QU1','DIA','HEI','TEMP','VEL','UTM_E', 'UTM_N','HY1','HD1']
153/39:
for c in col_nm:
    print c,sum(df[boo][c])
153/40:
for c in col_mn:
    print c,sum(df[boo][c])
153/41:
for c in col_mn:
    print c,np.mean(df[boo][c])
153/42: c='UTM_E'
153/43: df[boo][c]
153/44: boo
153/45: boo
153/46:
boo=(df['C_NO'].map(lambda x: x not in a))
for c in col_mn:
    print c,np.mean(df[boo][c])
153/47: c='UTM_E'
153/48: df[boo][c]
153/49: a
153/50:
boo=(df['C_NO'].map(lambda x: x in a))
for c in col_mn:
    print c,np.mean(df[boo][c])
153/51:
boo=(df['C_NO'].map(lambda x: x in a))
for c in col_mn:
    print c,df[boo][c]
153/52: df=read_csv('point.csv')
153/53:
boo=(df['C_NO'].map(lambda x: x in a))
for c in col_mn:
    print c,df[boo][c]
153/54: a
153/55: c
153/56:
boo=(df['C_NO'].map(lambda x: x in a))
for c in col_mn[:6]
    print c,df[boo][c]
153/57:
boo=(df['C_NO'].map(lambda x: x in a))
for c in col_mn[:6]:
    print c,df[boo][c]
153/58: df[boo]
153/59: df[boo][0]
153/60: df[boo]a
153/61: a
153/62: history
153/63: boo=[]
153/64:
for i in xrange(len(lb)):
    boo.append((df['HEI']>lb[i])&(df['HEI']<=ub[i]))
153/65:
for sp in col_em:
    b=sum(df[sp])
    print i,sum(df[sp]),[sum(df[boo[rnk]][sp])/b,rnk in xrange(len(lb))]
153/66:
for sp in col_em:
    b=sum(df[sp])
    print i,sum(df[sp]),[sum(df[boo[rnk]][sp])/b for rnk in xrange(len(lb))]
153/67:
for sp in col_em:
    b=sum(df[sp])
    print sp,sum(df[sp]),[sum(df[boo[rnk]][sp])/b for rnk in xrange(len(lb))]
153/68: boo=[]
153/69: col_h=[]
153/70:
for i in xrange(len(lb)):
    col_h.append(str(lb[i])+'<H<='+ub(i))
153/71:
for i in xrange(len(lb)):
    col_h.append(str(lb[i])+'<H<='+str(ub[i]))
153/72: col_h
153/73: col_h=['T/y',col_h]
153/74: col_h
153/75: col_h=[]
153/76:
for i in xrange(len(lb)):
    col_h.append(str(lb[i])+'<H<='+str(ub[i]))
153/77: col_h=['T/y',x for x in col_h]
153/78: len(col_h)
153/79: col_h=['T/y',col_h]
153/80: len(col_h)
153/81: col_h=['-1<H<=0', '0<H<=35', '35<H<=70', '70<H<=150', '150<H<=200', '200<H<=250']
153/82: col_h.insert('T/y',0)
153/83: col_h.insert(0,'T/y')
153/84: col_h
153/85: run check_HEI_em.py
153/86: run check_HEI_em.py
153/87: run check_HEI_em.py
153/88: run check_HEI_em.py
153/89: run check_HEI_em.py
153/90: run check_HEI_em.py
153/91: a
153/92: s_dum
153/93: s_dum=[0*len(col_em)]
153/94: s_dum
153/95: s_dum=[0 *len(col_em)]
153/96: s_dum
153/97: ll=len(col_em)
153/98: s_dum=list(0*ll)
153/99: s_dum=list([0*ll])
153/100: s_dum
153/101: s_dum=list([0]*ll])
153/102: s_dum=list([0]*ll)
153/103: s_dum
153/104: run check_HEI_em.py
153/105: run check_HEI_em.py
153/106: a
153/107: !grep loc *py
153/108: i
153/109: i=SOX_EMI
153/110: i='SOX_EMI'
153/111: print i,sum(df[sp]),sum(df[boo[rnk]][sp])/b for rnk in xrange(len(lb))
153/112: run check_HEI_em.py
153/113: a
153/114: !grep csv *py
153/115: DataFrame(a).to_csv('tpy_HEI.csv')
153/116: !more tpy_HEI.csv
153/117: run check_HEI_em.py
153/118: run check_HEI_em.py
153/119: run check_HEI_em.py
153/120: !more tpy_HEI.csv
153/121: !grep csv *py
153/122: DataFrame(a).set_index('SP').to_csv('tpy_HEI.csv')
153/123: !more tpy_HEI.csv
153/124: col_em[1]
153/125: col_em[1][:'_']
153/126: col_em[1].index('_')
153/127: run check_HEI_em.py
153/128: len(df)
153/129: len(df_pv)
153/130: run del_dup
153/131: y=df_pv[df_pv['NO_S']=='Y000']
153/132: len(y)
153/133: len(df_pv)
153/134: y
153/135: y_pv=pivot_table(y,index='C_NO',values=col_mn,aggfunc=np.mean)
153/136: y=y.reset_index
153/137: y_pv=pivot_table(y,index='C_NO',values=col_mn,aggfunc=np.mean)
153/138: col_mn
153/139: y.columns
153/140: y
153/141: y=y.reset_index('C_NO')
153/142: y
153/143: y=df_pv[df_pv['NO_S']=='Y000'].reset_index('C_NO')
153/144: !grep index /home/kuang/qt_program/windrose/*py
153/145: y=df_pv[df_pv['NO_S']=='Y000'].set_index('C_NO')
153/146: y.columns
153/147: y
153/148: plant_y=set(y['C_NO'])
153/149: y.columns
153/150: plant_y=set(y.index)
153/151: plant_y
153/152: len(plant_y)
153/153: df_wy=df_pv[(df_pv['C_NO'].map(lambda x: x in plant_y))]
153/154: len(df_wy)
153/155: df_wy_pv2=pivot_table(df_wy,index='C_NO',values=col_mn,aggfunc=np.mean)
153/156: df_wy_pv2[col_mn]
153/157: df_wy_pv2[col_mn]['HEI']
153/158: a=list(df_wy_pv2[col_mn]['HEI'])
153/159: a.count(0)
153/160: len(a)
153/161: mean(a.clip(0))
153/162: np.mean(a.clip(0))
153/163: np.mean(a.clip(0))
153/164: a=np.array(a)
153/165: a.clip(0)
153/166: a
153/167: a.clip(0.1)
153/168: history
153/169: a=df_wy_pv2[DF_wy_pv2['HEI']>0][col_mn]
153/170: a=df_wy_pv2[df_wy_pv2['HEI']>0][col_mn]
153/171: np.mean(a['HEI'])
153/172: np.mean(a[col_mn])
153/173: len(df[df['NO_S']=='PY00'])
153/174: len(df[df['NO_S']=='P001'])
153/175: len(df[df['NO_S']=='Y000'])
153/176: a=df_wy_pv2[df_wy_pv2['HEI']==0]['C_NO']
153/177: df_wy_pv2.colums
153/178: df_wy_pv2.columes
153/179: a=df_wy_pv2[df_wy_pv2['HEI']==0].index
153/180: a
153/181: len(a)
153/182: a=set(a)
153/183: len(a)
153/184: b=df_wy[df_wy.index.map(lambda x: x not in a)]
153/185: b=df_wy[index.map(lambda x: x not in a)]
153/186: d=df_wy.index
153/187: b=df_wy[d.map(lambda x: x not in a)]
153/188: a
153/189: a
153/190: df_wy
153/191: b=df_wy[df_wy['C_NO'].map(lambda x: x not in a)]
153/192: pivot_table(b,index=['C_NO'],values=['HEI'],aggfunc=count)
153/193: pivot_table(b,index=['C_NO'],values=['HEI'],aggfunc=np.count)
153/194: pivot_table(b,index=['C_NO'],values=['HEI'],aggfunc='count')
153/195: pivot_table(b,index=['C_NO'],values=['HEI'],aggfunc=np.min)
153/196: b=df_wy[df_wy['C_NO'].map(lambda x: x not in a)]
153/197: c=b[b['NO_S']!='Y000']
153/198: pivot_table(c,index=['C_NO'],values=['HEI'],aggfunc=np.min)
153/199: history
153/200: a=pivot_table(df_wy,index=['C_NO'],values=['NMHC_EMI'],aggfunc=np.sum)
153/201: a
153/202: sum(a['NMHC_EMI'])
153/203: len(df_wy)
153/204: sum(df['NMHC_EMI'])
153/205: df=read_csv('point.csv')
153/206: sum(df['NMHC_EMI'])
153/207: sum(df_pv['NMHC_EMI'])
153/208: sum(df[df['HEI']>0]['NMHC_EMI'])
153/209: sum(df[df['HEI']>0]['NMHC_EMI'])/8760
153/210: !head *py
153/211: !grep pivot *.py
153/212: read_xls('cbm.xlsx')
153/213: read_excel('cbm.xlsx')
153/214: read_excel('CBM.xls')
153/215: read_excel('CBM.xls', convert_float=True, na_values=0)
153/216: df_cbm=read_excel('CBM.xls', convert_float=True, na_values=0)
153/217: df_cbm=read_excel('CBM.xls', convert_float=True)
153/218: df_cbm.columns
153/219: df_cbm.columns[5:13]
153/220:
df_cbm.columns[5:14
]
153/221:
for sp in df_cbm.columns[5:14]:
    df.loc[df[sp].map(lambda x: np.isnan(x)),sp]=0
153/222:
for sp in df_cbm.columns[5:14]:
    df_cbm.loc[df_cbm[sp].map(lambda x: np.isnan(x)),sp]=0
153/223: df_cbm
153/224: df_cbm['sum']=Series([i/j for i,j in zip(list(df[sp]),list(df['HY1']))] ,index=df.index)
153/225:  df_cbm['sum']=Series([i/j for i,j in zip(list(df[sp]),list(df['HY1']))] ,index=df.index)
153/226: history
153/227: col_cbm=df_cbm.columns[5:14]
153/228: df_cbm2=df_cbm[col_cbm]
153/229: df_cbm['sum']=df_cbm2.sum(axis=1)
153/230: z=df_cbm[df_cbm['sum']==0]
153/231: z
153/232: z[z['mw']==0]
153/233: !vi a.txt
153/234: fname='cbm_cb5.txt'
153/235:
lns=[]
with open(fname) as ftext:
    for line in ftext:lns.append(line)
153/236: lns[1].count('.')
153/237: len(lns)
153/238: df_ln=DataFrame({'line':lns})
153/239: df_ln
153/240: history
153/241: df_ln['# of dots']=[x.count('.') for x in lns]
153/242: df_ln
153/243: df_ln[df_ln['# of dots']>1]['lns']
153/244: df_ln
153/245: df_ln[df_ln['# of dots']>1]['line']
153/246: df_ln[df_ln['# of dots']=1]['line']
153/247: df_ln[df_ln['# of dots']==1]['line']
153/248: lns[636]
153/249: lns[636].index(' ')
153/250: lns[636][9:].index(' ')
153/251: lns[636].index('.')
153/252: lns[636][9:30].index(' ')
153/253: i=04000000000000000
153/254: i
153/255: i=int(04000000000000000)
153/256: i
153/257: lns[636].count(' ')
153/258: history
153/259: df_ln['n_dots']=[x.count('.') for x in lns]
153/260: del df_ln['# of dots']
153/261: df_ln['n_space']=[x.count(' ') for x in lns]
153/262: df_ln
153/263: sp=df_ln['n_space']
153/264: lns[636].split(' ')[sp[363]-1]
153/265: lns[636].split(' ')[sp[363]-3]
153/266: lns[633].split(' ')[sp[633]-3]
153/267: lns[633].split(' ')[sp[633]-2]
153/268: lns[631].split(' ')[sp[631]-2]
153/269: df_ln['seq']=[lns[i].split(' ')[sp[i]-2] for i in xrange(len(sp))]
153/270: min(sp)
153/271: df_ln
153/272: del df_ln.loc[673]
153/273: df_ln[df_ln['n_space']==0]
153/274: df_ln.drop(df_ln[df_ln['n_space']==0].index, inplace=True)
153/275: df_ln[df_ln['n_space']==0]
153/276: df_ln
153/277: history
153/278: df_ln['seq']=[lns[i].split(' ')[sp[i]-2] for i in xrange(len(sp))]
153/279: df_ln[df_ln['n_space']==1]
153/280: len(sp),len(lns)
153/281: len(df_ln)
153/282: sp=df_ln['n_space']
153/283: lns=df_ln['line']
153/284: df_ln['seq']=[lns[i].split(' ')[sp[i]-2] for i in xrange(len(sp))]
153/285: df_ln['seq']
153/286:
def sp_str(line):
    l=len(line)
    return [x+' ' for x in line]
153/287: sp_str('123')
153/288:
def sp_str(line):
    l=len(line)
    return [x for x in line]
153/289: sp_str(df['seq'][648])
153/290: sp_str(df_ln['seq'][648])
153/291: df_ln[df_ln['n_dots']==1]['seq']
153/292: df_ln.loc(df_ln['n_dots']==1,'seq')
153/293: a=df_ln[df_ln['n_dots']==1]['seq']
153/294: map(sp_str,a)
153/295: sp_seq=map(sp_str,a)
153/296: sp_seq[1]
153/297: a[1]
153/298: a[3]
153/299: sp_seq[3]
153/300: len(sp_seq[3])
153/301: len(a[3])
153/302: len(a[1])
153/303: len(sp_seq[1])
153/304: sp_seq[1]
153/305: a[1]
153/306: a[1][17]
153/307: a[1][16]
153/308: a[100]
153/309: sp_seq[100]
153/310: sp_seq[101]
153/311: sp_seq[99]
153/312: a[99]
153/313: a
153/314: sp_seq
153/315: history
153/316: df_ln.loc(df_ln['n_dots']==1,'seq')=sp_seq
153/317: seq=df_ln['seq']
153/318: seq_list=[]
153/319: for i xrange(len(seq)):
153/320:
for i in xrange(len(seq)):
    seq_list.append(sp_str(seq[i]))
153/321: df_ln['seq_list']=Series(seq_list)
153/322: df_ln['seq_list']
153/323: df_ln['seq_list'][1]
153/324: df_ln[df_ln['n_dots']==2]
153/325: df_ln[df_ln['n_dots']==2][169]
153/326: df_ln[df_ln.index==169]
153/327: df_ln[df_ln.index==269]
153/328: for i in range(a:z):
153/329: lns[269]
153/330:
for i in xrange(len(lns[269]-1,0,-1)):
    if not isalpha(lns[269][i:i]):
        print i
        break
153/331:
for i in xrange(len(lns[269])-1,0,-1):
    if not isalpha(lns[269][i:i]):
        print i
        break
153/332:
for i in xrange(len(lns[269])-3,0,-1):
    if not lns[269][i:i].isalpha:
        print i
        break
153/333:
for i in xrange(len(lns[269])-3,0,-1):
    if lns[269][i:i].isalpha:
        print i
        break
153/334: len(lns[269])
153/335:
for i in xrange(len(lns[269])-3,0,-1):
    if lns[269][i:i].isalpha:
        print i,lns[269][i:i]
        break
153/336: ' '.isalpha
153/337: 'a'.isalpha
153/338: 'a'.isalpha()
153/339:
for i in xrange(len(lns[269])-3,0,-1):
    if lns[269][i:i].isalpha():
        print i,lns[269][i:i]
        break
153/340:
for i in xrange(len(lns[269])-3,0,-1):
    print i,lns[269][i:i]
    if lns[269][i:i].isalpha():
        print i,lns[269][i:i]
        break
153/341: a=lns[269]
153/342: a[10]
153/343: a[11]
153/344:
for i in xrange(len(lns[269])-3,0,-1):
    if a[i:i].isalpha():
        print i,a[i:i]
        break
153/345:
for i in xrange(len(lns[269])-3,0,-1):
    print a[i:i]
    if a[i:i].isalpha():
        print i,a[i:i]
        break
153/346: a
153/347: a[0]
153/348:
for i in xrange(len(lns[269])-3,0,-1):
    print a[i]
    if a[i].isalpha():
        print i,a[i]
        break
153/349: lns
153/350:
for i in xrange(len(lns[269])-3,0,-1):
    print a[i]
    if a[i].isalpha() or a[i]==')':
        print i,a[i]
        break
153/351: history
153/352: a=[1,2,[0,0.5]]
153/353: a
153/354: a=zip(*a)
153/355: a=zip(*list(a))
153/356: a
153/357: zip(*list(a))
153/358: np.array(a)
153/359: np.array(a[:])
153/360: zip(*list(a[:]))
153/361: lns
153/362: ' 00000 ' in lns
153/363: ' 0000 ' in lns
153/364: ' 00000 ' in lns[659]
153/365: a
153/366: a=lns[659]
153/367: a[40:]
153/368: a[30:]
153/369: a
153/370:
for i in a.split():
    print i
153/371:
w=[]
for i in a.split():
    w.append=i
print w[len(w)-1]
153/372:
w=[]
for i in a.split():
    w.append(i)
print w[len(w)-1]
153/373: history
153/374: w
153/375: lns
153/376: a=lns[665]]
153/377: a=lns[665]
153/378:
w=[]
for i in a.split():
    w.append(i)
print w[len(w)-1]
153/379: a
153/380: w
153/381: name='isomers of undecane (c11 paraffins)'
153/382: w[1] in name
153/383: w[10] in name
153/384:
for i in w:
    boo=i in name
    print i,boo
153/385:
for i in w:
    boo=i in name
    print i,boo
153/386: w[5]='1'
153/387:
for i in w:
    boo=i in name
    print i,boo
153/388:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+w
    if name == name_tmp: break
    print i,boo
153/389:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+i
    if name == name_tmp: break
    print i,boo
153/390:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+i
    if name == name_tmp: break
    print i,boo,name_tmp
153/391:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+' '+i
    if name == name_tmp: break
    print i,boo,name_tmp
153/392: name
153/393:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+' '+i
    if name == name_tmp[1:]: break
    print i,boo,name_tmp
153/394:
name_tmp=''
for i in w:
    boo=i in name
    name_tmp=name_tmp+' '+i
    if name == name_tmp[1:]: break
    print i,boo,name_tmp
153/395: history
153/396: run "rd_cbm.py"
153/397: run "rd_cbm.py"
153/398: run "rd_cbm.py"
153/399: run "rd_cbm.py"
153/400: run "rd_cbm.py"
153/401: run "rd_cbm.py"
153/402: run "rd_cbm.py"
153/403: df_ln
153/404: df_ln['name']
153/405: len(df_ln)
153/406: df_ln['mw']
153/407: df_ln['nc']
153/408: mw
153/409: w
153/410: mid
153/411: run "rd_cbm.py"
153/412: mid
153/413: mw
153/414: nc
153/415: name
153/416: df_ln
153/417: history
153/418: run "rd_cbm.py"
153/419: run "rd_cbm.py"
153/420: name
153/421: namei
153/422: run "rd_cbm.py"
153/423: run "rd_cbm.py"
153/424: namei
153/425: name
153/426: lns
153/427: name_tmp
153/428: namei
153/429: run "rd_cbm.py"
153/430: run "rd_cbm.py"
153/431: mid
153/432: seq
153/433: lns
153/434: mid
153/435: len(mid[len(seq)-1])
153/436: len(mid[len(seq)-2])
153/437: a=mid[len(seq)-1]
153/438:
seqm=[]
for i in a:
    if '.' in a:
        seqm.append(i)
    else:
        l=sp_str(i)
        for j in l:
            seqm.append(j)
153/439: seqm
153/440: a
153/441:
seqm=[]
for i in a:
    if '.' in i:
        seqm.append(i)
    else:
        l=sp_str(i)
        for j in l:
            seqm.append(j)
153/442: seqm
153/443: a
153/444: a=mid[333]
153/445: a
153/446:
seqm=[]
for i in a:
    if '.' in i:
        seqm.append(i)
    else:
        l=sp_str(i)
        for j in l:
            seqm.append(j)
153/447: seqm
153/448: len(seqm)
153/449: history
153/450: run "rd_cbm.py"
153/451: run "rd_cbm.py"
153/452: mid
153/453: l=len(df_ln)
153/454:
for i in  mid:
    print i
154/1: run rd_cbm.py
154/2: !grep csv *py
154/3: run rd_cbm.py
154/4: seqm=[]
154/5: seqm.append(o for o in sp_str('00001'))
154/6: seqm
154/7: list(seqm)
154/8: seqm[1]
154/9: seqm=[o for o in sp_str('00001')]
154/10: seqm
154/11: seqm=seqm+['p']
154/12: seqm
154/13: seqm=seqm+[o for o in sp_str('InMySoul')]
154/14: seqm
154/15: history>a
154/16: !grep drop a
154/17: !head cbm_cb5.txt
154/18: df_ln
154/19: df_ln|more
154/20: df_ln>a
154/21: df_ln >a
154/22: df_ln
154/23: df_ln['line'][0]
154/24: lns[0]
154/25: sp_nm=[n for n in lns[0].split()]
154/26: mid[0]
154/27: mid[1]
154/28: name[0]
154/29: sp_nm
154/30: mid[0]=[o for o in sp_nm[1:18]]
154/31: mid[0]
154/32: history
154/33: name[0]
154/34: name[0]='name'
154/35: name[0]
154/36: sp_nam
154/37: sp_nm
154/38: !vi cbm_cb5.txt
154/39: sp_nm=[n for n in lns[0].split()]
154/40: sp_nm
154/41: !more cbm_cb5.csv
154/42: mida=np.array(mid)
154/43: mida.shape
154/44: mida[1]
154/45: a=zip(*,mida)
154/46: a=zip(*mida)
154/47: a
154/48: a=zip(*mid)
154/49: a
154/50: mid[1][1]
154/51: mid[1]
154/52: mid[1][1]
154/53: nsp=17
154/54: nline=len(mid)
154/55: nline
154/56: for n in xrange(nsp)
154/57:
for n in xrange(nsp):
    df_ln['sp_nm[n]']=Series([o for o in mid[:][n]])
154/58: df_ln.columns
154/59: del df_ln['sp_nm[n]']
154/60: df_ln.columns
154/61:
for n in xrange(nsp):
    df_ln[sp_nm[n]]=Series([o for o in mid[:][n]])
154/62: df_ln.columns
154/63: history
154/64: run rd_cbm.py
154/65: run rd_cbm.py
154/66: run rd_cbm.py
154/67: !mo
154/68: !more cbm_cb5.csv
154/69: lns[1]
154/70: lns[2]
154/71: mid[1]
154/72: mid[2]
154/73: lns[3]
154/74: name[0]
154/75: mid[0]
154/76: !more
154/77: !more cbm_cb5.csv
154/78: mid[0]
154/79: mid[0][12]
154/80: sp_nam[12]
154/81: sp_nm[12]
154/82: lns[0]
154/83: '.' in lns[0]
154/84: run rd_cbm.py
154/85: len(mid)
154/86: len(name)
154/87: len(lns)
154/88: run rd_cbm.py
154/89: lens
154/90: nsp
154/91: mid[lens]
154/92: mid[lens-1]
154/93: mid[lens-1][17]
154/94: mid[lens-1][17-1]
154/95: lns[lens-1]
154/96: run rd_cbm.py
154/97: run rd_cbm.py
154/98:
for n in xrange(nsp):
    l=mid[:][n]
    d.update({sp_nm[n]:Series([o for o in l])})
154/99: d
154/100: l
154/101: l=mid[0:lens-1][0]
154/102: l
154/103: l=mid[0][0:lens-1]
154/104: l
154/105: for i in xrange
154/106: l=[]
154/107:
for i in xrange(lens)
    l=mid[i][0]
154/108:
for i in xrange(lens):
    l=mid[i][0]
154/109: mid[300]
154/110: mid[300][0]
154/111: mid[300][1]
154/112:
for i in xrange(lens):
    l.appendl=mid[i][0]
154/113: l
154/114: l=[]
154/115:
for i in xrange(lens):
    l.append(mid[i][0])
154/116: lens
154/117: l
154/118: len(l)
154/119: mid[211][0]
154/120: mid[211]
154/121: mid[212]
154/122: name[210]
154/123: name[211]
154/124: lns[211]
154/125: lns[212]
154/126: run rd_cbm.py
154/127: !more cbm_cb5.csv
154/128: run rd_cbm.py
154/129: mid
154/130:
for i in mid:
    print len(i)
154/131: ll=[len(i) for i in mid]
154/132: ll
154/133: min(ll),max(ll)
154/134: ll.index(min(ll))
154/135: name[250]
154/136: lns[251]
154/137: run rd_cbm.py
154/138: ll=[len(i) for i in mid]
154/139: min(ll),max(ll)
154/140: ll.index(min(ll))
154/141: lns[324]
154/142: !vi cbm_cb5.txt
154/143: !r
154/144: run rd_cbm.py
154/145: ll=[len(i) for i in mid]
154/146: ll.index(min(ll))
154/147: mid[323]
154/148: run rd_cbm.py
154/149: ll=[len(i) for i in mid]
154/150: ll.index(min(ll))
154/151: name[ll.index(min(ll))]
154/152: lns[417]
154/153: !vi cbm_cb5.txt
154/154: run rd_cbm.py
154/155: ll=[len(i) for i in mid]
154/156: name[ll.index(min(ll))]
154/157: ll.index(min(ll))
154/158: lns[547]
154/159: !vi cbm_cb5.txt
154/160: run rd_cbm.py
154/161: !more cbm_cb5.csv
154/162: !vi cbm_cb5.txt
154/163: run rd_cbm.py
154/164: run rd_cbm.py
154/165: run rd_cbm.py
154/166: len(mid)
154/167: len(lns)
154/168: run rd_cbm.py
154/169: run rd_cbm.py
154/170: nci
154/171: len(mid)
154/172: !vi
154/173: run rd_cbm.py
154/174: len(mid)
154/175: run rd_cbm.py
154/176: len(mid)
154/177: run rd_cbm.py
154/178: k.count()
154/179: run rd_cbm.py
154/180: len(mid)
154/181: !more cbm_cb5.csv
154/182: len(name)
154/183: set(lns)-len(name)
154/184: lns
154/185: ll=[len(i) for i in mid]
154/186: min(ll),max(ll)
154/187: run rd_cbm.py
154/188: run rd_cbm.py
154/189: !vi cbm_cb5.txt
154/190: run rd_cbm.py
154/191: len(mid)
154/192:
len(lns
)
154/193: boo='.' in k
154/194: boo2=k==nci
154/195: boo+boo2
154/196: boo
154/197: boo2
154/198: boo | boo2
154/199: k=1
154/200: nci=1
154/201: boo2
154/202: k==nci
154/203: boo2
154/204: boo2=(k==nci)
154/205: boo2
154/206: k=2
154/207: boo2
154/208:  boo2=(k==nci)
154/209: boo2
154/210: boo|boo2
154/211: k=1
154/212: boo2=(k==nci)
154/213: boo|boo2
154/214: run rd_cbm.py
154/215: !v
154/216: name[0]
154/217: name[0]-'me'
154/218: name[0]-name[0][0:1]
154/219: !pwd
154/220: !vi cbm_cb5.txt
155/1: run rd_cbm.py
156/1: run rd_cbm.py
156/2: !pwd
157/1: from pandas import *
157/2: df=read_csv('ParamVals.csv')
157/3: df.columns
157/4: set(df['ID'])
157/5: df.columns
157/6: !grep Kow Definitions.csv
157/7: set(df['Param'])
157/8: !grep Kow Definitions.csv
157/9: df.columns
157/10: !
157/11: !grep CAS *
157/12: df_ChNm=read_csv('ChemNames.csv')
157/13: df_ChNm.columns
157/14: set(df_ChNm['Name'])
157/15: df_ChNm[df_ChNm['Name'] like 'nickel']['CAS']
157/16: df_ChNm[df_ChNm['Name'] == 'Nickel']['CAS']
157/17: df_ChNm.columns
157/18: df_ChNm[df_ChNm['Name'] == 'Nickel']['CAS#']
157/19: spnam={'Nickel'}
157/20: Merury in set(df_ChNm['Name'])
157/21: 'Merury' in set(df_ChNm['Name'])
157/22: 'Mercury' in set(df_ChNm['Name'])
157/23: spnam=spnam+{'Mercury'}
157/24: spnam.add('Mercury')
157/25: spnam
157/26: 'Arsin' in set(df_ChNm['Name'])
157/27: 'Arsenic' in set(df_ChNm['Name'])
157/28: spnam.add('Arsenic')
157/29: 'Beryllium' in  set(df_ChNm['Name'])
157/30: spnam.add('Beryllium')
157/31: 'Antimony' in  set(df_ChNm['Name'])
157/32: spnam.add('Antimony')
157/33: 'Selenium' in  set(df_ChNm['Name'])
157/34: spnam.add('Selenium')
157/35: 'Cobalt' in  set(df_ChNm['Name'])
157/36: spnam.add('Cobalt')
157/37: 'Lead' in  set(df_ChNm['Name'])
157/38: spnam.add('Lead')
157/39: 'Cadmium' in  set(df_ChNm['Name'])
157/40: spnam.add('Cadmium')
157/41: spnam
157/42: 'Chromium' in  set(df_ChNm['Name'])
157/43: history
157/44: boo=df_ChNm['Name'].map(lambda x: 'Chromium' in x)
157/45: df_ChNm[boo]['CAS#']
157/46: df_ChNm[boo]['Name']
157/47: spnam.add('Chromium(VI)')
157/48: 'Manganese' in  set(df_ChNm['Name'])
157/49: spnam.add('Manganese')
157/50: boo=df_ChNm['Name'].map(lambda x: 'Dioxin' in x)
157/51: df_ChNm[boo]['Name']
157/52: 'Dioxin' in  set(df_ChNm['Name'])
157/53: 'dioxin' in  set(df_ChNm['Name'])
157/54: 'dioxins' in  set(df_ChNm['Name'])
157/55: 'Dioxins' in  set(df_ChNm['Name'])
157/56: 'TDCC' in  set(df_ChNm['Name'])
157/57: '1,4-dioxin' in  set(df_ChNm['Name'])
157/58: boo=df_ChNm['Name'].map(lambda x: 'dioxin' in x)
157/59: df_ChNm[boo]['Name']
157/60: boo=df_ChNm['Name'].map(lambda x: 'diox' in x)
157/61: df_ChNm[boo]['Name']
157/62: boo=df_ChNm['Name'].map(lambda x: 'chloro' in x)
157/63: df_ChNm[boo]['Name']
157/64: set_nm=set(df_ChNm['Name'])
157/65: lis_nm=list(set_nm)
157/66: len(lis_nm)
157/67: import re
157/68: 'Tetrachlorodibenzodioxin' in lis_nm
157/69: 'dioxin' in lis_nm
157/70: boo=df_ChNm['Name'].map(lambda x: 'tetrachlorodibenzo' in x)
157/71: df_ChNm[boo]['Name']
157/72: boo=df_ChNm['Name'].map(lambda x: 'chloro' in x)
157/73: df_ChNm[boo]['Name']
157/74: boo=df_ChNm['Name'].map(lambda x: '2,3,7,8' in x)
157/75: df_ChNm[boo]['Name']
157/76: boo=df_ChNm['Name'].map(lambda x: 'CDD' in x)
157/77: df_ChNm[boo]['Name']
157/78: boo=df_ChNm['Name'].map(lambda x: 'DD' in x)
157/79: df_ChNm[boo]['Name']
157/80: boo=df_ChNm['Name'].map(lambda x: 'CDF' in x)
157/81: df_ChNm[boo]['Name']
157/82: a=set(df_ChNm[boo]['Name'])
157/83: boo=df_ChNm['Name'].map(lambda x: 'CDD' in x)
157/84: a=set(df_ChNm[boo]['Name'])
157/85: a
157/86: spnm.add(a)
157/87: spnam.add(a)
157/88: spname
157/89: spnam
157/90: a=list(df_ChNm[boo]['Name'])
157/91: spnam.add(a)
157/92: spnam.add(df_ChNm[boo]['Name'])
157/93: history
157/94: a
157/95:
for i in a:
    spnam.add(i)
157/96: spnam
157/97: sp_cas=[df_ChNm[df_ChNm['Name']==x]['CAS#'] for x in sp_nam]
157/98: spcas=[df_ChNm[df_ChNm['Name']==x]['CAS#'] for x in spnam]
157/99: sp_nam=list(spnam)
157/100: sp_cas=[df_ChNm[df_ChNm['Name']==x]['CAS#'] for x in sp_nam]
157/101: sp_cas
157/102: list(sp_cas)
157/103: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/104: sp_cas
157/105: sp_cas=[df_ChNm[df_ChNm['Name']==x]['CAS#'].reset_index for x in sp_nam]
157/106: sp_cas
157/107: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/108: history
157/109: df.columns
157/110: sp_Kow=[list(df[df['CAS']==x & df['Param']==69]['ParamVal']) for x in sp_cas]
157/111: df_Kow=df[df['Param']==69]
157/112: len(df_Kow)
157/113: sp_boo=[x in set(df_Kow['CAS']) for x in sp_cas]
157/114: len(sp_cas), len(set(sp_cas))
157/115: sp_cas
157/116: a=[]
157/117:
for i in sp_cas:
    for j in i:
        a.append(j)
157/118: a
157/119: sp_cas=a
157/120: history
157/121: sp_boo=[x in set(df_Kow['CAS']) for x in sp_cas]
157/122: df_spKow=DataFrame({'spnam':Series(sp_nam)},{'CAS':Series(sp_cas)},{'withKow':Series(sp_boo)})
157/123: df_spKow
157/124: sp_nam
157/125: sp_boo
157/126: df_spKow=DataFrame({'spnam':Series(sp_nam),'CAS':Series(sp_cas),'withKow':Series(sp_boo)})
157/127: df_spKow
157/128: !grep Kow Definitions.csv
157/129: history
157/130: !grep Kow Definitions.csv
157/131: sp_Kow
157/132: sp_Kow=[df[df_Kow['CAS']=x]['ParamVals'] for x in sp_cas]
157/133: sp_Kow=[df[df_Kow['CAS']==x]['ParamVals'] for x in sp_cas]
157/134: history
157/135:
for x in sp_cas:
    print len(df[df_Kow['CAS']=x]['ParamVals'])
157/136:
for x in sp_cas:
    print len(df[df_Kow['CAS']==x]['ParamVals'])
157/137: a=df[df_Kow['CAS']==x]['CAS']
157/138: x
157/139: df_Kow
157/140: len(df_Kow['CAS']),len(set(df_Kow['CAS']))
157/141: sp_cas
157/142: len(sp_cas),len(set(sp_cas))
157/143: history
157/144: len(df[df_Kow['CAS']==x])
157/145: len(df[df_Kow['CAS']==x]['CAS'])
157/146: x
157/147: a=df_Kow['CAS']
157/148: x in a
157/149: len(df_spKow)
157/150: df_spKow.sort_values(boo)
157/151: len(boo)
157/152: df_spKow.columns
157/153: df_spKow.sort_values(withKow)
157/154: df_spKow.sort_values('withKow')
157/155: df_spKow.drop(df_spKow[df_spKow['withKow']==False].index, inplace=True)
157/156: df_spKow
157/157: history
157/158: history
157/159: sp_Kow=[df_Kow[df_Kow['CAS']==x]['ParamVals'] for x in list(df_spKow['CAS'])]
157/160: df_Kow.columns
157/161: sp_Kow=[df_Kow[df_Kow['CAS']==x]['ParamVal'] for x in list(df_spKow['CAS'])]
157/162: sp_Kow
157/163: sp_Kow=list([df_Kow[df_Kow['CAS']==x]['ParamVal'] for x in list(df_spKow['CAS'])])
157/164: sp_Kow
157/165: sp_Kow=[list(df_Kow[df_Kow['CAS']==x]['ParamVal']) for x in list(df_spKow['CAS'])]
157/166: sp_Kow
157/167: history
157/168: a=[]
157/169: a=[]
157/170:
for i in sp_Kow:
    for j in i:
        a.append(j)
157/171: a
157/172: sp_Kow=a
157/173: history
157/174:
def unlist(InList):
        a=[]
        for i in InList:
                for j in i:
                        a.append(j)
                return a
157/175: df_spKow['Kow']=Series(sp_Kow)
157/176: df_spKow
157/177: len(sp_Kow)
157/178: len(df_spKow)
157/179: sp_Kow
157/180: df_spKow
157/181: sp_nam
157/182: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/183: sp_cas=unlist(sp_cas)
157/184: sp_cas
157/185: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/186: sp_cas
157/187: a=unlist(sp_cas)
157/188: a
157/189: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/190: sp_cas=[j for j in i for i in sp_cas]
157/191: sp_cas
157/192: sp_cas=[list(df_ChNm[df_ChNm['Name']==x]['CAS#']) for x in sp_nam]
157/193: sp_cas
157/194: a=[j for j in i for i in sp_cas]
157/195: a
157/196: a=[[j for j in i] for i in sp_cas]
157/197: a
157/198: a=[]
157/199: a=[]
157/200:
for i in sp_cas:
    for j in i:
        a.append(j)
sp_cas=a
157/201: sp_cas
157/202: sp_boo=[x in set(df_Kow['CAS']) for x in sp_cas]
157/203: df_spKow=DataFrame({'spnam':Series(sp_nam),'CAS':Series(sp_cas),'withKow':Series(sp_boo)})
157/204: df_spKowdrop=df_spKow[df_spKow['withKow']==True]
157/205: df_spKowdrop
157/206: sp_Kow=[list(df_Kowdrop[df_Kowdrop ['CAS']==x]['ParamVal']) for x in list(df_spKowdrop['CAS'])]
157/207: sp_Kow=[list(df_Kow[df_Kow['CAS']==x]['ParamVal']) for x in list(df_spKowdrop['CAS'])]
157/208: sp_Kow
157/209: sp_Kow=unlist(sp_Kow)
157/210: sp_Kow
158/1: from pondas import *
158/2: from pandas import *
159/1: run rdKow.py
159/2: run rdKow.py
159/3: run rdKow.py
159/4: run rdKow.py
159/5: run rdKow.py
159/6: run rdKow.py
159/7: sp_Kow
159/8: unlist(sp_Kow)
159/9: a=unlist(sp_Kow)
159/10: a
159/11: sp_Kow=unlist(sp_Kow)
159/12: sp_Kow
159/13: run rdKow.py
159/14: sp_Kow
159/15: !grep csv /home/python_eg/*/*py
159/16: run rdKow.py
159/17: df_spKowdrop['Kow']=Series(sp_Kow)
159/18: df_spKowdrop
159/19: sp_Kow
159/20: df_spKowdrop=df_spKow[df_spKow['withKow']==True].reset_index
159/21: df_spKowdrop
159/22: df_spKowdrop=df_spKow[df_spKow['withKow']==True].set_index()
159/23: df_spKowdrop=df_spKow[df_spKow['withKow']==True].set_index('spnam')
159/24: df_spKowdrop
159/25: df_spKowdrop['Kow']=Series(sp_Kow)
159/26: df_spKowdrop
159/27: df_spKowdrop=df_spKow[df_spKow['withKow']==True].set_index(index)
159/28: df_spKowdrop=df_spKow[df_spKow['withKow']==True].reset_index()
159/29: df_spKowdrop
159/30: del df_spKowdrop['index']
159/31: df_spKowdrop
159/32: df_spKowdrop['Kow']=Series(sp_Kow)
159/33: df_spKowdrop
159/34: sp_Kow
159/35: cols
159/36: df_spKowdrop[cols].set_index('spnam').to_csv('sp_Kow.csv')
159/37: !grep boo ../../equations/eqn.txt
159/38: !vi ../../equations/eqn.txt
159/39: bool_Cfish=['Kow>10,'Kow<=10 and Kow > 4','Kow <= 4']
159/40: bool_Cfish=['Kow>10','Kow<=10 and Kow > 4','Kow <= 4']
159/41: !v
159/42: !vi ../../equations/eqn.txt
159/43: bool_Cfish_col=bool_Cfish
159/44: bool_Cfish=[df_spKowdrop['Kow']>6,df_spKowdrop['Kow']<=6&df_spKowdrop['Kow']> 4,df_spKowdrop['Kow'] <= 4]
159/45: boo[0]=df_spKowdrop['Kow']>6
159/46: boo=[]
159/47: boo[0]=df_spKowdrop['Kow']>6
159/48: boo.append(df_spKowdrop['Kow']>6)
159/49: boo.append(6>=df_spKowdrop['Kow']> 4)
159/50: boo.append(4<df_spKowdrop['Kow']<=6)
159/51: a=4<df_spKowdrop['Kow']<=6
159/52: a=df_spKowdrop['Kow']<=6&df_spKowdrop['Kow']>4
159/53: a=df_spKowdrop['Kow']<=6 and df_spKowdrop['Kow']>4
159/54: d=5
159/55: a=d<=6 and d>4
159/56: a
159/57: !vi ../../equations/eqn.txt
159/58: a=4<d<=6
159/59: a
159/60: boo=df_ChNm['Name'].map(lambda x: 'cury' in x)
159/61: a=list(df_ChNm[boo]['Name'])
159/62: a
159/63: run rd_cbm.py
159/64: run rdKow.py
159/65: run rdKow.py
159/66: df_spKowdrop
159/67: run rdKow.py
159/68: df_spKowdrop
159/69: history
159/70: df_spKowdrop=df_spKow[df_spKow['withKow']==True].reset_index()
159/71: df_spKowdrop
159/72: run rdKow.py
159/73: df_spKowdrop
159/74: run rdKow.py
159/75: df_spKowdrop
160/1: run rdKow.py
160/2: df_spKowdrop
160/3: sp_cas
160/4: df_spKow
160/5: df_spKowdrop
160/6: list(df_spKowdrop['CAS'])
160/7: list(df_spKowdrop['CAS'])[8]
160/8: x=list(df_spKowdrop['CAS'])[8]
160/9: df_Kow[df_Kow ['CAS']==x]['ParamVal']
160/10: df_Kow[df_Kow ['CAS']==x]
160/11: run rdKow.py
160/12: df_spKowdrop
160/13: !grep loc /home/python_eg/*/*py
160/14: [df_spKowdrop['spnam']=='Methyl Mercury','subX']=2.1
160/15: [df_spKowdrop['spnam']=='Methyl Mercury']['subX']=2.1
160/16: [df_spKowdrop['spnam']=='Methyl Mercury','Kow']=2.1
160/17: df_spKowdrop[df_spKowdrop['spnam']=='Methyl Mercury','Kow']=2.1
160/18: df_spKowdrop[df_spKowdrop['spnam']=='Methyl Mercury']['Kow']=2.1
160/19: !grep loc /home/python_eg/*/*py
160/20: df_spKowdrop[df_spKowdrop['spnam'].map(lambda x: x=='Methyl Mercury'),'Kow']=2.1
160/21: !grep loc /home/python_eg/*/*py
160/22: df_spKowdrop.loc[df_spKowdrop['spnam']=='Methyl Mercury']['Kow']=2.1
160/23: df_spKowdrop.loc[df_spKowdrop['spnam'].map(lambda x: x=='Methyl Mercury'),'Kow']=2.1
160/24: df_spKowdrop
160/25: run rdKow.py
160/26: df_spKowdrop
160/27: !grep sort_values /home/python_eg/*/*py
160/28: df_spKowdrop.sort_values(['Kow'])
160/29: df_spKowdrop[cols].set_index('spnam').sort_values(['Kow']).to_csv('sp_Kow.csv')
160/30: !cat sp_Kow.csv
160/31: !vi ../../equations/eqn.txt
160/32: !grep Kdsw *
160/33: nam_K=['Kow','Kdsw']
160/34: cols=['spnam','CAS']+nam_K
160/35: cols
160/36: i_K=[69,67]
160/37:
for iK in i_K:
    namK=nam_K[i_K(iK)]
    print namK
160/38:
for iK in i_K:
    namK=nam_K[i_K.index(iK)]
    print namK
160/39:
for iK in i_K:
    namK=nam_K[i_K.index(iK)]
    print namK
    df_+namK=df[df['Param']==iK]
160/40:
for iK in i_K:
    df_K='df_'+nam_K[i_K.index(iK)]
    print namK
    df_K=df[df['Param']==iK]
160/41: df_Ksw
160/42: df_Kdsw
160/43: df_K
160/44: nam_K
160/45: i_K
160/46:
for iK in i_K:
    df_K='df_'+nam_K[i_K.index(iK)]
    print df_K
    df_K=df[df['Param']==iK]
160/47: run rdKow.py
160/48: run rdKow.py
160/49: run rdKow.py
160/50: !ls *.csv -lrt
160/51: !rm sp_K*
160/52: !ls *.csv -lrt
160/53: run rdKow.py
160/54: !ls *.csv -lrt
160/55: !more sp_Kdsw.csv
160/56: run rdKow.py
160/57: run rdKow.py
160/58: run rdKow.py
160/59: run rdKow.py
160/60: run rdKow.py
160/61: run rdKow.py
160/62: run rdKow.py
160/63: run rdKow.py
160/64: !vi ../../equations/eqn.txt
160/65: !grep Kdbs *
160/66: !v
160/67: !vi ../../equations/eqn.txt
160/68: !grep BSAF *
160/69: !vi ../../equations/eqn.txt
160/70: !grep BSAF *.csv
160/71: !grep BAF *.csv
160/72: !vi ../../equations/eqn.txt
160/73: !grep BCF *.csv
160/74: !vi ../../equations/eqn.txt
160/75: !grep Da *.csv
160/76: !grep Da D*.csv
160/77: !vi ../../equations/eqn.txt
160/78: !grep Dw D*.csv
160/79: !vi ../../equations/eqn.txt
160/80: !grep -b1 look ../../equations/eqn.txt
160/81: !grep -b1 look ../../equations/eqn.txt
160/82: !grep Henr D*.csv
160/83: !grep Kds D*.csv
160/84: run rdKow.py
160/85: !grep BCFfish D*.csv
160/86: i_K[nam_K.index(BCFfish)]
160/87: i_K[nam_K.index('BCFfish')]
160/88: run rdKow.py
160/89: ls
160/90: df_final=DataFrame({'spnam':Series(sp_nam)})
160/91: df_final.merge(df_spK_Drop,how='left', left_on='spnam', right_on='spnam')
160/92: df_final
160/93: df_final=df_final.merge(df_spK_Drop,how='left', left_on='spnam', right_on='spnam')
160/94: df_final
160/95: df_final=df_final.merge(df_spK_Drop,how='left', left_on='spnam', right_on='spnam')
160/96: df_final
160/97: run rdKow.py
160/98: df_final
160/99: run rdKow.py
160/100: cols
160/101: df_final.columns
160/102: df_final[cols].set_index('spnam').sort_values('spnam').to_csv('sp_all.csv')
160/103: df_final[cols].set_index('spnam').to_csv('sp_all.csv')
160/104: df_final.columns
160/105: df_final
160/106: cols=['spnam','CAS_x']+nam_K
160/107: df_final[cols].set_index('spnam').to_csv('sp_all.csv')
161/1: run rd_cbm.py
161/2: set_nam=set(df_ln['name'])
161/3: len(df_ln), len(set_nam)
161/4: count_nam=[name.count(x) for x in name]
161/5: count_nam
161/6: count_nam.index(2)
161/7: name[2:6]
161/8: name[2:7]
161/9: df_ln.ix[4]
161/10: df_ln.iloc[4]
161/11: del df_ln.iloc[4]
161/12: df_ln.drop(df_ln.index([4]))
161/13: df_ln.index
161/14: df_ln
161/15: df_ln.index.reset_index()
161/16: df_ln.index.reset_index
161/17: !grep reset /home/python_eg/*/*.py
161/18: df_ln.reset_index()
161/19: df_ln=df_ln.reset_index()
161/20: df_ln
161/21: df_ln.drop(df_ln.index([4]))
161/22: df_ln.drop(df_ln.index[[4]])
161/23: len(df_ln), len(set_nam)
161/24: df_ln=df_ln.drop(df_ln.index[[4]])
161/25: len(df_ln), len(set_nam)
161/26: count_nam=[name.count(x) for x in ln_df['name']]
161/27: count_nam=[name.count(x) for x in df_ln['name']]
161/28: count_nam.index(2)
161/29: a=df_ln['name']
161/30: a[0:6]
161/31: df_ln.reset_index()
161/32: df_ln=df_ln.reset_index()
161/33: a=df_ln['name']
161/34: a[0:6]
161/35: count_nam=[a.count(x) for x in df_ln['name']]
161/36: a=df_ln['name']
161/37: count_nam=[a.count(x) for x in a]
161/38: count_nam
161/39: len(count_nam)
161/40: count_nam.index(2)
161/41: count_nam=[a.count(x) for x in df_ln['name'])
161/42: count_nam=[a.count(x) for x in df_ln['name']]
161/43: count_nam=[a.count(x) for x in list(df_ln['name'])]
161/44: a
161/45: len(set(a)),len(a)
161/46: count_nam=[a.count(x) for x in df_ln['name']]f
161/47: [x in df_ln['name']]
161/48: [x for x in df_ln['name']]
161/49: count_nam=[a.count(x) for x in df_ln['name']]
161/50: count_a=[a.count(x) for x in df_ln['name']]
161/51: a.count('Methan')
161/52: df_ln.drop_duplicates( inplace=True)
161/53: len(df_ln)
161/54: a=df_ln['name']
161/55: len(set(a))
161/56: run rd_cbm.py
161/57: len(df_ln), len(set(df_ln['name']))
161/58: !more cbm_cb5.csv
161/59: !pip install cirpy
161/60: import cirpy
161/61: cirpy.resolve('Aspirin', 'smiles')
161/62: cirpy.resolve('Aspirin', 'cas')
161/63: name=df_ln['name']
161/64: cas=[cirpy.resolve(x,'cas') for x in name]
161/65: cas
161/66: cas=[cirpy.resolve(x,'cas') for x in name[0:5]]
161/67: cas
161/68: name[4]
161/69: cirpy.resolve('isobutane', 'cas')
161/70: cirpy.resolve('2-methylpropane', 'cas')
161/71: boo=[';' in x for x in name]
161/72: boo[0:20]
161/73: df_ln[df_ln['name'].map(lambda x: ';' in x)]['name']
161/74: history|grep drop
161/75: history|!grep drop
161/76: history
161/77: df_ln.iloc[4]['name']
161/78: df_ln.iloc[4]['name']='isobutane'
161/79: df_ln.iloc[4]['name']
161/80: name.count('isobutane')
161/81: name
161/82: name.reset_index()
161/83: df_ln
161/84: df_ln.reset_index()
161/85: df_ln=df_ln.reset_index()
161/86: df_ln.drop_duplicates(inplace=True)
161/87: len(df_ln)
161/88: cas
161/89: history
161/90: !vi cbm_cb5.txt
161/91: history
161/92: name=df_ln['name']
161/93: name
161/94: d
161/95: run rd_cbm.py
161/96: d
161/97: df_ln
161/98: name
161/99: history
162/1: fron pandas import *
162/2: from pandas import *
162/3: df_ln =read_csv('cbm_cb5.csv')
162/4: df_ln.isnull().values.any()
162/5: df_ln['CAS'].isnull().values.any()
162/6: df_ln[df_ln['CAS'].isnull()]['name']
162/7: len(df_ln[df_ln['CAS'].isnull()]['name'])
162/8: !head rd_cbm.py
162/9: from cirpy import *
162/10: !grep cirpy *py
162/11: import cirpy
162/12: cas=cirpy.resolve('pentane','cas')
162/13: cas=cirpy.resolve('n-Pentane','cas')
162/14: cas=cirpy.resolve('Pentane','cas')
162/15: help cirpy
162/16: help(cirpy)
162/17: help(cirpy)
162/18: cas=cirpy.resolve('Pentane','iupac_name')
162/19: cas=cirpy.resolve('Pentane','Molecular')
162/20: help(cirpy)
162/21: help(cirpy)
162/22: cas=cirpy.resolve('Pentane','formula')
162/23: cas=cirpy.resolve('Methane','formula')
162/24: cas=cirpy.resolve('Methane','cas')
162/25: cas=cirpy.resolve('methane','cas')
162/26: cas
162/27: cirpy.resolve('Methane','formula')
162/28: cas=cirpy.resolve('Pentane','cas')
162/29: cas
162/30: cas=cirpy.resolve('pentane','cas')
162/31: cas
162/32: df_ln[df_ln['CAS'].isnull()]['name']
162/33: !pwd
162/34: df_ln[df_ln['name'].map(lambda x: 'isomers' in x)]['name']
162/35: df_ln[df_ln['name'].map(lambda x: 'isomers of' in x)]['name']
162/36:
def clean_name(name):
    w=[i for i in name.split()]
    if len(w) >=3:
        w2=[w[i]+' '+w[i+1] for i in xrange(len(w)-1)]
        for i in w2:
            if i=='isomers of'
162/37:
def clean_name(name):
    w=[i for i in name.split()]
    name_tmp=''
    for i in w:
        if i[0]!='(' and i[len(i)-1]!=')' and i!='isomers' and i!='of':
            name_tmp=name_tmp+' '+i    
    return name_tmp
162/38: name
162/39: name=list(df_ln['name'])
162/40: name
162/41: name2=[clean_name(x) for x in name]
162/42: name2
162/43: df_ln['name2']=Series(name2)
162/44: df_ln
162/45: df_ln=df_ln.reset_index()
162/46: df_ln
162/47: cols
162/48: df_ln =read_csv('cbm_cb5.csv')
162/49: cols=df_ln.columns
162/50: cols
162/51: df_ln['name2']=Series(name2)
162/52: cols=['name2']+cols
162/53: df_ln[cols].set_index('name').to_csv('tmp.csv')
162/54: cols
162/55: df_ln
162/56: cols=df_ln.columns
162/57: cols.insert(0,'name2')
162/58: cols=cols.insert(0,'name2')
162/59: df_ln[cols].set_index('name').to_csv('tmp.csv')
162/60: cirpy.resolve('cumene','cas')
162/61: cirpy.resolve('isopropyl benzene','cas')
162/62:
def clean_name(name):
    w=[i for i in name.split()]
    name_tmp=''
    bac=['(',')','{','}']
    for i in w:
        if i[0] not in bac and i!='isomers' and i!='of':
            name_tmp=name_tmp+' '+i    
    return name_tmp
162/63: del df_ln['name2']
162/64: name2=[clean_name(x) for x in name]
162/65: del df_ln['CAS']
162/66: cas=[cirpy.resolve(x,'cas') for x in name2]
162/67: cas
162/68: cas=[cirpy.resolve(x,'cas') for x in name2]
162/69: history
162/70: cas
162/71: name[0:8]
162/72: cirpy.resolve('2-methyl-butane','cas')
162/73: !more tmp.csv
162/74: name[0:8]
162/75: name2[0:8]
162/76: cirpy.resolve(' pentane','cas')
162/77: cirpy.resolve('c5 paraffin','cas')
162/78: run rd_cbm.py
162/79: run rd_cbm.py
162/80: name
162/81: name2
162/82:
def clean_name(name):
    w=[i for i in name.split()]
    name_tmp=''
    bac=['(',')','{','}']
    for i in w:
        if i[0] not in bac and i!='isomers' and i!='of':
            name_tmp=name_tmp+' '+i    
    return name_tmp[1:]
162/83: name2=[clean_name(x) for x in name]
162/84: name2
162/85: cas=[cirpy.resolve(x,'cas') for x in name2]
162/86: cas=[cirpy.resolve(x,'cas') for x in name2[0:10]]
162/87: len(name2)
162/88:
for i in xrange(1,67):
    print i
    cas=[cirpy.resolve(x,'cas') for x in name2[(i-1)*10,i*10]]
162/89:
for i in xrange(1,67):
    print i
    cas=[cirpy.resolve(x,'cas') for x in name2[(i-1)*10:i*10]]
162/90:
for i in xrange(490,670):
    print i name2[i]
    cas=[cirpy.resolve(x,'cas') for x in name2[i:i+1]]
162/91:
for i in xrange(490,670):
    print i, name2[i]
    cas=[cirpy.resolve(x,'cas') for x in name2[i:i+1]]
163/1: run rd_cbm.py
163/2:
for i in xrange(49,50):
    print i
    cas=[cirpy.resolve(x,'cas') for x in name2[(i-1)*10:i*10]]
163/3:
for i in xrange(49,50):
    print i
    cas=[cirpy.resolve(x,'cas') for x in name2[(i-1)*10:i*10]]
    print cas
163/4:
for i in xrange(49,50):
    print i
    cas=[cirpy.resolve(x,'cas') for x in name2[(i-1)*10:i*10-5]]
163/5:
for i in xrange(490,670):
    print i, name2[i]
    cas=[cirpy.resolve(x,'cas') for x in name2[i:i+1]]
163/6:
cas=[]
for i in xrange(len(name2)):
    print i
    x=name2[i]
    cas.append(cirpy.resolve(x,'cas'))
163/7: print name[485]
163/8: print name2[485]
163/9: cirpy.resolve('2-methylpropyl-benzene','cas'))
163/10: cirpy.resolve('2-methylpropyl-benzene','cas')
163/11: !vi rd_cbm.py
163/12: name[name.index('(2-methylpropyl)benzene')]='2-methylpropyl-benzene'
163/13: !vi rd_cbm.py
163/14: name2=[clean_name(x) for x in name]
163/15:
for i in xrange(490,670):
    print i, name2[i]
    cas=[cirpy.resolve(x,'cas') for x in name2[i:i+1]]
163/16:
for i in xrange(480,670):
    print i, name2[i]
    cas=[cirpy.resolve(x,'cas') for x in name2[i:i+1]]
163/17: cas
163/18: !vi rd_cbm.py
163/19: run rd_cbm.py
163/20: cas
163/21: history
163/22: len(df_ln[df_ln['CAS'].isnull()]['name'])
163/23: df_ln[df_ln['CAS'].isnull()]['name']
163/24: cirpy.resolve('dimethylnonane','cas')
163/25: a=df_ln[df_ln['CAS'].isnull()]['name']
163/26: a.map(lambda x: x[len(x)-1]!='s')
163/27: a.map(lambda x: x[len(x)-1]!='s').count(True)
163/28: a.map(lambda x: x[len(x)-1]!='s').count('True')
163/29: b=[x for True in a.map(lambda x: x[len(x)-1]!='s')]
163/30: b
163/31: len(b)
163/32:
for j in xrange(len(name2)):
    i=nam2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j][leni]=''
163/33:
for j in xrange(len(name2)):
    i=name2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j][leni]=''
163/34: a='kuang'
163/35: a[4]=''
163/36: a[4]='a'
163/37:
for j in xrange(len(name2)):
    i=name2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j]=name2[:leni-1]+name2[leni].replace("s","")
163/38:
for j in xrange(len(name2)):
    i=name2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j]=name2[:leni-1]+name2[j][leni].replace("s","")
163/39:
for j in xrange(len(name2)):
    i=name2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j]=name2[j][:leni-1]+name2[j][leni].replace("s","")
163/40: history
163/41: df_ln[df_ln['CAS'].isnull()]['name2']
163/42: name2[667]
163/43: name2[665]
163/44: name2=[clean_name(x) for x in name]
163/45:
for j in xrange(len(name2)):
    i=name2[j]
    leni=len(i)-1
    if i[leni]=='s': name2[j]=name2[j][:leni]+name2[j][leni].replace("s","")
163/46: name2[665]
163/47: name2[667]
163/48: run rd_cbm.py
163/49: run rd_cbm.py
164/1: import cirpy
164/2: cirpy.resolve('sec-butyl benzene','cas')
164/3: a=['12345','abcdf']
164/4: a.index('a')
164/5: a.index('*a*')
164/6: a.index(*'a'*)
164/7: a.find('a')
164/8: b=[x.find('a') for x in a]
164/9: b
164/10: b=[x.find('d') for x in a]
164/11: b
163/50: name[name.find('sec-butyl benzene')]='sec-butyl benzene'
163/51: a=[x.find('sec-butyl benzene') for x in name ]
163/52: a.index(max(a))
163/53: name[483]
163/54: cirpy.resolve('vinylidene chloride','cas')
163/55: !grep vinylidene chloride cbm_cb5.txt
163/56: !grep '1,2-butadiene' cbm_cb5.txt
163/57: cirpy.resolve('b-phellandrene','cas')
163/58: cirpy.resolve('1(7)-2-p-menthadiene','cas')
163/59: cirpy.resolve('phellandrene','cas')
163/60: cirpy.resolve('1-2-p-menthadiene','cas')
163/61: cirpy.resolve('7-2-p-menthadiene','cas')
163/62: cirpy.resolve('menthadiene','cas')
163/63: !grep 'menthadiene' cbm_cb5.txt
163/64: cirpy.resolve('1,8-p-Menthadiene','cas')
163/65: cirpy.resolve('menthadienes','cas')
163/66: name.index('b-phellandrene {1(7)-2-p-menthadiene}')
163/67: name[210].index('(')
163/68: name[210].index(')')
163/69: name[210].index('{')
163/70: name[210].index('}')
163/71: name[210]=name[210][:15]+name[210][37:]
163/72: name[210]
163/73: df_ln.columns
163/74: df_ln['name']!=df_ln['name2']
163/75: boo=df_ln['name']!=df_ln['name2']
163/76: df_ln[boo]['name']['name2']
163/77: df_ln[boo]['name','name2']
163/78: df_ln[boo]['name']
163/79: len(df_ln[boo]['name'])
163/80:
for i in xrange(671):
    if name[i]!=name2[i]: print i,name[i],name2[i]
163/81:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],name2[i]
163/82:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
163/83: set('dimethylnaphthyridine')
163/84:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
163/85: set('   ')
163/86: set('  a')
163/87: run rd_cbm.py
163/88: run rd_cbm.py
163/89: !grep '1,2-butadiene' cbm_cb5.txt
163/90: string='1,2-butadiene'
163/91: a=[x.find(string) for x in name ]
163/92:  maxa=max(a)
163/93: maxa
163/94: name.index('1,2-butadiene')
163/95: name.index('1,2-butadiene {methylallene}')
163/96: x=name[638]
163/97: x.find(string)
163/98: x
163/99: string
163/100: string='1\,2-butadiene'
163/101: x.find(string)
163/102: x[-1]
163/103: x[0]
163/104: string
163/105: string='1\\,2-butadiene'
163/106: string
163/107: x.find(string)
163/108: !grep 'butadiene' cbm_cb5.txt
163/109: string
163/110: string='1 2-butadiene'
163/111: x.find(string)
163/112: x
163/113: string='-butadiene'
163/114: x.find(string)
163/115: string='2-butadiene'
163/116: x.find(string)
163/117: cirpy.resolve('2-butadiene','cas')
163/118: history
163/119:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
163/120:  name.index('di(propylene glycol) methyl ether')
163/121: string
163/122: string.index('}')
163/123: string.find('}')
163/124: string.find('')
163/125: string.find('C')
163/126: string.find(',')
163/127: string='1,2-butadiene'
163/128: string.find(',')
165/1: from pandas import *
165/2: import cirpy
165/3: run rd_cbm.py
165/4:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
165/5: name[1]
165/6:
for i in xrange(671):
    if set(name[1:i])!=set(name2[i]): print i,name[i],':',name2[i]
165/7: name2[1]
165/8: name[648]
165/9: name[648][1:]
165/10: name2[648]
165/11: set(name[648][1:])==set(name2[648])
165/12:
for i in xrange(671):
    if set(name[1:i])!=set(name2[i]): print i,name[1:i],':',name2[i]
165/13:
for i in xrange(671):
    if set(name[i][1:])!=set(name2[i]): print i,name[i],':',name2[i]
165/14: name[638],name2[638]
165/15: name[638]==name2[638]
165/16: run rd_cbm.py
165/17: run rd_cbm.py
165/18: name.index('sec-butyl benzene')
165/19: name.index(' sec-butyl benzene')
165/20: name2.index(' sec-butyl benzene')
165/21: name2.index('sec-butyl benzene')
165/22: !grep 'sec-butyl benzene' cbm_cb5.txt
165/23: name2.index('(1-methylpropyl)benzene (sec-butyl benzene')
165/24: name2.index(' (1-methylpropyl)benzene (sec-butyl benzene')
165/25: name.index(' (1-methylpropyl)benzene (sec-butyl benzene')
165/26: name2[483]
165/27: run rd_cbm.py
165/28: name.index(' (1-methylpropyl)benzene (sec-butyl benzene')
165/29: name.index('(1-methylpropyl)benzene (sec-butyl benzene')
165/30: name[483]
165/31: name2[483]
165/32: history
165/33: name[638]==name2[638]
165/34: name[638]
165/35: run rd_cbm.py
165/36:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
165/37: run rd_cbm.py
165/38:
for i in xrange(671):
    if set(name[i])!=set(name2[i]): print i,name[i],':',name2[i]
165/39: !cd ../SPECIATE4.5/
165/40: !ls
165/41: !ls ../SPECIATE4.5/
165/42: fname='../SPECIATE4.5/SPECIATE 4.5 9-25-2016 - sent toEPA.mdb'
165/43: fname
165/44: import mdbtools
165/45: !pip install mdbtools
165/46: import mdbtools as mt
165/47: !pip install pymongo
165/48: import mdbtools as mt
165/49: run rd_cbm.py&
165/50: run rd_cbm.py
165/51: !lst
165/52: !more cbm_cb5.csv
165/53: df_ln[df_ln['CAS'].isnull()]['name']
165/54: cirpy.resolve('cis-1-methyl-3-ethyl cyclo pentane','cas')
165/55: cirpy.resolve('cis-1-methyl-3-ethylcyclopentane','cas')
165/56: cirpy.resolve('1-methyl-3-ethylcyclopentane','cas')
165/57: name[name.index('(2-methylpropyl)benzene')]='2-methylpropyl-benzene'
165/58: name[name.index('cis-1-methyl-3-ethyl cyclo pentane')]='1-methyl-3-ethylcyclopentane'
165/59: name[name.index('cis-1-methyl-3-ethylcyclopentane')]='1-methyl-3-ethylcyclopentane'
165/60: history
165/61: df_ln[df_ln['CAS'].isnull()]['name']
165/62: cirpy.resolve('alkyl cyclohexane','cas')
165/63: cirpy.resolve('methyl cyclohexane','cas')
165/64: cirpy.resolve('dimethyl cyclohexane','cas')
165/65: cirpy.resolve('ethyl cyclohexane','cas')
165/66: name[name.index('c8 alkyl cyclohexanes')]='ethyl cyclohexane'
165/67: cirpy.resolve('propenyl cyclohexane','cas')
165/68: cirpy.resolve('propyl cyclohexane','cas')
165/69: cirpy.resolve('1-propenyl cyclohexane','cas')
165/70: cirpy.resolve('propenylcyclohexane','cas')
165/71: cirpy.resolve('1-propenylcyclohexane','cas')
165/72: cirpy.resolve('prop-1-en-1-ylcyclohexane','cas')
165/73: df_ln.loc[df_ln['name'].map(lambda x: x=='propenylcyclohexane'),'CAS']='5364-83-0'
165/74: df_ln[df_ln['CAS'].isnull()]['name']
165/75: cirpy.resolve('ethyl bicycloheptane','cas')
165/76: cirpy.resolve('ethyl bicyclo heptane','cas')
165/77: cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
165/78: fname
165/79: fname2='../SPECIATE4.5/SPECIES_PROPERTIES.csv'
165/80: df_sp=read_csv(fname2)
165/81: df_sp.columns
165/82: df_sp['NAME']==x
165/83: history
165/84:
for i in cas_not_found:
    if i in df_sp['NAME']: print i
165/85: cas_not_found
165/86:
for i in list(cas_not_found):
    if i in df_sp['NAME']: print i
165/87: cas_not_found=list(cas_not_found)
165/88: cas_not_found
165/89:
for i in list(cas_not_found):
    if i.caseford() in df_sp['NAME']: print i
165/90:
for i in list(cas_not_found):
    if i.casefold() in df_sp['NAME']: print i
165/91:
for i in list(cas_not_found):
    if i.upper() in df_sp['NAME']: print i
165/92: df_sp['NAME']
165/93: sp_name=list(df_sp['NAME'])
165/94: sp_name=[x.upper() for x in sp_name]
165/95: sp_name
165/96: sp_name=[x.lower() for x in sp_name]
165/97:
for i in list(cas_not_found):
    if i in df_sp['NAME']: print i
165/98: sp_name
165/99: cas_not_found
165/100: sp_name.index('c-')
165/101: a=[x.find('c-') for x in sp_name]
165/102: max(a)
165/103: sp_name[a.index(30)]
165/104: name.index( '(1-methylpropyl)benzene (or sec-butylbenzene)')
165/105: a=[x.find('sec-butylbenzene') for x in name]
165/106: max(a)
165/107: a=[x.find('c-7') for x in sp_name]
165/108: max(a)
165/109: a=[x.find('c-8') for x in sp_name]
165/110: max(a)
165/111: a=[x.find('c-9') for x in sp_name]
165/112: max(a)
165/113: sp_name
165/114: history
165/115: df_sp[df_sp['CAS'].isnull()]['NAME']
165/116: cas_not_found_sp=list(df_sp[df_sp['CAS'].isnull()]['NAME'])
165/117: cas_not_found_sp=[x.lower() for x in cas_not_found_sp ]
165/118: len(cas_not_found), len(cas_not_found_sp)
165/119: cas_not_found_sp
165/120: cas_sp=[cirpy.resolve(x,'cas') for x in cas_not_found_sp]
165/121: cas_sp[:50]
165/122: cas_sp[50:100]
165/123: df1=DataFrame({'cas2':Series(cas_sp),'name2':Series(cas_not_found_sp)})
165/124: history
165/125: df_sp[df_sp['CAS'].isnull()]['NAME']
165/126: df_sp[df_sp['CAS'].isnull()]['NAME']
165/127: df1[df1['cas2'].isnull()]['name2']
165/128: len(df1)
166/1: !pwd
166/2: run rd_cbm.py
166/3: df_ln
166/4: df_ln=read_csv('cbm_cb5.csv')
166/5: df_ln
166/6: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/7: cas_not_found
166/8: !grep napthalene cbm_cb5.txt
166/9: !sed 's/napthalene/naphthalene/g' cbm_cb5.txt
166/10: !grep napthalene cbm_cb5.txt
166/11: !grep napthalene cbm_cb5.txt>cbm_cb5.txt.v2
166/12: !diff cbm_cb5.txt cbm_cb5.txt.v2
166/13: !grep napthalene cbm_cb5.txt
166/14: !grep naphthalene cbm_cb5.txt
166/15: run rd_cbm.py
166/16: cirpy.resolve('dihydroxynaphthalenedione','cas')
166/17: cirpy.resolve('dihydroxynaphthalene dione','cas')
166/18: cirpy.resolve('naphthalene','cas')
166/19: df_ln.loc[df_ln['name']=='naphthalene','CAS']=['72931-45-4', '68412-25-9', '91-20-3']
166/20: df_ln.loc[df_ln['name'].map(lambda x: x=='naphthalene'),'CAS']=['72931-45-4', '68412-25-9', '91-20-3']
166/21: df_ln.loc[df_ln['name'].map(lambda x: x=='naphthalene'),'CAS']='['72931-45-4', '68412-25-9', '91-20-3']'
166/22: df_ln.loc[df_ln['name'].map(lambda x: x=='naphthalene'),'CAS']="['72931-45-4', '68412-25-9', '91-20-3']"
166/23: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/24: len(cas_not_found)
166/25: df_ln=read_csv('cbm_cb5.csv')
166/26: df_ln.loc[df_ln['name'].map(lambda x: x=='naphthalene'),'CAS']="['72931-45-4', '68412-25-9', '91-20-3']"
166/27: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/28: len(cas_not_found)
166/29: cas_not_found
166/30: df_ln.loc[df_ln['name'].map(lambda x: x=='napthalene'),'name']="naphthalene"
166/31: df_ln.loc[df_ln['name'].map(lambda x: x=='naphthalene'),'CAS']="['72931-45-4', '68412-25-9', '91-20-3']"
166/32: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/33: cas_not_found
166/34: len(cas_not_found)
166/35: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl napthalenes'),'name']="dimethyl naphthalene"
166/36: cirpy.resolve('dimethyl naphthalene','cas')
166/37:
df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'name']="['1335-93-9',
 '27457-31-4',
 '28804-88-8',
 '65338-04-7',
 '65338-08-1',
 '573-98-8']
"
166/38: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'name']="['1335-93-9', '27457-31-4', '28804-88-8', '65338-04-7', '65338-08-1', '573-98-8']"
166/39: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/40: len(cas_not_found)
166/41: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'name']='dimethyl naphthalene'
166/42: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'CAS']="['1335-93-9', '27457-31-4', '28804-88-8', '65338-04-7', '65338-08-1', '573-98-8']"
166/43: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/44: len(cas_not_found)
166/45: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl napthalenes'),'name']='dimethyl naphthalene'
166/46: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'CAS']="['1335-93-9', '27457-31-4', '28804-88-8', '65338-04-7', '65338-08-1', '573-98-8']"
166/47: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/48: len(cas_not_found)
166/49: df_ln['name']=Series(name)
166/50: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'CAS']="['1335-93-9', '27457-31-4', '28804-88-8', '65338-04-7', '65338-08-1', '573-98-8']"
166/51: df_ln[df_ln['name'].map(lambda x: x=='dimethyl naphthalene'),'CAS']
166/52: df_ln[df_ln['name'].map(lambda x: x=='dimethyl naphthalene')]
166/53: df_ln[df_ln['name'].map(lambda x: x=='dimethyl napthalenes')]
166/54: df_ln[df_ln['name'].map(lambda x: 'napthalenes' in x)]
166/55: df_ln[df_ln['name'].map(lambda x: 'naphthalenes' in x)]
166/56: df_ln['name2']=Series(name2)
166/57: df_ln[df_ln['name'].map(lambda x: 'naphthalenes' in x)]
166/58: df_ln.loc[df_ln['name2'].map(lambda x: x=='dimethyl naphthalene'),'CAS']="['1335-93-9', '27457-31-4', '28804-88-8', '65338-04-7', '65338-08-1', '573-98-8']"
166/59: df_ln[df_ln['name'].map(lambda x: 'naphthalenes' in x)]
166/60: cas_not_found=list(df_ln[df_ln['CAS'].isnull()]['name'])
166/61: len(cas_not_found)
166/62: cas_not_found
166/63: name.index('m-xylene and p-xylene')
166/64: df_ln.loc[435]
166/65: len(df_ln)
166/66: df_ln.loc[671]
166/67: df_ln.loc[671]=df_ln[435]
166/68: df_ln.loc[671]=df_ln.loc[435]
166/69: len(df_ln)
166/70: cas_not_found
166/71: cirpy.resolve('methyl dihydro naphthalene','cas')
166/72: cirpy.resolve('2-Methyl-3,4-dihydronaphthalene','cas')
166/73: cirpy.resolve('1-methyl-3-ethylcyclopentane','cas')
166/74: df_ln[df_ln['name'].map(lambda x: '1-methyl-3-ethylcyclopentane' in x)]
166/75: cirpy.resolve('methylbutene','cas')
166/76: cirpy.resolve('methyl butene','cas')
166/77: cirpy.resolve('dimethyl naphthyridine','cas')
166/78: cirpy.resolve('dimethyl naphthy ridine','cas')
166/79: cirpy.resolve('2,6-Dimethyl-1,8-naphthyridine','cas')
166/80: cirpy.resolve('4,4-methylenedianiline','cas')
166/81: cirpy.resolve('4,4-methylene dianiline','cas')
166/82: cirpy.resolve('methylene dianiline','cas')
166/83: !grep diisocyanate cbm_cb5.txt
166/84: !grep isocyanate cbm_cb5.txt
166/85: cirpy.resolve('p-Tolyl isocyanate','cas')
166/86: a=read_csv('diMethyAkylAmines.csv')
166/87: a
166/88: a=list(a)
166/89: a
166/90: a=read_csv('diMethyAkylAmines.csv').reset_index()
166/91: a
166/92: a=read_csv('diMethyAkylAmines.csv')
166/93: b=list(a)
166/94: b
166/95: a=read_csv('diMethyAkylAmines.csv')
166/96: b=list(a['name'])
166/97: a
166/98: a=read_csv('diMethyAkylAmines.csv')
166/99: a
166/100: a=read_csv('diMethyAkylAmines.csv')
166/101: a
166/102: b=list(a['name'])
166/103: b
166/104: history df_ln
166/105: history
166/106: df_ln[df_ln['name'].map(lambda x: x[len(x)-1]=='s'),'name']
166/107: df_ln['name'].map(lambda x: x[len(x)-1]=='s']
166/108: df_ln.loc[df_ln['name'].map(lambda x: x[len(x)-1]=='s'),'name']
166/109:
fname2='../SPECIATE4.5/SPECIES_PROPERTIES.csv'
df_sp=read_csv(fname2)
166/110: df_lnS=list(df_ln.loc[df_ln['name'].map(lambda x: x[len(x)-1]=='s'),'name'])
166/111: df_spS=list(df_sp.loc[df_ln['NAME'].map(lambda x: x.lower[len(x)-1]=='s'),'NAME'])
166/112: df_sp.columns
166/113: df_spS=list(df_sp.loc[df_sp['NAME'].map(lambda x: x.lower[len(x)-1]=='s'),'NAME'])
166/114: df_spS=list(df_sp.loc[df_sp['NAME'].map(lambda x: x[len(x)-1]=='S'),'NAME'])
166/115: df_spS
166/116: df_spS=list(df_sp.loc[df_sp['NAME'].map(lambda x: x[len(x)-1]=='s'),'NAME'])
166/117: df_spS
166/118: df_sp.loc[df_sp['NAME'].map(lambda x: x[len(x)-1]=='s'),'NAME']
166/119: history
166/120: !pip install fuzzywuzzy
166/121: from fuzzywuzzy import fuzz
166/122: !pip install python-Levenshtein
166/123: from fuzzywuzzy import fuzz
166/124: df_spS
166/125: mtch=[]
166/126:
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append((i,df_spS[a.index(max(a))]))
166/127: mtch[:10]
166/128: mtch
166/129:
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append((i,df_spS[a.index(max(a))],max(a)))
166/130: mtch
166/131: mtch[100]
166/132: mtch[100][0]
166/133: mtch[100][1]
166/134: mtch[100][2]
166/135: mtch[]
166/136: mtch=[]
166/137:
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append((i,df_spS[a.index(max(a))],max(a)))
166/138: df_match=DataFrame({'cas_not_found':Series(mtch[:][0]),'SPECIATE NAME':Series(mtch[:][1]),'match ratio':Series(mtch[:][2])})
166/139: df_match.sort_values('match ratio')
166/140: match[0][:]
166/141: a=[x for x in match[:][0]]
166/142: mtch[:5][0]
166/143: mtch=[list(x) for x in mtch]
166/144: mtch[:5]
166/145: mtch[:5][1]
166/146: mtch0=[x[0] for x in mtch]
166/147: mtch0[:50]
166/148: mtch0[:5]
166/149: mtch[:5]
166/150: df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
166/151: df_match[:5]
166/152: df_match.sort_values('match ratio')
166/153: df_match.sort_values('match ratio')[100:]
166/154: history
166/155:
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
166/156: df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
166/157: df_match.sort_values('match ratio')[100:]
166/158: df_match.sort_values('match ratio')[90:]
166/159: df_match=df_match.sort_values('match ratio')
166/160: df_match[90<=df_match['match ratio']<100]
166/161: df_match[df_match['match ratio'].map(lambda x: 90<=x<100)]
166/162: df_match[df_match['match ratio'].map(lambda x: 80<=x<90)]
166/163: len(df_match[df_match['match ratio'].map(lambda x: x>=90)])
166/164: len(cas_not_found)
166/165: df_match[df_match['match ratio'].map(lambda x: x>=90)]
166/166: df_match[df_match['match ratio'].map(lambda x: x<90)]
166/167: df_match[df_match['match ratio'].map(lambda x: x<60)]
166/168: cas_not_found2=list(df_ln[df_ln['CAS'].isnull()]['name2'])
166/169:
mtch=[]
for i in cas_not_found2:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
166/170: df_match2=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio2':Series([x[2] for x in mtch])}).sort_values('cas_not_found')
166/171: df_match=df_match.sort_values('cas_not_found')
166/172: !grep merge /home/HRA/HHRAP_usepa/database/rd_mdb/*py
166/173: df_final=df_match.merge(df_match2,how='left', left_on='cas_not_found', right_on='cas_not_found')
166/174: df_final[:10]
166/175: df_match2[100:]
166/176: df_match2=df_match2.sort_values('match ratio2')
166/177: df_match2[100:]
166/178: df_match2[80:]
166/179: df_match2[60:80]
166/180: history
166/181: len(df_match2[df_match2['match ratio2'].map(lambda x: x>=88)])
166/182: df_match2[60:80]
166/183: df_match2[:60]
166/184: df_match2[:30]
166/185: df_match=df_match.sort_values('match ratio')
166/186: history
166/187: mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)])
166/188: cas_not_found_still=cas_not_found.map(lambda x: x not in mtch90)
166/189: cas_not_found_still=(x not in mtch90, cas_not_found)
166/190: len(cas_not_found_still)
166/191: cas_not_found_still
166/192: len(cas_not_found_still)
166/193: set(cas_not_found)-set(mtch90)
166/194: len(set(cas_not_found)-set(mtch90))
166/195: len(set(cas_not_found))
166/196: mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)])
166/197: mtch90=[x.lower() x in mtch90]
166/198: mtch90=[x.lower() for x in mtch90]
166/199: len(set(cas_not_found)-set(mtch90))
166/200: len(set(cas_not_found)& set(mtch90))
166/201: set(cas_not_found)
166/202: set(mtch90)
166/203: df_match[df_match['match ratio'].map(lambda x: x>=90)]
166/204: df_match[df_match['match ratio'].map(lambda x: x>=90)]['cas_not_found']
166/205: list(df_match[df_match['match ratio'].map(lambda x: x>=90)]['cas_not_found'])
166/206: mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)]['cas_not_found'])
166/207: len(set(cas_not_found)& set(mtch90))
166/208: len(set(cas_not_found)- set(mtch90))
166/209: cas_not_found_still=list(set(cas_not_found)- set(mtch90))
166/210: cas_not_found_still
166/211: cas_not_found_still.sort_values()
166/212: cas_not_found_still.sort_values
166/213: cas_not_found_still.sort
166/214: cas_not_found_still.sort()
166/215: cas_not_found_still.sort()
166/216: cas_not_found_still
166/217: !pwd
166/218: df_ln=read_csv('cbm_cb5.csv')
166/219: cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
166/220: len(cas_not_found)
166/221:
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
166/222: history
166/223: df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
166/224: df_match[df_match['match ratio'].map(lambda x: x>=90)]
166/225:
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
166/226: df_match[df_match['match ratio'].map(lambda x: x>=90)]
166/227: df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/228: cirpy.resolve('ethyl pentene','cas')
166/229: cirpy.resolve('2-Ethyl-1-pentene','cas')
166/230: cirpy.resolve('3-Ethyl-1-pentene','cas')
166/231: df_ln.loc[df_ln['name'].map(lambda x: x=='ethylpenten'),'CAS']="['4038-04-4', '3404-71-5']"
166/232: cirpy.resolve('2-Methyl-1-hexene','cas')
166/233: history
166/234:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
history
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/235:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/236: df_ln[df_ln['name']=='ethylpentene']
166/237: history
166/238: df_ln.loc[df_ln['name'].map(lambda x: x=='ethylpentene'),'CAS']="['4038-04-4', '3404-71-5']"
166/239: df_ln[df_ln['name']=='ethylpentene']
166/240:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/241: df_ln.loc[df_ln['name']=='dimethyloctyne']['name']='dimethyloctane'
166/242: history
166/243: cirpy.resolve('dimethyloctane','cas')
166/244: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyloctyne'),'CAS']="['871-83-0', '63335-88-6', '68551-16-6', '68551-17-7', '34464-38-5']"
166/245:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/246: cirpy.resolve('2-Methyl-1-nonene','cas')
166/247: len(cas_not_found)
166/248: df_ln.loc[df_ln['name'].map(lambda x: x=='methyldecenes'),'CAS']='2980-71-4'
166/249:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/250: !grep dimethyloctenes cbm_cb5.txt
166/251: !head -n1 cbm_cb5.txt
166/252: cirpy.resolve('dimethy loctenes','cas')
166/253: cirpy.resolve('2,6-dimethy loctenes','cas')
166/254: cirpy.resolve('3,7-dimethy loctenes','cas')
166/255: cirpy.resolve('3,7-dimethy loctene','cas')
166/256: cirpy.resolve('2,6-dimethy loctene','cas')
166/257: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethyloctenes'),'CAS']='4984-01-4'
166/258:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/259: cirpy.resolve('dimethylethyl cyclohexane','cas')
166/260: cirpy.resolve('(1,1-dimethylethyl)cyclohexane','cas')
166/261: cirpy.resolve('1,1-dimethylethyl cyclohexane','cas')
166/262: cirpy.resolve('5-Methyl-1,4-hexadiene','cas')
166/263: cirpy.resolve('2-Ethyl-1-octene','cas')
166/264: df_ln.loc[df_ln['name'].map(lambda x: x=='ethyloctenes'),'CAS']="51655-64-2"
166/265: df_ln.loc[df_ln['name'].map(lambda x: x=='dimethylbutylcyclohexane'),'CAS']='3178-22-1'
166/266: df_ln.loc[df_ln['name'].map(lambda x: x=='methylhexadiene'),'CAS']='763-88-2'
166/267:
cas_not_found=df_ln[df_ln['CAS'].isnull()]['name']
len(cas_not_found)
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x,i) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])})
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=90)]
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
df_match[df_match['match ratio'].map(lambda x: x>=80)]
166/268: history
166/269:
mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)])
len(set(cas_not_found)- set(mtch90))
166/270: len(set(cas_not_found))
166/271: set(mtch90)
166/272: mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)]['cas_not_found'])
166/273: len(set(cas_not_found)- set(mtch90))
166/274: set(cas_not_found)- set(mtch90)
166/275: cirpy.resolve('2,2-dichloronitroaniline','cas')
166/276: cirpy.resolve('2,2-dichloro nitroaniline','cas')
166/277: cirpy.resolve('2,2-dichloro-4-nitroaniline','cas')
166/278: cirpy.resolve('2,6-dichloro-4-nitroaniline','cas')
166/279: cirpy.resolve('2-N Dibutylaminoethanol','cas')
166/280: cirpy.resolve('2-N-Dibutylaminoethanol','cas')
166/281: cirpy.resolve('alpha-Pinene','cas')
166/282: cirpy.resolve('alpha-terpineol','cas')
166/283: cirpy.resolve('beta-phellandrene','cas')
166/284: cirpy.resolve('beta-pinene','cas')
166/285: cirpy.resolve('bisphenol a','cas')
166/286: cirpy.resolve('bromo dinitroaniline','cas')
166/287: def cirp(in):
166/288:
def cirp(string):
    return cirpy.resolve(string,'cas')
166/289: cirp(2-Bromo-4,6-dinitroaniline)
166/290: cirp('2-Bromo-4,6-dinitroaniline')
166/291: cirp('butoxy butene')
166/292: cirp('1-butoxy butene')
166/293: cirp('tert-butoxy butene')
166/294: cirp('t-butoxy butene')
166/295: cirp('n-butoxy butene')
166/296: cirp('3-butoxy butene')
166/297: cirp('3-butoxybutene')
166/298: cirp('trans-1-Butene,1-butoxy-')
166/299: cirp('4-butoxy 1 butene')
166/300: cirp('4-butoxy-1-butene')
166/301: cirp('3-butoxy-1-butene')
166/302: butoxybutene in mtch
166/303: 'butoxybutene' in mtch
166/304: 'Butoxybutene' in mtch
166/305: butoxybutene
166/306: sp_name=list(df_sp['NAME'])
166/307: 'Butoxybutene' in sp_name
166/308: df_spS=list(df_sp['NAME'])
166/309:
mtch=[]
for i in cas_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in df_spS]
    mtch.append([i,df_spS[a.index(max(a))],max(a)])
mtch=[list(x) for x in mtch]
df_match=DataFrame({'cas_not_found':Series([x[0] for x in mtch]),'SPECIATE NAME':Series([x[1] for x in mtch]),'match ratio':Series([x[2] for x in mtch])}) .sort_values('match ratio')
mtch90=list(df_match[df_match['match ratio'].map(lambda x: x>=90)]['cas_not_found'])
len(set(cas_not_found)- set(mtch90))
166/310: history
166/311: set(cas_not_found)- set(mtch90)
166/312: mtch[100:]
166/313: len(df_spS)
166/314: df_match[:20]
166/315:
name[name.index('di(propylene glycol) methyl ether')]='dipropylene glycol methyl ether'
name[name.index('c8 alkyl cyclohexanes')]='ethyl cyclohexane'
name[name.index('methyldihydronaphthalene')]='2-Methyl-3,4-dihydronaphthalene'
name[name.index('methylbutene')]='methyl butene'
name[name.index('4,4-methylene dianiline')]='methylene dianiline'
name[name.index('toluene isocyanate')]='p-Tolyl isocyanate'
name[name.index('ethylpentene')]='3-Ethyl-1-pentene'
name[name.index('dimethyloctyne')]='dimethyloctane'
name[name.index('methyldecenes')]='2-Methyl-1-nonene'
name[name.index('dimethyloctenes')]='3,7-dimethy loctene'
name[name.index('dimethylbutylcyclohexane')]='1,1-dimethylethyl cyclohexane'
name[name.index('methylhexadiene')]='5-Methyl-1,4-hexadiene'
name[name.index('2,2-dichloronitroaniline')]='2,6-dichloro-4-nitroaniline'
name[name.index('2-N,N-Dibutylaminoethanol')]='2-N-Dibutylaminoethanol'
name[name.index('a-pinene')]='alpha-Pinene'
name[name.index('a-terpineol')]='alpha-terpineol'
name[name.index('b-phellandrene')]='beta-phellandrene'
name[name.index('b-pinene')]='beta-pinene'
name[name.index('bis-phenol a')]='bisphenol a'
name[name.index('bromodinitroaniline')]='2-Bromo-4,6-dinitroaniline'
166/316: !vi rd_cbm.py
167/1: from netCDF4 import Dataset
167/2: !ls *.nc
167/3: !ls
167/4: !ls ../../outputs/con01/*.avrg
167/5: !ls ../../outputs/con01
167/6: !ls ../../outputs/con09
167/7: !ls ../../outputs/con09/*.grd02
167/8: fname_grd='../../outputs/con09/1309_d3.avrg.grd02'
167/9: !SH_N ../../outputs/con09/1309_d3.avrg.grd02
167/10: !ln -s ../../outputs/con09/1309_d3.avrg.grd02 .
167/11: !SH_N 1309_d3.avrg.grd02 B
167/12: !ls -lrt
168/1: fname1='ptinv_ptipm_cap2005v2_orl_nc.txt'
168/2: fname2='ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.txt'
168/3:
from pandas import * 
with open(fname1) as ftext:
     df1=[]
     for line in ftext:
         df1.append([i for i in line.split(',')])
168/4: df1[:5]
168/5:
df1[:10
]
168/6: len(df1[10])
168/7: a=df1[10]
168/8: a
168/9: df1[:6]
168/10: df1[:7]
168/11: df1=df1.pop[0:6]
168/12: df1=list(df1).pop[0:6]
168/13: del df1[0:6]
168/14: df1[0]
168/15: len(df1)
168/16: history
168/17:
with open(fname2) as ftext:
    df2=[]
    for line in ftext:
        df2.append([i for i in line.split(',')])
168/18: df2[0:7]
168/19: df2[0:5]
168/20: del df2[0:5]
168/21: df2[0]
168/22: len(df2[0])
168/23: len(df1[0])
168/24:
for i in xrange(69):
    print i,df1[0][i:i+1],df2[0][i:i+1]
168/25:
for i in xrange(6:69):
    print i,df1[0][i:i+1],df2[0][i+1:i+2]
168/26:
for i in xrange(6,69):
    print i,df1[0][i:i+1],df2[0][i+1:i+2]
168/27: history
168/28: len(df1),len(df2)
168/29: print In [28]: len(df1),len(df2)
168/30: In [28]: len(df1),len(df2)
168/31: len(df2[0]))
168/32: print len(df1[0]),len(df2[0])
168/33: fname3='tab8.25.ORLforPTINV'
168/34:
with open(fname3) as ftext:
    df1=[]
         for line in ftext:
168/35:
with open(fname3) as ftext:
    df3=[]
    for line in ftext:
        df2.append([i for i in line.split()])
168/36: len(df1)
168/37: df2[:3]
168/38: df3[:3]
168/39: df3
168/40:
with open(fname3) as ftext:
    df3=[]
    for line in ftext:
        df3.append([i for i in line.split()])
168/41: df3[:3]
168/42: del df3[0:1]
168/43: df3[:3]
168/44: len(df3]
168/45: len(df3)
168/46:
for i in xrange(32):
    print i ,df3[i][1]
168/47: del df3[0]
168/48:
for i in xrange(31):
    print i ,df3[i][1]
168/49:
for i in xrange(31):
    print i+1 ,df3[i][1]
168/50: df2[len(df2)-32:len(df2)-30]
168/51: del df2[len(df2)-32:]
168/52: len(df2)
168/53: df2[len(df)]
168/54: df2[len(df2)]
168/55: df2[len(df2)-1]
168/56: del df2[len(df2)-1]
168/57: df2[len(df2)-1]
168/58: history
168/59:
for i in xrange(31):
    print i+1 ,df3[i][1]
168/60: df2_bak=df2
168/61:
for i in xrange(len(df2)):
    df2[i][5]=df2[i][5]+df2[i][6]
168/62: df2[10][5]
168/63: df2_bak[10][5]
168/64: df2_bak[10][6]
168/65: df2[100][5]
168/66: df2_bak[100][6]
168/67: df2_bak[1000][6]
168/68: df2_bak[1000][5]
168/69: df2_bak[1000][7]
168/70: len(df2_bak[1000])
168/71:
with open(fname2) as ftext:
    df2=[]
    for line in ftext:
        df2.append([i for i in line.split(',')])
168/72: del df2[0:5]
168/73: len_df2=[len(x) for x in df2]
168/74: max(len_df2)
168/75: mean(len_df2)
168/76: len_df2.count(71)
168/77:
len_df2.count(72
)
168/78: history
168/79: print df2[len_df2.index(71)]
168/80: print df2[len_df2.index(72)]
168/81: do i in xrange(len(df2)):
168/82:
for i in xrange(len(df2)):
    if len_df2[i]==71:
        df2[i][5]=df2[i][5]+' '+df2[i][6]
        for j in xrange(6,70):
            df2[i][j]=df2[i][j+1]
    if len_df2[i]==72:
        df2[i][5]=df2[i][5]+' '+df2[i][6]+' '+df2[i][7]       
        for j in xrange(6,69):
            df2[i][j]=df2[i][j+2]
168/83: len2_df2=[len(x) for x in df2]
168/84: max(len_df2)
168/85:
for i in xrange(len(df2)):
    if len_df2[i]==71:del df2[i][70]
    if len_df2[i]==72:del df2[i][70:71]
168/86: len2_df2=[len(x) for x in df2]
168/87: max(len_df2)
168/88: print df2[len_df2.index(72)]
168/89: print df2[len_df2.index(71)]
168/90: a=[0,1,2,3]
168/91: del a[0]
168/92: len(a)
168/93:
for i in xrange(len(df2)):
    if len_df2[i]==71:print len(df2[i])
    if len_df2[i]==72:print len(df2[i])
168/94:
for i in xrange(len(df2)):
    if len(df2[i])==71:del df2[i][70]
    if len(df2[i])==72:del df2[i][70:71]
168/95: len_df2=[len(x) for x in df2]
168/96: max(len_df2)
168/97: len(df3)
168/98: df3[30]
168/99: cols=[x[1] for x in df3]
168/100: cols
168/101: len(cols)
168/102:
for i in xrange(31,70):
    cols.append('col'+str(i))
168/103: cols
168/104: d={}
168/105:
for i in xrange(70):
    a=[x[i] for x in df1]
    d.update({cols[i]:Series(a)})
df_1=DataFrame(d)[cols]
168/106: df_1.columns
168/107: set(df_1['SCC'])
168/108:
d={}
for i in xrange(70):
    a=[x[i] for x in df2]
    d.update({cols[i]:Series(a)})
df_2=DataFrame(d)[cols]
168/109: set(df_2['SCC'])
168/110: len(set(df_2['SCC']))
168/111: history
168/112: len_df1=[len(x) for x in df1]
168/113:
max(len_df1
)
168/114:
for i in xrange(len(df1)):
    if len_df1[i]==71:
        df1[i][5]=df1[i][5]+' '+df1[i][6]
        for j in xrange(6,70):
            df1[i][j]=df1[i][j+1]
        del df1[i][70]
168/115: len_df1=[len(x) for x in df1]
168/116: max(len_df1)
168/117:
d={}
for i in xrange(70):
    a=[x[i] for x in df1]
    d.update({cols[i]:Series(a)})
df_1=DataFrame(d)[cols]
168/118: set(df_1['SCC'])
168/119: len(set(df_1['SCC']))
168/120: len(set(df_2['SCC']))
168/121: col31=[x[1] for x in df3]
168/122: col31
168/123: set(df_1['SIC'])
168/124: set(df_2['SIC'])
168/125: len(set(df_2['SIC']))
168/126: set(df_1['SIC'])
168/127: min(df1['STKHGT'])
168/128: min(list(df_1['STKHGT']))
168/129: min(list(df_2['STKHGT']))
168/130: max(list(df_2['STKHGT']))
168/131: max(list(df_1['STKHGT']))
168/132: fname1
168/133: from re import *
168/134: fname1[.$]
168/135: fname1[^:fname1.index('.')]
168/136: fname1[:fname1.index('.')]
168/137: df_1.to_csv(fname1[:fname1.index('.')+1]+'csv')[cols].reset_index(cols[0])
168/138: df_1[cols].to_csv(fname1[:fname1.index('.')+1]+'csv').reset_index(cols[0])
168/139: !grep to_csv /home/python_eg/*/*py
168/140: df_1[cols].set_index(cols[0]).to_csv(fname1[:fname1.index('.')+1]+'csv')
168/141: df_2[cols].set_index(cols[0]).to_csv(fname2[:fname2.index('.')+1]+'csv')
168/142: history
169/1: !vi rdtxt.py
169/2: run rdtxt.py
169/3: len_df2=[len(x) for x in df2]
169/4: max(len_df2)
169/5: df1[10]
169/6: !vi rdtxt.py
169/7: !vi rdtxt.py
169/8: !vi rdtxt.py
169/9: run rdtxt.py
169/10: df1[10]
169/11: max(len_df2)
169/12: len_df2=[len(x) for x in df2]
169/13: max(len_df2)
169/14: df2[len_df2.index(71)]
169/15: len_df2=[len(x) for x in df2]
169/16: df2[10]
169/17: len(df2[10])
169/18: len_df2=[len(x) for x in df2]
169/19: max(len_df2)
169/20: df2[len_df2.index(71)]
169/21: len(df2[len_df2.index(71)])
169/22: len(df2[len_df2.index(71)+1])
169/23: len(df2[len_df2.index(71)+10])
169/24: df2[len_df2.index(71)+10]
169/25: !vi rdtxt.py
169/26: run rdtxt.py
169/27: len_df2=[len(x) for x in df2]
169/28: max(len_df2)
169/29: len_df1=[len(x) for x in df1]
169/30:
max(len_df1
)
169/31: a='"asdfc"'
169/32:
for i in xrange(len(a)):
    if a[i]=='"':del a[i]
169/33: a.replace('"', "")
169/34: !vi
169/35: !vi rdtxt.py
169/36: run rdtxt.py
169/37: df2[len_df2.index(71)+10]
169/38: df2[len_df2.index(70)+10]
169/39: !v
169/40: !vi rdtxt.py
169/41: df2[len_df2.index(70)+10][0].replace('"', "")
169/42: !vi rdtxt.py
169/43: run rdtxt.py
169/44: df2[len_df2.index(70)+10]
169/45: cols[0]
169/46: cols[0]=cpls[0].insert(0,'#')
169/47: cols[0]=cols[0].insert(0,'#')
169/48: cols[0]=cols[0]='#'+cols[0]
169/49: !vi rdtxt.py
169/50: run rdtxt.py
169/51: !head *.csv
170/1: !vi rdtxt.py
170/2: run rdtxt.py
170/3: !vi rdtxt.py
170/4: head *.csv
170/5: !head *.csv
170/6: !ls
170/7: !head ptinv_ptipm_cap2005v2_orl_nc.txt>ptinv_ptipm_cap2005v2_orl_nc.head
170/8: !head ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.txt>ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.head
170/9: !vi *.head
170/10: !cat ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.head ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.csv >>ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.tmp
170/11: !mv ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.tmp ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.csv
170/12: !cat ptinv_ptipm_cap2005v2_orl_nc.head ptinv_ptipm_cap2005v2_orl_nc.csv ptinv_ptipm_cap2005v2_orl_nc.tmp
170/13: !cat ptinv_ptipm_cap2005v2_orl_nc.head ptinv_ptipm_cap2005v2_orl_nc.csv>> ptinv_ptipm_cap2005v2_orl_nc.tmp
170/14: !mv ptinv_ptipm_cap2005v2_orl_nc.tmp ptinv_ptipm_cap2005v2_orl_nc.csv
170/15: !head *csv
171/1: !vi rdtxt.py
171/2: run rdtxt.py
171/3: df1[10]
171/4: df1[10][69]=''
171/5: df1[10]
171/6: !v
171/7: !vi rdtxt.py
171/8: run rdtxt.py
171/9: !tail *.csv
171/10: !cat ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.head ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.csv >>ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.tmp
171/11: !cat ptinv_ptipm_cap2005v2_orl_nc.head ptinv_ptipm_cap2005v2_orl_nc.csv>> ptinv_ptipm_cap2005v2_orl_nc.tmp
171/12: !mv ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.tmp ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.csv
171/13: !mv ptinv_ptipm_cap2005v2_orl_nc.tmp ptinv_ptipm_cap2005v2_orl_nc.csv
172/1: run rdtxt.py
172/2: cols
172/3: set(df_2['CTYPE'])
172/4: set(df_1['CTYPE'])
172/5: !v
172/6: !vi rdtxt.py
172/7: run rdtxt.py
172/8: !vi rdtxt.py
172/9: run rdtxt.py
172/10: df3
172/11: df1[10]
172/12: !vi rdtxt.py
172/13: run rdtxt.py
172/14: !ls
172/15: !vi rdtxt.py
172/16: run rdtxt.py
173/1: !vi rdtxt.py
173/2: run rdtxt.py
174/1: !vi rdtxt.py
174/2: run rdtxt.py
174/3: !vi rdtxt.py
174/4: run rdtxt.py
174/5: df1[10]
174/6: df1[100]
174/7: !vi rdtxt.py
174/8: !head *txt
174/9: !head *csv
174/10: !vi
174/11: !vi rdtxt.py
174/12: run rdtxt.py
174/13: !head *csv
175/1: run rdtxt.py
175/2: cols[:31]
175/3: set(df_2['UTMZ'])
175/4: set(df_2['CAS'])
175/5: !top
175/6:
df_2[df_2['CAS']==
)
175/7: s=set(df_2['CAS'])
175/8:
for i in s:
    df_2.loc[df_2['CAS']==i]['CAS']='"'+i+'"'
175/9:
for i in s:
    df_2.loc[df_2['CAS']==i,'CAS']='"'+i+'"'
175/10: !vi rdtxt.py
175/11: run rdtxt.py
175/12: set(df_2['CAS'])
175/13: !his vi
176/1: !vi rdtxt.py
176/2: run rdtxt.py
176/3: !head *csv
176/4: s
176/5: set(df_2['CAS'])
176/6: !vi rdtxt.py
176/7:
set(df_1
['CAS'])
176/8: !vi rdtxt.py
176/9: run rdtxt.py
176/10: !vi rdtxt.py
176/11: run rdtxt.py
176/12: !head *csv
177/1: run rdtxt.py
177/2: df3[10][2]
177/3: df3[10][1]
177/4: cols[10]
177/5: for i in xrange(32):print df3[i][2]
177/6:
ri=['Real','Int']
boo=[]
for i in xrange(31):
    if df3[i][2] in ri:
        boo.append(True)
    else
177/7:
ri=['Real','Int']
boo=[]
for i in xrange(31):
    if df3[i][2] in ri:
        boo.append(True)
    else:
        boo.append(False)
177/8: boo
177/9: history
177/10: !vi rdtxt.py
177/11: run rdtxt.py
177/12: cols[i]
177/13: j
177/14: df_1.loc[j,cols[i]]
177/15: set(df_['UTMZ'])
177/16: set(df_1['UTMZ'])
177/17: set(df_2['UTMZ'])
177/18: a=''
177/19: a.isnull
177/20: !v
177/21: !vi rdtxt.py
177/22: run rdtxt.py
177/23: df_2.loc[j,cols[i]]
177/24: cols[i]
177/25: !vi rdtxt.py
177/26: run rdtxt.py
177/27: !tail $(ls -lrt $LOGS/*log|grep 29|awkk 9)|grep ' Normal Completion'|wc
178/1: run rdtxt.py
179/1: from pandas import *
179/2: df_teds_p=read_csv('point.csv')
179/3: df_teds_p.columns
178/2: cols[:31]
178/3: history
178/4: format=[df3[i][2] for i in xrange(31)]
178/5: format
178/6: df3
178/7: fm=[(cols[i],df3[i][2]) for i in xrange(31)]
178/8: fm
178/9: df2[10]
178/10: df3[10]
178/11: df3[6:10]
179/4: len(df_teds_p.columns)
179/5: set(df_teds_p['ZS'])
179/6: set(df_teds_p[:5,'NO_P'])
179/7: set(df_teds_p.loc[:5,'NO_P'])
179/8: set(df_teds_p.loc[:5,'NO_S'])
179/9: x=('Kuang',53)
179/10: print "hello %s you are %s years old" % x
179/11: x=['Kuang',53]
179/12: print "hello %s you are %s years old" % x
179/13: x={'Kuang':53}
179/14: x['Kuang']
179/15:
d={}
for i in cols[:31]:
    d.update({i:''})
178/12: fname3
178/13: !pwd
179/16: fname3='/cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV'
178/14: !vi rdtxt.py
179/17: import /cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/rdtxt
179/18: !ln -s /cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/rdtxt.py .
179/19: from rdtxt import *
178/15: !vi rdtxt.py
179/20: from rdtxt import rdtxt
178/16: !vi rdtxt.py
179/21: from rdtxt import rdtxt
179/22: fname3
178/17: !vi rdtxt.py
179/23: df3=rdtxt(fname3," ")
179/24: del df3[0:2]
179/25: cols=[x[1] for x in df3]
179/26: cols
178/18: set(df_2['CTYPE'])
179/27: !pwd
179/28: history
179/29:
for i in cols[:31]:
        d.update({i:''})
179/30: d
179/31: cols_teds=df_teds_p.columns
179/32: 'SCC' in cols_teds
179/33: d.update{'SCC':'SCC'}
179/34: d.update({'SCC':'SCC'})
179/35: !ls *.csv
179/36: df_pv=read_csv('df_pv.csv')
179/37: cols_pv=df_pv.columns
179/38: cols_pv
179/39: set(df_pv[:5,'NO_S'])
179/40: df_pv[:5,:]
179/41: df_pv
179/42: df_pv[:5,:]
179/43: df_pv.loc[:5,:]
179/44: df_pv.loc[0,:]
179/45: set(df_pv.loc[:5,'NO_S'])
178/19: cols[:6]
178/20: set(df_2.loc[:10,'POINTID'])
178/21: set(df_2.loc[:10,'STACKID'])
179/46: d.update({'STACKID':'NO_S'})
179/47: d
179/48: d.update({'XLOC':'XUTM'})
179/49: cols_pv
179/50: d.update({'XLOC':'UTM_E'})
179/51: d.update({'YLOC':'UTM_N'})
179/52: df_cols=DataFrame(d)
179/53: df_cols=DataFrame(d).set_index('FIP')
178/22: !vi rdtxt.py
179/54: df_cols=DataFrame(d)[cols[:31]].set_index('FIP')
179/55: d
179/56: !top
178/23: !top
178/24: d
179/57: d
179/58: cols_pv
179/59: d.update({'STKVEL':'VEL'})
179/60: d.update({'STKTEMP':'TEMP'})
179/61: d.update({'STKHGT':'HEI'})
179/62: d.update({'STKDIAM':'DIA'})
179/63: d
179/64: cols_teds
179/65: df_teds_p.loc[:10,'COMP_KIND1']
179/66: set(df_teds_p.loc[:100,'COMP_KIND1'])
179/67: set(df_teds_p.loc[:,'COMP_KIND1'])
179/68: len(set(df_teds_p.loc[:,'COMP_KIND1']))
178/25: cols[:30]
178/26:  len(set(df_2.loc[:,'SIC']))
178/27: set(df_2.loc[:100,'SIC'])
179/69: '1423' in set(df_teds_p.loc[:,'COMP_KIND1'])
179/70: 1423 in set(df_teds_p.loc[:,'COMP_KIND1'])
179/71: 2221 in set(df_teds_p.loc[:,'COMP_KIND1'])
179/72: !pwd
179/73: !grep pivot ../../ptse/teds9.0/*.py
178/28: pivot_table(df_2,index='SIC',aggfunc=count)
178/29: import numpy as np
178/30: pivot_table(df_2,index='SIC',aggfunc=np.count)
178/31: pivot_table(df_2,index='SIC',count)
178/32: pivot_table(df_2,index='SIC','count')
179/74: !grep count ../../ptse/teds9.0/*.py
179/75: !grep count /home/python_eg/*/*.py
179/76: !grep pivot /home/python_eg/*/*.py
178/33: pivot_table(df_2,index='SIC',,aggfunc='count')
178/34: pivot_table(df_2,index='SIC',aggfunc='count')
178/35: pivot_table(df_2,index='SIC',values=["PLANT"],aggfunc='count')
178/36: pivot_table(df_2,index='SIC',values=["PLANT"],aggfunc='count').sort_values()
178/37: pivot_table(df_2,index='SIC',values=["PLANT"],aggfunc='count').sort_values('PLANT')
179/77: 4581 in set(df_teds_p.loc[:,'COMP_KIND1'])
179/78: 'SIC' in cols_teds
179/79: cols_teds
179/80: d.update({'PLANTID':'C_NO'})
179/81: d
179/82: d.update({'STKFLOW':'ORI_QU1'})
179/83: df_teds_p.loc[:10,'FC']
179/84: set(df_teds_p.loc[:,'FC'])
179/85: d.update({'SIC':'COMP_KIND1'})
179/86: NO_P in d
179/87: 'NO_P' in d
178/38: set(df_2.loc[:100,'POINTID'])
178/39: set(df_2.loc[:100,'PLANTID'])
178/40: set(df_2.loc[:100,'FIPS'])
179/88: d.update({'POINTID':'NO_S'})
179/89: d.update({'FIPS':'DICT'})
179/90: d
179/91: NAME in cols_teds
179/92: 'NAME' in cols_teds
179/93: cols_teds
179/94: d.update({'PLANT':'COMP_NAM'})
179/95: d
179/96: d.update({'CAS':'CAS'})
179/97: d.update({'SRCTYPE':'SRCTYPE'})
178/41: df3
179/98: d.update({'UTMZ':15})
179/99: d.update({'CTYPE':'U'})
179/100: d
179/101: d.update({'ANN_EMIS':'_EMI'})
179/102: [len(d[x]) for x in d]
179/103: [d[x] for x in d]
179/104: [d[x] for x in d].sort_values
179/105: sort([d[x] for x in d])
179/106: [d[x] for x in d]
179/107: d
179/108: d.update({'AVD_EMIS':'AVD_EMI'})
178/42: df3[cols.index('REFF')]
178/43: df3[cols.index('SEGMENT')]
178/44: df3[cols.index('NAICS')]
178/45: df3[cols.index('ERPTYPE')]
178/46: df3[cols.index('SRCTYPE')]
179/109: d.update({'ERPTYPE':'ERPTYPE'})
179/110: d
178/47: df3[cols.index('CEFF')]
179/111: cols_teds
179/112: set(df_teds_p.loc[:,'SOX_EFF'])
179/113: d.update({'CEFF':'_EFF'})
179/114: d
178/48: df3[cols.index('CPRI')]
179/115: cols_teds
179/116: set(df_teds_p.loc[:,'EQ_1'])
179/117: d.update({'CPRI':'EQ_1'})
179/118: d.update({'CSEC':'EQ_2'})
179/119: d
179/120: fname
179/121: fname='dict.txt'
179/122: import json
179/123: json.dump(d, open(fname,'w'))
179/124: !cat dict.txt
179/125: !top
178/49: !top
178/50: !pwd
179/126: !pwd
179/127: !ls *.csv
179/128: !ls *.txt
178/51: !vi
178/52: !vi rdtxt.py
178/53: import rdtxt
178/54: main()
178/55: rdtxt.main()
178/56: !head *.csv
180/1: import rdtxt
180/2: from rdtxt import *
180/3: !cat rdtxt.py
180/4: !vi rdtxt.py
180/5: from rdtxt import *
180/6: main()
181/1: run del_dup2.py
181/2: !lst
180/7: !top
183/1: run ../del_dup.py
183/2: !vi ../del_dup.py
183/3: run ../del_dup.py
183/4: !cp ../chk_utmE/load_surfer.py ~/bin
183/5: run ../del_dup.py
183/6: !ln ../chk_utmE/load_surfer.py .
183/7: !ln ../chk_utmE/*.grd .
183/8: run ../del_dup.py
183/9: !vi ../del_dup.py
183/10: run ../del_dup.py
183/11: len(df_pv)
183/12: import json
183/13: json.load(d, open(fname,'r'))
183/14: d={}
183/15: fname
183/16: fname='/home/camxruns/2013/emis/smoke/dict.txt'
183/17: json.load(d, open(fname,'r'))
183/18: json.load(d, open(fname,'r'))
183/19: json.loads(d, open(fname,'r'))
183/20: json.loads(d, open(fname,'r'))
183/21: d=json.load(fname)
183/22:
with open(fname) as json_data:
     d = json.load(json_data)
     print(d)
183/23: d['SIC']
183/24: d2={'PLANTID':Series(df_pv[d['PLANTID']])}
183/25: print d[:]
183/26: print d.keys
183/27: for i in d:print i.key
183/28: for i in d:print i.keys
183/29: for i in d:print i
183/30:
for i in d:
    d2.update({i:Series(df_pv[d(i)])})
183/31:
for i in d:
    d2.update({i:Series(df_pv[d[i]])})
183/32: i
183/33:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(df_pv[d[i]])})
183/34: cols=list(df_pv.columns)
183/35:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(df_pv[d[i]])})
183/36: d
183/37: d.update({'UTMZ'}:''})
183/38: d.update({'UTMZ':''})
183/39:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(df_pv[d[i]])})
183/40: d2
183/41:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        print i
        d2.update({i:Series(df_pv[d[i]])})
183/42: d2['SCC']
183/43:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(list(df_pv[d[i]]))})
183/44: d2['SCC']
183/45: history
184/1: run ../del_dup.py
184/2: import json
184/3: !vi csv2orl.py
184/4: !ls
184/5: !ln ../del_dup.py .
184/6: !vi csv2orl.py
184/7: !vi csv2orl.py
184/8: !vi csv2orl.py
184/9: run csv2orl.py
184/10: cols=list(df_pv.columns)
184/11: fname='/home/camxruns/2013/emis/smoke/dict.txt'
184/12:
with open(fname) as json_data:
    d = json.load(json_data)
184/13:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(list(df_pv[d[i]]))})
184/14: d2={}
184/15:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(list(df_pv[d[i]]))})
184/16: d
184/17: d.update({'UTMZ':''})
184/18: !vi csv2orl.py
184/19:
for i in d:
    if len(d[i]) > 0 and d[i] in cols:
        d2.update({i:Series(list(df_pv[d[i]]))})
184/20: from pandas import *
184/21: !v
184/22: df_pv.columns
184/23: pivot_table(df_pv,index=['C_NO'],vals=['SCC'],aggfunc='count')
184/24: pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc='count')
184/25: pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc=max('count'))
184/26: pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc='count'))
184/27: counts = {}
184/28:
for w in list(df_dv['SCC']):
    counts[w] = counts.get(w,0) + 1
184/29:
for w in list(df_pv['SCC']):
    counts[w] = counts.get(w,0) + 1
184/30: counts
184/31: counts.items().sort
184/32: it=counts.items()
184/33: it
184/34: it.sort(compareItems)
184/35: !vi compareItems.py
184/36: import compareItems
184/37: it.sort(compareItems)
184/38: from compareItems import *
184/39: it.sort(compareItems)
184/40: it
184/41: it[:10]
184/42: it[0][0]
184/43: it.sort(compareItems)[0][0]
184/44: history
184/45: !vi compareItems.py
184/46: from mostfreqword import *
184/47: mostfreqword(list(df_pv['SCC']))
184/48: mostfreqword(list(df['DICT']))
184/49: df
184/50: df.columns
184/51: mostfreqword(list(df['DICT_NO']))
184/52: mostfreqword(list(df['NO_S']))
184/53: mostfreqword(list(df['COMP_NAME']))
184/54: mostfreqword(list(df['COMP_NAM']))
184/55: print mostfreqword(list(df['COMP_NAM']))
184/56: pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc=mostfreqword())
184/57: pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc=mostfreqword)
184/58: df_pv.loc[df_pv['C_NO']=='A3400047','SCC']
184/59: a=pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc=mostfreqword)
184/60: mostcomp=mostfreqword(list(df['COMP_NAM']))
184/61:
df[df['COMP_NAM']==mostcomp]['C_NO'
]
184/62: mostC_NO=mostfreqword(list(df[df['COMP_NAM']==mostcomp]['C_NO']))
184/63: mostC_NO
184/64: history
184/65: a.index(mostC_NO)
184/66: list(a).index(mostC_NO)
184/67: mostC_NO in a
184/68: mostC_NO in df_pv
184/69: mostC_NO in df
184/70: mostC_NO in df['C_NO']
184/71: mostC_NO in list(df['C_NO'])
184/72: mostC_NO in list(a)
184/73: mostC_NO in list(df_pv['C_NO'])
184/74: history
184/75: len(a),len(set(df_pv['C_NO')])
184/76: len(a),len(set(df_pv['C_NO']))
184/77: a.index
184/78: a[index=='mostC_NO']
184/79: a[mostC_NO]
184/80: a[:10]
184/81: a['C_NO'==mostC_NO]
184/82: a=a.reset_index['C_NO']
184/83: a=a.reset_index
184/84: a[:10]
184/85: a
184/86: a=pivot_table(df_pv,index=['C_NO'],values=['SCC'],aggfunc=mostfreqword).reset_index()
184/87: a[:10]
184/88: a['C_NO'==mostC_NO]
184/89: a[:10]
184/90: a['C_NO'=='A3400047']
184/91: a[:10]
184/92: a['C_NO'=='A3400047']['SCC']
184/93: a['C_NO']
184/94: a[a['C_NO']=='A3400047']['SCC']
184/95: a[a['C_NO']==mostC_NO]['SCC']
184/96: !vi mostfreqword.py
184/97: from mostfreqword import *
184/98: mostfreq10word(list(df_pv[df_pv['C_NO']==mostC_NO]['SCC']))
184/99: !vi mostfreqword.py
184/100: from mostfreqword import mostfreq10word
184/101: !rm *.pyc
184/102: from mostfreqword import *
184/103: mostfreq10word(list(df_pv[df_pv['C_NO']==mostC_NO]['SCC']))
184/104: !vi mostfreqword.py
184/105: help mostfreqword
184/106: help( mostfreqword)
184/107: !ls *pyc
184/108: !ls *py
184/109: from mostfreqword import mostfreq10word
184/110: !vi mostfreqword.py
184/111: from mostfreqword import mostfreq10word
184/112: !vi mostfreqword.py
184/113: run mostfreq10word.py
184/114: run mostfreqword.py
184/115: mostfreq10word(['a','a','b',10*'d'])
184/116: mostfreq10word(['a','a','b','d'*10])
184/117: aa=['a','a','b','d'*10]
184/118: aa
184/119: aa=['a','a','b',['d']*10]
184/120: aa
184/121: a
184/122: mostfreq10word(list(a))
184/123: list(a)
184/124: mostfreq10word(list(a['SCC']))
184/125: mostfreq10word(list(df_pv[df_pv['C_NO']==mostC_NO]['SCC']))
184/126: pwd
184/127: cols
184/128: df.columns
185/1: run del_dup.py
185/2: cols=df_pv.columns
185/3: cols
185/4: df_pv[1]
185/5:
df_pv[:
1]
185/6: df_['XY']
185/7: df_pv['XY']
185/8: df_pv['UTME']
185/9: df_pv['UTM_E']
185/10: df_pv['COM_NAM']
185/11: df_pv['COMP_NAM']
185/12: df_pv['COMP_KIND1']
185/13: df_pv['DICT_NO']
185/14: df_pv['EQ_1']
185/15: df_pv['EQ_2']
185/16: df_pv=check_landsea(df_pv)
185/17: cols=df_pv.columns
185/18: cols
185/19: from del_dup import check_landsea
185/20: cols=df_pv.columns
185/21: cols
185/22: del df_pv['XY'],df_pv['subX']
185/23: cols=df_pv.columns
185/24: cols
185/25: !lst
186/1: run csv2orl.py
186/2: cols
186/3: !grep read *py
186/4: df_pv=read_csv('df_pv.csv')
186/5: cols=df_pv.columns
186/6: cols
186/7: df_pv[:3]
186/8: !cat csv2orl.py
186/9: !vi csv2orl.py
186/10: run csv2orl.py
186/11: !vi csv2orl.py
186/12: run csv2orl.py
186/13: d2
186/14: df_orl=DataFrame(d2)
186/15: df_orl.columns
186/16:     oldy='/cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/'
186/17: oldy='/cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/'
186/18: fname3=oldy+'tab8.25.ORLforPTINV'
186/19: !ln /cluster/SMOKE4.5/data/inventory/nei2005/poin
186/20: !ln /cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/*py .
186/21: !cp /cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/*py .
186/22: !ls
186/23: from rdtxt import rdtxt
186/24: df3=rdtxt(fname3," ")
186/25: del df3[0:2]
186/26: df3.loc[:,1]
186/27: col3=[x[1] for x in df3]
186/28: col3
186/29: run del_dup.py
186/30: df_pv=read_csv('df_pv.csv')
186/31: cols=df_pv.columns
186/32: cols
186/33: run del_dup.py
186/34: df_pv=read_csv('df_pv.csv')
186/35: cols=df_pv.columns
186/36: cols
186/37: df_pv[df_pv['SOX_EMI']==0]
186/38: a=df_pv[df_pv['SOX_EMI']==0].reset_index()
186/39: a[:5]
186/40: len(a)
186/41: len(df_pv)
186/42: col_em=filter((lambda x: 'EMI' in x),cols)
186/43: col_em
186/44: col_em=filter((lambda x: 'EMI' in x(len(x)-4:len(x)-1)),cols)
186/45: col_em=filter((lambda x: 'EMI' in x[len(x)-4:len(x)-1]),cols)
186/46: col_em
186/47: col_em=filter((lambda x: 'EMI' in x[len(x)-4:len(x)]),cols)
186/48: col_em
186/49: col_em.split('_')
186/50: col_em[1].split('_')
186/51: sp=[col_em[x].split('_')[0] for x in range(len(ci=ol_em))]
186/52: sp=[col_em[x].split('_')[0] for x in range(len(col_em))]
186/53: sp
186/54: a=df_pv[:3]
186/55: for i in a:print i
186/56: for i in a.loc:print i
186/57: for i in a.loc(:,:):print i
186/58: for i in a.loc(0:len(a),:):print i
186/59: for i in a.loc('SCC',:):print i
186/60: for i in a.loc(:,'SCC'):print i
186/61: for i in a['SCC']:print i
186/62: a
186/63: !pwd
186/64: history
186/65: a=df_pv[:3]
186/66: df_pv.append(a)
186/67: !vi csv2orl.py
186/68: cols
186/69: !vi csv2orl.py
186/70: history
186/71: df_orl.columns
186/72: len(df_orl)
186/73: df_orl[:5]
186/74: len(df_pv)
186/75: len(df_orl)
186/76: df_orl[151,'PLANTID'],df_pv[151,'C_NO']
186/77: df_orl.loc[151,'PLANTID'],df_pv.loc[151,'C_NO']
186/78: df_orl.loc[1510,'SCC'],df_pv.loc[1510,'SCC']
186/79: col_em=filter((lambda x: 'EMI' in x[len(x)-4:len(x)]),cols)
186/80: pwd
186/81: df_orl['CAS']
186/82: df_orl.loc[5,'CAS']
186/83: df_orl.loc[5,'SCC']
186/84: d
186/85: !top
186/86: !grep boo /home/python_eg/*/*py
186/87: d
186/88: d-d['SEGMENT']
186/89: del d['SEGMENT']
186/90: d
186/91: len(d)
186/92: del d['NAICS']
186/93: len(d)
186/94:
for i in d:
    if len(d[i]) > 0 and d[i] in cols: del d[i]
186/95: cols
186/96: df3
186/97: df3[25:]
186/98: df3[15:25]
186/99: df3[:15]
186/100: run csv2orl.py
186/101: run csv2orl.py
186/102: run csv2orl.py
186/103: run csv2orl.py
186/104: run csv2orl.py
186/105: run csv2orl.py
186/106: ann
186/107: s
186/108: boo
186/109: run csv2orl.py
186/110: cols
186/111: len(sp)
186/112: sp
186/113: del sp['NMHC', 'PM6', 'PM','THC']
186/114: del sp[sp.index('NMHC'), sp.index('PM6'), sp.index('PM'),sp.index('THC')]
186/115: sp
186/116: del sp[5]
186/117: sp[5]
186/118: sp=[col_em[x].split('_')[0] for x in range(len(col_em))]
186/119: sp
186/120: del sp[5,6,8]
186/121: run csv2orl.py
186/122: ann
186/123: df_pv.loc[54869,'CO_EMI']
186/124: len(df_pv)
186/125: df_pv.loc[54869,'CO_EMI']
186/126: run csv2orl.py
186/127: run csv2orl.py
186/128: run csv2orl.py
186/129: run csv2orl.py
186/130: len(df_orl)
186/131: df_orl[:3]
186/132: ann
186/133: eff
186/134: cas
186/135: s
186/136: !grep loc /home/python_eg/*/*py
186/137: boo
186/138: ann=df_pv.loc[boo,s+'_EMI'].reset_index()
186/139: ann
186/140: 'NOX_EMI' in cols
186/141: 'NOX_EMI' in df_pv
186/142: ann=df_pv.loc[boo,s+'_EMI']
186/143: ann
186/144: True in boo
186/145: boo.index(True)
186/146: len(df_pv[boo])
186/147: source,sccode,plant
186/148: df_orl['plant']
186/149: a=df_orl['plant']
186/150: df_orl.columns
186/151: set(df_pv[boo1]['NO_S'])
186/152: set(df_pv[boo2]['SCC'])
186/153: a=df_pv[boo]
186/154: len(a)
186/155: run csv2orl.py
186/156: len(df_orl)
186/157: a1
186/158: a2
186/159: a3
186/160: ann
186/161: d2
186/162: ann
186/163: ann.loc[0,0]
186/164: ann.loc[0,'TSP_EMI']
186/165: ann.loc[0,'TSP_EMI'].reset_index
186/166: run csv2orl.py
186/167: a3
186/168: a2
186/169: a3
186/170: a1
186/171: run csv2orl.py
186/172: run csv2orl.py
186/173: run csv2orl.py
186/174: len(df_orl)
186/175: ann
186/176: eff
186/177: avd
186/178: d2
186/179: run csv2orl.py
186/180: run csv2orl.py
186/181: run csv2orl.py
186/182: run csv2orl.py
186/183: run csv2orl.py
186/184: d2
186/185: !grep DataFrame /home/python_eg/*/*py
186/186: run csv2orl.py
186/187: len(df_orl)
186/188: d2
186/189: run csv2orl.py
186/190: len(df_orl)
186/191: df_orl
186/192: ann
186/193: run csv2orl.py
186/194: len(df_orl)
186/195: d2
186/196: a=Datafram(d2).set_index('SRN')
186/197: a=Dataframe(d2).set_index('SRN')
186/198: from pandas import *
186/199: a=Dataframe(d2).set_index('SRN')
186/200: a=DataFrame(d2).set_index('SRN')
186/201: a['SRN']
186/202: a.columns
186/203: 'SRN' in d2
186/204: d2['SRN']
186/205: df_orl.columns
186/206: df_orl
186/207: srn
186/208: dforl
186/209: df_orl.append(dforl)
186/210: df_orl=df_orl.append(dforl)
186/211: len(df_orl)
186/212: run csv2orl.py
186/213: len(df_orl)
186/214: run csv2orl.py
186/215: run csv2orl.py
186/216: len(df_orl)
186/217: !grep to_csv /home/python_eg/*/*py
186/218: history
186/219: !vi rdtxt.py
186/220: !cp /cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/*head .
186/221: !ls
186/222: !mv ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc.head df_orl.head
186/223: !vi df_orl.head
186/224: !vi rdtxt.py
186/225: len_df_orl=len(df_orl)
186/226: col3
186/227: len(col3)
186/228: d_orl
186/229: d
186/230: d-dorl
186/231: d-d_orl
186/232: col3
186/233: col_orl1=[x[0] for x in d_orl]
186/234: col_orl1
186/235: col_orl1=[x for x in d_orl]
186/236: col_orl1
186/237: col_nn=filter((lambda x: x not in col_orl1),col3)
186/238: col_nn
186/239: run csv2orl.py
186/240: run csv2orl.py
186/241: run csv2orl.py
186/242: col_orl1
186/243: set(df_pv[df_pv['C_NO'].map(lambda x: x[0]=='A')])
186/244: set(df_pv[df_pv['C_NO'].map(lambda x: x[0]=='A')]['C_NO'])
186/245: run csv2orl.py
186/246: source
186/247: source[0]
186/248: a1
186/249: run csv2orl.py
186/250: len(df_orl)
186/251: len(col_orl)
186/252: col_orl1
186/253: len(col_orl1)
186/254: df_orl[:5]
186/255: d
186/256: ls *.txt
186/257: !ls *.txt
186/258: !ls
186/259: !vi /home/camxruns/2013/emis/smoke/dict.txt
186/260: set(a1['NO_S'])
186/261: source
186/262: errtype
186/263: run csv2orl.py
186/264: col_orl
186/265: df_orl[:5]
186/266: !grep to_csv /home/python_eg/*/*py
186/267: col3
186/268: run csv2orl.py
186/269: run csv2orl.py
186/270: !head df_orl.csv
186/271: !grep to_csv ../../../emis/smoke/*py
186/272: df_pv['DICT_NO][:10]
186/273: df_pv['DICT_NO'][:10]
186/274: !grep csv ../../../emis/smoke/*py
186/275: run csv2orl.py
186/276: !head df_orl.csv
186/277: run csv2orl.py
186/278: run csv2orl.py
186/279: !head df_orl.csv
186/280: col3
186/281: d['POINTID']
186/282: d['STACKID']
186/283: 'NO_P' in df_pv
186/284: !vi /home/camxruns/2013/emis/smoke/dict.txt
186/285: df_orl[:5]
186/286: df_orl[0:1]
186/287: run csv2orl.py
186/288: !head df_orl.csv
186/289: need_conv=[]
186/290:
Char_RI=[x[2] for x in df3]
for i in xrange(31):
    if Char_RI[i] in ['Real','Int']:need_conv.append(col_orl[i])
186/291: need_conv
186/292: df3[:10]
186/293: df3[10:15]
186/294: set(df_pv['TEMP'])
186/295: min(set(df_pv['TEMP']))
186/296: max(set(df_pv['TEMP']))
186/297: max(set(df_pv['TEMP']).clip(0))
186/298: max(set(df_pv['TEMP'].clip(0)))
186/299: min(set(df_pv['TEMP'].clip(0)))
186/300: min(set(df_pv['TEMP'].clip(10)))
186/301: df3[10:15]
186/302: !pip install KtoF
186/303: !pip install numericalunits
186/304: import numericalunits as nu
186/305: nu.reset_units()
186/306: 10 * nu.ft/ nu.m
186/307: df3[10:15]
186/308: def MtoFt(a):return a/0.3048
186/309: def KtoF(a):return a*9/5+32
186/310: !grep i/j ../../../emis/smoke/*py
186/311: !vi del_dup.py
186/312: need_conv
186/313: MtoFt=['STKHGT', 'STKDIAM', 'STKVEL']
186/314:
for it in MtoFt:
    df_orl[it]=Series([i/0.3048 for i in df_orl[it]],index=df_orl.index)
186/315:  df_orl[it]
186/316: max( df_orl[it])
186/317: max( df_orl['STKDIAM'])
186/318: max( df_orl['STKHGT'])
186/319: !cat tmp.py
186/320: run csv2orl.py
186/321: !head df_orl.csv
186/322: df3[15:20]
186/323: df3[20:25]
186/324: a=[9/5,0.1]
186/325: a
186/326: a=[9./5.,0.1]
186/327: a
186/328:
def conv_unit(df_orl,it,a,b):return \
Series([i*a+b for i in df_orl[it]],index=df_orl.index)
186/329: it=['STKTEMP', 'STKHGT', 'STKDIAM', 'STKVEL', 'STKFLOW','AVD_EMIS', 'ANN_EMIS']
186/330: a= [ 9./5., [1./0.3048]*3, 1./(0.3048**3)/60.,[1./.90718474]*2]
186/331: b= [32.,[0]*6]
186/332: a
186/333: b
186/334: for i in a: print i
186/335: b= [32.,6*[0]]
186/336: b
186/337: len(b)
186/338: len(b*list)
186/339: a=[x for x in a]
186/340: a
186/341: a=[y for y in x for x in a]
186/342: a
186/343:
a=[1.8,
 [3.280839895013123, 3.280839895013123, 3.280839895013123],
 0.5885777786914764,
 [1.1023113109243878, 1.1023113109243878]]
186/344: a
186/345: c=[y for x in a for y in x]
186/346: c=[y for y in x; for x in a]
186/347: c=[y for y in x for x in a]
186/348: a
186/349: it=['STKTEMP', 'STKHGT', 'STKDIAM', 'STKVEL', 'STKFLOW','AVD_EMIS', 'ANN_EMIS']
186/350: a= [ 9./5., 1./0.3048,1./0.3048,1./0.3048, 1./(0.3048**3)/60.,1./.90718474,1./.90718474]
186/351: b= [32.,0,0,0,0,0,0]
186/352:
for i in xrange(7):
    df_orl[it[i]]=conv_unit(df_orl,it[i],a[i],b[i])
186/353: len(set(df_pv['C_NO']))
187/1: run rd_cancer.py
187/2: len(w)
187/3:
for i in xrange(76):
    print i
187/4:
for i in xrange(76):
    print w[i]
187/5: !vi rd_cancer.py
187/6:
for i in xrange(76):
    print w[i]
187/7:
for i in xrange(76):
    print w[i]
187/8: run rd_cancer.py
187/9:
for i in xrange(76):
    print w[i]
187/10:
for i in xrange(76):
    print w[i].decode('big5')
187/11:
for i in xrange(76):
    print w[i].encode('big5')
187/12:
for i in xrange(76):
    print w[i].encode('utf8')
187/13:
for i in xrange(76):
    print w[i].decode('utf8')
187/14:
for i in xrange(76):
    print w[i].decode('utf-8')
187/15:
for i in xrange(76):
    print w[i].decode('Big-5')
187/16:
for i in xrange(76):
    print w[i].decode('Big5')
187/17: !vi rd_cancer.py
187/18: run rd_cancer.py>cancer2.txt
188/1:
# -- coding=utf-8 --
fname='cancer2.txt'
import simplejson as json
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
d={}
with open(fname) as json_data:
    d = json.load(json_data)
188/2: !pip install simplejson
188/3:
# -- coding=utf-8 --
fname='cancer2.txt'
import simplejson as json
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
d={}
with open(fname) as json_data:
    d = json.load(json_data)
188/4:
# -- coding=utf-8 --
fname='cancer2.txt'
import json as json
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
d={}
with open(fname) as json_data:
    d = json.load(json_data)
188/5: !sed -i 's/$/ \/g' cancer2.txt
188/6: !sed -i 's/$/ \\/g' cancer2.txt
188/7: !vi cnacer2.txt
188/8: !vi cancer2.txt
188/9: !vi cancer2.txt
188/10: !vi cancer2.txt
188/11: !vi cancer2.txt
188/12: !vi cancer2.txt
188/13: !sed -i 's/\ //g' cancer2.txt
188/14: !sed -i 's/,//g' cancer2.txt
188/15: !vi cancer2.txt
188/16: !sed -i 's/\//g' cancer2.txt
188/17: !sed -i 's/\ //g' cancer2.txt
188/18: !vi cancer2.txt
188/19:
import simplejson as json
import codecs
#import sys
#reload(sys)
#sys.setdefaultencoding("big5")
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
d={}
with codecs.open(fname,"r",encoding='big5', errors='ignore') as json_data:
    for i in json_data:
        id.append(i)
188/20: id
188/21: unicode(id[10].split(':')[1]).encode('big5').strip()
188/22: id[10].split(':')[1]
188/23: print id[10].split(':')[1]
188/24: print id[10].split(':')[1]
188/25: print id[10].split(':')[1]
188/26: !export  LC_CTYPE= zh_TW.UTF-8
188/27: !export LC_CTYPE=zh_TW.UTF-8
188/28: print id[10].split(':')[1]
188/29: !ee
188/30: !ls
188/31: !df
188/32: !grep LC ~/.bashrc
188/33: !grep LC ~/.bash_profile
188/34: !grep LC ~/.cshrc
188/35: !grep LC ~/bin/bash*
188/36: !export LC_ALL="zh_TW.Big5"
188/37: !ls
188/38: !df
188/39: print id[10].split(':')[1]
188/40: id
188/41: !cat cancer2.txt
189/1: !cat cancer2.txt
189/2:
import simplejson as json
import codecs
#import sys
#reload(sys)
#sys.setdefaultencoding("big5")
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
with codecs.open(fname,"r",encoding='big5', errors='ignore') as json_data:
    for i in json_data:
        id.append(i.split(':')[0].strip())
        nam.append(i.split(':')[1].strip())
        print i#.encode('utf-8').strip()
fname='cancer3.txt'
189/3: i
189/4: len(i)
189/5:
import simplejson as json
import codecs
#import sys
#reload(sys)
#sys.setdefaultencoding("big5")
fname='cancer2.txt'
(id,nam)=([],[])
#with  open(fname) as ftext:
with codecs.open(fname,"r",encoding='big5', errors='ignore') as json_data:
    for i in json_data:
        if len(i)>2:
            id.append(i.split(':')[0].strip())
            nam.append(i.split(':')[1].strip())
        print i#.encode('utf-8').strip()
fname='cancer3.txt'
189/6: !grep dump /home/camxruns/2013/emis/smoke/*py
189/7: !grep dump /home/camxruns/2013/emis/smoke/py/*py
189/8: d.update({id[i]:nam[i]} for i in xrange(len(id)))
189/9: d={}
189/10: d.update({id[i]:nam[i]} for i in xrange(len(id)))
189/11: id[0]
189/12:
for i in xrange(len(id)):
    d.update({id[i]:nam[i]})
189/13: d
189/14: print d
189/15: fir i in d:print i
189/16: for i in d:print i
189/17: for i in d:print i.values
189/18: for i in d:print i.items
189/19: for i in d:print d[i]
189/20: history
189/21: !cat cancer3.txt
189/22: fname
189/23:
with codecs.open(fname) as json_data:
    e = json.load(json_data)
189/24: for i in e:print e[i]
189/25:
with open(fname) as json_data:
    e = json.load(json_data)
189/26: for i in e:print e[i]
189/27: len(d),len(e)
189/28: a=1
189/29: b=2
189/30: c=3
189/31: d=[a,b,c]
189/32: d
189/33: !vi cancer2.txt
189/34: !grep 'id=' region.txt|wc
189/35: !vi region.txt
189/36: !vi rd_cancer.py
189/37: from rd_cancer import *
189/38: w=rdtxt('region.txt','id=')
189/39: len(w)
189/40: w[:5]
189/41: for i in xrange(len(w)):del w[i][0:4]
189/42: for i in xrange(len(w)):w[i][0:4].replace('')
189/43:
for i in xrange(len(w)):
    for j in xrange(4):
        w[i][j].replace(w[i][j],'')
189/44: w[:5]
189/45:
for i in xrange(len(w)):
    w[i].replace("id='",'')
189/46: w[:5]
189/47:
for i in xrange(len(w)):
    w[i]=w[i].replace("id='",'')
189/48: w[:5]
189/49:
for i in xrange(len(w)):
    w[i]=w[i].replace("'",'')
189/50: w[:5]
189/51: history
189/52: !cat cancer3.txt
189/53: w[:5]
189/54: w=rdtxt('region.txt','for')
189/55: w[:5]
189/56: w
189/57: for i in xrange(len(w)): w[i]=w[i].replace('"for=','')
189/58: w[:15]
189/59: for i in xrange(len(w)): w[i]=w[i].replace('</label>','')
189/60: w[:15]
189/61: for i in xrange(len(w)): w[i]=w[i].replace('\"for=','')
189/62: w[:15]
189/63: for i in xrange(len(w)): w[i]=w[i].replace('for=','')
189/64: w[:15]
189/65: for i in xrange(len(w)): w[i]=w[i].replace('>',",")
189/66: w[:15]
189/67: for i in xrange(len(w)): w[i]=w[i].replace('"',"")
189/68: for i in xrange(len(w)): w[i]=w[i].replace("'","")
189/69: w[:15]
189/70:
(WR,nam)=([],[])
for i in xrange(len(w)):
    i01=0
    (wri,nami)=('','')
    for j in w[i].split(','):
        if i01==0:
            wri=j
            i01=1
        else:
            nami=j
            i01=0
    if len(nami)>0:
        WR.append(wri)
        nam.append(nami)
189/71: len(WR),len(nam)
189/72: WR[0],nam[0]
189/73: d={}
189/74:
for i in len(WR):
    d.update({WR[i]:nam[i]})
189/75:
for i in xrange(len(WR)):
    d.update({WR[i]:nam[i]})
189/76: history
189/77: w=rdtxt('region.txt')
189/78: from rd_cancer import *
189/79: w=rdtxt('region.txt')
189/80: !del rd_cancer.pyc
189/81: !rm rd_cancer.pyc
189/82: from rd_cancer import *
189/83: w=rdtxt('region.txt')
189/84: run rd_cancer.py
189/85: run rd_cancer.py
189/86: w=rdtxt('region.txt')
189/87: w=d
189/88: w==d
189/89: w=rdtxt('region.txt')
189/90: w==d
189/91: len(w), len(d)
189/92: len(WR),len(nam)
189/93: history
189/94: run rd_cancer.py
189/95: w=rdtxt('region.txt')
189/96: run rd_cancer.py
189/97: w=rdtxt('region.txt')
189/98: run rd_cancer.py
189/99: w=rdtxt('region.txt')
189/100: run rd_cancer.py
189/101: w=rdtxt('region.txt')
189/102: run rd_cancer.py
189/103: w=rdtxt('region.txt')
189/104: run rd_cancer.py
189/105: w=rdtxt('region.txt')
189/106: run rd_cancer.py
189/107: w=rdtxt('region.txt')
189/108: w==d
189/109: len(w), len(d)
189/110: run rd_cancer.py
189/111: w=rdtxt('region.txt')
189/112: len(w), len(d)
189/113: run rd_cancer.py
189/114: w=rdtxt('region.txt')
189/115: len(w), len(d)
189/116: w==d
189/117: !ls
189/118: w=rdtxt('city.txt')
189/119: len(w), len(d)
189/120: for i in xrange(23):print w[i]
189/121: for i in w:print w[i]
189/122: for i in w:print i
189/123: w=rdtxt('cancer.txt')
189/124: len(w)
189/125: w
189/126: w=rdtxt('cancer.txt')
189/127: !head cancer.txt
189/128: !more cancer.txt
189/129: w={}
189/130: w=rdtxt('cancer.txt')
189/131: w
189/132: w=rdtxt('cancer.txt')
189/133: w
189/134: !rm cancer.txt
189/135: run rd_cancer.py
189/136: w=rdtxt('cancer.txt')
189/137: w
189/138: len(w)
189/139:
dTown=rdtxt('region.txt')
Town=[dTown[i] for i in len(dTown)]
189/140: len(dTown)
189/141: dTown[1]
189/142:
dTown=rdtxt('region.txt')
Town=[i for i in dTown]
189/143: Town
189/144: len(Town)
189/145: Town=[]
189/146:
dTown=rdtxt('region.txt')
Town=[i for i in dTown]
189/147: !cat /home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/csv2orl.py
190/1: import subprocess
190/2: output = subprocess.check_output('ls')
190/3: print(output)
190/4: from os import system
190/5: output=system('ls Cr1.xls')
190/6: print output
190/7: import re
190/8: re.match(
190/9: fname='Cr1.xls'
190/10: fname2='Cr*.xls'
190/11: re.match(fname,fname2)
190/12:     oldy='/cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/'
190/13: print re.match(fname,fname2)
190/14: !vi selec2.py
192/1: run start.py
192/2: dat
192/3: data
192/4: dirver
192/5: errread
193/1: run start.py
193/2:
for element in driver.find_elements_by_css_selector("div.flightbox"):
    print(element.text)
193/3:     oldy='/cluster/SMOKE4.5/data/inventory/nei2005/point/oldy/'
193/4:
for element in driver.find_elements_by_css_selector("div.container"):
    print(element.text)
193/5:
for element in driver.find_elements_by_css_selector("header.main-header"):
    print(element.text)
194/1: run start.py
194/2: !cat start.py
194/3: driver
194/4: driver = webdriver.Firefox()
194/5: !cat start.py
194/6: !vi select2.py
195/1: run s.py
195/2: print %tb
195/3: %tb
195/4: run s.py
195/5: %tb
195/6: a3=df_pv.iloc[100]
195/7: a3
195/8: sp_nam
195/9: sp_em
195/10: s=sp_em[1]
195/11: s
195/12: ann=a3.loc[0,s+'_EMI']
195/13: a3
195/14: ann=a3.reset_index().loc[0,s+'_EMI']
195/15: a3=a3.reset_index()
195/16: ann=a3.loc[0,s+'_EMI']
195/17: a3.columns
195/18: a3
195/19: ann=a3[s+'_EMI']
195/20: a3
195/21: ann=a3['DIA']
195/22: ann
195/23: a3
195/24: a3=df_pv.iloc[100]
195/25: a3
195/26: a3['SCC']
195/27: ann=a3[s+'_EMI']
195/28: ann
195/29:
len_df_pv=len(df_pv)    #dealing unit conv. etc. as a batch
len_sp_em=len(sp_em)
df_orl=DataFrame(len_df_pv*len_sp_em*{})
195/30: len_df_pv
195/31: len_sp_em
195/32: df_orl=len_df_pv*len_sp_em*DataFrame({})
195/33: len(df_orl)
195/34: df_orl=len_df_pv*len_sp_em*[DataFrame({})]
195/35: len(df_orl)
195/36: df_orl[101]
195/37: !vi pp.py
196/1: run csv2orl_2.py
196/2: run csv2orl_2.py
196/3: !pip install pp
196/4: import pp
196/5: import pp
197/1: run csv2orl_2.py
197/2: df_orl[10]
197/3: df_orl[10]['SRN']
197/4: a=df_orl[10]
197/5: a['SRN']
197/6: a.columns
197/7: a.index
197/8: dforl=loop_df(df_pv,sp_em,sp_ef,d_orl)
197/9: df_orl=DataFrame({})
197/10: for i in dforl:df_orl=df_orl.append(i)
197/11: job1 = job_server.submit(for i in dforl:df_orl=df_orl.append(i), (,), (,), (,))
197/12: job1 = job_server.submit("for i in dforl:df_orl=df_orl.append(i)", (,), (,), (,))
197/13: job1 = job_server.submit("for i in dforl:df_orl=df_orl.append(i)",)
197/14:
def df_append(dforl):
    df_orl=DataFrame({})
    for i in dforl:df_orl=df_orl.append(i)
    return df_orl
197/15: job1 = job_server.submit(df_append,(dforl,),(),("DataFrame",))
197/16: job1
197/17: len(df_orl)
197/18: df_orl.columns
197/19: df_orl.index
197/20: df_orl.iloc[100]
197/21: df_orl.iloc[101]
197/22: df_orl.iloc[102]
197/23: df_orl
197/24: history
197/25: a=job1()
198/1: run csv2orl_2.py
198/2: run csv2orl_2.py
198/3: len(df_orl)
198/4: job1 = job_server.submit(df_append,(dforl,),(),("DataFrame",))
198/5: len(df_orl)
198/6: df_orl=job1()
198/7: from pandas import *
198/8: df_orl=job1()
198/9: len(df_orl)
198/10: job1
198/11: job1()
198/12: history
198/13: len(dforl)
198/14: job1
198/15: df_orl=job1()
198/16: print job1()
198/17: run csv2orl_2.py
198/18: len(dforl)
198/19: run csv2orl_2.py
198/20: !top
198/21: !top
198/22: !top
198/23: run csv2orl_3.py
198/24: run csv2orl_3.py
198/25: len(dforl)
198/26: dforl[100]
198/27: lend=len(dforl)
198/28: col_nam=dforl[100].columns
198/29: col_nam
198/30: for i in col_nam):
198/31:
df_orl=Dataframe({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/32:
df_orl=Dataframe({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/33: from pandas import *
198/34:
df_orl=Dataframe({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/35:
df_orl=DataFrame({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/36: Parallel(n_jobs=10)(delayed((df_orl.iloc[i]=dfol[i]) for i in xrange(lend)))
198/37: Parallel(n_jobs=10)((df_orl.iloc[i]=dfol[i]) for i in xrange(lend))
198/38: df_orl=Parallel(n_jobs=10)(delays(i) for i in dforl)
198/39: df_orl=Parallel(n_jobs=10)(delayed(i) for i in dforl)
198/40:
def asg(df_orl,i,a):
    df_orl.iloc(i)=a
    return df_orl
198/41:
def asg(df_orl,i,a):
    df_orl.iloc[i]=a
    return df_orl
198/42: df_orl=Parallel(n_jobs=10)(delayed(asg(df_orl,i,dforl[i]) for i in lend))
198/43: df_orl=Parallel(n_jobs=10)(delayed(asg(df_orl,i,dforl[i]) for i in xrange(lend)))
198/44: df_orl=Parallel(n_jobs=10)(delayed(sqrt(i)) for i in xrange(lend))
198/45: import math
198/46: df_orl=Parallel(n_jobs=10)(delayed(math.sqrt(i)) for i in xrange(lend))
198/47: Parallel(n_jobs=10)(delayed(math.sqrt(i)) for i in xrange(lend))
198/48: import pickle
198/49: gen = (x for x in range(100))
198/50: df_orl=Parallel(n_jobs=10)(math.sqrt(i) for i in xrange(lend))
198/51: Parallel(n_jobs=10)(math.sqrt(i) for i in xrange(lend))
198/52: Parallel(n_jobs=10)(delayed(math.sqrt)(i) for i in xrange(lend))
198/53: a=Parallel(n_jobs=10)(delayed(math.sqrt)(i) for i in xrange(lend))
198/54: len(a)
198/55: a=[math.sqrt(i) for i in xrange(lend)]
198/56: len(a)
198/57: a=Parallel(n_jobs=10)(delayed(math.sqrt)(i) for i in xrange(lend))
198/58: b=[math.sqrt(i) for i in xrange(lend)]
198/59: a==b
198/60: a=Parallel(n_jobs=1)(delayed(math.sqrt)(i) for i in xrange(lend))
198/61: a=Parallel(n_jobs=1)((math.sqrt)(i) for i in xrange(lend))
198/62: df_orl=Parallel(n_jobs=10)(delayed(math.sqrt(i)) for i in xrange(lend))
198/63: for i in xrange(lend):df_orl.iloc[i]=dfol[i]
198/64: for i in xrange(lend):df_orl.iloc[i]=dforl[i]
198/65: for i in xrange(lend):df_orl.loc[i]=dforl[i]
198/66:
df_orl=DataFrame({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/67: for i in xrange(lend):df_orl.loc[i]=dforl[i]
198/68: for i in xrange(lend):df_orl.iloc[i]=dforl[i]
198/69: len(df_orl)
198/70:
df_orl=DataFrame({})
for i in col_nam:
    df_orl[i]=Series(lend*[])
198/71: len(df_orl)
198/72: lend
198/73: col_nam
198/74:
df_orl=DataFrame({})
for i in col_nam:
    df_orl[i]=lend*[]
198/75: lend
198/76: len(df_orl)
198/77: lend*[]
198/78: [lend*[]]
198/79: lend
198/80: a=lend*[]
198/81: a
198/82: a=lend*[0]
198/83: len(a)
198/84:
df_orl=DataFrame({})
for i in col_nam:
    df_orl[i]=lend*[0]
198/85: len(df_orl)
198/86: for i in xrange(lend):df_orl.iloc[i]=dforl[i]
198/87: df_orl.iloc[i]
198/88: i
198/89: i=100
198/90: df_orl.iloc[i]
198/91: len(df_orl.iloc[i])
198/92: dforl[i]
198/93: df_orl.iloc[i]
198/94: df_orl.iloc[i]= dforl[i]
198/95: type(df_orl.iloc[i])
198/96: type(dforl[i])
198/97: df_orl.iloc[i]= Series(dforl[i])
198/98: df_orl.iloc[i]= dforl[i].iloc[0]
198/99: df_orl.iloc[i]
198/100: history
198/101: run csv2orl_2.py
198/102: run csv2orl_2.py
198/103: i
198/104: run csv2orl_2.py
198/105: !top
198/106: !locate ppservey.py
198/107: !top
198/108: vi *2.py
198/109: !vi *2.py
198/110: !locate ppserver.py
198/111: !pip install pp
199/1: run csv2orl_2.py
199/2: len_df_pv
199/3: d_orl
199/4: df_orl=DataFrame({})
199/5:
for i in d_orl:
    df_orl[i]=len_df_pv*[""]
199/6: df_orl2=DataFrame({})
199/7:
for i in d_orl:
    df_orl2[i]=len_df_pv*[""]
199/8: df_orl=df_orl.append(df_orl2)
199/9: len(df_orl)
199/10: df_pv['ERPTYPE']=Series(len_df_pv*['01'])
199/11: df_pv.iloc[100,'ERPTYPE']
199/12: df_pv.loc[100,'ERPTYPE']
199/13: !grep lambda ../*py
199/14: len_sp_em
199/15: dforl=[df_pv for js in xrange(len_sp_em)]
199/16:
for js in xrange(len_sp_em):        #loop for sepecies
    s=sp_em[js]
    dforl[js]['CAS']=Series(len_df_pv*[sp_ef[js]])
    dforl[js]['ANN_EMIS']=Series(df_pv[s+'_EMI'])   #annual emis(Ton/yr)
    dforl[js]['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
    dforl[js]['CEFF']=Series(df_pv[sp_ef[js]+'_EFF'])
199/17: dforl[0]['CAS']
199/18: dforl[0]['CAS'][0]
199/19: for i in xrange(7):print dforl[i]['CAS'][0]
199/20: for i in xrange(7):print dforl[i]['CAS'][i]
199/21: dforl[3]['CAS'][0]
199/22: for i in xrange(7):print dforl[i]['CAS'][i]
199/23: sp_ef[js]
199/24: sp_ef[1]
199/25: sp_ef[2]
199/26:
for js in xrange(len_sp_em):        #loop for sepecies
    s=sp_em[js]
    df=dforl[js]
    df['CAS']=Series(len_df_pv*[sp_ef[js]])
    df['ANN_EMIS']=Series(df_pv[s+'_EMI'])   #annual emis(Ton/yr)
    df['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
    df['CEFF']=Series(df_pv[sp_ef[js]+'_EFF'])
    dforl[js]=df
199/27: dforl[0]['CAS'][0]
199/28: dforl[3]['CAS'][0]
199/29: a=dforl[3]
199/30: a['CAS'][0]
199/31: df['CAS'][0]
199/32: df['CAS']
199/33: df
199/34:
for js in xrange(len_sp_em):        #loop for sepecies
    s=sp_em[js]
    df=dforl[js]
    df['CAS']=Series(len_df_pv*[sp_ef[js]])
    df['ANN_EMIS']=Series(df_pv[s+'_EMI'])   #annual emis(Ton/yr)
    df['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
    df['CEFF']=Series(df_pv[sp_ef[js]+'_EFF'])
    dforl[js]=df
    del dforl[js][s+'_EMI',s+'_EMI_AVD',sp_ef[js]+'_EFF']
199/35:
    for js in xrange(len_sp_em):        #loop for sepecies
        for ks in xrange(len_sp_em):    #loop for sepecies
            s=sp_em[ks]
            del dforl[js][s+'_EMI',s+'_EMI_AVD',sp_ef[js]+'_EFF']
199/36: dforl[1]
199/37: dforl[1].columns
199/38:
    for js in xrange(len_sp_em):        #loop for sepecies
        for ks in xrange(len_sp_em):    #loop for sepecies
            s=sp_em[ks]
            del dforl[js][sp_ef[js]+'_EFF']
            del dforl[js][s+'_EMI_AVD']
            del dforl[js][s+'_EMI']
199/39:
for js in xrange(len_sp_em):        #loop for sepecies
    for ks in xrange(len_sp_em):    #loop for sepecies
        s=sp_em[ks]
        del dforl[js][sp_ef[js]+'_EFF']
        del dforl[js][s+'_EMI_AVD']
        del dforl[js][s+'_EMI']
199/40:
for js in xrange(len_sp_em):        #loop for sepecies
    for ks in xrange(len_sp_em):    #loop for sepecies
        s=sp_em[ks]
        del dforl[js][sp_ef[ks]+'_EFF']
        del dforl[js][s+'_EMI_AVD']
        del dforl[js][s+'_EMI']
199/41: sp_ef
199/42: sp_em
199/43: df_pv.columns
199/44:
for js in xrange(len_sp_em):        #loop for sepecies
    for ks in xrange(len_sp_em):    #loop for sepecies
        s=sp_em[ks]
        if sp_ef[ks]!='CO':del dforl[js][sp_ef[ks]+'_EFF']
        del dforl[js][s+'_EMI_AVD']
        del dforl[js][s+'_EMI']
199/45:
for js in xrange(len_sp_em):        #loop for sepecies
    for ks in xrange(len_sp_em):    #loop for sepecies
        s=sp_em[ks]
        if sp_ef[ks]!='CO':del dforl[js][sp_ef[ks]+'_EFF']
        del dforl[js][s+'_EMI_AVD']
        del dforl[js][s+'_EMI']
199/46: history
199/47:
for js in xrange(len_sp_em):        #loop for sepecies
    s=sp_em[js]
    df=dforl[js]
    df['CAS']=Series(len_df_pv*[sp_ef[js]])
    df['ANN_EMIS']=Series(df_pv[s+'_EMI'])   #annual emis(Ton/yr)
    df['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
    df['CEFF']=Series(df_pv[sp_ef[js]+'_EFF'])
    dforl[js]=df
199/48: dforl=[df_pv for js in xrange(len_sp_em)]
199/49:
for js in xrange(len_sp_em):        #loop for sepecies
    s=sp_em[js]
    df=dforl[js]
    df['CAS']=Series(len_df_pv*[sp_ef[js]])
    df['ANN_EMIS']=Series(df_pv[s+'_EMI'])   #annual emis(Ton/yr)
    df['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
    df['CEFF']=Series(df_pv[sp_ef[js]+'_EFF'])
    dforl[js]=df
199/50: js
199/51: dforl[0]
199/52: dforl[0].columns
199/53: df_pv[0].columns
199/54: df_pv.columns
199/55: cols=list(df_pv.columns)
199/56: col_em=filter((lambda x: 'EMI' in x),cols)
199/57: col_em
199/58: df_pv=read_csv('df_pv.csv')
199/59: cols=list(df_pv.columns)
199/60: col_em=filter((lambda x: 'EMI' in x),cols)
199/61: col_em
199/62: col_em=filter((lambda x: 'EFF' in x),cols)
199/63: col_em
199/64: del df_pv['CO_EFF', 'NOX_EFF']
199/65: del df_pv['CO_EFF']
199/66: run csv2orl_2.py
199/67: run csv2orl_2.py
199/68: cols
199/69: run csv2orl_2.py
199/70: sp_ef
199/71: run csv2orl_2.py
199/72: sp_em
199/73: run csv2orl_2.py
199/74: cols
199/75: df_pv['DICT_NO']
199/76:
oldDICT=df_pv['DICT_NO']
df_pv['DICT_NO']=Series([70000+int(x/100)*1000+x%100 for x in oldDICT])
199/77: df_pv['DICT_NO']
199/78:
df_pv=read_csv('df_pv.csv')     #input teds and pivoted file
oldDICT=df_pv['DICT_NO']
df_pv['DICT_NO']=Series([700000+int(x/100)*1000+x%100 for x in oldDICT])
199/79: df_pv['DICT_NO']
199/80: !vi df_orl.head
199/81: !rm cancer.txt
199/82: run csv2orl_2.py
199/83: !grep drop ../*py
199/84: !grep drop /home/python_eg/*/*py
199/85: run csv2orl_2.py
199/86: !lst
199/87: !more df_orl.csv
200/1: run csv2orl_2.py
200/2: !pwd
200/3: col_em=filter((lambda x: 'EMI' in x[len(x)-4:len(x)]),cols)
200/4: col_em
200/5: col_em=filter((lambda x: 'AVD' in x[len(x)-4:len(x)]),cols)
200/6: cols
200/7: col_em=filter((lambda x: '_AVD' in x[len(x)-4:len(x)]),cols)
200/8: col_em
200/9: run csv2orl_2.py
200/10: df_pv['VOC_EMI']=df_pv['NMHC_EMI']
200/11: df_pv['VOC_EMI_AVD']=df_pv['NMHC_EMI_AVD']
200/12: df_pv['VOC_EMI_AVD']=df_pv['NMHC_EMI_AVD']
200/13: run csv2orl_2.py
200/14: run csv2orl_2.py
200/15: df_pv[('VOC_EMI_AVD','VOC_EMI')]=df_pv[('NMHC_EMI_AVD','NMHC_EMI')]
200/16: df_pv['VOC_EMI_AVD','VOC_EMI']=df_pv['NMHC_EMI_AVD','NMHC_EMI']
200/17: run csv2orl_2.py
200/18: sp_em
200/19: run csv2orl_2.py
200/20: sp_em
200/21: set(df_orl['CAS'])
200/22: run csv2orl_2.py
200/23: set(df_orl['CAS'])
200/24: d_orl
200/25: dforl
200/26: len_sp_ou=len(sp_ou)
200/27: dforl=[df_pv for js in xrange(len_sp_ou)]
200/28: dforl
200/29: df_pv
200/30: dforl[0]
200/31: dforl[0]
200/32: s
200/33: js
200/34: s=sp_ou[5]
200/35: df['CAS']=Series(len_df_pv*[s])
200/36: len_df_pv=len(df_pv)
200/37: df['CAS']=Series(len_df_pv*[s])
200/38: df=dforl[js]
200/39: df['CAS']=Series(len_df_pv*[s])
200/40: df
200/41: run csv2orl_2.py
200/42: df
200/43: set(df_orl['CAS'])
200/44:
    len_df_pv=len(df_pv)        #dealing unit conv. etc. as a batch
    len_sp_ou=len(sp_ou)
    for i in d_orl:#copy the ID,NAMEs,and STKs
        c=d_orl[i] #i is new, c is teds col name
        df_pv[i]=Series(df_pv[c])
    df_pv['ERPTYPE']=Series(len_df_pv*['01'])
    df_pv.loc[df_pv['NO_S'].map(lambda x: x[0] =='P'),'ERPTYPE']='02'
    dforl=[df_pv for js in xrange(len_sp_ou)]
    for js in xrange(len_sp_ou):        #loop for sepecies
        s=sp_ou[js]
        df=dforl[js]
        df['CAS']=Series(len_df_pv*[s])
        df['ANN_EMIS']=Series(df_pv[s+'_EMI'])  #annual emis(Ton/yr)
        df['AVD_EMIS']=Series(df_pv[s+'_EMI_AVD'])#avged daily emis(T/d)
        df['CEFF']=Series(df_pv[sp_ef[js]+'_EFF']) #linkng the sp. names
        dforl[js]=df
200/45: dforl[0].columns
200/46: a=dforl[0].columns
200/47: b=dforl[1].columns
200/48: a==b
200/49: set(dforl[0]['CAS'])
200/50: set(dforl[1]['CAS'])
200/51: set(dforl[1]['C_NO'])
200/52: a=set(dforl[1]['C_NO'])
200/53: a=set(dforl[0]['C_NO'])
200/54: b=set(dforl[0]['C_NO'])
200/55: a=set(dforl[1]['C_NO'])
200/56: b==a
200/57: d_orl[i]
200/58: i
200/59: df_pv.columns
200/60: run csv2orl_2.py
200/61: run csv2orl_2.py
200/62: set(df_orl['CAS'])
200/63: df_orl.columns
200/64: set(df_orl['SCC'])
200/65: set(df_orl['SIC'])
200/66: df_orl.columns
200/67: set(df_orl[''])
200/68: set(df_orl['XLOC'])
200/69: d_orl
200/70: 'SCC'=='scc'
200/71: run csv2orl_2.py
200/72: set(df_orl['SCC'])
200/73: set(df_orl['CAS'])
200/74: run csv2orl_2.py
200/75: set(df_orl['CAS'])
200/76: run csv2orl_2.py
200/77: run csv2orl_2.py
200/78: set(df_orl['ANN_EMIS'])
200/79: df_pv
200/80: a=DataFrame({'test':Series([1,2,3])})
200/81: a
200/82: b=DataFrame({'test':Series([4,5,6])})
200/83: c=a.append(b)
200/84: c
200/85: a=DataFrame({'test':Series([1,2,3]),'check':['a','b','c']})
200/86: a
200/87: b=DataFrame({'test':Series([4,5,6]),'check':['d','e','f']})
200/88: c=a.append(b)
200/89: c
200/90: c=a.append(b).reset_index
200/91: c
200/92: c=a.append(b).reset_index()
200/93: c
200/94: set(df_pv['ERPTYPE'])
200/95: run csv2orl_2.py
200/96: set(df_pv['ERPTYPE'])
200/97: set(df_orl['ERPTYPE'])
200/98: set(df_orl['CEFF'])
200/99: set(df_orl['SCC'])
200/100: len(set(df_orl['SCC']))
200/101: len(set(df_pv['SCC']))
200/102: run csv2orl_2.py
200/103: set(df_orl['CAS'])
200/104: run csv2orl_2.py
200/105: run csv2orl_2.py
200/106: run csv2orl_2.py
200/107: set(df_orl['CAS'])
200/108: df_pv['CAS1']
200/109: df_pv['CAS2']
200/110: df_pv['CAS3']
200/111: run csv2orl_2.py
200/112: c=a.append(b).reset_index()
200/113: a=DataFrame({'test':Series([1,2,3]),'check':['a','b','c']})
200/114: b=DataFrame({'test':Series([4,5,6]),'check':['d','e','f']})
200/115: c=a.append(b).reset_index()
200/116: c
200/117: c=c.append(a).reset_index()
200/118: c
200/119: c=c.append(b).reset_index()
200/120: del c['index']
200/121: del c['level_0']
200/122: c
200/123: c=c.append(b).reset_index().drop['index']
200/124: c=c.append(b).reset_index()
200/125: c
200/126: run csv2orl_2.py
200/127: set(df_orl['CAS'])
200/128: a
200/129: b
200/130: a=DataFrame({'test':Series([1,2,3]),'check':['a','b','c']})
200/131: a=DataFrame({'test':Series([1,2,3]),'check':['a','b','c']}).reset_index
200/132: b=DataFrame({'test':Series([4,5,6]),'check':['d','e','f']}).reset_index
200/133: c=c.append(b).reset_index()
200/134: a
200/135: b
200/136: run csv2orl_2.py
200/137: run csv2orl_2.py
200/138: run csv2orl_2.py
200/139: a=DataFrame('test':100*[1])
200/140: a=DataFrame({'test':100*[1]})
200/141: b=DataFrame({'test':100*[2]})
200/142: c=c.append(b).reset_index()
200/143: c
200/144: c=a.append(b).reset_index()
200/145: c
200/146: a=DataFrame({'test':100*['A']})
200/147: b=DataFrame({'test':100*['B']})
200/148: c=a.append(b).reset_index()
200/149: a
200/150: b
200/151: c
200/152: run csv2orl_2.py
200/153: run csv2orl_2.py
200/154: !python csv2orl_2.py
200/155: dforl[1]
200/156: dforl[1].columns
200/157: df_orl[1].columns
200/158: df_orl.columns
200/159: run csv2orl_2.py
200/160: filter((lambda x: '_' in x[len(x)-4:len(x)]),cols)
200/161: filter((lambda x: '_' in x[len(x)-4:len(x)]),df_pv.columns)
200/162: run csv2orl_2.py
200/163: run csv2orl_2.py
200/164: run csv2orl_2.py
200/165: filter((lambda x: '_' in x[len(x)-4:len(x)]),df_pv.columns)
200/166: run csv2orl_2.py
200/167: run csv2orl_2.py
200/168: run csv2orl_2.py
200/169: run csv2orl_2.py
200/170: run csv2orl_2.py
200/171: filter((lambda x: '_' in x[len(x)-4:len(x)]),df_pv.columns)
200/172: run csv2orl_2.py
200/173: run csv2orl_2.py
200/174: d_orl
200/175: run csv2orl_2.py
200/176: run csv2orl_2.py
200/177:
    for js in xrange(len_sp_ou)
        dforl+str(js)=df_pv
200/178:
    for js in xrange(len_sp_ou):
        dforl+str(js)=df_pv
200/179: df_nam=['dforl'+str(js) for js in xrange(len_sp_ou)]
200/180:
    for js in xrange(len_sp_ou):
        df_nam[js]=df_pv
200/181: dforl1
200/182: df_nam[1]
200/183: run csv2orl_2.py
200/184: run csv2orl_2.py
200/185: run csv2orl_2.py
200/186: run csv2orl_2.py
200/187: run csv2orl_2.py
200/188: run csv2orl_2.py
200/189: run csv2orl_2.py
200/190: run csv2orl_2.py
200/191: set(df_orl['CASCEFF'])
200/192: len(df_orl['CASCEFF'])
200/193: len(df_pv)
200/194: run csv2orl_2.py
200/195: run csv2orl_2.py
200/196: df_orl.columns
200/197: sox=df_orl[df_orl['CAS']=='SOX']['ANN_EMIS']
200/198: sum(sox)
200/199: sum(df_pv['SOX_EMI'])
200/200: len(sox)
200/201: len(df_pv[df_pv['SOX_EMI']>0])
200/202: len(df_pv)
200/203: .90718474*101641.81333120806
200/204: a=['PM10', 'PMC', 'PM25']
200/205:
for i in a:
    print df_orl[df_orl['CAS']==i]['ANN_EMIS']
200/206:
for i in a:
    print sum(df_orl[df_orl['CAS']==i]['ANN_EMIS'])
200/207: a
200/208: sum(df_pv['TSP_EMI'])
200/209: df_pv=read_csv('df_pv.csv')
200/210: sum(df_pv['TSP_EMI'])
200/211:
for i in a:
    print sum(df_orl[df_orl['CAS']==i]['ANN_EMIS'])
200/212: a
200/213: 14208.4610021+32096.1450476
200/214: (14208.4610021+32096.1450476)*.90718474
200/215: run csv2orl_2.py
200/216: df_pv.columns
200/217: df_pv=read_csv('df_pv.csv')
200/218: df_pv.columns
200/219: df_pv[df_pv['DIA']==0]['NO_S']
200/220: !vi csv2orl.py
200/221: !vi /home/camxruns/2013/emis/smoke/dict.txt
200/222: !vi csv2orl.py
200/223: !pwd
200/224: !vi csv2orl.csv
200/225: !ls *.csv
200/226: !vi df_orl.csv
200/227: !vi csv2orl.py
200/228: !vi csv2orl2.py
200/229: !ls *.py
200/230: !vi csv2orl2.py
200/231: !vi csv2orl_2.py
200/232: df_orl['SCC']=[str(x) for x in df_orl['SCC'])
200/233: df_orl['SCC']=[str(x) for x in df_orl['SCC']]
200/234: !vi csv2orl_2.py
200/235: !vi df_orl.head
200/236: !vi csv2orl_2.py
200/237: run csv2orl_2.py
200/238: !vi df_orl.csv
200/239: !vi csv2orl_2.py
200/240: run csv2orl_2.py
200/241: !vi df_orl.csv
200/242: !vi csv2orl_2.py
200/243: len_df_orl
200/244: len(df_orl)
200/245: !vi df_orl.csv
200/246: !vi csv2orl_2.py
200/247: !vi df_orl.csv
200/248: !vi csv2orl_2.py
200/249: !vi df_orl.csv
200/250: !vi csv2orl_2.py
200/251: run csv2orl_2.py
200/252: !vi df_orl.csv
200/253: run csv2orl_2.py
200/254: run csv2orl_2.py
200/255: !vi csv2orl_2.py
200/256: run csv2orl_2.py
200/257: !vi df_orl.csv
200/258: run csv2orl_2.py
200/259: !vi csv2orl_2.py
200/260: run csv2orl_2.py
200/261: !vi df_orl.csv
200/262: !vi csv2orl_2.py
200/263: run csv2orl_2.py
200/264: !vi df_orl.csv
200/265: set(df_orl['CTYPE'])
200/266: !vi csv2orl_2.py
200/267: run csv2orl_2.py
200/268: set(df_orl['CTYPE'])
200/269: !vi df_orl.csv
200/270: !grep PB df_orl.csv
200/271: !grep \"PB\" df_orl.csv
200/272: !vi df_orl.csv
200/273: !vi csv2orl_2.py
200/274: !vi csv2orl_2.py
200/275: run csv2orl_2.py
200/276: !v
200/277: !vi csv2orl_2.py
200/278: run csv2orl_2.py
200/279: !vi df_orl.csv
200/280: !vi csv2orl_2.py
200/281: run csv2orl_2.py
200/282: !vi csv2orl_2.py
200/283: run csv2orl_2.py
200/284: !vi csv2orl_2.py
200/285: run csv2orl_2.py
200/286: !vi df_orl.csv
200/287: !vi df_orl.csv
200/288: !vi csv2orl_2.py
200/289: run csv2orl_2.py
201/1: run csv2orl_2.py
201/2: len(set(df_orl['SIC']))
201/3: a=list(set(df_orl['SIC']))
201/4: a1=[x[0:1] for x in a]
201/5: set(a1)
201/6: a1=[x[0:2] for x in a]
201/7: set(a1)
201/8: len(set(a1))
201/9: a2=[x[2:4] for x in a]
201/10: len(set(a2))
201/11: a2
201/12: len(set(a2))
201/13: set(a2)
201/14: !his oldy
201/15: !his
201/16: !history
201/17: !vi csv2orl_2.py
201/18: df_eg=read_csv(oldy+'ptinv_ptipm_cap2005v2_orl_nc.csv')
201/19: oldy
201/20: !ls
201/21: ls *.py
201/22: more compareItems.py
201/23: !more rdtxt.py
201/24: !grep skip /home/HRA/QueryAndScratchWebs/select*.py
201/25: !grep skip /home/HRA/QueryAndScratchWebs/*.py
201/26: !grep csv /home/HRA/QueryAndScratchWebs/*.py
201/27: !grep xls /home/HRA/QueryAndScratchWebs/*.py
201/28: more rdtxt.py
202/1: run rdtxt.py
202/2: pwd
202/3: cd oldy
202/4: run rdtxt.py
202/5: df1
202/6: df_1
202/7: !vi rdtxt.py
202/8: main()
202/9: df_1
202/10: !vi rdtxt.py
202/11: df1
201/29: !vi rdtxt.py
202/12:     fname1='ptinv_ptipm_cap2005v2_orl_nc'
202/13:     fname2='ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc'
202/14:     del df1[0:6]
202/15:     df2=rdtxt(fname2+'.txt',",")
202/16: df1
202/17: df_1
202/18: fname1='ptinv_ptipm_cap2005v2_orl_nc'
202/19: fname2='ptinv_ptnonipm_xportfrac_cap2005v2_orl_nc'
202/20: df1=rdtxt(fname1+'.txt',",")
202/21: del df1[0:6]
202/22: df1=del7071(df1)
202/23: fname3='tab8.25.ORLforPTINV'
202/24: df3=rdtxt(fname3," ")
202/25: del df3[0:2]
202/26: cols=[x[1] for x in df3]
202/27:
for i in xrange(31,70):
    cols.append('col'+str(i))
202/28: df_1=DFfromDF(df1,cols)
202/29: df_1.columns
202/30: len(set(df_1['SIC']))
202/31: set(df_1['SIC'])
202/32: history
202/33: df2=rdtxt(fname2+'.txt',",")
202/34: del df2[0:5]
202/35: df2=del7071(df2)
202/36: df_2=DFfromDF(df2,cols)
202/37: set(df_2['SIC'])
202/38: len(set(df_2['SIC']))
202/39: a=list(set(df_2['SIC']))
202/40: set([x[0:2] for x in a])
202/41: len(set([x[0:2] for x in a]))
202/42: len(set([x[2:4] for x in a]))
202/43: set([x[2:4] for x in a])
202/44: !grep with *py
203/1: fname='sicdesc.txt'
203/2: !ls -l 'sicdesc.txt'
203/3: !ls -l 'sicdesc*.txt'
203/4: !ls -l sicdesc*.txt
203/5: !ls -l sic*
203/6: fname='sic_desc.txt'
202/45: vi rdtxt.py
202/46: !vi rdtxt.py
203/7:
with open(fname)as ftext:
    (sic,desc)=([],[])
    for line in ftext:
        sic.append(line.split()[0])
        desc.append(line.split()[1:])
203/8: len(set(sic))
203/9: len(sic)
203/10: sic
203/11: desc
203/12: from pandas import *
203/13: df=DataFrame({'SIC':sic,'DESC':desc})
203/14: df
203/15: fname
203/16: fname[-4:]
203/17: fname[:-4]
203/18: df.set_index('SIC').to_csv(fname[:-4]+'.csv')
203/19: !lst
203/20: history
203/21: vi rd_sic.py
203/22: !vi rd_sic.py
203/23: !pwd
203/24: !lst
203/25: !vi TEDS9.0SIC.csv
203/26: df_twsic=read_csv('TEDS9.0SIC.csv')
203/27: df_twsic
203/28: df
203/29: co=df_twsic.columns
203/30: co[0]
203/31: print co[0]
203/32: print df_twsic
203/33: print df_twsic.iloc[1]
203/34: print df_twsic.iloc[1].decode('big5')
203/35: print df_twsic.iloc[1].encode('big5')
203/36: df_twsic=df_twsic.reset_index(co[0])
203/37: df_twsic=df_twsic.set_index(co[0])
203/38: df_twsic
203/39: co[2]
203/40: del df_twsic[co[2]]
201/30: !grep conca *.py
203/41: df
203/42: df_2=concat((df,df_twsic),axis=1)
203/43: df_2
203/44: df_twsic['SIC']=df_twsic[df_twsic.index]
203/45: df_twsic=df_twsic.reset_index()
203/46: df_twsic
203/47: df_twsic[co[0]]
203/48: df_twsic['SIC']=df_twsic[co[0]]
203/49: del df_twsic[co[0]]
203/50: df=df.reset_index()
203/51: df['SIC']
203/52: df_2=concat([df,df_twsic],axis=0)
203/53: df_2(head)
203/54: df_2.head(10)
203/55:
df_2.head(100
)
203/56: df_2
203/57: df_2.columns
203/58: df_2['SIC']
203/59: df_twsic['SIC']
203/60: df['SIC']
203/61: df['t']=[float(x) for x in df['SIC']]
203/62: df['t']=[int(x) for x in df['SIC']]
203/63: df_twsic['SIC']
203/64: df_twsic['t']=[str(x) for x in df_twsic['SIC']]
203/65: df_twsic['SIC']=df_twsic['t']
203/66: del df_twsic['t']
203/67: df_twsic['SIC']
203/68: df_2=concat([df,df_twsic],axis=0)
203/69: df_2['SIC']
203/70: df_2=concat([df,df_twsic],axis=1)
203/71: df_2['SIC']
203/72: df_2.head(10)
203/73: df=df.set_index('SIC')
203/74: df_twsic=df_twsic.set_index('SIC')
203/75: df_2=concat([df,df_twsic],axis=1)
203/76: df_2
203/77: history
203/78: df_twsic=df_twsic.reset_index()
203/79: df=df.reset_index()
203/80: df.head(10)
203/81: df_twsic.head(10)
203/82: df_2=merge(left=df,right=df_twsic,left_on='SIC',right_on='SIC')
203/83: df_2.shape
203/84: df_2
203/85: df_2.columns
203/86: print df_2.columns[3]
203/87: a=df_2.columns[3]
203/88: print df_2.loc['SIC'==111,a]
203/89: print df_2.loc[df_2['SIC']==111,a]
203/90: print df_2.loc[df_2['SIC']==111,a].encode('utf-8')
203/91: b=df_2.loc[df_2['SIC']==111,a]
203/92: b[1]
203/93: b[0]
203/94: df_2
203/95: history
203/96: !vi
203/97: !vi TEDS9.0SIC.csv
203/98: !vi rd_sic.py
203/99: !vi rd_sic.py
203/100: !vi rd_sic.py
203/101: !vi rd_sic.py
204/1: run rd_acute
204/2: !vi vi rd_acute.py
204/3: run rd_acute
204/4: !pip install xlrd --upgrade
204/5: !vi rd_acute.py
204/6: run rd_acute
204/7: !v
204/8: !vi rd_acute.py
204/9: run rd_acute
204/10: !pwd
204/11: xl_workbook
204/12: xl_workbook.columns
204/13: sheet_names = xl_workbook.sheet_names()
204/14: sheet_names
204/15: sht1=xl_workbook.sheet_by_name(sheet_names[0])
204/16: sht1.row(0)
204/17: print sht1.row(0)
204/18: print sht1.row(0)[0]
204/19: print( sht1.row(0)[0])
204/20: cols=sht1.row(0)
204/21: sht1.ncols
204/22: sht1.nrows
204/23:
from openpyxl import Workbook, load_workbook
fname='acute.xlsx'
wb= load_workbook(fname,data_only='true')
204/24: ws1=wb('Sheet1')
204/25: ws1=wb['Sheet1']
204/26: ws1.nrows
204/27: help ws1
204/28: help load_workbook
204/29: help(load_workbook)
204/30: help(ws1)
204/31: ws1.max_row
204/32: help(ws1)
204/33: cols
204/34: cols.row[0]
204/35: cols.columns
204/36: ws1.columns
204/37: help(ws1)
204/38: ws1.iter_cols
204/39: 1=ws1.iter_cols
204/40: a=ws1.iter_cols
204/41: a
204/42: help(ws1)
204/43: a=ws1.columns
204/44: a
204/45: a[0]
204/46: ws1
204/47: print ws1
204/48: help(ws1)
204/49: print ws1.values
204/50: ws1.values
204/51: ws1.values(A:F)
204/52: ws1.values(0:5)
204/53: help(ws1)
204/54: df = DataFrame(ws1.values)
204/55: df
204/56: df['0']
204/57: df[0]
204/58: data=ws1.values
204/59: cols = next(data)[1:]
204/60: cols
204/61: data1=list(data)
204/62: data
204/63: data1
204/64: idx = [r[0] for r in data]
204/65: idx
204/66: idx = [r[0] for r in data1]
204/67: idx
204/68: data2 = (islice(r, 1, None) for r in data1)
204/69: data2
204/70: df = DataFrame(data2, index=idx, columns=cols)
204/71: from itertools import islice
204/72: df = DataFrame(data2, index=idx, columns=cols)
204/73: df
204/74: ws=ws
204/75: ws=ws1
204/76:
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df = DataFrame(data, index=idx, columns=cols)
204/77: df
204/78: history
204/79: cas=df['CAS']
204/80: df
204/81: cas=df['CAS NO.']
204/82: cas
204/83: df.reset_index
204/84: df=df.reset_index
204/85: df
204/86: df.columns
204/87: df
204/88: df = DataFrame(data, index=idx, columns=cols)
204/89: cols
204/90: cas=df['CAS NO.']
204/91: cas
204/92: run rd_acute
204/93: cas=df['CAS NO.']
204/94: cas
204/95: cas[1]
204/96: cas=list(df['CAS NO.'])
204/97: cas
204/98: help(cirpy)
204/99: cirpy.resolve(' iupac_name','1746-01-6')
204/100: cirpy.resolve('iupac_name','1746016')
204/101: cirpy.resolve('1746016','iupac_nam')
204/102: cirpy.resolve('1746016','cas')
204/103: cirpy.resolve(1746016,'cas')
204/104: df
204/105: df[1]
204/106: df
204/107: cols[1]
204/108: cols[0]
204/109: df[cols[0]]
204/110: cirpy.resolve('HF','cas')
204/111: cirpy.resolve('Hydrogen Fluoride','cas')
204/112: cirpy.resolve('hydrogen fluoride','cas')
204/113: cirpy.resolve('7664-39-3','cas')
204/114: help(cirpy)
204/115: cirpy.resolve('7664-39-3','names')
204/116: cirpy.resolve('Hydrogen fluoride','cas')
204/117: cirpy.resolve('Hydrogen fluoride','cas')
204/118: cas
204/119: nam=[cirpy.resolve(i,'cas') for i in cas]
204/120: nam
204/121: nam=[cirpy.resolve(i, 'names') for i in cas]
204/122: nam
204/123: nam[0][0]
204/124:
for i in xrange(6):
    print nam[i][0]
204/125:
for i in xrange(5):
    print nam[i][0]
204/126: nam[3]
204/127: cirpy.resolve('ammonia','cas')
204/128: nh3_cas=cirpy.resolve('ammonia','cas')
204/129: nam_nh3=[cirpy.resolve(i, 'names') for i in nh3_cas]
204/130: print nam_nh3
204/131:
for i in nam_nh3:
    print i
204/132:
for i in nam_nh3:
    print i,nam_nh3[0]
204/133:
for i in nam_nh3:
    if gas in i: print i
204/134:
for i in nam_nh3:
    if 'gas' in i: print i
204/135:
for i in nam_nh3:
    if 'Gas' in i: print i
204/136: history
204/137: !pip install seaborn
204/138: !pip install scikit-learn
204/139: from __future__ import print_function, division
204/140: import warnings
204/141: warnings.filterwarnings('ignore')
204/142: %install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
204/143: !install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
204/144: install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
204/145: install_ext "https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py"
204/146: help(install_ext)
204/147: install_ext
205/1:
%install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
%load_ext watermark
205/2:
from __future__ import print_function, division  # for compatibility with python 3.x
import warnings
warnings.filterwarnings('ignore')  # don't print out warnings
%install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
%load_ext watermark
205/3: !pip install watermark
205/4:
from __future__ import print_function, division  # for compatibility with python 3.x
import warnings
warnings.filterwarnings('ignore')  # don't print out warnings
%install_ext https://raw.githubusercontent.com/rasbt/watermark/master/watermark.py
%load_ext watermark
205/5: !pip install install_ext
205/6:
from __future__ import print_function, division  # for compatibility with python 3.x
import warnings
warnings.filterwarnings('ignore')  # don't print out warnings
%load_ext watermark
205/7:
from pydoc import help  # can type in the python console `help(name of function)` to get the documentation
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import scale
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from scipy import stats
from IPython.display import display, HTML

# figures inline in notebook
%matplotlib inline

np.set_printoptions(suppress=True)

DISPLAY_MAX_ROWS = 20  # number of max rows to print for a DataFrame
pd.set_option('display.max_rows', DISPLAY_MAX_ROWS)
205/8: %qtconsole
205/9: %qtconsole
205/10:
import pandas as pd
data = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data", header=None)
data.columns = ["V"+str(i) for i in range(1, len(data.columns)+1)]  # rename column names to be similar to R naming convention
data.V1 = data.V1.astype(str)
X = data.loc[:, "V2":]  # independent variables data
y = data.V1  # dependednt variable data
205/11:
pd.tools.plotting.scatter_matrix(data.loc[:, "V2":"V6"], diagonal="kde")
plt.tight_layout()
plt.show()
205/12: sns.lmplot("V4", "V5", data, hue="V1", fit_reg=False);
205/13:
ax = data[["V2","V3","V4","V5","V6"]].plot()
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5));
205/14:  calcBetweenGroupsVariance(X.V2, y)
205/15:
 def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw
calcBetweenGroupsVariance(X.V2, y)
205/16:
 def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw
def calcBetweenGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    # calculate the overall grand mean:
    grandmean = np.mean(variable)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the mean and standard deviation for group i:
        meani = np.mean(levelidata)
        sdi = np.std(levelidata)
        numi = levelilength * ((meani - grandmean)**2)
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the between-groups variance
    Vb = numtotal / (numlevels - 1)
    return(Vb)
calcWithinGroupsVariance(X.V2, y)
calcBetweenGroupsVariance(X.V2, y)
205/17:
 def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw
def calcBetweenGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    # calculate the overall grand mean:
    grandmean = np.mean(variable)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the mean and standard deviation for group i:
        meani = np.mean(levelidata)
        sdi = np.std(levelidata)
        numi = levelilength * ((meani - grandmean)**2)
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the between-groups variance
    Vb = numtotal / (numlevels - 1)
    return(Vb)
print calcWithinGroupsVariance(X.V2, y)
print calcBetweenGroupsVariance(X.V2, y)
205/18: calcWithinGroupsVariance(X.V2, y)
205/19:
 def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw
def calcBetweenGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    # calculate the overall grand mean:
    grandmean = np.mean(variable)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the mean and standard deviation for group i:
        meani = np.mean(levelidata)
        sdi = np.std(levelidata)
        numi = levelilength * ((meani - grandmean)**2)
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the between-groups variance
    Vb = numtotal / (numlevels - 1)
    return(Vb)
calcWithinGroupsVariance(X.V2, y)
calcBetweenGroupsVariance(X.V2, y)
205/20:
 def calcWithinGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set(groupvariable))
    numlevels = len(levels)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the standard deviation for group i:
        sdi = np.std(levelidata)
        numi = (levelilength)*sdi**2
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the within-groups variance
    Vw = numtotal / (denomtotal - numlevels)
    return Vw
def calcBetweenGroupsVariance(variable, groupvariable):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    # calculate the overall grand mean:
    grandmean = np.mean(variable)
    # get the mean and standard deviation for each group:
    numtotal = 0
    denomtotal = 0
    for leveli in levels:
        levelidata = variable[groupvariable==leveli]
        levelilength = len(levelidata)
        # get the mean and standard deviation for group i:
        meani = np.mean(levelidata)
        sdi = np.std(levelidata)
        numi = levelilength * ((meani - grandmean)**2)
        denomi = levelilength
        numtotal = numtotal + numi
        denomtotal = denomtotal + denomi
    # calculate the between-groups variance
    Vb = numtotal / (numlevels - 1)
    return(Vb)

def calcSeparations(variables, groupvariable):
    # calculate the separation for each variable
    for variablename in variables:
        variablei = variables[variablename]
        Vw = calcWithinGroupsVariance(variablei, groupvariable)
        Vb = calcBetweenGroupsVariance(variablei, groupvariable)
        sep = Vb/Vw
        print("variable", variablename, "Vw=", Vw, "Vb=", Vb, "separation=", sep)
calcWithinGroupsVariance(X.V2, y)
calcBetweenGroupsVariance(X.V2, y)
205/21: calcSeparations(X, y)
205/22:
 corr = stats.pearsonr(X.V2, X.V3)
print("p-value:\t", corr[1])
print("cor:\t\t", corr[0])
205/23:
corrmat = X.corr()
sns.heatmap(corrmat, vmax=1., square=False).xaxis.tick_top()
205/24:
# adapted from http://matplotlib.org/examples/specialty_plots/hinton_demo.html
def hinton(matrix, max_weight=None, ax=None):
    """Draw Hinton diagram for visualizing a weight matrix."""
    ax = ax if ax is not None else plt.gca()

    if not max_weight:
        max_weight = 2**np.ceil(np.log(np.abs(matrix).max())/np.log(2))

    ax.patch.set_facecolor('lightgray')
    ax.set_aspect('equal', 'box')
    ax.xaxis.set_major_locator(plt.NullLocator())
    ax.yaxis.set_major_locator(plt.NullLocator())

    for (x, y), w in np.ndenumerate(matrix):
        color = 'red' if w > 0 else 'blue'
        size = np.sqrt(np.abs(w))
        rect = plt.Rectangle([x - size / 2, y - size / 2], size, size,
                             facecolor=color, edgecolor=color)
        ax.add_patch(rect)

    nticks = matrix.shape[0]
    ax.xaxis.tick_top()
    ax.set_xticks(range(nticks))
    ax.set_xticklabels(list(matrix.columns), rotation=90)
    ax.set_yticks(range(nticks))
    ax.set_yticklabels(matrix.columns)
    ax.grid(False)

    ax.autoscale_view()
    ax.invert_yaxis()

hinton(corrmat)
205/25:
 def mosthighlycorrelated(mydataframe, numtoreport):
    # find the correlations
    cormatrix = mydataframe.corr()
    # set the correlations on the diagonal or lower triangle to zero,
    # so they will not be reported as the highest ones:
    cormatrix *= np.tri(*cormatrix.values.shape, k=-1).T
    # find the top n correlations
    cormatrix = cormatrix.stack()
    cormatrix = cormatrix.reindex(cormatrix.abs().sort_values(ascending=False).index).reset_index()
    # assign human-friendly names
    cormatrix.columns = ["FirstVariable", "SecondVariable", "Correlation"]
    return cormatrix.head(numtoreport)
205/26: mosthighlycorrelated(X, 10)
205/27:
standardisedX = scale(X)
standardisedX = pd.DataFrame(standardisedX, index=X.index, columns=X.columns)
standardisedX.apply(np.std)
205/28:
pca = PCA().fit(standardisedX)
def pca_summary(pca, standardised_data, out=True):
    names = ["PC"+str(i) for i in range(1, len(pca.explained_variance_ratio_)+1)]
    a = list(np.std(pca.transform(standardised_data), axis=0))
    b = list(pca.explained_variance_ratio_)
    c = [np.sum(pca.explained_variance_ratio_[:i]) for i in range(1, len(pca.explained_variance_ratio_)+1)]
    columns = pd.MultiIndex.from_tuples([("sdev", "Standard deviation"), ("varprop", "Proportion of Variance"), ("cumprop", "Cumulative Proportion")])
    summary = pd.DataFrame(zip(a, b, c), index=names, columns=columns)
    if out:
        print("Importance of components:")
        display(summary)
    return summary
summary = pca_summary(pca, standardisedX)
Importance of components:
205/29:
pca = PCA().fit(standardisedX)
def pca_summary(pca, standardised_data, out=True):
    names = ["PC"+str(i) for i in range(1, len(pca.explained_variance_ratio_)+1)]
    a = list(np.std(pca.transform(standardised_data), axis=0))
    b = list(pca.explained_variance_ratio_)
    c = [np.sum(pca.explained_variance_ratio_[:i]) for i in range(1, len(pca.explained_variance_ratio_)+1)]
    columns = pd.MultiIndex.from_tuples([("sdev", "Standard deviation"), ("varprop", "Proportion of Variance"), ("cumprop", "Cumulative Proportion")])
    summary = pd.DataFrame(zip(a, b, c), index=names, columns=columns)
    if out:
        print("Importance of components:")
        display(summary)
    return summary
summary = pca_summary(pca, standardisedX)
205/30: np.sum(summary.sdev**2)
205/31:
printsummary.sdev
np.sum(summary.sdev**2)
205/32:
print summary.sdev
np.sum(summary.sdev**2)
205/33:
print(summary.sdev)
np.sum(summary.sdev**2)
205/34:
def screeplot(pca, standardised_values):
    y = np.std(pca.transform(standardised_values), axis=0)**2
    x = np.arange(len(y)) + 1
    plt.plot(x, y, "o-")
    plt.xticks(x, ["Comp."+str(i) for i in x], rotation=60)
    plt.ylabel("Variance")
    plt.show()

screeplot(pca, standardisedX)
205/35:  pca.components_[0]
205/36:
def pretty_scalings(lda, X, out=False):
    ret = pd.DataFrame(lda.scalings_, index=X.columns, columns=["LD"+str(i+1) for i in range(lda.scalings_.shape[1])])
    if out:
        print("Coefficients of linear discriminants:")
        display(ret)
    return ret

pretty_scalings_ = pretty_scalings(lda, X, out=True)
205/37:
def pretty_scalings(lda, X, out=False):
    ret = pd.DataFrame(lda.scalings_, index=X.columns, columns=["LD"+str(i+1) for i in range(lda.scalings_.shape[1])])
    if out:
        print("Coefficients of linear discriminants:")
        display(ret)
    return ret
lda = LinearDiscriminantAnalysis().fit(X, y)
pretty_scalings_ = pretty_scalings(lda, X, out=True)
205/38:
def calclda(variables, loadings):
    # find the number of samples in the data set and the number of variables
    numsamples, numvariables = variables.shape
    # make a vector to store the discriminant function
    ld = np.zeros(numsamples)
    # calculate the value of the discriminant function for each sample
    for i in range(numsamples):
        valuei = 0
        for j in range(numvariables):
            valueij = variables.iloc[i, j]
            loadingj = loadings[j]
            valuei = valuei + (valueij * loadingj)
        ld[i] = valuei
    # standardise the discriminant function so that its mean value is 0:
    ld = scale(ld, with_std=False)
    return ld
205/39: calclda(X, lda.scalings_[:, 0])
205/40:
 # Try either, they produce the same result, use help() for more info
# lda.transform(X)[:, 0]
lda.fit_transform(X, y)[:, 0]
205/41:
 def groupStandardise(variables, groupvariable):
    # find the number of samples in the data set and the number of variables
    numsamples, numvariables = variables.shape
    # find the variable names
    variablenames = variables.columns
    # calculate the group-standardised version of each variable
    variables_new = pd.DataFrame()
    for i in range(numvariables):
        variable_name = variablenames[i]
        variablei = variables[variable_name]
        variablei_Vw = calcWithinGroupsVariance(variablei, groupvariable)
        variablei_mean = np.mean(variablei)
        variablei_new = (variablei - variablei_mean)/(np.sqrt(variablei_Vw))
        variables_new[variable_name] = variablei_new
    return variables_new
205/42:
groupstandardisedX = groupStandardise(X, y)
lda2 = LinearDiscriminantAnalysis().fit(groupstandardisedX, y)
pretty_scalings(lda2, groupstandardisedX)
205/43:
lda.fit_transform(X, y)[:, 0]
lda2.fit_transform(groupstandardisedX, y)[:, 0]
205/44:
def rpredict(lda, X, y, out=False):
    ret = {"class": lda.predict(X),
           "posterior": pd.DataFrame(lda.predict_proba(X), columns=lda.classes_)}
    ret["x"] = pd.DataFrame(lda.fit_transform(X, y))
    ret["x"].columns = ["LD"+str(i+1) for i in range(ret["x"].shape[1])]
    if out:
        print("class")
        print(ret["class"])
        print()
        print("posterior")
        print(ret["posterior"])
        print()
        print("x")
        print(ret["x"])
    return ret

lda_values = rpredict(lda, standardisedX, y, True)
205/45:  calcSeparations(lda_values["x"], y)
205/46:


def proportion_of_trace(lda):
    ret = pd.DataFrame([round(i, 4) for i in lda.explained_variance_ratio_ if round(i, 4) > 0], columns=["ExplainedVariance"])
    ret.index = ["LD"+str(i+1) for i in range(ret.shape[0])]
    ret = ret.transpose()
    print("Proportion of trace:")
    print(ret.to_string(index=False))
    return ret

proportion_of_trace(LinearDiscriminantAnalysis(solver="eigen").fit(X, y));
205/47:
def ldahist(data, g, sep=False):
    xmin = np.trunc(np.min(data)) - 1
    xmax = np.trunc(np.max(data)) + 1
    ncol = len(set(g))
    binwidth = 0.5
    bins=np.arange(xmin, xmax + binwidth, binwidth)
    if sep:
        fig, axl = plt.subplots(ncol, 1, sharey=True, sharex=True)
    else:
        fig, axl = plt.subplots(1, 1, sharey=True, sharex=True)
        axl = [axl]*ncol
    for ax, (group, gdata) in zip(axl, data.groupby(g)):
        sns.distplot(gdata.values, bins, ax=ax, label="group "+str(group))
        ax.set_xlim([xmin, xmax])
        if sep:
            ax.set_xlabel("group"+str(group))
        else:
            ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.tight_layout()
205/48:
def ldahist(data, g, sep=False):
    xmin = np.trunc(np.min(data)) - 1
    xmax = np.trunc(np.max(data)) + 1
    ncol = len(set(g))
    binwidth = 0.5
    bins=np.arange(xmin, xmax + binwidth, binwidth)
    if sep:
        fig, axl = plt.subplots(ncol, 1, sharey=True, sharex=True)
    else:
        fig, axl = plt.subplots(1, 1, sharey=True, sharex=True)
        axl = [axl]*ncol
    for ax, (group, gdata) in zip(axl, data.groupby(g)):
        sns.distplot(gdata.values, bins, ax=ax, label="group "+str(group))
        ax.set_xlim([xmin, xmax])
        if sep:
            ax.set_xlabel("group"+str(group))
        else:
            ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    plt.tight_layout()
205/49: ldahist(lda_values["x"].LD1, y)
205/50:  ldahist(lda_values["x"].LD2, y)
205/51:  sns.lmplot("LD1", "LD2", lda_values["x"].join(y), hue="V1", fit_reg=False);
205/52:  printMeanAndSdByGroup(lda_values["x"], y);
205/53:
def printMeanAndSdByGroup(variables, groupvariable):
    data_groupby = variables.groupby(groupvariable)
    print("## Means:")
    display(data_groupby.apply(np.mean))
    print("\n## Standard deviations:")
    display(data_groupby.apply(np.std))
    print("\n## Sample sizes:")
    display(pd.DataFrame(data_groupby.apply(len)))

printMeanAndSdByGroup(lda_values["x"], y);
205/54:
def calcAllocationRuleAccuracy(ldavalue, groupvariable, cutoffpoints):
    # find out how many values the group variable can take
    levels = sorted(set((groupvariable)))
    numlevels = len(levels)
    confusion_matrix = []
    # calculate the number of true positives and false negatives for each group
    for i, leveli in enumerate(levels):
        levelidata = ldavalue[groupvariable==leveli]
        row = []
        # see how many of the samples from this group are classified in each group
        for j, levelj in enumerate(levels):
            if j == 0:
                cutoff1 = cutoffpoints[0]
                cutoff2 = "NA"
                results = (levelidata <= cutoff1).value_counts()
            elif j == numlevels-1:
                cutoff1 = cutoffpoints[numlevels-2]
                cutoff2 = "NA"
                results = (levelidata > cutoff1).value_counts()
            else:
                cutoff1 = cutoffpoints[j-1]
                cutoff2 = cutoffpoints[j]
                results = ((levelidata > cutoff1) & (levelidata <= cutoff2)).value_counts()
            try:
                trues = results[True]
            except KeyError:
                trues = 0
            print("Number of samples of group", leveli, "classified as group", levelj, ":", trues, "(cutoffs:", cutoff1, ",", cutoff2, ")")
            row.append(trues)
        confusion_matrix.append(row)
    return confusion_matrix
205/55: confusion_matrix = calcAllocationRuleAccuracy(lda_values["x"].iloc[:, 0], y, [-1.751107, 2.122505])
205/56:
 def webprint_confusion_matrix(confusion_matrix, classes_names):
    display(pd.DataFrame(confusion_matrix, index=["Is group "+i for i in classes_names], columns=["Allocated to group "+i for i in classes_names]))

webprint_confusion_matrix(confusion_matrix, lda.classes_)
205/57:
 import sklearn.metrics as metrics

def lda_classify(v, levels, cutoffpoints):
    for level, cutoff in zip(reversed(levels), reversed(cutoffpoints)):
        if v > cutoff: return level
    return levels[0]
    
y_pred = lda_values["x"].iloc[:, 0].apply(lda_classify, args=(lda.classes_, [-1.751107, 2.122505],)).values
y_true = y
# from http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html#example-model-selection-plot-confusion-matrix-py
def plot_confusion_matrix(cm, target_names, title='Confusion matrix', cmap=plt.cm.Blues):
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(target_names))
    plt.xticks(tick_marks, target_names, rotation=45)
    plt.yticks(tick_marks, target_names)
    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

print(metrics.classification_report(y_true, y_pred))
cm = metrics.confusion_matrix(y_true, y_pred)
webprint_confusion_matrix(cm, lda.classes_)
cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
plot_confusion_matrix(cm_normalized, lda.classes_, title='Normalized confusion matrix')
209/1: run rd_sic.py
209/2: df_2
209/3: !cat rd_sic.py
209/4: df.tail(10)
209/5: df_twsic.tail(10)
209/6: del df_twsic['Unnamed: 2']
209/7: df_twsic.tail(10)
209/8: df_twsic.tail(10)
209/9: df.tail(10)
209/10: i_sic=set(df['SIC'])|set(df_twsic['SIC'])
209/11: len(i_sic)
209/12: i_sic=set(df['SIC'])&set(df_twsic['SIC'])
209/13: len(i_sic)
209/14: twsic=df_twsic['SIC']
209/15: twsic=list(df_twsic['SIC'])
209/16: twsic
209/17: twsic.head(10)
209/18: twsic[:10]
209/19: twsic=[str(x) for x in twsic]
209/20: twsic[:10]
209/21: ussic=list(df['SIC'])
209/22: ussic[:10]
209/23: for i in twsic: if i not in ussic:print i
209/24:
for i in twsic:
    if i not in ussic:print i
209/25: twsic[:10]
209/26: ussic[:10]
209/27: a=[]
209/28:
for i in twsic:
    if len(i)<=3:
        a.append('0'+i)
    else:
        a.append(i)
209/29: a[:10]
209/30: a[-10:]
209/31: twsic=a
209/32:
for i in twsic:
    if i not in ussic:print i
209/33:
a=[]
for i in twsic:
    if i not in ussic:print a.append(i)
209/34:
a=[]
for i in twsic:
    if i not in ussic: a.append(i)
209/35: len(a)
209/36: len(twsic)
209/37: a[:10]
209/38: a[0] in ussic
209/39: ussic[:10]
209/40: len(a)
209/41: len(twsic)
209/42:
a=[]
for i in twsic:
    if i not in ussic:
        a.append(False)
    else:
        a.append(True)
209/43: df['InUsSIC']=a
209/44: df['InUsSIC']=Series(a)
209/45: df
209/46: df_twsic['InUsSIC']=Series(a)
209/47: df_twsic
209/48: df_twsic.set_index('SIC').to_csv('df_twsic.csv')
209/49: df.set_index('SIC').to_csv('df_ussic.csv')
209/50: !more df_twsic.csv
209/51: twsic[:10]
209/52: df_twsic['SIC']=twsic
209/53: df_twsic.set_index('SIC').to_csv('df_twsic.csv')
209/54: !more df_twsic.csv
209/55: history
209/56: !vi rd_sic.py
209/57: !vi rd_sic.py
210/1: 0.042990141126051123/365
210/2: !vi df_orl.csv
210/3: 1.1924040622971678e-05*365
210/4: 9.777738052086282e-06*365
210/5: 3.5508627662872726e-05*365
210/6: !vi *_2.py
210/7: run csv2orl_2.py
210/8: fname3
210/9: vi /home/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV
210/10: !vi /home/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV
210/11: !vi *_2.py
210/12: run csv2orl_2.py
210/13: !vi df_orl.csv
210/14: !vi /home/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV
210/15: !vi *_2.py
210/16: run csv2orl_2.py
210/17: !vi df_orl.csv
210/18: !vi *_2.py
210/19: run csv2orl_2.py
210/20: !vi *_2.py
210/21: run csv2orl_2.py
210/22: !vi /home/SMOKE4.5/subsys/smoke/assigns/ASSIGNS.nctox.cmaq.cb05_soa.us12-nc
210/23: !vi df_orl.csv
210/24: !vi /home/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV
210/25: !vi df_orl.csv
210/26: !more /home/SMOKE4.5/data/inventory/teds9_13/pnts.map.point.teds9_13.txt
210/27: !more /home/SMOKE4.5/data/inventory/teds9_13/pointsrc.teds9_13.txt
210/28: a=df_orl[df_orl['SCC'=='30102616']]['SCC']
210/29: run csv2orl_2.py
210/30: len(df_orl)
210/31: a=df_orl[df_orl['SCC'=='30102616']]
210/32: df_orl['SCC'=='30102616']
210/33: df_orl.columns
210/34: a=df_orl[df_orl['SCC']=='30102616']
210/35: len(a)
210/36:
a=[30102616
39091002
39091002
39091002
28888802
28888802
40388804
30390021
28888802
30390021
30390021
40388804
40388804
39091002
40388804
40388804
31100203
30140101
28888802
28888802
28888802
28888802
30201204
31100203
31100203
39091002
39091002
30201204
40388804
30390012
30390021
40388804
40388804
40388804
40388804
40388804
40388804
39091002
30390021
30390021
30390021
39091002
39091002
30390021
31100203
30390021
28888802
28888802
28888802
28888802
28888802
30390021
30102111
39091002
40388804
30125102
31100203
31100203
40202304
39091002
30390021
30390021
30302384
30302384
30302384
39091002
39091002
39091002
39091002
39091002
39091002
39091002
30905320
30104008
39091002
30905320
39091002
39091002
39091002
39091002
30288804
30300615
39091002
30120542
39091002
39091002
30201121
39091002
30103425
39091002
30118107
30118107
30118107
30118107
39091002
30300918
30501702
30501702
39091002
39091002
]
210/37: fn='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
210/38: !grep -a2 with /home/python_eg/*/*py
210/39: fname='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
210/40:
a=[]
with open(fname) as ftext:
    for line in ftext:
        a.append(line)
210/41: set(a)
210/42: len(set(a))
210/43: len(a)
210/44: f_scc='SCC_Codes.xlsx'
210/45: !cat /home/python_eg/A\ Little\ Book\ of\ Python\ for\ Multivariate\ Analysis/*py
210/46: !cat /home/HRA/MaCaoRelavants/rd_acute.py
210/47: from openpyxl import Workbook, load_workbook
210/48: fname='SCC_Codes.xlsx'
210/49:
from itertools import islice
wb= load_workbook(fname,data_only='true')
ws=wb['SCC Codes']
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df_scc = DataFrame(data, index=idx, columns=cols)
210/50: df_scc.columns
210/51:
from itertools import islice
wb= load_workbook(fname,data_only='true')
ws=wb['SCC Codes']
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df_scc = DataFrame(data, index=idx, columns=cols)
210/52: df_scc.columns
210/53: a
210/54: pbmscc=a
210/55: pbmscc=[x[:8] for x in a]
210/56: pbmscc
210/57: s_pbmscc=set(pbmscc)
210/58: df_scc.columns
210/59:
for i in s_pbmscc:
    a=df_scc[df_scc['SCC']==i]
    if len(a)>0: print a
210/60: i
210/61: df_scc[df_scc['SCC']==i]
210/62: df_orl['SCC'=='30102616']
210/63: a=df_scc[df_scc['SCC']=='i']
210/64: df_scc
210/65: a=df_scc[df_scc['SCC']==int(i)]
210/66: a
210/67:
for i in s_pbmscc:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print a
210/68:
for i in s_pbmscc:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print a['SCC_L1','SCC_L2']
210/69:
for i in s_pbmscc:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print a[['SCC_L1','SCC_L2']]
210/70: history
210/71: df_pbm = df_orl['SCC'].map(lambda x: x in s_pbmscc)
210/72: sum(list(df_pbm['ANN_EMIS']))
210/73: df_pbm.columns
210/74: df_pbm = df_orl[df_orl['SCC'].map(lambda x: x in s_pbmscc)]
210/75: df_pbm.columns
210/76: sum(list(df_pbm['ANN_EMIS']))
210/77: sum(list(df_pbm[df_pbm['CAS']=='VOC']['ANN_EMIS']))
210/78: sum(list(df_pbm[df_pbm['CAS']=='NOX']['ANN_EMIS']))
210/79: sum(list(df_orl[df_orl['CAS']=='VOC']['ANN_EMIS']))
210/80: !grep -a2 line /home/python_eg/*/*py
210/81: !grep -a2 line /home/HRA/QueryAndScratchWebs/*py
210/82: !grep split /home/HRA/QueryAndScratchWebs/*py
210/83:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
a=[]
with open(fname) as ftext:
    for line in ftext:
        a.append(line.strip('\n'))
len(set(a))
210/84: pbmscc=set(a)
210/85: pbmscc
210/86: s_pbmscc=set(a)
210/87: history
210/88: df_pbm = df_orl[df_orl['SCC'].map(lambda x: x in s_pbmscc)]
210/89: sum(list(df_pbm[df_pbm['CAS']=='VOC']['ANN_EMIS']))
210/90: sum(list(df_pbm[df_pbm['CAS']=='NOX']['ANN_EMIS']))
210/91: s_scc=set(list(df_scc['SCC']))
210/92: s_pbmscc
210/93: c=0
210/94:
for i in s_pbmscc:
    if i not in s_scc: c+=1
210/95: c
210/96:
for i in s_pbmscc:
    if int(i) not in s_scc: c+=1
210/97:
c=0
for i in s_pbmscc:
    if int(i) not in s_scc: c+=1
210/98: c
210/99: 30102616 in s_scc
210/100: len(set(df_orl['SCC']))
210/101: len(s_scc)
210/102: history
210/103: fname='/home/SMOKE4.5/subsys/smoke/scripts/run/ge_dat_scc.txt'
210/104:
a=[]
with open(fname) as ftext:
    for line in ftext:
        a.append(line.strip('\n'))
len(set(a))
210/105: ge_dat_scc=a
210/106: a
210/107:
c=0
for i in s_pbmscc:
    if int(i) not in ge_dat_scc: c+=1
c
210/108:
c=0
for i in s_pbmscc:
    if i not in ge_dat_scc: c+=1
c
210/109: fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
210/110:
a=[]
with open(fname) as ftext:
    for line in ftext:
        a.append(line.strip('\n'))
len(set(a))
210/111: s_xref_scc=set(a)
210/112:
c=0
for i in s_pbmscc:
    if i not in s_xref_scc: c+=1
c
210/113: s_pbmscc.head
210/114: list(s_pbmscc).head
210/115: list(s_pbmscc)[:5]
210/116: list(s_xref_scc)[:5]
210/117: for i in s_xref_scc:
210/118: s=[]
210/119:
for i in s_xref_scc:
    if i[0]=='0':
        s.append(i[1:])
    else:
        s.append(i)
210/120: s_xref_scc=set(s)
210/121:
s=[]
for i in s_xref_scc:
    if i[0]=='0':
        s.append(i[1:])
    else:
        s.append(i)
210/122: s
210/123:
c=0
for i in s_pbmscc:
    if i not in s_xref_scc: c+=1
c
210/124: s=[x[0] for x in s_xref_scc]
210/125: set(s)
210/126:
s=[]
for i in s_xref_scc:
    if i[0]=='0':
        s.append(i[1:])
    else:
        s.append(i)
210/127: s_xref_scc=set(s)
210/128: s=[x[0] for x in s_xref_scc]
210/129: set(s)
210/130:
c=0
for i in s_pbmscc:
    if i not in s_xref_scc: c+=1
c
210/131:
c=0
for i in s_pbmscc:
    if i not in s_xref_scc: 
        print i
        c+=1
c
210/132: s_pbmscc
210/133:
c=0
for i in s_pbmscc:
    if i not in s_xref_scc: 
        print(i)
        c+=1
c
210/134: '40100106' in s_xref_scc
210/135: 2101010000 in s_scc
210/136: 210101000 in s_scc
210/137: 21010100 in s_scc
210/138: 2101010 in s_scc
210/139: s_scc
210/140: 21010100 in s_scc
210/141: "21010100" in s_scc
210/142: len(s_scc)
210/143: history
210/144: len(df_scc)
210/145:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        a.update(b[0]:b[1])
210/146:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        a.update({b[0]:b[1]})
210/147: b
210/148:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        if len(b)>1: a.update({b[0]:b[1]})
210/149: a
210/150: len(a)
210/151: c=[a[x] for x in a]
210/152: c
210/153: len(set(c))
210/154: d_xref=a
210/155: import json
210/156: json.dump(d_xref,open("d_xref.json","w"))
210/157: !more "d_xref.json"
210/158: fname="/home/camxruns/2013/ptse/V_ASSIGN.SOR"
210/159:
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(' ')
        if len(b)>1: a.update({b[0]:b[1]})
210/160: len(a)
210/161: d_vassignsor=a
210/162: json.dump(d_vassignsor,open("d_vassignsor.json","w"))
210/163: a
210/164: a=list(d_vassignsor)
210/165: len(set(a))
210/166:
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(' ')
        if len(b)>1 and len(b[1])>=4: a.update({b[0]:b[1]})
210/167: len(a)
210/168: d_vassignsor=a
210/169: json.dump(d_vassignsor,open("d_vassignsor.json","w"))
210/170: len(set(list(d_vassignsor)))
210/171: c=[a[x] for x in a]
210/172: len(set(c))
210/173: '30700705' in d_vassignsor
210/174:
c=0
for i in s_pbmscc:
    if i not in d_vassignsor: 
        c+=1
c
210/175: history
210/176:
a={}
c=[]
for i in s_pbmscc:
    if i in d_vassignsor: 
        a.update({i:d_vassignsor[i]})
    else:
        c.append(i)
210/177: a
210/178: len(a)
210/179: len(c)
210/180:
d_pbm_ass=a
for i in c:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print a['SCC_L1','SCC_L2']
210/181: d_pbm_ass
210/182: a
210/183:
for i in c:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print a[['SCC_L1','SCC_L2']]
210/184: list(a[['SCC_L1','SCC_L2']])
210/185: list(a.loc[1,['SCC_L1','SCC_L2']])
210/186: list(a.loc[['SCC_L1','SCC_L2']].row(1))
210/187: list(a.loc[['SCC_L1','SCC_L2']].reset_index.row(1))
210/188:
for i in c:
    a=df_scc[df_scc['SCC']==int(i)]
    if len(a)>0: print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2']
210/189: a
210/190:
for i in c:
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0: print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2']
210/191: history
210/192: json.dump(d_pbm_ass,open("d_pbm_ass.json","w"))
210/193:
for i in c:
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0: print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
210/194:
d_prm_nass={}
for i in c:
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0: 
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        d_prm_nass.update({i:zip(a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3'])})
210/195: d_prm_nass
210/196:
d_prm_nass={}
for i in c:
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0: 
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        d_prm_nass.update({i:(a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3'])})
210/197: d_prm_nass
211/1: run csv2orl_2.py
211/2:
from openpyxl import Workbook, load_workbook
fname='SCC_Codes.xlsx'
from itertools import islice
wb= load_workbook(fname,data_only='true')
ws=wb['SCC Codes']
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df_scc = DataFrame(data, index=idx, columns=cols)
df_scc.columns
211/3:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
a=[]
with open(fname) as ftext:
    for line in ftext:
        a.append(line.strip('\n'))
pbmscc=a
211/4: a[:5]
211/5: s_pbmscc=set(pbmscc)
211/6:
fname="/home/camxruns/2013/ptse/V_ASSIGN.SOR"
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(' ')
        if len(b)>1 and len(b[1])>=4: a.update({b[0]:b[1]})
len(a)
d_vassignsor=a
211/7:
a={}
c=[]
for i in s_pbmscc:
    if i in d_vassignsor:
        a.update({i:d_vassignsor[i]})
    else:
        c.append(i)
d_pbm_ass=a
211/8:
d_prm_nass={}
for i in c:
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0: 
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        d_prm_nass.update({i:a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/9: d_prm_nass
211/10: json.dump(d_prm_nass,open("d_prm_nass.json","w"))
211/11: df_prm_nass=DataFrame({'SCC':[x for in d_prm_nass],'SCC_L':[d_prm_nass[x] for in d_prm_nass]})
211/12: df_prm_nass=DataFrame({'SCC':[x for x in d_prm_nass],'SCC_L':[d_prm_nass[x] for x in d_prm_nass]})
211/13: df_prm_nass.row(1)
211/14: df_prm_nass.head(10)
211/15: d_prm_nass[30302384]
211/16: d_prm_nass['30302384']
211/17: d_prm_nass['30115609']
211/18: df_prm_nass.reset_index('SCC').to_csv('d_prm_nass.csv')
211/19: !tail *2.py
211/20: df_prm_nass.set_index('SCC').to_csv('d_prm_nass.csv')
211/21: !more 'd_prm_nass.csv'
211/22: df_prm=read_csv('d_prm_nass.csv')
211/23: df_prm
211/24: df_pbm_ass=DataFrame({'SCC':[x for x in d_pbm_ass],'Profile_NO':[d_pbm_ass(x) for x in d_pbm_ass]})
211/25: df_pbm_ass=DataFrame({'SCC':[x for x in d_pbm_ass],'Profile_NO':[d_pbm_ass[x] for x in d_pbm_ass]})
211/26: df_pbm_ass
211/27: df_pbm_ass.append(df_prm[['SCC','Profile_No]])
211/28: df_pbm_ass.append(df_prm[['SCC','Profile_No']])
211/29: df_prm
211/30: df_pbm_ass.append(df_prm[['SCC','Profile_NO']])
211/31: df_pbm=df_pbm_ass.append(df_prm[['SCC','Profile_NO']]).reset_index()
211/32: df_pbm
211/33: del df_pbm['Index']
211/34: del df_pbm['index']
211/35: history
211/36: df_pbm.set_index('SCC').to_csv('d_pbm.csv')
211/37: !pwd
211/38: !sed -i '23169,23296s/,/;/' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/39: !sed -i '23169,23296s/"""//' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/40: !sed -i '23169,23296s/"""//' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/41: !sed -i '23169,23296s/;/;"/' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/42: !sed -i '23169,23296s/$/"/' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/43: !sed -i '23169,23296s/$/;"VOC";;;;;;;! Added by YCKuang/' /home/SMOKE4.5/data/ge_dat/gsref.cmaq_cb05_soa.txt
211/44: 39091002 in df_pbm
211/45: '39091002' in df_pbm
211/46: '39091002' in df_pbm['SCC']
211/47: 39091002 in df_pbm['SCC']
211/48: s_pbmscc
211/49: '39091002' in s_pbmscc
211/50: '39091002' in d_pbm_ass
211/51: '39091002' in d_prm_nass
211/52: '39091002' in df_prm
211/53: df_prm
211/54: 39091002 in df_prm
211/55: 39091002 in df_prm['SCC']
211/56: 39091002 in list(df_prm['SCC'])
211/57: !grep 8953 ../../V_PROFIL.TAB
211/58: !grep 9003 ../../V_PROFIL.TAB
211/59: !grep 9003 ../../V_PROFIL.TXT
211/60: len(set(df_prm['Profile_NO']))
211/61:
a=[]
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.profile') as ftext:
    for line in ftext:
        a.append(line.strip('"\n'))
len(set(a))
211/62: a
211/63: set(a)
211/64: !for i in {'8814', '8953', '9002', '9004', '9008', '9024', '95325'};do grep i ../../V_PROFIL.TXT;done
211/65: !for i in 8814 8953 9002 9004 9008 9024 95325;do grep i ../../V_PROFIL.TXT;done
211/66: !for i in 8814 8953 9002 9004 9008 9024 95325;do grep i ../../V_PROFIL.TAB;done
211/67: !for i in 8814 8953 9002 9004 9008 9024 95325;do grep $i ../../V_PROFIL.TXT;done
211/68: !for i in 8814 8953 9002 9004 9008 9024 95325;do grep $i ../../V_PROFIL.TAB;done
211/69: !bash; for i in 8814 8953 9002 9004 9008 9024 95325;do grep $i ../../V_PROFIL.TAB;done
211/70: !vi ../../V_PROFIL.TXT
211/71: !grep V_PROFIL.TXT ../../*.f
211/72: !grep -a1 V_PROFIL.TXT ../../*.f
211/73: !grep -a10 V_PROFIL.TXT ../../*.f
211/74: !vi ../../*.f
211/75: !grep Kprof ../../*.f
211/76: !grep -i Kprof ../../*.f
211/77: !grep -i include ../../*.f
211/78: !grep -i kprof  ../../SPECDATA.INC
211/79: !vi SPECDATA.INC
211/80: !locate SPECDATA.INC
211/81: !ls -lrt $(locate SPECDATA.INC)
211/82: !grep -i kprof  /home/camxruns/2013/area/SPECDATA.INC
211/83: !grep -i kprof $(locate SPECDATA.INC)
211/84: !grep -i kprof\= $(locate SPECDATA.INC)
211/85: !cp /home/camxruns/2013/area/SPECDATA.INC ../..
211/86: !ls ../../SPECIATE4.5/
211/87: !grep 8814 ../../SPECIATE4.5/GAS_PROFILE.csv
211/88: !cat ../../SPECIATE4.5/GAS_PROFILE.csv.columns
211/89: !grep 8814 ../../SPECIATE4.5/GAS_SPECIES.csv
211/90: !grep \"8814\" ../../SPECIATE4.5/GAS_SPECIES.csv
211/91: df_gspec==read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
211/92: df_gspec=read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
211/93: lost=["8814","8953","95325"]
211/94:
for i in lost:
    i in df_gspec
211/95:
for i in lost:
    if i in df_gspec: print in
211/96:
for i in lost:
    if i in df_gspec: print 'in'
211/97: df_gspec.columns
211/98:
for i in lost:
    if i in set(df_gspec['P_NUMBER']): print 'in'
211/99:
for i in lost:
    if i in set(df_gspec['P_NUMBER']): print i, 'in'
211/100: df_lost=df_gspec[df_gspec['P_NUMBER'].map(lambda x: for x in lost)]
211/101: df_lost=df_gspec[df_gspec['P_NUMBER'].map(lambda x: x in lost)]
211/102: df_lost
211/103: df_lost=df_lost.reset_index('P_NUMBER')
211/104: df_lost=df_lost.set_index('P_NUMBER')
211/105: df_lost
211/106: df_lost.sort()
211/107: df_lost.sort_values('index')
211/108: df_lost=df_lost.reset_index()
211/109: df_lost
211/110: df_lost.sort_values('P_NUMBER')
211/111: df_lost=df_lost.sort_values('P_NUMBER')
211/112: df_lost
211/113: history
211/114: !pwd
211/115:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        a.append(line.strip('"\n'))
len(set(a))
211/116: cat /home/camxruns/2013/ptse/V_PROFIL.TXT|wc
211/117: a[0]
211/118:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        a.append(line.strip('\r'))
len(set(a))
211/119: a[0]
211/120:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        a.append(line.strip('\r\n'))
len(set(a))
211/121: a[0]
211/122:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        a.append(line.strip('\r\n')).split()
len(set(a))
211/123:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        a.append(line.strip('\r\n').split())
len(set(a))
211/124:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        b=line.strip('\r\n').split()
        a.append(b)
len(set(a))
211/125:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        b=line.strip('\r\n').split()
        a.append(b)
211/126: a[0]
211/127: df_lost.columns
211/128: df_lost['SPECIES_ID']
211/129: col_a=['P_NUMBER','M_NUMBER','SPEC_NO','CAS','wt_percent','desc']
211/130: df_vprofile_txt=DataFrame({})
211/131:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[i] for x in a]
211/132: a[100]
211/133:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        b=line.strip('\r\n').split()
        if len(b)==5: b.insert(4,'NaN')
        a.append(b)
211/134: a[0]
211/135:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        b=line.strip('\r\n').split()
        if len(b)==5: b.insert(3,'NaN')
        a.append(b)
211/136: a[0]
211/137: a[10]
211/138: a[100]
211/139: a[1001]
211/140:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[i] for x in a]
211/141: i
211/142: x
211/143: b
211/144: len(b[-1])
211/145:
a=[]
with open('/home/camxruns/2013/ptse/V_PROFIL.TXT') as ftext:
    for line in ftext:
        b=line.strip('\r\n').split()
        if len(b[-1])!=9:
            app_b=b[-1][-9:]
            b[-1]=b[-1][:-9]
            b.append(app_b)
        if len(b)==5: b.insert(3,'NaN')
        a.append(b)
211/146: b
211/147: l=[len(x) for x in a]
211/148: min(l)
211/149: l.index(min(l))
211/150: a[5282]
211/151: col_a
211/152:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc
         ) = struct.unpack("4sx7sx3sx10sx6sx9s", line.strip(\r\n))
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/153:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) = struct.unpack("4sx7sx3sx10sx6sx9s", line.strip(\r\n))
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/154:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx7sx3sx10sx6sx9s", line.strip('\r\n'))
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/155: line
211/156:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx7sx3sx10sx6sx11s", line.strip('\r\n'))
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/157:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx7sx3sx10sx6sx9s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/158: len(line)
211/159: len(linesp)
211/160: line
211/161:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx7sx3sx10sx6sx11s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/162:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx8sx6s9s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/163: len(linesp)
211/164: linesp
211/165:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx10sx6s9s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/166: P_NUMBER, M_NUMBER, SPEC_NO, CAS
211/167:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx10sx6s9s", linesp)
        if M_NUMBER=='     ':M_NUMBER='0'
        if CAS=='          ':CAS='0'
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/168:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx10sx6s9s", linesp)
        if M_NUMBER=='     ':M_NUMBER='0'
        if CAS=='          ':CAS='0'
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/169: cas
211/170: CAS
211/171: line
211/172:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx8sx8s9s", linesp)
        if M_NUMBER=='     ':M_NUMBER='0'
        if CAS=='          ':CAS='0'
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/173: cas
211/174: CAS
211/175: line
211/176:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx9sx7s9s", linesp)
        if M_NUMBER=='     ':M_NUMBER='0'
        if CAS=='          ':CAS='0'
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/177: CAS
211/178: sum(CAS)
211/179: sum(str(CAS))
211/180: sum(int(CAS))
211/181:
def mk_int(s):
    s = s.strip()
    return int(s) if s else 0
211/182: mk_int(CAS)
211/183:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx9sx7s9s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(mk_int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/184: line
211/185:
import struct
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx9sx6s10s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(mk_int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/186: CAS
211/187:

with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc) \
        = struct.unpack("4sx5sx3sx9sx6s10s", linesp)
        (P_NUMBER, M_NUMBER, SPEC_NO, CAS) = map(mk_int, (P_NUMBER, M_NUMBER, SPEC_NO, CAS))
        wt_percent = float(wt_percent)
211/188: len(f)
211/189: n=7908
211/190:  (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc)=(6*n*[])
211/191:  (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc)=(n*[],n*[],n*[],n*[],n*[],n*[])
211/192:

with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i], wt_percent[i], desc[i]) \
        = struct.unpack("4sx5sx3sx9sx6s10s", linesp)
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]) = map(mk_int, (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]))
        wt_percent[i] = float(wt_percent[i])
        i+=1
211/193: i
211/194: CAS
211/195: n
211/196:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i], wt_percent[i], desc[i]) \
        = struct.unpack("4sx5sx3sx9sx6s10s", linesp)
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]) = map(mk_int, (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]))
        wt_percent[i] = float(wt_percent[i])
        i+=1
211/197: P_NUMBER
211/198:  (P_NUMBER, M_NUMBER, SPEC_NO, CAS, wt_percent, desc)=(n*[0],n*[0],n*[0],n*[0],n*[0],n*[0])
211/199:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i], wt_percent[i], desc[i]) \
        = struct.unpack("4sx5sx3sx9sx6s10s", linesp)
        (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]) = map(mk_int, (P_NUMBER[i], M_NUMBER[i], SPEC_NO[i], CAS[i]))
        wt_percent[i] = float(wt_percent[i])
        i+=1
211/200: CAS
211/201:  a=[n*[0] for x in xrange(6)]
211/202:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        a[4][i] = float(a[4][i])
        i+=1
211/203: a[4][i]
211/204:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        a[4][i] = float(a[4][i].strip())
        i+=1
211/205: a
211/206: a[1]
211/207:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        a[4][i] = float(str(a[4][i]).strip())
        i+=1
211/208: i
211/209: line
211/210: '  0.54  '.strip()
211/211: float('  0.54  '.strip())
211/212:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        perc=str(a[4][i]).strip()        
        a[4][i] = float(perc)
        i+=1
211/213: perc
211/214:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        a[4][i] = float(zip(*a[4][i]).strip())
        i+=1
211/215:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        perc=str(zip*a[4][i]).strip()[0]
        a[4][i] = float(perc)
        i+=1
211/216: a[4][i]
211/217: zip*a[4][i]
211/218: zip*(a[4][i])
211/219: l=a[4][i]
211/220: zip(*l)
211/221: l
211/222: for i in a[4][i]:print i
211/223:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x8s9x','32x9s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/224: line
211/225:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/226: a[100]
211/227: a[0][100]
211/228: a
211/229: a[1]
211/230: a[0]
211/231: len(a[0])
211/232: a[2]
211/233: a[3]
211/234:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=zip(*struct.unpack(fmt[j], linesp))
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/235:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/236: a[i][j]
211/237: a[-1][-1]
211/238: zip(*a[-1][-1])
211/239:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            tup_a=struct.unpack(fmt[j], linesp)
            for k in tup_a:a[j][i]=k
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/240: perc
211/241:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            tup_a=struct.unpack(fmt[j], linesp)
            for k in tup_a:a[j][i]=k
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        a[4][i] = float(a[4][i])
        i+=1
211/242: a[0]
211/243: tup_a
211/244:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/245: a[3]
211/246: col_a
211/247:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=Series(zip(*a[i]))
211/248:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=Series(a[i])
211/249: df_vprofile_txt
211/250:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)[0]
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/251: a[1]
211/252:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = float(perc)
        i+=1
211/253:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
211/254: l=a[0]
211/255: l
211/256: l=[x[0] for x in l]
211/257: l
211/258: l=a[4]
211/259: l
211/260:
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = [float(perc)]
        i+=1
211/261: l=a[4]
211/262: l
211/263:
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
211/264: df_vprofile_txt
211/265: history
211/266: history
211/267:
n=7908
a=[n*[0] for x in xrange(6)]
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = [float(perc)]
        i+=1

col_a=['P_NUMBER','M_NUMBER','SPEC_NO','CAS','wt_percent','desc']
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
df_vprofile_txt
211/268: Meq0=df_vprofile_txt[df_vprofile_txt['M_NUMBER']==0]
211/269: Meq0
211/270: s_sep=set(df_vprofile_txt['SPEC_NO'])
211/271: s_sep
211/272: len(s_sep)
211/273: s_sep=set(Meq0['SPEC_NO'])
211/274: len(s_sep)
211/275: s_sep
211/276:
for i in s_sep:
    a=set(df_vprofile_txt[df_vprofile_txt['SPEC_NO']==i]['M_NUMBER'])
    print i,a
211/277:
for i in s_sep:
    a=set(df_vprofile_txt[df_vprofile_txt['SPEC_NO']==i]['CAS'])
    print i,a
211/278: i=104
211/279: df_vprofile_txt.loc[df_vprofile_txt['SPEC_NO']==i,'M_NUMBER']=43264
211/280: i=733
211/281: df_vprofile_txt[df_vprofile_txt['SPEC_NO']==i]
211/282: !vi a
211/283: cat a|wc
211/284: history
211/285: Meq0=df_vprofile_txt[df_vprofile_txt['M_NUMBER']==0]
211/286: Meq0
211/287: df_gspec.columns
211/288: df_gspec.head(5)
211/289: !ls ../../SPECIATE4.5/
211/290: !more ../../SPECIATE4.5/GAS_SPECIES.csv
211/291: !ls ../../SPECIATE4.5/
211/292: !more ../../SPECIES_PROPERTIES.csv
211/293: !more ../../SPECIATE4.5/SPECIES_PROPERTIES.csv
211/294: df_property=read_csv('../../SPECIATE4.5/SPECIES_PROPERTIES.csv')
211/295: a=df_property['ID']
211/296: Meq0.head(10)
211/297: 708 in a
211/298: 699 in a
211/299: df_property[df_property['ID']==699]
211/300: df_property[df_property['ID']==104]
211/301: df_vprofile_txt.head(5)
211/302: df_gspec.columns
211/303: df_gspec.head(5)
211/304: df_gspec[df_gspec.head['P_NUMBER']==3001]
211/305: df_gspec[df_gspec['P_NUMBER']==3001]
211/306: df_gspec[df_gspec['P_NUMBER']=='3001']
211/307: df_vprofile_txt[df_vprofile_txt['P_NUMBER']=='3001']
211/308: df_vprofile_txt[df_vprofile_txt['P_NUMBER']==3001]
211/309: a=set(df_vprofile_txt['P_NUMBER'])
211/310: a
211/311: 3001 in a
211/312: df_gspec[df_gspec['P_NUMBER']=='9030']
211/313: s_gspec=(df_gspec['P_NUMBER'])
211/314: s_gspec
211/315: s_gspec=set(df_gspec['P_NUMBER'])
211/316: s_gspec
211/317: a
211/318: for i in a:
211/319: old_p=set([str(x) for x in a])
211/320: len(old_p),len(s_gspec)
211/321: old_p-s_gspec
211/322: a=[]
211/323:
for i in old_p:
    dl=4-len(i)
    a.append(dl*'0'+i)
211/324: a
211/325: old_p=a
211/326: old_p=set(a)
211/327: old_p-s_gspec
211/328: len(old_p-s_gspec)
211/329: history
211/330: len(old_p),len(s_gspec)
211/331: old_p | s_gspec
211/332: len(old_p | s_gspec)
211/333: len(old_p & s_gspec)
211/334: s_int=old_p & s_gspec
211/335: s_int.head(10)
211/336: s_int
211/337: fname='/home/SMOKE4.5/subsys/smoke/scripts/run/gsref_SCCnPROF.txt'
211/338: d_xref
211/339: d_xref.json
211/340:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        if len(b)>1: a.update({b[0]:b[1]})
211/341: d_xref=a
211/342: d_xref
211/343: df_xref=DataFrame({'SCC':[x for x in d_xref],'PROFILE_NO':[d_xref[x] for x in d_xref]})
211/344: df_xref
211/345: df_pbm
211/346: len(set(df_pbm['Profile_NO']))
211/347: s_xref_prof=set(df_xref['PROFILE_NO'])
211/348: len(s_xref_prof)
211/349: s_pbm_prof=set(df_pbm['Profile_NO'])
211/350: s_pbm_prof in s_xref_prof
211/351: s_pbm_prof - s_xref_prof
211/352: len(df_pbm)
211/353: df_pbm.columns
211/354: df_pbm.head(5)
211/355: df_pbm['Profile_NO']
211/356: df_pbm['Profile_NO']=[str(x) for x in df_pbm['Profile_NO']]
211/357: df_pbm['Profile_NO']
211/358: len(s_pbm_prof - s_xref_prof)
211/359: "1032" in s_xref_prof
211/360: '1032' in s_xref_prof
211/361: 1032 in s_xref_prof
211/362: s_xref_prof
211/363: df_xref['Profile_NO']=[str(x) for x in df_xref['Profile_NO']]
211/364: df_xref.columns
211/365: df_xref['PROFILE_NO']=[str(x) for x in df_xref['PROFILE_NO']]
211/366: s_xref_prof=set(df_xref['PROFILE_NO'])
211/367: s_pbm_prof=set(df_pbm['Profile_NO'])
211/368: s_pbm_prof - s_xref_prof
211/369: len(s_pbm_prof - s_xref_prof)
211/370: s_xref_prof
211/371: "2485" in s_pbm_prof
211/372: prof_not_found=s_pbm_prof - s_xref_prof
211/373: df_not_found=df_pbm[df_pbm['Profile_NO'].map(lambda x x in prof_not_found)]
211/374: df_not_found=df_pbm[df_pbm['Profile_NO'].map(lambda x for x in prof_not_found)]
211/375: df_not_found=df_pbm[df_pbm['Profile_NO'].map(lambda x: x in prof_not_found)]
211/376: len(set(df_not_found['SCC']))
211/377:
scc_upd={}
for i in set(df_not_found['SCC']):
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0:
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        scc_upd.update({i:a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/378: l=list(scc_upd).sort_values()
211/379: l=list(scc_upd).sort()
211/380: l
211/381: l=list(scc_upd)
211/382: l
211/383: history
211/384: len(scc_upd)
211/385: df_SCCXREF_rateperdistance=read_csv('/home/SMOKE4.5/data/ge_dat/SCCXREF_rateperdistance.csv')
211/386: df_SCCXREF_rateperdistance.columns
211/387:
s=set(df_SCCXREF_rateperdistance.columns['abbreviated_scc'])
for i in scc_upd:
    if i in s:print i
211/388:
s=set(df_SCCXREF_rateperdistance['abbreviated_scc'])
for i in scc_upd:
    if i in s:print i
211/389:
s=set(df_SCCXREF_rateperdistance['abbreviated_scc'])
for i in scc_upd:
    print i
211/390:
s=set(df_SCCXREF_rateperdistance['abbreviated_scc'])
for i in scc_upd:
    if str(i)+'00' in s:print i
211/391:
s=set(df_SCCXREF_rateperdistance['abbreviated_scc'])
for i in scc_upd:
    print str(i)+'00'
211/392: s
211/393: s_xref_prof
211/394: history
211/395: scc_upd
211/396: len(set([scc_upd[x] for x in scc_upd]))
211/397: df_scc.columns
211/398:
scc_orig={}
for i in set(df_scc['SCC']):
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0:
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        scc_orig({i:a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/399:
scc_orig={}
for i in set(df_scc['SCC']):
    a=df_scc[df_scc['SCC']==int(i)].reset_index()
    if len(a)>0:
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        scc_orig.update({i:a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/400:
scc_orig={}
for i in set(df_scc['SCC']):
    a=df_scc[df_scc['SCC']==i].reset_index()
    if len(a)>0:
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        scc_orig.update({i:a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/401:
scc_orig={}
for i in set(df_scc['SCC']):
    a=df_scc[df_scc['SCC']==i].reset_index()
    if len(a)>0:
        print i,a.loc[0,'SCC_L1'],a.loc[0,'SCC_L2'],a.loc[0,'SCC_L3']
        scc_orig.update({str(i):a.loc[0,'SCC_L1']+' '+a.loc[0,'SCC_L2']+' '+a.loc[0,'SCC_L3']})
211/402:
scc_orig={}
for i in xrange(len(df_scc)):
    b=df_scc.loc[i,'SCC_L1']+' '+df_scc.loc[i,'SCC_L2']+' '+df_scc.loc[i,'SCC_L3']
    print b
211/403: df_scc.head(4)
211/404: df_scc.reset_index()
211/405: df_scc=df_scc.reset_index()
211/406: df_scc.head(4)
211/407: dff_scc.loc[1,'SCC']
211/408: df_scc.loc[1,'SCC']
211/409:
scc_orig={}
for i in xrange(len(df_scc)):
    b=df_scc.loc[i,'SCC_L1']+' '+df_scc.loc[i,'SCC_L2']+' '+df_scc.loc[i,'SCC_L3']
    scc_orig.update({i:b})
211/410: i
211/411:
scc_orig={}
for i in xrange(len(df_scc)):
    b=df_scc.loc[i,'SCC_L1']+' '+df_scc.loc[i,'SCC_L2']+' '+df_scc.loc[i,'SCC_L3']
    print b
    scc_orig.update({i:b})
211/412: df_scc.loc[i,'SCC_L1']
211/413: df_scc.loc[i,'SCC_L2']
211/414: df_scc.loc[i,'SCC_L3']
211/415: df_scc.clo
211/416: df_scc.columns
211/417: df_scc.columns[2:6]
211/418: col_df_scc=df_scc.columns
211/419:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2:5):
        c=df_scc.columns[j]
        c=df_scc[c]
        if len(c)>0:
            b=b+' '+c    
    print b
    scc_orig.update({i:b})
211/420:
scc_orig={}
for i in xrange(100):#len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=df_scc[c]
        if len(c)>0:
            b=b+' '+c    
    print b
    scc_orig.update({i:b})
211/421:
scc_orig={}
for i in xrange(100):#len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=df_scc.loc[i,c]
        if len(c)>0:
            b=b+' '+c    
    print b
    scc_orig.update({i:b})
211/422:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=df_scc.loc[i,c]
        if len(c)>0:
            b=b+' '+c    
#    print b
    scc_orig.update({i:b})
211/423: c
211/424: i
211/425:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c    
#    print b
    scc_orig.update({i:b})
211/426: scc_orig
211/427: len(scc_orig)
211/428: len(set(scc_orig))
211/429: len(set([scc_orig[x] for x in scc_orig]))
211/430: history
211/431: s_L13_not_found=set([scc_upd[x] for x in scc_upd]))
211/432: s_L13_not_found=set([scc_upd[x] for x in scc_upd])
211/433: s_L13_orig=set([scc_orig[x] for x in scc_orig])
211/434: s_L13_not_found in s_L13_not_found
211/435: s_L13_not_found - s_L13_not_found
211/436: list(s_L13_not_found)[:5]
211/437: s_L13_not_found - s_L13_orig
211/438: len(s_L13_not_found - s_L13_orig)
211/439: 'Petroleum and Solvent Evaporation' in s_L13_orig
211/440: 'Petroleum' in s_L13_orig
211/441:
for i in s_L13_orig:
    if 'Petroleum' in i:print i
211/442: history
211/443:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,4):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    scc_orig.update({i:b})
s_L13_orig=set([scc_orig[x] for x in scc_orig])
211/444: len(s_L13_orig)
211/445:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,6):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    scc_orig.update({i:b})
s_L14_orig=set([scc_orig[x] for x in scc_orig])
len(s_L14_orig)
211/446:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    scc_orig.update({i:b})
s_L13_orig=set([scc_orig[x] for x in scc_orig])
len(s_L13_orig)
211/447: ls ../CB05/*py
211/448: !more ../CB05/sup_cbm.py
211/449: from fuzzywuzzy import fuzz
211/450:
L13_orig=list(s_L13_orig)
mtch=[]
for i in s_L13_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in L13_orig]
    mtch.append([i,a.index(max(a)),max(a)])
211/451: mtch
211/452:
L13_orig=list(s_L13_orig)
mtch=[]
for i in s_L13_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in L13_orig]
    mtch.append([i,a[a.index(max(a))],max(a)])
211/453: mtch
211/454:
L13_orig=list(s_L13_orig)
mtch=[]
for i in s_L13_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in L13_orig]
    mtch.append([i,L13_orig[a.index(max(a))],max(a)])
211/455: mtch
211/456:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    del b[0]
    scc_orig.update({i:b})
s_L13_orig=set([scc_orig[x] for x in scc_orig])
len(s_L13_orig)
211/457:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    del b=b[1:]
    scc_orig.update({i:b})
s_L13_orig=set([scc_orig[x] for x in scc_orig])
len(s_L13_orig)
211/458:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    b=b[1:]
    scc_orig.update({i:b})
s_L13_orig=set([scc_orig[x] for x in scc_orig])
len(s_L13_orig)
211/459:
L13_orig=list(s_L13_orig)
mtch=[]
for i in s_L13_not_found:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in L13_orig]
    mtch.append([i,L13_orig[a.index(max(a))],max(a)])
211/460: mtch
211/461: s_L13_not_found in s_L13_orig
211/462:
for i in s_L13_not_found:
    if i not in s_L13_orig: print i, 'not in'
211/463: history
211/464: s_L13_not_found - s_L13_orig
211/465:
for i in s_L13_orig:
    for j in scc_orig:
        if fuzz.ratio(i.lower(),scc_orig[j].lower())>98:
            print j,i
211/466: list(scc_orig)[:5]
211/467:
scc_orig={}
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
#    print b
    b=b[1:]
    ii=df_scc.loc[i,'SCC']
    scc_orig.update({ii:b})
211/468: list(scc_orig)[:5]
211/469:
for i in s_L13_orig:
    for j in scc_orig:
        if fuzz.ratio(i.lower(),scc_orig[j].lower())>98:
            print j,i
212/1: UID         PID   PPID  C STIME TTY          TIME CMD
212/2: root          1      0  0 Jun14 ?        00:00:01 /sbin/init
212/3: root          2      0  0 Jun14 ?        00:00:00 [kthreadd]
212/4: root          3      2  0 Jun14 ?        00:00:00 [migration/0]
212/5: root          4      2  0 Jun14 ?        00:00:00 [ksoftirqd/0]
212/6: root          5      2  0 Jun14 ?        00:00:00 [stopper/0]
212/7: root          6      2  0 Jun14 ?        00:00:00 [watchdog/0]
212/8: root          7      2  0 Jun14 ?        00:00:00 [migration/1]
212/9: root          8      2  0 Jun14 ?        00:00:00 [stopper/1]
212/10: root          9      2  0 Jun14 ?        00:00:00 [ksoftirqd/1]
212/11: root         10      2  0 Jun14 ?        00:00:00 [watchdog/1]
212/12: root         11      2  0 Jun14 ?        00:00:01 [migration/2]
212/13: root         12      2  0 Jun14 ?        00:00:00 [stopper/2]
212/14: root         13      2  0 Jun14 ?        00:00:00 [ksoftirqd/2]
212/15: root         14      2  0 Jun14 ?        00:00:00 [watchdog/2]
212/16: root         15      2  0 Jun14 ?        00:00:01 [migration/3]
212/17: root         16      2  0 Jun14 ?        00:00:00 [stopper/3]
212/18: root         17      2  0 Jun14 ?        00:00:00 [ksoftirqd/3]
212/19: root         18      2  0 Jun14 ?        00:00:00 [watchdog/3]
212/20: root         19      2  0 Jun14 ?        00:00:00 [migration/4]
212/21: root         20      2  0 Jun14 ?        00:00:00 [stopper/4]
212/22: root         21      2  0 Jun14 ?        00:00:00 [ksoftirqd/4]
212/23: root         22      2  0 Jun14 ?        00:00:00 [watchdog/4]
212/24: root         23      2  0 Jun14 ?        00:00:00 [migration/5]
212/25: root         24      2  0 Jun14 ?        00:00:00 [stopper/5]
212/26: root         25      2  0 Jun14 ?        00:00:00 [ksoftirqd/5]
212/27: root         26      2  0 Jun14 ?        00:00:00 [watchdog/5]
212/28: root         27      2  0 Jun14 ?        00:00:00 [migration/6]
212/29: root         28      2  0 Jun14 ?        00:00:00 [stopper/6]
212/30: root         29      2  0 Jun14 ?        00:00:00 [ksoftirqd/6]
212/31: root         30      2  0 Jun14 ?        00:00:00 [watchdog/6]
212/32: root         31      2  0 Jun14 ?        00:00:00 [migration/7]
212/33: root         32      2  0 Jun14 ?        00:00:00 [stopper/7]
212/34: root         33      2  0 Jun14 ?        00:00:00 [ksoftirqd/7]
212/35: root         34      2  0 Jun14 ?        00:00:00 [watchdog/7]
212/36: root         35      2  0 Jun14 ?        00:00:00 [migration/8]
212/37: root         36      2  0 Jun14 ?        00:00:00 [stopper/8]
212/38: root         37      2  0 Jun14 ?        00:00:00 [ksoftirqd/8]
212/39: root         38      2  0 Jun14 ?        00:00:00 [watchdog/8]
212/40: root         39      2  0 Jun14 ?        00:00:00 [migration/9]
212/41: root         40      2  0 Jun14 ?        00:00:00 [stopper/9]
212/42: root         41      2  0 Jun14 ?        00:00:00 [ksoftirqd/9]
212/43: root         42      2  0 Jun14 ?        00:00:00 [watchdog/9]
212/44: root         43      2  0 Jun14 ?        00:00:00 [migration/10]
212/45: root         44      2  0 Jun14 ?        00:00:00 [stopper/10]
212/46: root         45      2  0 Jun14 ?        00:00:00 [ksoftirqd/10]
212/47: root         46      2  0 Jun14 ?        00:00:00 [watchdog/10]
212/48: root         47      2  0 Jun14 ?        00:00:00 [migration/11]
212/49: root         48      2  0 Jun14 ?        00:00:00 [stopper/11]
212/50: root         49      2  0 Jun14 ?        00:00:00 [ksoftirqd/11]
212/51: root         50      2  0 Jun14 ?        00:00:00 [watchdog/11]
212/52: root         51      2  0 Jun14 ?        00:00:04 [events/0]
212/53: root         52      2  0 Jun14 ?        00:00:03 [events/1]
212/54: root         53      2  0 Jun14 ?        00:00:03 [events/2]
212/55: root         54      2  0 Jun14 ?        00:00:02 [events/3]
212/56: root         55      2  0 Jun14 ?        00:00:02 [events/4]
212/57: root         56      2  0 Jun14 ?        00:00:02 [events/5]
212/58: root         57      2  0 Jun14 ?        00:00:02 [events/6]
212/59: root         58      2  0 Jun14 ?        00:00:02 [events/7]
212/60: root         59      2  0 Jun14 ?        00:00:02 [events/8]
212/61: root         60      2  0 Jun14 ?        00:00:02 [events/9]
212/62: root         61      2  0 Jun14 ?        00:00:03 [events/10]
212/63: root         62      2  0 Jun14 ?        00:00:02 [events/11]
212/64: root         63      2  0 Jun14 ?        00:00:00 [events/0]
212/65: root         64      2  0 Jun14 ?        00:00:00 [events/1]
212/66: root         65      2  0 Jun14 ?        00:00:00 [events/2]
212/67: root         66      2  0 Jun14 ?        00:00:00 [events/3]
212/68: root         67      2  0 Jun14 ?        00:00:00 [events/4]
212/69: root         68      2  0 Jun14 ?        00:00:00 [events/5]
212/70: root         69      2  0 Jun14 ?        00:00:00 [events/6]
212/71: root         70      2  0 Jun14 ?        00:00:00 [events/7]
212/72: root         71      2  0 Jun14 ?        00:00:00 [events/8]
212/73: root         72      2  0 Jun14 ?        00:00:00 [events/9]
212/74: root         73      2  0 Jun14 ?        00:00:00 [events/10]
212/75: root         74      2  0 Jun14 ?        00:00:00 [events/11]
212/76: root         75      2  0 Jun14 ?        00:00:00 [events_long/0]
212/77: root         76      2  0 Jun14 ?        00:00:00 [events_long/1]
212/78: root         77      2  0 Jun14 ?        00:00:00 [events_long/2]
212/79: root         78      2  0 Jun14 ?        00:00:00 [events_long/3]
212/80: root         79      2  0 Jun14 ?        00:00:00 [events_long/4]
212/81: root         80      2  0 Jun14 ?        00:00:00 [events_long/5]
212/82: root         81      2  0 Jun14 ?        00:00:00 [events_long/6]
212/83: root         82      2  0 Jun14 ?        00:00:00 [events_long/7]
212/84: root         83      2  0 Jun14 ?        00:00:00 [events_long/8]
212/85: root         84      2  0 Jun14 ?        00:00:00 [events_long/9]
212/86: root         85      2  0 Jun14 ?        00:00:00 [events_long/10]
212/87: root         86      2  0 Jun14 ?        00:00:00 [events_long/11]
212/88: root         87      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/89: root         88      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/90: root         89      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/91: root         90      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/92: root         91      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/93: root         92      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/94: root         93      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/95: root         94      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/96: root         95      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/97: root         96      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/98: root         97      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/99: root         98      2  0 Jun14 ?        00:00:00 [events_power_ef]
212/100: root         99      2  0 Jun14 ?        00:00:00 [cgroup]
212/101: root        100      2  0 Jun14 ?        00:00:26 [khelper]
212/102: root        101      2  0 Jun14 ?        00:00:00 [netns]
212/103: root        102      2  0 Jun14 ?        00:00:00 [async/mgr]
212/104: root        103      2  0 Jun14 ?        00:00:00 [pm]
212/105: root        104      2  0 Jun14 ?        00:00:00 [sync_supers]
212/106: root        105      2  0 Jun14 ?        00:00:00 [bdi-default]
212/107: root        106      2  0 Jun14 ?        00:00:00 [kintegrityd/0]
212/108: root        107      2  0 Jun14 ?        00:00:00 [kintegrityd/1]
212/109: root        108      2  0 Jun14 ?        00:00:00 [kintegrityd/2]
212/110: root        109      2  0 Jun14 ?        00:00:00 [kintegrityd/3]
212/111: root        110      2  0 Jun14 ?        00:00:00 [kintegrityd/4]
212/112: root        111      2  0 Jun14 ?        00:00:00 [kintegrityd/5]
212/113: root        112      2  0 Jun14 ?        00:00:00 [kintegrityd/6]
212/114: root        113      2  0 Jun14 ?        00:00:00 [kintegrityd/7]
212/115: root        114      2  0 Jun14 ?        00:00:00 [kintegrityd/8]
212/116: root        115      2  0 Jun14 ?        00:00:00 [kintegrityd/9]
212/117: root        116      2  0 Jun14 ?        00:00:00 [kintegrityd/10]
212/118: root        117      2  0 Jun14 ?        00:00:00 [kintegrityd/11]
212/119: root        118      2  0 Jun14 ?        00:00:00 [kblockd/0]
212/120: root        119      2  0 Jun14 ?        00:00:00 [kblockd/1]
212/121: root        120      2  0 Jun14 ?        00:00:00 [kblockd/2]
212/122: root        121      2  0 Jun14 ?        00:00:00 [kblockd/3]
212/123: root        122      2  0 Jun14 ?        00:00:00 [kblockd/4]
212/124: root        123      2  0 Jun14 ?        00:00:00 [kblockd/5]
212/125: root        124      2  0 Jun14 ?        00:00:00 [kblockd/6]
212/126: root        125      2  0 Jun14 ?        00:00:00 [kblockd/7]
212/127: root        126      2  0 Jun14 ?        00:00:00 [kblockd/8]
212/128: root        127      2  0 Jun14 ?        00:00:00 [kblockd/9]
212/129: root        128      2  0 Jun14 ?        00:00:00 [kblockd/10]
212/130: root        129      2  0 Jun14 ?        00:00:00 [kblockd/11]
212/131: root        130      2  0 Jun14 ?        00:00:00 [kacpid]
212/132: root        131      2  0 Jun14 ?        00:00:00 [kacpi_notify]
212/133: root        132      2  0 Jun14 ?        00:00:00 [kacpi_hotplug]
212/134: root        133      2  0 Jun14 ?        00:00:00 [ata_aux]
212/135: root        134      2  0 Jun14 ?        00:00:00 [ata_sff/0]
212/136: root        135      2  0 Jun14 ?        00:00:00 [ata_sff/1]
212/137: root        136      2  0 Jun14 ?        00:00:00 [ata_sff/2]
212/138: root        137      2  0 Jun14 ?        00:00:00 [ata_sff/3]
212/139: root        138      2  0 Jun14 ?        00:00:00 [ata_sff/4]
212/140: root        139      2  0 Jun14 ?        00:00:00 [ata_sff/5]
212/141: root        140      2  0 Jun14 ?        00:00:00 [ata_sff/6]
212/142: root        141      2  0 Jun14 ?        00:00:00 [ata_sff/7]
212/143: root        142      2  0 Jun14 ?        00:00:00 [ata_sff/8]
212/144: root        143      2  0 Jun14 ?        00:00:00 [ata_sff/9]
212/145: root        144      2  0 Jun14 ?        00:00:00 [ata_sff/10]
212/146: root        145      2  0 Jun14 ?        00:00:00 [ata_sff/11]
212/147: root        146      2  0 Jun14 ?        00:00:00 [ksuspend_usbd]
212/148: root        147      2  0 Jun14 ?        00:00:00 [khubd]
212/149: root        148      2  0 Jun14 ?        00:00:00 [kseriod]
212/150: root        149      2  0 Jun14 ?        00:00:00 [md/0]
212/151: root        150      2  0 Jun14 ?        00:00:00 [md/1]
212/152: root        151      2  0 Jun14 ?        00:00:00 [md/2]
212/153: root        152      2  0 Jun14 ?        00:00:00 [md/3]
212/154: root        153      2  0 Jun14 ?        00:00:00 [md/4]
212/155: root        154      2  0 Jun14 ?        00:00:00 [md/5]
212/156: root        155      2  0 Jun14 ?        00:00:00 [md/6]
212/157: root        156      2  0 Jun14 ?        00:00:00 [md/7]
212/158: root        157      2  0 Jun14 ?        00:00:00 [md/8]
212/159: root        158      2  0 Jun14 ?        00:00:00 [md/9]
212/160: root        159      2  0 Jun14 ?        00:00:00 [md/10]
212/161: root        160      2  0 Jun14 ?        00:00:00 [md/11]
212/162: root        161      2  0 Jun14 ?        00:00:00 [md_misc/0]
212/163: root        162      2  0 Jun14 ?        00:00:00 [md_misc/1]
212/164: root        163      2  0 Jun14 ?        00:00:00 [md_misc/2]
212/165: root        164      2  0 Jun14 ?        00:00:00 [md_misc/3]
212/166: root        165      2  0 Jun14 ?        00:00:00 [md_misc/4]
212/167: root        166      2  0 Jun14 ?        00:00:00 [md_misc/5]
212/168: root        167      2  0 Jun14 ?        00:00:00 [md_misc/6]
212/169: root        168      2  0 Jun14 ?        00:00:00 [md_misc/7]
212/170: root        169      2  0 Jun14 ?        00:00:00 [md_misc/8]
212/171: root        170      2  0 Jun14 ?        00:00:00 [md_misc/9]
212/172: root        171      2  0 Jun14 ?        00:00:00 [md_misc/10]
212/173: root        172      2  0 Jun14 ?        00:00:00 [md_misc/11]
212/174: root        173      2  0 Jun14 ?        00:00:00 [linkwatch]
212/175: root        176      2  0 Jun14 ?        00:00:00 [khungtaskd]
212/176: root        177      2  0 Jun14 ?        00:00:00 [kswapd0]
212/177: root        178      2  0 Jun14 ?        00:00:00 [kswapd1]
212/178: root        179      2  0 Jun14 ?        00:00:00 [ksmd]
212/179: root        180      2  0 Jun14 ?        00:00:00 [khugepaged]
212/180: root        181      2  0 Jun14 ?        00:00:00 [aio/0]
212/181: root        182      2  0 Jun14 ?        00:00:00 [aio/1]
212/182: root        183      2  0 Jun14 ?        00:00:00 [aio/2]
212/183: root        184      2  0 Jun14 ?        00:00:00 [aio/3]
212/184: root        185      2  0 Jun14 ?        00:00:00 [aio/4]
212/185: root        186      2  0 Jun14 ?        00:00:00 [aio/5]
212/186: root        187      2  0 Jun14 ?        00:00:00 [aio/6]
212/187: root        188      2  0 Jun14 ?        00:00:00 [aio/7]
212/188: root        189      2  0 Jun14 ?        00:00:00 [aio/8]
212/189: root        190      2  0 Jun14 ?        00:00:00 [aio/9]
212/190: root        191      2  0 Jun14 ?        00:00:00 [aio/10]
212/191: root        192      2  0 Jun14 ?        00:00:00 [aio/11]
212/192: root        193      2  0 Jun14 ?        00:00:00 [crypto/0]
212/193: root        194      2  0 Jun14 ?        00:00:00 [crypto/1]
212/194: root        195      2  0 Jun14 ?        00:00:00 [crypto/2]
212/195: root        196      2  0 Jun14 ?        00:00:00 [crypto/3]
212/196: root        197      2  0 Jun14 ?        00:00:00 [crypto/4]
212/197: root        198      2  0 Jun14 ?        00:00:00 [crypto/5]
212/198: root        199      2  0 Jun14 ?        00:00:00 [crypto/6]
212/199: root        200      2  0 Jun14 ?        00:00:00 [crypto/7]
212/200: root        201      2  0 Jun14 ?        00:00:00 [crypto/8]
212/201: root        202      2  0 Jun14 ?        00:00:00 [crypto/9]
212/202: root        203      2  0 Jun14 ?        00:00:00 [crypto/10]
212/203: root        204      2  0 Jun14 ?        00:00:00 [crypto/11]
212/204: root        211      2  0 Jun14 ?        00:00:00 [kthrotld/0]
212/205: root        212      2  0 Jun14 ?        00:00:00 [kthrotld/1]
212/206: root        213      2  0 Jun14 ?        00:00:00 [kthrotld/2]
212/207: root        214      2  0 Jun14 ?        00:00:00 [kthrotld/3]
212/208: root        215      2  0 Jun14 ?        00:00:00 [kthrotld/4]
212/209: root        216      2  0 Jun14 ?        00:00:00 [kthrotld/5]
212/210: root        217      2  0 Jun14 ?        00:00:00 [kthrotld/6]
212/211: root        218      2  0 Jun14 ?        00:00:00 [kthrotld/7]
212/212: root        219      2  0 Jun14 ?        00:00:00 [kthrotld/8]
212/213: root        220      2  0 Jun14 ?        00:00:00 [kthrotld/9]
212/214: root        221      2  0 Jun14 ?        00:00:00 [kthrotld/10]
212/215: root        222      2  0 Jun14 ?        00:00:00 [kthrotld/11]
212/216: root        237      2  0 Jun14 ?        00:00:00 [kpsmoused]
212/217: root        238      2  0 Jun14 ?        00:00:00 [usbhid_resumer]
212/218: root        239      2  0 Jun14 ?        00:00:00 [deferwq]
212/219: root        272      2  0 Jun14 ?        00:00:00 [kdmremove]
212/220: root        273      2  0 Jun14 ?        00:00:00 [kstriped]
212/221: root        591      2  0 Jun14 ?        00:00:00 [scsi_eh_0]
212/222: root        599      2  0 Jun14 ?        00:00:00 [scsi_eh_1]
212/223: root        600      2  0 Jun14 ?        00:00:00 [scsi_eh_2]
212/224: root        601      2  0 Jun14 ?        00:00:00 [scsi_eh_3]
212/225: root        602      2  0 Jun14 ?        00:00:00 [scsi_eh_4]
212/226: root        607      2  0 Jun14 ?        00:00:00 [scsi_eh_5]
212/227: root        608      2  0 Jun14 ?        00:00:00 [scsi_eh_6]
212/228: root        609      2  0 Jun14 ?        00:00:00 [scsi_eh_7]
212/229: root        610      2  0 Jun14 ?        00:00:00 [scsi_eh_8]
212/230: root        611      2  0 Jun14 ?        00:00:00 [scsi_eh_9]
212/231: root        612      2  0 Jun14 ?        00:00:13 [scsi_eh_10]
212/232: root        892      2  0 Jun14 ?        00:00:00 [kdmflush]
212/233: root        894      2  0 Jun14 ?        00:00:00 [kdmflush]
212/234: root        966      2  0 Jun14 ?        00:00:04 [jbd2/dm-0-8]
212/235: root        967      2  0 Jun14 ?        00:00:00 [ext4-dio-unwrit]
212/236: root       1066      1  0 Jun14 ?        00:00:01 /sbin/udevd -d
212/237: root       1585      2  0 Jun14 ?        00:00:02 [edac-poller]
212/238: root       1778      2  0 Jun14 ?        00:00:11 [ixgbe]
212/239: root       3171      2  0 Jun14 ?        00:00:00 [jbd2/sda1-8]
212/240: root       3172      2  0 Jun14 ?        00:00:00 [ext4-dio-unwrit]
212/241: root       3175      2  0 Jun14 ?        00:00:00 [xfs_mru_cache]
212/242: root       3176      2  0 Jun14 ?        00:00:00 [xfslogd/0]
212/243: root       3177      2  0 Jun14 ?        00:00:00 [xfslogd/1]
212/244: root       3178      2  0 Jun14 ?        00:00:00 [xfslogd/2]
212/245: root       3179      2  0 Jun14 ?        00:00:00 [xfslogd/3]
212/246: root       3180      2  0 Jun14 ?        00:00:00 [xfslogd/4]
212/247: root       3181      2  0 Jun14 ?        00:00:00 [xfslogd/5]
212/248: root       3182      2  0 Jun14 ?        00:00:00 [xfslogd/6]
212/249: root       3183      2  0 Jun14 ?        00:00:00 [xfslogd/7]
212/250: root       3184      2  0 Jun14 ?        00:00:00 [xfslogd/8]
212/251: root       3185      2  0 Jun14 ?        00:00:00 [xfslogd/9]
212/252: root       3186      2  0 Jun14 ?        00:00:00 [xfslogd/10]
212/253: root       3187      2  0 Jun14 ?        00:00:00 [xfslogd/11]
212/254: root       3188      2  0 Jun14 ?        00:00:00 [xfsdatad/0]
212/255: root       3189      2  0 Jun14 ?        00:00:00 [xfsdatad/1]
212/256: root       3190      2  0 Jun14 ?        00:00:00 [xfsdatad/2]
212/257: root       3191      2  0 Jun14 ?        00:00:00 [xfsdatad/3]
212/258: root       3192      2  0 Jun14 ?        00:00:00 [xfsdatad/4]
212/259: root       3193      2  0 Jun14 ?        00:00:00 [xfsdatad/5]
212/260: root       3194      2  0 Jun14 ?        00:00:00 [xfsdatad/6]
212/261: root       3195      2  0 Jun14 ?        00:00:00 [xfsdatad/7]
212/262: root       3196      2  0 Jun14 ?        00:00:00 [xfsdatad/8]
212/263: root       3197      2  0 Jun14 ?        00:00:00 [xfsdatad/9]
212/264: root       3198      2  0 Jun14 ?        00:00:00 [xfsdatad/10]
212/265: root       3199      2  0 Jun14 ?        00:00:00 [xfsdatad/11]
212/266: root       3200      2  0 Jun14 ?        00:00:00 [xfsconvertd/0]
212/267: root       3201      2  0 Jun14 ?        00:00:00 [xfsconvertd/1]
212/268: root       3202      2  0 Jun14 ?        00:00:00 [xfsconvertd/2]
212/269: root       3203      2  0 Jun14 ?        00:00:00 [xfsconvertd/3]
212/270: root       3204      2  0 Jun14 ?        00:00:00 [xfsconvertd/4]
212/271: root       3205      2  0 Jun14 ?        00:00:00 [xfsconvertd/5]
212/272: root       3206      2  0 Jun14 ?        00:00:00 [xfsconvertd/6]
212/273: root       3207      2  0 Jun14 ?        00:00:00 [xfsconvertd/7]
212/274: root       3208      2  0 Jun14 ?        00:00:00 [xfsconvertd/8]
212/275: root       3209      2  0 Jun14 ?        00:00:00 [xfsconvertd/9]
212/276: root       3210      2  0 Jun14 ?        00:00:00 [xfsconvertd/10]
212/277: root       3211      2  0 Jun14 ?        00:00:00 [xfsconvertd/11]
212/278: root       3212      2  0 Jun14 ?        00:00:00 [xfsalloc/0]
212/279: root       3213      2  0 Jun14 ?        00:00:00 [xfsalloc/1]
212/280: root       3214      2  0 Jun14 ?        00:00:00 [xfsalloc/2]
212/281: root       3215      2  0 Jun14 ?        00:00:00 [xfsalloc/3]
212/282: root       3216      2  0 Jun14 ?        00:00:00 [xfsalloc/4]
212/283: root       3217      2  0 Jun14 ?        00:00:00 [xfsalloc/5]
212/284: root       3218      2  0 Jun14 ?        00:00:00 [xfsalloc/6]
212/285: root       3219      2  0 Jun14 ?        00:00:00 [xfsalloc/7]
212/286: root       3220      2  0 Jun14 ?        00:00:00 [xfsalloc/8]
212/287: root       3221      2  0 Jun14 ?        00:00:00 [xfsalloc/9]
212/288: root       3222      2  0 Jun14 ?        00:00:00 [xfsalloc/10]
212/289: root       3223      2  0 Jun14 ?        00:00:00 [xfsalloc/11]
212/290: root       3224      2  0 Jun14 ?        00:00:00 [xfseofblocks/0]
212/291: root       3225      2  0 Jun14 ?        00:00:00 [xfseofblocks/1]
212/292: root       3226      2  0 Jun14 ?        00:00:00 [xfseofblocks/2]
212/293: root       3227      2  0 Jun14 ?        00:00:00 [xfseofblocks/3]
212/294: root       3228      2  0 Jun14 ?        00:00:00 [xfseofblocks/4]
212/295: root       3229      2  0 Jun14 ?        00:00:00 [xfseofblocks/5]
212/296: root       3230      2  0 Jun14 ?        00:00:00 [xfseofblocks/6]
212/297: root       3231      2  0 Jun14 ?        00:00:00 [xfseofblocks/7]
212/298: root       3232      2  0 Jun14 ?        00:00:00 [xfseofblocks/8]
212/299: root       3233      2  0 Jun14 ?        00:00:00 [xfseofblocks/9]
212/300: root       3234      2  0 Jun14 ?        00:00:00 [xfseofblocks/10]
212/301: root       3235      2  0 Jun14 ?        00:00:00 [xfseofblocks/11]
212/302: root       3236      2  0 Jun14 ?        00:00:00 [xfsbufd/sdb1]
212/303: root       3237      2  0 Jun14 ?        00:00:00 [xfs-cil/sdb1]
212/304: root       3238      2  0 Jun14 ?        00:00:00 [xfssyncd/sdb1]
212/305: root       3239      2  0 Jun14 ?        00:00:32 [xfsaild/sdb1]
212/306: root       3288      2  0 Jun14 ?        00:00:00 [kauditd]
212/307: root       3478      2  0 Jun14 ?        00:00:09 [flush-253:0]
212/308: root       3646      1  0 Jun14 ?        00:00:00 auditd
212/309: root       3680      1  0 Jun14 ?        00:00:01 /sbin/rsyslogd -i /var/run/syslogd.pid -c 5
212/310: root       3714      1  0 Jun14 ?        00:00:11 irqbalance --pid=/var/run/irqbalance.pid
212/311: root       3754      2  0 Jun14 ?        00:00:00 [rpciod/0]
212/312: root       3755      2  0 Jun14 ?        00:00:00 [rpciod/1]
212/313: root       3756      2  0 Jun14 ?        00:00:00 [rpciod/2]
212/314: root       3757      2  0 Jun14 ?        00:00:00 [rpciod/3]
212/315: root       3758      2  0 Jun14 ?        00:00:00 [rpciod/4]
212/316: root       3759      2  0 Jun14 ?        00:00:00 [rpciod/5]
212/317: root       3760      2  0 Jun14 ?        00:00:00 [rpciod/6]
212/318: root       3761      2  0 Jun14 ?        00:00:00 [rpciod/7]
212/319: root       3762      2  0 Jun14 ?        00:00:00 [rpciod/8]
212/320: root       3763      2  0 Jun14 ?        00:00:00 [rpciod/9]
212/321: root       3764      2  0 Jun14 ?        00:00:00 [rpciod/10]
212/322: root       3765      2  0 Jun14 ?        00:00:00 [rpciod/11]
212/323: rpcuser    3772      1  0 Jun14 ?        00:00:00 rpc.statd
212/324: nobody     3810      1  0 Jun14 ?        00:00:33 /usr/sbin/gmetad
212/325: dbus       3830      1  0 Jun14 ?        00:00:00 dbus-daemon --system
212/326: root       3844      1  0 Jun14 ?        00:00:00 /usr/sbin/console-kit-daemon --no-daemon
212/327: root       3915      1  0 Jun14 ?        00:01:25 /opt/teamviewer/tv_bin/teamviewerd -f
212/328: root       3930      1  0 Jun14 ?        00:00:00 /usr/sbin/ypserv
212/329: root       3965      1  0 Jun14 ?        00:00:00 rpc.idmapd
212/330: root       3984      1  0 Jun14 ?        00:00:00 /usr/sbin/ypbind
212/331: root       4027      1  0 Jun14 ?        00:00:00 cupsd -C /etc/cups/cupsd.conf
212/332: root       4074      1  0 Jun14 ?        00:00:00 /usr/sbin/acpid
212/333: 68         4086      1  0 Jun14 ?        00:00:01 hald
212/334: root       4087   4086  0 Jun14 ?        00:00:00 hald-runner
212/335: root       4139   4087  0 Jun14 ?        00:00:00 hald-addon-input: Listening on /dev/input/event0 /dev/input/event2
212/336: root       4143   4087  0 Jun14 ?        00:00:21 hald-addon-storage: polling /dev/sr0 (every 2 sec)
212/337: 68         4144   4087  0 Jun14 ?        00:00:00 hald-addon-acpi: listening on acpid socket /var/run/acpid.socket
212/338: root       4178      1  0 Jun14 ?        00:00:00 /usr/sbin/rpc.ypxfrd
212/339: root       4198      1  0 Jun14 ?        00:00:00 pcscd
212/340: root       4224      1  0 Jun14 ?        00:00:01 automount --pid-file /var/run/autofs.pid
212/341: root       4383      1  0 Jun14 ?        00:00:00 rpc.rquotad -p 875
212/342: root       4388      1  0 Jun14 ?        00:00:00 rpc.mountd -p 892
212/343: root       4394      2  0 Jun14 ?        00:00:00 [lockd]
212/344: root       4395      2  0 Jun14 ?        00:00:00 [nfsd4]
212/345: root       4396      2  0 Jun14 ?        00:00:00 [nfsd4_callbacks]
212/346: root       4397      2  0 Jun14 ?        00:00:00 [nfsd]
212/347: root       4398      2  0 Jun14 ?        00:00:00 [nfsd]
212/348: root       4399      2  0 Jun14 ?        00:00:00 [nfsd]
212/349: root       4400      2  0 Jun14 ?        00:00:00 [nfsd]
212/350: root       4401      2  0 Jun14 ?        00:00:00 [nfsd]
212/351: root       4402      2  0 Jun14 ?        00:00:00 [nfsd]
212/352: root       4403      2  0 Jun14 ?        00:00:00 [nfsd]
212/353: root       4404      2  0 Jun14 ?        00:00:00 [nfsd]
212/354: nobody     4419      1  0 Jun14 ?        00:00:00 /usr/sbin/dnsmasq
212/355: root      10157      1  0 Jun14 ?        00:00:00 /usr/sbin/sshd
212/356: ntp       10168      1  0 Jun14 ?        00:00:00 ntpd -u ntp:ntp -p /var/run/ntpd.pid -g
212/357: root      10182      1  0 Jun14 ?        00:00:00 /usr/sbin/rpc.yppasswdd
212/358: nobody    10198      1  0 Jun14 ?        00:00:35 /usr/sbin/gmond
212/359: root      10292      1  0 Jun14 ?        00:00:00 /usr/libexec/postfix/master
212/360: postfix   10305  10292  0 Jun14 ?        00:00:00 qmgr -l -t fifo -u
212/361: root      10306      1  0 Jun14 ?        00:00:00 /usr/sbin/abrtd
212/362: root      10336      1  0 Jun14 ?        00:00:01 /usr/sbin/httpd
212/363: apache    10366  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/364: apache    10368  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/365: apache    10369  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/366: apache    10373  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/367: apache    10374  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/368: apache    10377  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/369: apache    10378  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/370: apache    10380  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/371: root      10384      1  0 Jun14 ?        00:00:00 crond
212/372: root      10503      1  0 Jun14 ?        00:01:17 nmbd -D
212/373: root      10517      1  0 Jun14 ?        00:00:00 smbd -D
212/374: root      10532      1  0 Jun14 ?        00:00:00 /usr/sbin/atd
212/375: root      10558  10517  0 Jun14 ?        00:00:00 smbd -D
212/376: root      10593      1  0 Jun14 ?        00:00:10 /usr/sbin/pbs_server -d /var/lib/torque
212/377: root      10608      1  0 Jun14 ?        00:00:00 /usr/sbin/trqauthd
212/378: root      10868      1  0 Jun14 ?        00:00:25 /opt/dell/srvadmin/sbin/dsm_sa_datamgrd
212/379: root      11177      1  0 Jun14 ?        00:00:00 /opt/dell/srvadmin/sbin/dsm_sa_eventmgrd
212/380: root      11182  10868  0 Jun14 ?        00:00:00 /opt/dell/srvadmin/sbin/dsm_sa_datamgrd
212/381: root      11207      1  0 Jun14 ?        00:00:00 /opt/dell/srvadmin/sbin/dsm_om_connsvcd -run
212/382: root      11208  11207  0 Jun14 ?        00:02:15 /opt/dell/srvadmin/sbin/dsm_om_connsvcd -run
212/383: root      11246      1  0 Jun14 ?        00:00:00 /opt/dell/srvadmin/sbin/dsm_om_shrsvcd
212/384: root      11327      1  0 Jun14 ?        00:00:00 /usr/sbin/certmonger -S -p /var/run/certmonger.pid
212/385: root      11439      1  0 Jun14 ?        00:01:34 /opt/APC/PowerChute/jre1.7.0_45/bin/java -Xrs -Xms32m -Xmx64m -Dlog4j.configuration=log4j.xml -cp .:./lib/log4j-1.2.16.jar:./lib/vijava50120120518.jar:./lib/jasypt-1.9.0.jar:./lib/dom4j-1.6.1.jar:./lib/jetty-6.1.26.jar:./lib/jetty-util-6.1.26.jar:./lib/servlet-api-2.5-20081211.jar:./lib/m11.jar:./lib/commons-collections-3.2.1.jar:./lib/commons-configuration-1.6.jar:./lib/commons-lang-2.5.jar:./lib/commons-logging-1.1.1.jar:./lib/commons-codec-1.4.jar:./comp/pcns.jar:./comp/Notifier.jar:./lib/bcprov-jdk16-146.jar:./lib/json_simple-1.1.jar com.apcc.m11.arch.application.Application everything
212/386: root      11445      1  0 Jun14 ?        00:00:00 /usr/sbin/gdm-binary -nodaemon
212/387: root      11464      1  0 Jun14 tty2     00:00:00 /sbin/mingetty /dev/tty2
212/388: root      11466      1  0 Jun14 tty3     00:00:00 /sbin/mingetty /dev/tty3
212/389: root      11468      1  0 Jun14 tty4     00:00:00 /sbin/mingetty /dev/tty4
212/390: root      11470      1  0 Jun14 tty5     00:00:00 /sbin/mingetty /dev/tty5
212/391: root      11473      1  0 Jun14 tty6     00:00:00 /sbin/mingetty /dev/tty6
212/392: root      11658      1  0 Jun14 ?        00:00:00 /usr/libexec/devkit-power-daemon
212/393: root      11742      1  0 Jun14 ?        00:00:00 /usr/libexec/polkit-1/polkitd
212/394: rtkit     11758      1  0 Jun14 ?        00:00:01 /usr/libexec/rtkit-daemon
212/395: root      12576      1  0 Jun14 ?        00:00:00 /usr/libexec/udisks-daemon
212/396: root      12668  12576  0 Jun14 ?        00:00:00 udisks-daemon: not polling any devices
212/397: root      15478   1066  0 Jun14 ?        00:00:00 /sbin/udevd -d
212/398: root      15479   1066  0 Jun14 ?        00:00:00 /sbin/udevd -d
212/399: root      17480  10157  0 14:47 ?        00:00:00 sshd: cplee [priv]
212/400: cplee     17544  17480  0 14:47 ?        00:00:00 sshd: cplee@pts/4
212/401: cplee     17545  17544  0 14:47 pts/4    00:00:00 -bash
212/402: cplee     22908  17545  0 14:56 pts/4    00:00:00 vim ptse2.py
212/403: postfix   26641  10292  0 15:03 ?        00:00:00 pickup -l -t fifo -u
212/404: root      28312  10517  0 15:07 ?        00:00:00 smbd -D
212/405: root      30727      2  0 Jun14 ?        00:00:00 [kslowd000]
212/406: root      30728      2  0 Jun14 ?        00:00:00 [kslowd001]
212/407: root      30729      2  0 Jun14 ?        00:00:00 [nfsiod]
212/408: root      40737      2  0 15:30 ?        00:00:00 [flush-8:16]
212/409: root      42877  11445  0 Jun14 ?        00:00:00 /usr/libexec/gdm-simple-slave --display-id /org/gnome/DisplayManager/Display1
212/410: root      42881  42877  0 Jun14 tty1     00:00:04 /usr/bin/Xorg :0 -br -verbose -audit 4 -auth /var/run/gdm/auth-for-gdm-E2l45k/database -nolisten tcp vt1
212/411: gdm       42926      1  0 Jun14 ?        00:00:00 /usr/bin/dbus-launch --exit-with-session
212/412: gdm       42931      1  0 Jun14 ?        00:00:00 /bin/dbus-daemon --fork --print-pid 5 --print-address 7 --session
212/413: gdm       42932  42877  0 Jun14 ?        00:00:00 /usr/bin/gnome-session --autostart=/usr/share/gdm/autostart/LoginWindow/
212/414: gdm       42936      1  0 Jun14 ?        00:00:00 /usr/libexec/gconfd-2
212/415: gdm       42937  42932  0 Jun14 ?        00:00:00 /usr/libexec/at-spi-registryd
212/416: gdm       42941      1  0 Jun14 ?        00:00:01 /usr/libexec/gnome-settings-daemon --gconf-prefix=/apps/gdm/simple-greeter/settings-manager-plugins
212/417: gdm       42943      1  0 Jun14 ?        00:00:00 /usr/libexec/bonobo-activation-server --ac-activate --ior-output-fd=12
212/418: gdm       42954      1  0 Jun14 ?        00:00:00 /usr/libexec/gvfsd
212/419: gdm       42955  42932  0 Jun14 ?        00:00:00 metacity
212/420: gdm       42956  42932  0 Jun14 ?        00:00:00 /usr/libexec/polkit-gnome-authentication-agent-1
212/421: gdm       42957  42932  0 Jun14 ?        00:00:00 gnome-power-manager
212/422: gdm       42958  42932  0 Jun14 ?        00:00:02 /usr/libexec/gdm-simple-greeter
212/423: gdm       42960  42932  0 Jun14 ?        00:00:00 plymouth-log-viewer --icon
212/424: gdm       42977      1  0 Jun14 ?        00:00:00 /usr/bin/pulseaudio --start --log-target=syslog
212/425: root      42997  42877  0 Jun14 ?        00:00:00 pam: gdm-password
212/426: root      43140  10517  0 11:12 ?        00:00:00 smbd -D
212/427: kuang     43622  10517  0 Jun14 ?        00:00:31 smbd -D
212/428: kuang     47811  98314  0 15:43 pts/7    00:00:00 ps -ef
212/429: kuang     47812  98314  0 15:43 pts/7    00:00:00 /cluster/miniconda/bin/python /cluster/miniconda/bin/ipython
212/430: apache    56625  10336  0 Jun14 ?        00:00:00 /usr/sbin/httpd
212/431: penny     94284      1  0 Jun14 ?        00:00:00 intelremotemond
212/432: root      94950  10517  0 08:31 ?        00:00:00 smbd -D
212/433: root      97596  10157  0 Jun15 ?        00:00:00 sshd: kuang [priv]
212/434: kuang     97643  97596  0 Jun15 ?        00:00:02 sshd: kuang@pts/7
212/435: kuang     97644  97643  0 Jun15 pts/7    00:00:00 -bash
212/436: kuang     98314  97644  0 Jun15 pts/7    00:00:00 -sh
212/437: kuang    107704 129269  0 Jun15 pts/1    00:01:44 /cluster/miniconda/bin/python /cluster/miniconda/bin/ipython
212/438: root     110213  10157  0 08:56 ?        00:00:00 sshd: penny [priv]
212/439: penny    110267 110213  0 08:56 ?        00:00:00 sshd: penny@pts/0
212/440: penny    110270 110267  0 08:56 pts/0    00:00:00 -bash
212/441: root     111912  10157  0 08:59 ?        00:00:00 sshd: penny [priv]
212/442: penny    111961 111912  0 08:59 ?        00:00:00 sshd: penny@pts/2
212/443: penny    111962 111961  0 08:59 pts/2    00:00:00 -bash
212/444: penny    118251 110270  0 09:08 pts/0    00:00:00 vim MACO.SFC
212/445: kuang    126701 129269  0 Jun15 pts/1    00:00:48 /cluster/miniconda/bin/python /cluster/miniconda/bin/ipython
212/446: root     127220  10157  0 13:43 ?        00:00:00 sshd: cplee [priv]
212/447: cplee    127342 127220  0 13:43 ?        00:00:00 sshd: cplee@pts/3
212/448: cplee    127343 127342  0 13:43 pts/3    00:00:00 -bash
212/449: root     129216  10157  0 Jun14 ?        00:00:00 sshd: kuang [priv]
212/450: kuang    129267 129216  0 Jun14 ?        00:00:02 sshd: kuang@pts/1
212/451: kuang    129269 129267  0 Jun14 pts/1    00:00:00 -bash
212/452: cplee    145520 127343  0 14:16 pts/3    00:00:03 /cluster/miniconda/bin/python /usr/bin/ipython
213/1:
fname='SCC_Codes.xlsx'
from openpyxl import Workbook, load_workbook
from itertools import islice
wb= load_workbook(fname,data_only='true')
ws=wb['SCC Codes']
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df_scc = DataFrame(data, index=idx, columns=cols)
213/2:
fname='SCC_Codes.xlsx'
from pandas import DataFrame
from openpyxl import Workbook, load_workbook
from itertools import islice
wb= load_workbook(fname,data_only='true')
ws=wb['SCC Codes']
data = ws.values
cols = next(data)[1:]
data = list(data)
idx = [r[0] for r in data]
data = (islice(r, 1, None) for r in data)
df_scc = DataFrame(data, index=idx, columns=cols)
213/3:
L13=[]
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
    L13.append(b)
213/4:
from pandas import *
L13=[]
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
    L13.append(b)
213/5: L13
213/6: df_scc
213/7: df_scc=df_scc.reset_index()
213/8:
L13=[]
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
    L13.append(b)
213/9: df_scc['L13
213/10: df_scc['L13']=L13
213/11: fn='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
213/12: fname='/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
213/13:
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        if len(b)>1: a.update({b[0]:b[1]})
213/14: list(a)[:5]
213/15: !more '/home/SMOKE4.5/subsys/smoke/scripts/run/pbm.scc'
213/16:
a=[]
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n')
        if len(b)>1: a.append(b)
213/17: a[:5]
213/18: len(set(a))
213/19: df_scc.head(5)
213/20: df_scc['SCC'][:5]
213/21: a=[int(x) for x in a]
213/22: len(a)
213/23: a=list(set(a))
213/24: len(a)
213/25:
for i in a:
    if i not in df_scc['SCC']:print i,'not in'
213/26: s=set(df_scc['SCC'])
213/27:
for i in a:
    if i not in s:print i,'not in'
213/28: scc_pbm=a
213/29: a
213/30: a.sort_values()
213/31: a.sort
213/32: a.sort()
213/33: a.sort
213/34: a.sort(a)
213/35: a.sort[a]
213/36: a.sort()
213/37: a
213/38: scc_pbm=a
213/39:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
a={}
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split(';')
        if len(b)>1: a.update({b[0]:b[1]})
d_xref=a
d_xref
df_xref=DataFrame({'SCC':[x for x in d_xref],'PROFILE_NO':[d_xref[x] for x in d_xref]})
213/40: s_xref_scc=set(df_xref['SCC'])
213/41:
for i in a:
    if i not in s_xref_scc:print i,'not in'
213/42:
for i in scc_pbm:
    if i not in s_xref_scc:print i,'not in'
213/43: len(scc_pbm)
213/44: !ls -lrt
213/45: !more d_pbm.csv
213/46: !sed -i 's/"""//g' d_pbm.csv
213/47: !more d_pbm.csv
213/48: !wc d_pbm.csv
213/49: df_pbm=read_csv('d_pbm.csv')
213/50: s_pbm_prof=set(df_pbm['Profile_NO'])
213/51: len(s_pbm_prof)
213/52: s_xref_prof=set(df_xref['PROFILE_NO'])
213/53: len(s_xref_prof)
213/54: len(s_pbm_prof-s_xref_prof)
213/55:
L13=[]
for i in xrange(len(df_scc)):
    b=''
    for j in xrange(2,5):
        c=df_scc.columns[j]
        c=''+str(df_scc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
    L13.append(b[1:])
df_scc['L13']=L13
213/56: df_scc.head(5)
213/57: df_xref.head(5)
213/58: d_L13={}
213/59:
for i in xrange(len(df_scc)):
    d_L13.update({df_scc.loc[i,'SCC']:df_scc.loc[i,'L13']})
213/60: d_L13[30102108]
213/61:
for i in df_xref['SCC']:
    if i not in df_scc['SCC']:print i, 'not in'
213/62:
a=[]
for i in df_xref['SCC']:
    if i not in df_scc['SCC']:
        a.append(i)
213/63: len(a)
213/64: df_scc['SCC']
213/65: df_xref['SCC']
213/66:
a=[]
for i in df_xref['SCC']:
    if int(i) not in df_scc['SCC']:
        a.append(i)
213/67: df_scc['SCC']=[str(x) for x in df_scc['SCC']]
213/68:
a=[]
for i in df_xref['SCC']:
    if i not in df_scc['SCC']:
        a.append(i)
213/69: len(a)
213/70: s=df_scc['SCC']
213/71:
a=[]
for i in df_xref['SCC']:
    if i not in s:
        a.append(i)
213/72: len(a)
213/73: df_xref['SCC'][:5]
213/74: '30102108' in s
213/75: list(s)[:5]
213/76: list(df_xref['SCC'])[:5]
213/77: len(s)
213/78:
a=[]
for i in list(df_xref['SCC']):
    if i not in s:
        a.append(i)
213/79: len(s)
213/80: len(a)
213/81: ss=list(s).sort()
213/82: ss[-9:]
213/83: list(s).sort()
213/84: ss=list(s)
213/85: ss.sort()
213/86: ss[-9:]
213/87: len(df_scc)
213/88: len(df_xref)
213/89: len(set(df_xref['SCC']))
213/90:
fname='/home/SMOKE4.5/subsys/smoke/scripts/run/xref_prof.scc'
(a,b)=([],[])
with open(fname) as ftext:
    for line in ftext:
        c=line.strip('\n').split(';')
        if len(c)>1: 
            a.append(c[0])
            b.append(c[1])
df_xref=DataFrame({'SCC':a,'PROFILE_NO':b})
213/91: a=set(df_xref['SCC'])
213/92: len(a)
213/93: len(df_xref)
213/94: list(a)[:5]
213/95: list(s)[:5]
213/96:
c=0
for i in a:
    if i not in s:c+=1
print c
213/97:
c=0
for i in a:
    if i in s:c+=1
print c
213/98: history
213/99: len(df_scc)
213/100: df_pv=read_csv('df_pv.csv')
213/101: s_pv=set(df_pv['SCC'])
213/102: len(s_pv)
213/103:
(L2,L3,L4)=([],[],[])
with open("/home/SMOKE4.5/data/ge_dat/scc_desc.txt", "r") as f:
    for line in f:
        b=line.strip('\n').split(';')
        L2.append(b[1])
        L3.append(b[2])
        L4.append(b[3])
213/104: len(b)
213/105:
(L2,L3,L4)=([],[],[])
with open("/home/SMOKE4.5/data/ge_dat/scc_desc.txt", "r") as f:
    for line in f:
        b=line.strip('\n').split(';')
        if len(b)>1:
            L2.append(b[1])
            L3.append(b[2])
            L4.append(b[3])
213/106: L2[:5]
213/107: L4[:5]
213/108:
(scc,L1)=([],[])
with open("/home/SMOKE4.5/subsys/smoke/scripts/run/scc_desc1.txt", "r") as f:
    for line in f:
        b=line.strip('\n').split()
        if len(b)>1:
            scc.append(b[0])
            c=''
            for i in b[1:]:
                c=c+' '+i
            L1.append(c)
213/109: len(L1),len(L2)
213/110: L1[:5]
213/111:
(scc,L1)=([],[])
with open("/home/SMOKE4.5/subsys/smoke/scripts/run/scc_desc1.txt", "r") as f:
    for line in f:
        b=line.strip('\n').split()
        if len(b)>1:
            scc.append(b[0])
            c=''
            for i in b[1:]:
                c=c+' '+i
            L1.append(c[1:])
213/112: L1[:5]
213/113: df_desc=DataFrme({'SCC':scc,'L1':L2,'L2':L3,'L3':L4,'L1})
213/114: df_desc=DataFrme({'SCC':scc,'L1':L2,'L2':L3,'L3':L3,'L4':L4})
213/115: from pandas import *
213/116: df_desc=DataFrame({'SCC':scc,'L1':L2,'L2':L3,'L3':L3,'L4':L4})
213/117: df_desc.head(5)
213/118: df_desc.head(5)['SCC']
213/119: s_desc=set(df_desc['SCC'])
213/120:
for i in df_xref['SCC']:
    if i not in s_desc:print i, 'not in'
213/121:
for i in set(df_xref['SCC']):
    if i not in s_desc:print i, 'not in'
213/122: len(s_desc)
213/123: scc_pbm[:5]
213/124: len(scc_pbm)
213/125: s=set(scc_pbm)
213/126:
for i in s:
    if i not in s_desc:print i, 'not in'
213/127:
c=0
for i in s:
    if i not in s_desc:c+=1
print c
213/128:
c=0
for i in set(df_xref['SCC']):
    if i not in s_desc:c+=1
c
213/129: l=[len(x) for x in df_xref['SCC']]
213/130: max(l)
213/131: l=[len(x) for x in df_desc['SCC']]
213/132: max(l)
213/133:
c=0
for i in s_pv:
    if i not in s_desc:c+=1
c
213/134: s_pv
213/135: list(s_pv)[:5]
213/136:
c=0
for i in s_pv:
    if str(i) not in s_desc:c+=1
c
213/137:
c=0
for i in s_pv:
    if str(i) not in set(df_scc['SCC']):c+=1
c
213/138:
c=0
for i in s_pv:
    if str(i) not in set(df_xref['SCC']):c+=1
c
213/139: df_pbm.columns
213/140: df_scc.columns
213/141: for i in
213/142: list(d_L13)[:5]
213/143: len(d_L13)
213/144: L13=[d_L13(x) for x in df_pbm['SCC']]
213/145: L13=[d_L13[x] for x in df_pbm['SCC']]
213/146: l13[:5]
213/147: L13[:5]
213/148: df_pbm['L13']=L13
213/149:
L13=[]
for i in df_xref['SCC']:
    if i in df_scc['SCC']:
        L13.append(d_L13[i])
    else:
        L13.append('NaN')
213/150: L13[:5]
213/151: df_xref['L13']=L13
213/152: s_L13_pbm=set(df_pbm['L13'])
213/153: s_L13_xref=set(df_xref['L13'])
213/154: s_L13_pbm-s_L13_xref
213/155: len(s_L13_pbm-s_L13_xref)
213/156:
L13_xref=list(s_L13_xref)
from fuzzywuzzy import fuzz
mtch=[]
for i in s_L13_pbm:
    a=[fuzz.ratio(x.lower(),i.lower()) for x in L13_xref]
    mtch.append([i,L13_xref[a.index(max(a))],max(a)])
mtch
213/157: i
213/158: len(s_L13_pbm)
213/159: len(s_L13_xref)
213/160: history
213/161: df_desc.columns
213/162:
L13=[]
for i in xrange(len(df_desc)):
    b=''
    for j in xrange(3):
        c=df_desc.columns[j]
        c=''+str(df_desc.loc[i,c])
        if len(c)>0:
            b=b+' '+c
    L13.append(b[1:])
df_desc['L13']=L13
213/163:
d_L13={}
for i in xrange(len(df_desc)):
    d_L13.update({df_desc.loc[i,'SCC']:df_desc.loc[i,'L13']})
213/164:
L13=[]
for i in df_xref['SCC']:
    if i in df_scc['SCC']:
        L13.append(d_L13[i])
    else:
        L13.append('NaN')
213/165: df_xref['L13']=L13
213/166:
s_L13_xref=set(df_xref['L13'])
len(s_L13_xref)
213/167:
L13=[]
for i in df_xref['SCC']:
    if i in df_desc['SCC']:
        L13.append(d_L13[i])
    else:
        L13.append('NaN')
213/168:
s_L13_xref=set(df_xref['L13'])
len(s_L13_xref)
213/169: len(set(df_desc['SCC'])-set(df_xref['SCC']))
213/170: len(set(df_xref['SCC'])-set(df_desc['SCC']))
213/171: len(set(df_xref['SCC']))
213/172:
L13=[]
for i in df_xref['SCC']:
    if i in set(df_desc['SCC']):
        L13.append(d_L13[i])
    else:
        L13.append('NaN')
213/173:
df_xref['L13']=L13
s_L13_xref=set(df_xref['L13'])
len(s_L13_xref)
213/174: len(s_L13_pbm-s_L13_xref)
213/175: !pwd
213/176: !lst
213/177: !more d_pbm.csv
213/178: !cp d_pbm.csv d_pbm.add
213/179: !sed -i '1d' d_pbm.add
213/180: !head d_pbm.add
213/181: !sed -i 's/,/;/g' d_pbm.add
213/182: !sed -i 's/"""//g' d_pbm.add
213/183: !sed -i 's/;/;"/g' d_pbm.add
213/184: !sed -i 's/$/$";"VOC";;;;;;;! Added by YCKuang/g' d_pbm.add
213/185: !cat d_pbm.add
213/186: !sed -i 's/".\$"/"0000"/g' d_pbm.add
213/187: !cat d_pbm.add
213/188: !cp d_pbm2.csv d_pbm.add
213/189: !sed -i '1d' d_pbm.add
213/190: !sed -i 's/,/;/g' d_pbm.add
213/191: !cat
213/192: !cat d_pbm.add
213/193: !sed -i 's/""//g' d_pbm.add
213/194: !cat d_pbm.add
213/195: !sed -i 's/$/;"VOC";;;;;;;! Added by YCKuang/g' d_pbm.add
213/196: !cat d_pbm.add
213/197: !cp d_pbm2.csv d_pbm.add
213/198: !sed -i '1d' d_pbm.add
213/199: !sed -i 's/,/;/g' d_pbm.add
213/200: !sed -i 's/""//g' d_pbm.add
213/201: !cat
213/202: !cat d_pbm.add
213/203: !cp d_pbm.add a
213/204: !sed -i 's/$/$;"VOC";;;;;;;! Added by YCKuang/g' d_pbm.add
213/205: !cat d_pbm.add
213/206: !cp a d_pbm.add
213/207: !wc a
213/208: !sed -i '1,128s/$/;"VOC";;;;;;;! Added by YCKuang/' d_pbm.add
213/209: !cat d_pbm.add
213/210: !cp a d_pbm.add
213/211: !cat d_pbm.add
213/212: !sed -i '1,128s/0"/0";"VOC";;;;;;;! Added by YCKuang/' d_pbm.add
213/213: !cat d_pbm.add
213/214: !pwd
213/215: !cp d_pbm.add a
213/216: !sed -i 's/VOC/PM2_5/g' d_pbm.add
213/217: history
214/1: fname="/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gsref.cmaq.cb4p25.txt"
214/2: a={}
214/3:
SCC=[]
prof=[]
spec=[]
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        (SCC,prof,spec)=map(append,b)
214/4:
from pandas import *
df_gsref=DataFrame({'SCC'=[],'prof'=[],'spec'=[]})
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        df_gsref=fs_gsref['SCC','prof','spec'].append(b)
        df_gsref.reset_index()
214/5:
from pandas import *
df_gsref=DataFrame({'SCC':[],'prof':[],'spec':[]})
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        df_gsref=fs_gsref['SCC','prof','spec'].append(b)
        df_gsref.reset_index()
214/6:
from pandas import *
df_gsref=DataFrame({'SCC':[],'prof':[],'spec':[]})
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        df_gsref=df_gsref['SCC','prof','spec'].append(b)
        df_gsref.reset_index()
214/7:
from pandas import *
df_gsref=DataFrame({'SCC':[],'prof':[],'spec':[]})
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        df_gsref=df_gsref.append(b)
        df_gsref.reset_index()
214/8:
a=[]
with open(fname) as ftext:
    for line in ftext:
        b=line.strip('\n').split()
        a.append(b)
214/9: a[:5]
214/10:
a[:7
]
214/11: a[7:10]
214/12:
a[7:20
]
214/13: del a[0:10]
214/14: a[:5]
214/15: df_gsref=DataFrame({'SCC':[x[0] for x in a],'prof':[x[1] for x in a],'spec':[x[2] for x in a]})
214/16: len(set(df_gsref['SCC']))
214/17: len(set(df_gsref['prof']))
214/18: len(set(df_gsref['spec']))
214/19: set(df_gsref['spec'])
214/20: df_gsref.set_index(SCC).to_csv('vbird_gsref.cmaq.cb4p25.csv')
214/21: df_gsref.reset_index(SCC).to_csv('vbird_gsref.cmaq.cb4p25.csv')
214/22: !path
214/23: !pwd
214/24: !more vbird_gsref.cmaq.cb4p
214/25: !more vbird_gsref.cmaq.cb4p25.csv
214/26:
a=[]
with open("/home/SMOKE4.5/data/ge_dat/gspro.cmaq_cb05_soa.txt") as ftext:
    for line in ftext:
        if line[0]=='#' continue
        b=line.strip('\n').split(';')
        a.append(b)
214/27:
a=[]
with open("/home/SMOKE4.5/data/ge_dat/gspro.cmaq_cb05_soa.txt") as ftext:
    for line in ftext:
        if line[0]=='#': continue
        b=line.strip('\n').split(';')
        a.append(b)
214/28: a[:5]
214/29: len(a)
214/30: !vi tab8.42GSREF.txt
214/31: df_gspro=DataFrame({'Speciation profile number':[x[0] for x in a],'Pollutant ID':[x[1] for x in a],'Species ID':[x[2] for x in a],'Split factor':[x[3] for x in a],'Divisor':[x[4] for x in a],'Mass Fraction':[x[5] for x in a]})
214/32: df_gspro['profile number']=df_gspro['Speciation profile number']
214/33: del df_gspro['Speciation profile number']
214/34: df_gsref.reset_index('SCC').to_csv('vbird_gsref.cmaq.cb4p25.csv')
214/35: df_gsref.head(10)
214/36: df_gsref.reset_index('SCC').to_csv('vbird_gsref.cmaq.cb4p25.csv')
214/37: df_gsref.columns
214/38: df_gspro.reset_index('profile number').to_csv('gsprof.cmaq.cb4p25.csv')
214/39: df_gspro.reset_index(['profile number']).to_csv('gsprof.cmaq.cb4p25.csv')
214/40: df_gspro.columns
214/41: len(set(df_gspro['profile number']))
214/42: !ls *.csv
214/43: !ls *.csv -lrt
214/44: d_pbm=read_csv('d_pbm2.csv')
214/45: d_pbm.columns
214/46: set(d_pbm['Profile_NO'])-set(df_gspro['profile number'])
214/47: d_pbm=read_csv('d_pbm.csv')
214/48: set(d_pbm['Profile_NO'])-set(df_gspro['profile number'])
214/49: len(set(d_pbm['Profile_NO'])-set(df_gspro['profile number']))
214/50: len(set(d_pbm['Profile_NO']))
214/51: list(set(d_pbm['Profile_NO']))[:5]
214/52: list(set(df_gspro['profile number']))[:5]
214/53: a=d_pbm['Profile_NO']
214/54: d_pbm['Profile_NO']=[str(x) for x in a]
214/55: set(d_pbm['Profile_NO'])-set(df_gspro['profile number'])
214/56: len(set(d_pbm['Profile_NO'])-set(df_gspro['profile number']))
214/57: old_p=a
214/58: a=[]
214/59:
for i in old_p:
    dl=4-len(i)
    a.append(dl*'0'+i)
214/60:
for i in old_p:
    dl=4-len(str(i))
    a.append(dl*'0'+i)
214/61:
for i in old_p:
    dl=4-len(str(i))
    a.append(dl*'0'+str(i))
214/62: d_pbm['Profile_NO']=a
214/63: set(d_pbm['Profile_NO'])-set(df_gspro['profile number'])
214/64: history
214/65: vi process.py
214/66: !vi process.py
214/67: df_gspro.columns
214/68: set(df_gspro['Species ID'])
214/69: df_gsref.columns
214/70: df_VB_gsref=df_gsref
214/71: fname='/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.cb4p25.txt'
214/72:
a=[]
with open("/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.cb4p25.txt") as ftext:
    for line in ftext:
        if line[0]=='#' continue
        b=line.strip('\n').split()
        a.append(b)
214/73:
a=[]
with open("/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.cb4p25.txt") as ftext:
    for line in ftext:
        if line[0]=='#': continue
        b=line.strip('\n').split()
        a.append(b)
214/74: a[:5]
214/75: df_CB5_gspro=df_gspro
214/76: df_gspro=DataFrame({'Speciation profile number':[x[0] for x in a],'Pollutant ID':[x[1] for x in a],'Species ID':[x[2] for x in a],'Split factor':[x[3] for x in a],'Divisor':[x[4] for x in a],'Mass Fraction':[x[5] for x in a]})
214/77: set(df_gspro['Species ID'])
214/78: set(df_CB5_gspro['Species ID'])
214/79: set(df_gspro['Species ID'])-set(df_CB5_gspro['Species ID'])
214/80: a=df_CB5_gspro['Species I
214/81: a=df_CB5_gspro['Species ID']
214/82: a[:5]
214/83: str(a[4:5])
214/84: a=list(df_CB5_gspro['Species ID'])
214/85: a[:5]
214/86: str(a[4:5])
214/87: str(a[4:5])[1:-1]
214/88: str(a[4:5])[2:-3]
214/89: str(a[4:5])[3:-3]
214/90: b=[str(x)[3:-3] for x in a]
214/91: b[:5]
214/92: b=[str(x)[2:-2] for x in a]
214/93: b[:5]
214/94: b=[str(x)[1:-1] for x in a]
214/95: b[:5]
214/96: df_CB5_gspro['Species ID']=b
214/97: set(df_gspro['Species ID'])-set(df_CB5_gspro['Species ID'])
214/98: a=set(df_CB5_gspro['Species I
214/99: a=set(df_CB5_gspro['Species ID'])
214/100:
for i in a:
    if i[0]=='P':print i
214/101: df_CB4_gspro=df_gspro
214/102: df_CB4_gspro.loc[df_CB4_gspro['Species ID']=='POA','Species ID']='POC'
214/103: set(df_gspro['Species ID'])-set(df_CB5_gspro['Species ID'])
214/104: df_CB4_gspro[df_CB4_gspro['Species ID']=='POC']
214/105:
a=[]
with open("/home/SMOKE4.5/subsys/smoke/scripts/run/gspro.vbird.txt") as ftext:
    for line in ftext:
        if line[0]=='#': continue
        b=line.strip('\n').split()
        a.append(b)
214/106: df_gspro=DataFrame({'Speciation profile number':[x[0] for x in a],'Pollutant ID':[x[1] for x in a],'Species ID':[x[2] for x in a],'Split factor':[x[3] for x in a],'Divisor':[x[4] for x in a],'Mass Fraction':[x[5] for x in a]})
214/107: set(df_gspro['Species ID'])-set(df_CB5_gspro['Species ID'])
214/108: set(df_gspro['Pollutant ID'])-set(df_CB5_gspro['Pollutant ID'])
214/109: a=set(df_CB5_gspro['Pollutant ID'])
214/110:
for i in a:
    if i[0]=='T':print i
214/111: a
214/112: a=list(df_CB5_gspro['Pollutant ID'])
214/113: b=[str(x)[1:-1] for x in a]
214/114: b[:5]
214/115: df_CB5_gspro['Pollutant ID']=b
214/116: a=set(df_CB5_gspro['Pollutant ID'])
214/117:
for i in a:
    if i[0]=='T':print i
214/118: set(df_gspro['Pollutant ID'])-set(df_CB5_gspro['Pollutant ID'])
214/119: set(df_gspro['Pollutant ID'])
214/120: df_gspro.columns
214/121: col=df_gspro.columns
214/122: a=[3,2,4,5,0,1]
214/123:
for i in a:
    print i,col[i]
214/124:
b=[]
for i in a:
    b.append(col[i])
214/125: b
214/126: df_gspro.reset_index('Speciation profile number').to_csv('gspro.vbird.csv')
214/127: df_gspro
214/128: !gre to_csv *py
214/129: !grep to_csv *py
214/130: df_gspro[b].set_index('Speciation profile number').to_csv('gspro.vbird.csv')
214/131: !pwd
214/132: history
214/133: !vi process.py
214/134: df_VB_gsref.set_index('SCC').to_csv('vbird_gsref.cmaq.cb4p25.csv')
214/135: !cat ../../SPECIATE4.5/GAS_SPECIES.csv.columns
214/136: df_gspec==read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
214/137: df_gspec=read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
214/138: df_property=read_csv('../../SPECIATE4.5/SPECIES_PROPERTIES.csv')
214/139: list(df_gspec['P_NUMBER'])[:5]
214/140: '8814' in set(df_gspec['P_NUMBER'])
214/141: '8953' in set(df_gspec['P_NUMBER'])
214/142: '95325' in set(df_gspec['P_NUMBER'])
214/143: list(df_gspec['SPECIES_ID'])[:5]
214/144: !cat ../../SPECIATE4.5/SPECIES_PROPERTIES.csv.columns
214/145: len(set(df_gspec['SPECIES_ID']))
214/146: min(list(df_gspec['SPECIES_ID']))
214/147: max(list(df_gspec['SPECIES_ID']))
214/148: max(list(df_property['ID']))
214/149: min(list(df_property['ID']))
214/150: len(set(df_property['ID']))
214/151: list(df_property['NonVOCTOG'])[:5]
214/152: list(df_property['Name'])[:5]
214/153: list(df_property['NAME'])[:5]
214/154: a=df_property[df_property['NonVOCTOG']==0]
214/155: len(a)
214/156: len(set(a['ID']))
214/157: len(set(a['CAS no']))
214/158: len(set(a['CAS no hyphen']))
214/159: !pwd
214/160: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5.csv')
214/161: df_cb5.columns
214/162: !vi ../CB05/df_cb5.csv.columns
214/163: s_cb5_ID=df_cb5.columns[3:-2]
214/164: s_cb5_ID
214/165: cb5_ID=s_cb5_ID
214/166: set(cb5_ID)-set(df_CB5_gspro['Species ID'])
214/167: a=df_cb5['NASN']
214/168: min(a),max(a)
214/169: a[:5]
214/170: len(a)
214/171: a=df_cb5['CAS']
214/172: a[:5]
214/173: b=[]
214/174:
for i in a:
    for j in i:
        b.append(j)
214/175:
for i in list(a):
    for j in i:
        b.append(j)
214/176:
for i in list(a):
    if len(i)>1:
        for j in i:
            b.append(j)
    else:
        b.append(i)
214/177: a=list(a)
214/178: a[:5]
214/179: i
214/180: len(i)
214/181:
len(i.type
i)
214/182: i.type
214/183: type(i)
214/184:
b=[]
for i in list(a):
    if len(str(i))>1:
        for j in str(i):
            b.append(j)
    else:
        b.append(i)
214/185: b[:5]
214/186: a[:5]
214/187: type(a[2])
214/188: type(a[3])
214/189: a[3]
214/190: a[2]
214/191: a[2][1]
214/192: a[2][0]
214/193:
b=[]
for i in list(a):
    if i[0]=='[':
        line=i[1:-1]
        c=line.split(',')
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/194:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[1:-1]
        c=line.split(',')
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/195: b[:5]
214/196:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[1:-1].strip('"')
        c=line.split(',')
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/197: b[:5]
214/198:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[1:-1].strip("'")
        c=line.split(',')
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/199: b[:5]
214/200: a[:5]
214/201:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[1:-1].strip(",")
        c=line.split()
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/202: b[:5]
214/203:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[1:-1].strip('"')
        c=line.split(', ')
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/204: b[:5]
214/205:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[2:-2]
        c=line.split("', '")
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/206: b[:5]
214/207: len(b)
214/208: set(b)
214/209: len(set(b))
214/210: 1690-1432
214/211:
for i in set(b):
    c=b.count(i)
    if c>1:print c,i
214/212: c=a
214/213:
d=a
for i in list(a):
    if str(i)[0]=='[':
        line=i[2:-2]
        c=line.split("', '")
        d[a.index(i)]=c
214/214: d[:5]
214/215: df_cb5['CAS']=d
214/216:
a={}
for i in set(b):
    c=b.count(i)
    if c>1:a.update(i)
214/217:
a={}
for i in set(b):
    c=b.count(i)
    if c>1:a.add(i)
214/218:
a=set()
for i in set(b):
    c=b.count(i)
    if c>1:a.add(i)
214/219: len(a)
214/220: !grep cirp *.py
214/221: !grep cirp ../CB05/*.py
214/222: import cirpy
214/223: a=list(a)
214/224: nam_a=[cirpy.resolve(x,'name') for x in a]
214/225: a[:5]
214/226: del a[0]
214/227: a[:5]
214/228: nam_a=[cirpy.resolve(x,'name') for x in a]
214/229: cirpy.resolve('1735-75-7','name')
214/230: cirpy.resolve('1735-75-7','cas')
214/231: cirpy.resolve('1735-75-7','smiles')
214/232: cirpy.resolve('1735-75-7','names')
214/233: nam_a=[cirpy.resolve(x,'name')[0] for x in a]
214/234: x
214/235: cirpy.resolve('1735-75-7','names')[0]
214/236: nam_a
214/237: cirpy.resolve('1735-75-7','name')
214/238: nam_a=[cirpy.resolve(x,'names')[0] for x in a]
214/239: len(a), len(set(nam_a))
214/240: nam_a[:5]
214/241: a=list(set(nam_a)).sort
214/242: a[:10]
214/243: a
214/244: a=list(set(nam_a))
214/245: a.sort
214/246: a
214/247: a.sort()
214/248: a
214/249: s_nam=set(df_cb5['name'])
214/250: 'octane' in s_nam
214/251: 'octane'.up in s_nam
214/252: 'octane'.upper in s_nam
214/253: len(s_nam)
214/254:
a=set()
b=list(df_cb5['name'])
for i in s_nam:
    c=b.count(i)
    if c>1:print c,i
214/255: a=df_cb5[df_cb5['name']=='1,3-diethylbenzene (meta)']
214/256: a
214/257: !grep drop ../*py
214/258: !grep drop /home/python_eg/*/*py
214/259: df_cb5['index'==31]
214/260: df_cb5.index
214/261: df_cb5.loc[31]
214/262: a=df_cb5[df_cb5['name']=='1,3-diethylbenzene (ortho)']
214/263: a
214/264: a=df_cb5[df_cb5['name']=='1,2-diethylbenzene (ortho)']
214/265: a
214/266: df_cb5.drop(df_cb5.loc[489].index, inplace=True)
214/267: col=df_cb5.columns
214/268: df_cb5.drop(df_cb5.loc[489,col].index, inplace=True)
214/269: df_cb5.loc[489]
214/270: del df_cb5.loc[489]
214/271: del df_cb5.loc[489,loc]
214/272: loc
214/273: col
214/274: col=list(col)
214/275: del df_cb5.loc[489,col]
214/276: df_cb5.loc[489,'name']='nan'
214/277: df_cb5.loc[488,'name']='nan'
214/278: df_cb5.loc[488,'cas']='nan'
214/279: df_cb5.loc[489,'cas']='nan'
214/280: !gr
214/281: !grep drop ../*py
214/282: !grep drop /home/python_eg/*/*py
214/283: df_cb5.drop(df_cb5[df_cb5['name']=='nan'].index, inplace=True)
214/284: a=df_cb5['cas']
214/285: a[:5]
214/286: set(a)
214/287: len(set(a))
214/288: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5.csv')
214/289: df_cb5.loc[488,'name']='nan'
214/290: df_cb5.loc[489,'name']='nan'
214/291: df_cb5.drop(df_cb5[df_cb5['name']=='nan'].index, inplace=True)
214/292: a=df_cb5['cas']
214/293: df_cb5.columns
214/294: a=df_cb5['CAS']
214/295: a[:5]
214/296: a[2][0]
214/297: nam_a
214/298: s_nam
214/299: b
214/300: c
214/301: d
214/302: df_cb5.drop(df_cb5[df_cb5['CAS']=='nan'].index, inplace=True)
214/303: len(df_cb5)
214/304: df_cb5=df_cb5.reset_index()
214/305: len(df_cb5)
214/306: df_cb5[df_cb5['CAS']=='nan']
214/307: set(a)
214/308: list(set(a))[:5]
214/309: df_cb5.drop(df_cb5[df_cb5['CAS']==nan].index, inplace=True)
214/310: b
214/311: s_cb5_ID
214/312:
b=[]
for i in list(a):
    if str(i)[0]=='[':
        line=i[2:-2]
        c=line.split("', '")
        for j in c:
            b.append(j)
    else:
        b.append(i)
214/313: b[:5]
214/314: c=set(df_property['CAS'])
214/315: s_cb5_cas=set(b)
214/316: b-c
214/317: s_cb5_cas-c
214/318: len(s_cb5_cas-c)
214/319: len(c)
214/320: len(s_cb5_cas)
214/321: history
214/322: !vi process.py
214/323: !vi process.py
214/324: a=df_property[df_property['NonVOCTOG']==0]
214/325: len(s_cb5_cas)
214/326: len(s_cb5_cas-c)
214/327: 1432-962
214/328: s_prop_cas=c
214/329: a=list(df_cb5['CAS'])
214/330: a[:5]
214/331: b=a
214/332:
b=a
for i in list(a):
    if str(i)[0]=='[':
        line=i[2:-2]
        c=line.split("', '")
        b(a.index(i))='nan'
        for j in c:
            if j in s_prop_cas: b(a.index(i))=j
214/333: i
214/334: a.index(i)
214/335:
b=a
for i in list(a):
    if str(i)[0]=='[':
        line=i[2:-2]
        c=line.split("', '")
        b[a.index(i)]='nan'
        for j in c:
            if j in s_prop_cas: b[a.index(i)]=j
214/336: "['106-97-8', '68514-31-8', '68527-17-3', '68475-59-2', '68551-21-3', '68476-42-6']" in a
214/337:
b=a
for i in xrange(len(a)):
    ai=a[i]
    if str(ai)[0]=='[':
        line=ai[2:-2]
        c=line.split("', '")
        b[i]='nan'
        for j in c:
            if j in s_prop_cas: b[i]=j
214/338: b[:5]
214/339: j
214/340: j in s_prop_cas
214/341: list(s_prop_cas)[:5]
214/342: b.count('nan')
214/343: b
214/344: df_cb5['CAS']=b
214/345: df_cb5.loc[df_cb5['CAS']='nan','name']
214/346: df_cb5.loc[df_cb5['CAS']=='nan','name']
214/347: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5.csv')
214/348: df_cb5.loc[488,'name']='nan'
214/349: df_cb5.loc[489,'name']='nan'
214/350: df_cb5.drop(df_cb5[df_cb5['CAS']=='nan'].index, inplace=True)
214/351: df_cb5.tail(5)
214/352: df_cb5=df_cb5.reset_index()
214/353: df_cb5.tail(5)
214/354: len(b),len(df_cb5)
214/355: df_cb5=df_cb5.reset_index()
214/356: len(b),len(df_cb5)
214/357: a=list(df_cb5['CAS'])
214/358:
b=a
for i in xrange(len(a)):
    ai=a[i]
    if str(ai)[0]=='[':
        line=ai[2:-2]
        c=line.split("', '")
        b[i]='nan'
        for j in c:
            if j in s_prop_cas: b[i]=j
214/359: len(b),len(df_cb5)
214/360: df_cb5['CAS1']=b
214/361: df_cb5['name']
214/362: df_cb5[df_cb5['name']=='n-butane']
214/363: history
214/364: b.count('nan')
214/365: a=df_cb5.loc[df_cb5['CAS1']=='nan','name']
214/366: a[:5]
214/367: a
214/368: a=df_cb5.loc[df_cb5['CAS1']=='nan','name','CAS']
214/369: a=df_cb5[df_cb5['CAS1']=='nan']['name','CAS']
214/370: a=df_cb5[df_cb5['CAS1']=='nan'][['name','CAS']]
214/371: a
214/372: '112-57-2' in s_prop_cas
214/373: '87-61-6' in s_prop_cas
214/374: '12002-48-1' in s_prop_cas
214/375: 669-50
214/376: len(set(b))
214/377: len(b)
214/378: !vi process.py
214/379: a=['8814','8953','95325']
214/380: df_a=df_gspec[df_gspec['P_NUMBER'].map(lambda x: x in a)]
214/381: len(df_a)
214/382: len(set(df_a['CAS']))
214/383: df_a.columns
214/384: len(set(df_a['ID']))
214/385: s_df_a_ID=set(df_a['ID'])
214/386: df_b=df_property[df_property['ID'].map(lambda x: x in a)]
214/387: len(df_b)
214/388: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
214/389: len(df_b)
214/390: list(df_property['ID'])[:5}
214/391: list(df_property['ID'])[:5]
214/392: list(s_df_a_ID)[:5]
214/393: df_a.columns
214/394: s_df_a_ID=set(df_a['SPECIES_ID'])
214/395: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
214/396: len(df_b)
214/397: len(set(df_a['SPECIES_ID']))
214/398: len(set(df_b['CAS']))
214/399: set(df_b['CAS'])-set(df_cb5['CAS1'])
214/400: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
214/401: '106-42-3' in set(df_cb5['CAS1'])
214/402: df_property.loc[df_property['CAS']== '108-38-3; 106-42-3','CAS']= '106-42-3'
214/403: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
214/404: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
214/405: !ls ../../CBM.*
214/406: !ls ../CB05/
214/407: from itertools import islice
214/408: from openpyxl import Workbook, load_workbook
214/409: fname='../CB05/CBM.xls'
214/410: wb= load_workbook(fname,data_only='true')
214/411: history
214/412: !vi process.py
215/1: from itertools import islice
215/2: from openpyxl import Workbook, load_workbook
215/3: fname='../CB05/CBM4.xls'
215/4: wb= load_workbook(fname,data_only='true')
215/5: from pandas import *
215/6: df=read_xls(fname)
215/7: df=read_excel(fname)
215/8: df.head(5)
215/9: len(df)
215/10: len(set(df['cas']))
215/11: len(set(df['name']))
215/12:
def chk_dup(a):
    for i in set(a):
        b=a.count(i)
        if b>1:print b,i
215/13: chk_dup(list(df['cas']))
215/14: chk_dup(list(df['name']))
215/15: a=df[df['name']=='3-METHYLHEPTANE']
215/16: a
215/17: len(set(df['saroa']))
215/18: len(df['saroa'])
215/19: NaN in set(df['cas'])
215/20: !grep NaN ../*py
215/21: !grep -i NaN ../*py
215/22: import numpy as np
215/23: a=list(df['cas'])
215/24: a.sort
215/25: a.sort()
215/26: a[-1]
215/27: np.isnan(a[-1])
215/28: a=list(df['saroa'])
215/29: a.sort()
215/30: np.isnan(a[-1])
215/31: a[-1]
215/32: df_property=read_csv('../../SPECIATE4.5/SPECIES_PROPERTIES.csv')
215/33: !cat ../../SPECIATE4.5/SPECIES_PROPERTIES.csv.columns
215/34: a=list(df_property['SAROAD'])
215/35: a.sort()
215/36: np.isnan(a[-1])
215/37: a[-1]
215/38: len(a),len(set(a))
215/39: chk_dup(a)
215/40:
def chk_dup(a):
    c=[]
    for i in set(a):
        b=a.count(i)
        if b>1:
            print b,i
            c.append(i)
    return c
215/41: chk_dup(a)
215/42: c=chk_dup(a)
215/43:
def chk_dup(a):
    c=[]
    for i in set(a):
        b=a.count(i)
        if b>1:
            c.append([i,b])
    return c
215/44: c=chk_dup(a)
215/45: c
215/46: d=[x[0] for x in c]
215/47:
for i in d:
    df_property.loc[df_property['SAROA']==i,'NAME']
215/48: !cat ../../SPECIATE4.5/SPECIES_PROPERTIES.csv.columns
215/49:
for i in d:
    df_property.loc[df_property['SAROAD']==i,'NAME']
215/50:
for i in d:
    print df_property.loc[df_property['SAROAD']==i,'NAME']
215/51: len(d)
215/52: a=['8814','8953','95325']
215/53: df_gspec=read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
215/54: df_a=df_gspec[df_gspec['P_NUMBER'].map(lambda x: x in a)]
215/55: !cat ../../SPECIATE4.5/GAS_SPECIES.csv.columns
215/56: s_df_a_ID=set(df_a['SPECIES_ID'])
215/57: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
215/58: df_a.head(5)
215/59: df_b.head(5)
215/60: a=[279,281,971]
215/61: b=list(df_property['SAROAD'])
215/62: b.count(np.isnan)
215/63: b.count('NaN')
215/64: for i in
215/65:
c=0
for i in b:
    if np.isnan(i):c+=1
print c
215/66: len(b)
215/67: len(set(b))
215/68:
c=0
for i in b:
    if not np.isnan(i):c+=1
print c
215/69: b=list(df_b['SAROAD'])
215/70:
c=0
for i in b:
    if np.isnan(i):c+=1
print c
215/71: b=list(df_b['CAS'])
215/72:
c=0
for i in b:
    if np.isnan(i):c+=1
print c
215/73: a=list(set(b))
215/74: a.sort()
215/75: a[-1]
215/76: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5.csv')
215/77: df_cb5=df_cb5.reset_index()
215/78: df_cb5.loc[488,'name']='nan'
215/79: df_cb5.loc[489,'name']='nan'
215/80: df_cb5.drop(df_cb5[df_cb5['CAS']=='nan'].index, inplace=True)
215/81: df_cb5=df_cb5.reset_index()
215/82: a=list(df_cb5['CAS'])
215/83: b=a
215/84:
s_prop_cas=set(df_property['CAS'])
for i in xrange(len(a)):
    ai=a[i]
    if str(ai)[0]=='[':
        line=ai[2:-2]
        c=line.split("', '")
        b[i]='nan'
        for j in c:
            if j in s_prop_cas: b[i]=j
215/85: df_cb5['CAS1']=b
215/86: set(df_b['CAS'])-set(df_cb5['CAS1'])
215/87: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
215/88: df_property.loc[df_property['CAS']== '108-38-3; 106-42-3','CAS']= '106-42-3'
215/89: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
215/90: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
215/91: s_not_found=set(df_b['CAS'])-set(df_cb5['CAS1'])
215/92: len(df)
215/93: df.columns
215/94: df_cb4=df
215/95: df.head(5)
215/96: a=df['cas']
215/97: b=[int(x) for x in a]
215/98:
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnan(ii): b[i]=int(ii)
215/99:
b=a
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnan(ii): b[i]=int(ii)
215/100:
a=list(a)
b=a
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnan(ii): b[i]=int(ii)
215/101: df_cb4['cas']=b
215/102: !cat ../../SPECIATE4.5/GAS_SPECIES.csv.columns
215/103: !cat ../../SPECIATE4.5/SPECIES_PROPERTIES.csv.columns
215/104: df_b.head(5)
215/105: s_not_found2=set(list(df_b.loc[df_b['CAS'].map(lambda x:x in s_not_found),'CAS no hyphen']))
215/106: list(s_not_found2)[:5]
215/107: list(s_not_found)[:5]
215/108: list(s_not_found)[-1]
215/109: a=list(s_not_found)
215/110: a.sort()
215/111: a[-1]
215/112: a[0]
215/113: a
215/114:
df_b.loc[df_b['CAS'].map(lambda
     ...: x:x in s_not_found),'CAS no hyphen']
215/115: df_b.loc[138]
215/116: df_b.loc[133]
215/117: a=list(s_not_found)
215/118: b=[str(x.strip('-')) for x in a]
215/119: b[:5]
215/120: b=[int(x.replace('-', '')) for x in a]
215/121: b[:5]
215/122: min(b),max(b)
215/123: s_not_found2=set(b)
215/124: s_not_found2-set(df_cb4['cas'])
215/125: len(s_not_found2-set(df_cb4['cas']))
215/126: !date
215/127: a=s_not_found2-set(df_cb4['cas'])
215/128: a-set(df_property['CAS no hyphen'])
215/129: list(df_property['CAS no hyphen'])[:5]
215/130: b=[str(x) for x in a]
215/131: set(b)-set(df_property['CAS no hyphen'])
215/132: set(b)-set(df_b['CAS no hyphen'])
215/133: set(df_b['CAS no hyphen'])
215/134: 106423 in set(df_cb04['cas'])
215/135: 106423 in set(df_cb4['cas'])
215/136: 108383 in set(df_cb4['cas'])
215/137: 108383 in set(df_cb5['CAS'])
215/138: '108383' in set(df_cb5['CAS'])
215/139: '106423' in set(df_cb5['CAS'])
215/140: list(df_cb5['CAS'])[:5]
215/141: history
215/142: a=df_property[df_property['CAS no hyphen'].map(lambda x:'-' in x)]
215/143: a=df_property[df_property['CAS no hyphen'].map(lambda x:'-' in str(x))]
215/144: len(a)
215/145: a
215/146: b=list(a.index)
215/147: b
215/148: del b[b.index(422)]
215/149: b
215/150:
for i in b:
    c=df_property.loc[i,'CAS no hyphen']
    c=int(c.replace('-',''))
    df_property.loc[i,'CAS no hyphen']=c
215/151:
for i in b:
    print df_property.loc[i,'CAS no hyphen']
215/152: b=[422]
215/153:
for i in b:
    print df_property.loc[i,'CAS no hyphen']
215/154: a
215/155: a=df_property.loc[422]
215/156: df_property.append(a)
215/157: len(df_property)
215/158: df_property=df_property.append(a)
215/159: df_property.tail(2)
215/160: df_property.reset_index()
215/161: df_property=df_property.reset_index()
215/162:
for i in b:
    print df_property.loc[i,'CAS no hyphen']
215/163: df_property.loc[422,'CAS no hyphen']=590669
215/164: print df_property.loc[-1,'CAS no hyphen']
215/165: df_property.tail(2)
215/166: i=2602
215/167: print df_property.loc[i,'CAS no hyphen']
215/168: df_property.loc[i,'CAS no hyphen']=111660
215/169: print df_property.loc[i,'CAS']
215/170: df_property.loc[i,'CAS']=111-66-0
215/171: i=422
215/172: df_property.loc[i,'CAS']='590-66-9'
215/173: i=2602
215/174: print df_property.loc[i,'CAS']
215/175: df_property.loc[i,'CAS']='111-66-0'
215/176: a=list(df_property['CAS no hyphen'])
215/177: min(a),max(a)
215/178: print df_property.loc[[ df_property['CAS no hyphen'].map(lambda x: np.isnan(x)),'CAS']]
215/179: print df_property.loc[[ df_property['CAS no hyphen'].map(lambda x: x>< 0),'CAS']]
215/180: print df_property.loc[[ df_property['CAS no hyphen'].map(lambda x: x<> 0),'CAS']]
215/181: 'nan'<>0
215/182: 100<>0
215/183: 'nan'<0
215/184: np.isnan()<0
215/185: np.isnan(1/0)<0
215/186: np.isnan(1/0)
215/187: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
215/188: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
215/189: history
215/190: df_property.set_index(ID).to_csv('SPECIES_PROPERTIES2.csv')
215/191: df_property.reset_index(ID).to_csv('SPECIES_PROPERTIES2.csv')
215/192: df_property.reset_index[ID].to_csv('SPECIES_PROPERTIES2.csv')
215/193: df_property.reset_index('ID').to_csv('SPECIES_PROPERTIES2.csv')
215/194: df_property.set_index('ID').to_csv('SPECIES_PROPERTIES2.csv')
215/195: df_cb4.head(5)
215/196: len(s_not_found2)
215/197: len(s_not_found)
215/198: s_not_found2-s_not_found
215/199: df_cb4['cas']=[int(x) for x in list(df_cb4['cas'])]
215/200: a=df_cb4['cas']
215/201:
for i in xrange(len(a)):
    if np.isnan(a[i]):a[i]=0
215/202: a=list(df_cb4['cas'])
215/203:
for i in xrange(len(a)):
    if np.isnan(a[i]):a[i]=0
215/204: df_cb4['cas']=[int(x) for x in list(df_cb4['cas'])]
215/205: a=s_not_found2-set(df_cb4['cas'])
215/206: len(a)
215/207: a=s_not_found2&set(df_cb4['cas'])
215/208: a
215/209: df_found=df_cb4[df_cb4['cas'].map(lambda x: x in a)]
215/210: len(df_found)
215/211: df_found.columns
215/212: df_cb5.columns
215/213: col=[x.upper for x in df_found.columns]
215/214: s=set(col[5:-2])
215/215: s2=set(df_cb5.columns[5:-3])
215/216: s-s2
215/217: col
215/218: 'a'.upper
215/219: 'a'.upper()
215/220: col=[x.upper() for x in df_found.columns]
215/221: s=set(col[5:-2])
215/222: s-s2
215/223: df_found.columns=col
215/224: df_found.head(4)
215/225: df_cb4.columns=col
215/226: del df_found['SAROA','NUM','SUM']
215/227: a=['SAROA', 'NUM', 'SUM']
215/228:
for i in a:
    del df_found[i]
215/229: a=df_cb5.append(df_found)
215/230: a.tail(15)
215/231: df_cb5['CAS1']=[int(x.replace('-','')) for x in df_cb5['CAS1']]
215/232: min(list(df_cb5['CAS1']))
215/233: max(list(df_cb5['CAS1']))
215/234: a=max(list(df_cb5['CAS1']))
215/235: df_cb5.loc[df_cb5['CAS1']==a,'CAS1']='0'
215/236: df_cb5['CAS1']=[int(x.replace('-','')) for x in df_cb5['CAS1']]
215/237: min(list(df_cb5['CAS1']))
215/238: min(list(df_cb5['CAS1']))==a
215/239: np.isnan(a)
215/240: a
215/241: np.isnan(min(list(df_cb5['CAS1'])))
215/242: df_cb5.loc[df_cb5['CAS1'].map(lambda x: np.isnan(x)),'CAS1']='0'
215/243: len(min(list(df_cb5['CAS1'])))
215/244: type(min(list(df_cb5['CAS1'])))
215/245: type(min(list(df_cb5['CAS1'])))==float
215/246: df_cb5.loc[df_cb5['CAS1'].map(lambda x: type(x)==float),'CAS1']='0'
215/247: type(min(list(df_cb5['CAS1'])))==float
215/248: df_cb5['CAS1']=[int(x.replace('-','')) for x in df_cb5['CAS1']]
215/249: df_found['CAS1']=df_found['CAS']
215/250: df_found['CAS1']=list(df_found['CAS'])
215/251: a=list(df_found['CAS'])
215/252: df_found['CAS1']=a
215/253: a
215/254: df_found=df_found.reset_index()
215/255: df_found['CAS1']=list(df_found['CAS'])
215/256: df_found.columns
215/257: df_found['NAME']=list(df_found['NAME2'])
215/258: df_found['NAME2']=list(df_found['NAME'])
215/259: df_cb5.columns
215/260: del df_cb5['level_0']
215/261: del df_cb5['index']
215/262: col=[x.upper() for x in df_cb5.columns]
215/263: df_cb5.columns=col
215/264: a=set(df_cb5.columns)-set(df_cb5.columns)
215/265: a
215/266: a=set(df_cb5.columns)-set(df_cb4.columns)
215/267: a
215/268:
for i in a:
    df_found[i]=len(df_found)*[0]
215/269: df_found['CH4']
215/270: col
215/271: a=df_found[col]
215/272: a.head(3)
215/273: df_cb5.head(3)
215/274: df_found['CAS1']=df_found['CAS']
215/275: df_found['NAME2']=df_found['NAME']
215/276: df_found=df_found[col]
215/277: a=df_found[col]
215/278: a.head(3)
215/279: a=df_cb5.append(df_found)
215/280: a.tail(15)
215/281: df_cb5=a.reset_index()
215/282: df_cb5.set_index('NAME').to_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5_2.csv')
215/283: history
215/284: print df_property.loc[df_property['CAS no hyphen'].map(lambda x: x in s_not_found2),'NAME']
215/285: len(s_not_found2)
215/286: len(s_not_found2-df_found['CAS1'])
215/287: len(s_not_found2-set(df_found['CAS1']))
215/288: s_not_in cb4=s_not_found2-set(df_found['CAS1'])
215/289: s_not_in_cb4=s_not_found2-set(df_found['CAS1'])
215/290: list(s_not_in_cb4)[:5]
215/291: print df_property.loc[df_property['CAS no hyphen'].map(lambda x: x in s_not_in_cb4),'NAME']
215/292: s_not_in_cb4-set(df_property['CAS no hyphen'])
215/293: df_b.columns
215/294: len(set(df_b['CAS no hyphen']))
215/295: min(set(df_b['CAS no hyphen']))
215/296: a=[type(x)==string for x in set(df_b['CAS no hyphen']))]
215/297: a=[type(x)==string for x in set(df_b['CAS no hyphen'])]
215/298: x
215/299: type('a')==str
215/300: a=[type(x)==str for x in set(df_b['CAS no hyphen'])]
215/301: a.count(True)
215/302: a=[type(x)==str for x in set(df_property['CAS no hyphen'])]
215/303: a.count(True)
215/304: len(df_property)
215/305:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        a.append(c)
215/306: a[:5]
215/307:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==float:
        a.append(c)
215/308: a[:5]
215/309:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)!=float:
        if '-' in c:
            a.append(c)
215/310:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if '-' in c:
            a.append(c)
215/311: len(a)
215/312: a=df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)!=str),'CAS no hyphen']
215/313: set(a)
215/314: b=df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)=int),'CAS no hyphen']
215/315: b=df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)==int),'CAS no hyphen']
215/316: set(a)-set(b)
215/317: b=df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)==float),'CAS no hyphen']
215/318: set(b)
215/319: df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)==float),'CAS no hyphen']=0
215/320: df_property.loc[df_property['CAS no hyphen'].map(lambda x: x==0),'CAS no hyphen']='0'
215/321: a=df_property.loc[df_property['CAS no hyphen'].map(lambda x: type(x)!=str),'CAS no hyphen']
215/322: a
215/323:
for i in a:
    df_property.loc[df_property['CAS no hyphen'].map(lambda x: x==i),'CAS no hyphen']=str(i)
215/324: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/325: history
215/326: a=[]
215/327:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if ';' in c:
            a.append(c)
215/328: len(a)
215/329: a[:5]
215/330: df_property.to_csv('df_property.csv')
215/331: lena=set([len(x.split(';')) for x in a])
215/332: lena
215/333: len(set(a))
215/334: chk_dup(a)
215/335: dup_a=df_property[df_property['CAS no hyphen']=='589811; 619998']
215/336: dup_a
215/337: df_property.loc[244,'CAS']='589-81-1'
215/338: df_property.loc[271,'CAS']='619-99-8'
215/339: df_property.loc[244,'CAS no hyphen']=df_property.loc[244,'CAS no hyphen'].split(';')[0]
215/340: df_property.loc[271,'CAS no hyphen']=df_property.loc[271,'CAS no hyphen'].split(';')[1]
215/341: df_property.loc[244]
215/342: df_property.loc[271]
215/343: len(set(df_property['ID']))
215/344: len(df_property['ID'])
215/345: chk_dup(df_property['ID'])
215/346: chk_dup(list(df_property['ID']))
215/347: dup_a=df_property[df_property['ID']=='2321']
215/348: dup_a=df_property[df_property['ID']==2321]
215/349: dup_a
215/350: df_property.to_csv('df_property.csv')
215/351: len(a)
215/352:
for i in set(a):
    b=i.split(';')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a)
        df_property=df_property.reset_index()
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/353: !vi *2.py
215/354:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split(';')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/355: df_property.head(3)
215/356: df_property=read_csv('df_property.csv')
215/357: df_property.head(3)
215/358: del df_property['level_0']
215/359: df_property.reset_index()
215/360: df_property=df_property.reset_index()
215/361: df_property.head(3)
215/362: del df_property['index']
215/363: df_property.head(3)
215/364: del df_property['Unnamed: 0']
215/365: del df_property['level_0']
215/366: df_property.reset_index('ID').to_csv('df_property.csv')
215/367: df_property.set_index('ID').to_csv('df_property.csv')
215/368: df_property=read_csv('df_property.csv')
215/369: df_property.head(3)
215/370:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split(';')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/371: len(df_property)
215/372: history
215/373: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/374:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if ',' in c:
            a.append(c)
215/375: len(a)
215/376: len(set(a))
215/377: a
215/378: df_property.set_index('ID').to_csv('df_property.csv')
215/379:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split(',')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/380: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/381:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if '\r\n\r\n' in c:
            a.append(c)
215/382: a
215/383: df_property.set_index('ID').to_csv('df_property.csv')
215/384:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split('\r\n\r\n')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/385: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/386:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if 'N/A' in c:
            a.append(c)
215/387: len(a)
215/388: df_property[df_property['CAS no hyphen']=='N/A']='0'
215/389: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/390:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split('\r\n\r\n')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/391: df_property.loc[df_property['CAS no hyphen']=='N/A','CAS no hyphen']='0'
215/392: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/393: a
215/394:
a=[]
for i in xrange(len(df_property)):
    c=df_property.loc[i,'CAS no hyphen']
    if type(c)==str:
        if '\r\n\r\n' in c:
            a.append(c)
215/395:
df_property=read_csv('df_property.csv')
for i in set(a):
    b=i.split('\r\n\r\n')
    lena=len(b)
    df_a=df_property[df_property['CAS no hyphen']==i]
    df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
    for j in xrange(1,lena):
        df_property=df_property.append(df_a).reset_index()
        del df_property['index']
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
215/396: df_property.set_index('ID').to_csv('df_property.csv')
215/397: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/398: df_property.loc[df_property['CAS no hyphen']=='N/A','CAS no hyphen']='0'
215/399: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/400: df_property.loc[df_property['CAS no hyphen']==' N/A','CAS no hyphen']='0'
215/401: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
215/402: df_property.set_index('ID').to_csv('df_property.csv')
215/403: history
213/218: !pwd
213/219: df_property=read_csv('df_property.csv')
213/220: df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
213/221: df_cb5.columns
213/222: a=['8814','8953','95325']
213/223: df_gspec=read_csv('../../SPECIATE4.5/GAS_PROFILE.csv')
213/224: df_a=df_gspec[df_gspec['P_NUMBER'].map(lambda x: x in a)]
213/225: s_df_a_ID=set(df_a['SPECIES_ID'])
213/226: df_gspec.columns
213/227:  df_gspec=read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
213/228: df_a=df_gspec[df_gspec['P_NUMBER'].map(lambda x: x in a)]
213/229: s_df_a_ID=set(df_a['SPECIES_ID'])
213/230: df_b=df_property[df_property['ID'].map(lambda x: x in s_df_a_ID)]
213/231: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
213/232: s_not_found=set(df_b['CAS'])-set(df_cb5['CAS1'])
213/233: df_cb4=read_excel('../CB05/CBM4.xls')
213/234: df_cb4.head(10)
213/235: col=[x.upper() for x in df_cb4.columns]
213/236: df_cb4.columns=col
213/237: import numpy as np
213/238: df_cb4.loc[7,'MW']=134.2182
213/239: min(list(df_cb4['MW']))
213/240: max(list(df_cb4['MW']))
213/241: col=df_cb4.columns
213/242:
for i in col[1:]:
    for j in xrange(len(df_cb4)):
        if np.isnan(df_cb4.loc[j,i]):df_cb4.loc[j,i]=0.0
213/243: df_cb4.head(10)
213/244: df_cb4['CAS']=[int(x) for x in list( df_cb4['CAS'])]
213/245: df_cb4['SAROA']=[int(x) for x in list( df_cb4['SAROA'])]
213/246: df_cb4.reset_index('NAME').to_csv('../CB05/CBM4.csv')
213/247: df_cb4.set_index('NAME').to_csv('../CB05/CBM4.csv')
213/248: s_not_found=set(df_b['CAS'])-set(df_cb5['CAS1'])
213/249: len(set(df_b['CAS'])-set(df_cb5['CAS1']))
213/250: list(set(df_b['CAS']))[:5]
213/251: list(set(df_cb5['CAS1']))[:5]
213/252: len(set(df_b['CAS no hyphen'])-set(df_cb5['CAS1']))
213/253: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/254: a=[]
213/255: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/256: a=list(df_not_found['NAME'])
213/257: len(set(a))
213/258: a
213/259: nam_cb5=list(cb_5['NAME2'])
213/260: nam_cb5=list(df_cb5['NAME2'])
213/261: from fuzzywuzzy import fuzz
213/262: a=[fuzz.ratio(x.lower(),'phenol') for x in nam_cb5]
213/263: nam_cb5[a.index(max(a))],max(a)
213/264: a=[fuzz.ratio(x.lower(),'chlorophenol') for x in nam_cb5]
213/265: nam_cb5[a.index(max(a))],max(a)
213/266: nam_cb4=list(df_cb4['NAME'])
213/267: a=[fuzz.ratio(x.lower(),'chlorophenol') for x in nam_cb4]
213/268: nam_cb4[a.index(max(a))],max(a)
213/269: df_cb5[df_cb5['NAME2']=='phenol']
213/270: a
213/271: a=list(df_not_found['NAME'])
213/272: f='tmp'
213/273: f.write(a)
213/274: f=open('tmp','w')
213/275: f.write(a)
213/276: f.write([x for x in a])
213/277: json.dump(a,f)
213/278: json.dumps(a,f)
213/279: json.dump(a, f)
213/280: [f.write(x) for x in a]
213/281: pickle.dump(a,f)
213/282: import pickle
213/283: pickle.dump(a,f)
213/284: !grep -i phenol tmp
213/285: !cat tmp
213/286: f
213/287: a
213/288:
with open('tmp', 'wb') as fp:
    pickle.dump(a, fp)
213/289: !grep -i phenol tmp
213/290: !grep -i phenol tmp>a
213/291: with open('a', 'r') as fp: pickle.load(b, fp)
213/292: with open('a', 'rb') as fp: pickle.load(b, fp)
213/293: with open('a', 'rb') as fp: b=pickle.load(fp)
213/294: b
213/295:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line)
213/296: b
213/297:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.stip('\n').split("'")[1])
213/298:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n').split("'")[1])
213/299: b
213/300: df_phenol=df_property[df_property['NAME'].map(lambda x: x in b)]
213/301: len(df_phenol}
213/302: len(df_phenol)
213/303: col
213/304: i=nam_cb5.index('phenol')
213/305: nam_cb5[i]
213/306: df_cb5.loc[i]
213/307:
for i in b:
    if i in nam_cb5:print i
213/308:
for i in b:
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
213/309: len(df_cb5)
213/310: df_cb5.tail(7)
213/311: df_phenol
213/312: df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
213/313: df_phenol=df_cb5[df_cb5['NAME']=='phenol']
213/314: df_phenol
213/315: nam_cb5[i]
213/316: i=nam_cb5.index('phenol')
213/317: nam_cb5[i]
213/318: df_phenol=df_cb5[df_cb5['NAME2']=='phenol']
213/319: df_phenol
213/320: cas=[]
213/321: cas1=[]
213/322:
for i in b:
    cas.append(df_property.loc[df_property['NAME']==i,'CAS'])
    cas1.append(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])
213/323: cas, cas1
213/324:
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS']))
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen']))
213/325: cas, cas1
213/326:
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
213/327: cas
213/328: cas[0]
213/329: cas[0][1]
213/330:
for i in b:
    c=list(df_property.loc[df_property['NAME']==i,'CAS'])[0]
    print c
213/331:
cas=[]
cas1=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS1'])[0])
213/332:
cas=[]
cas1=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
213/333: cas
213/334: cas1
213/335:
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
213/336: df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
213/337: del df_cb5['level 0']
213/338: del df_cb5['level_0']
213/339: df_cb5.columns
213/340: df_property.columns
213/341:
mw=[]
for i in b:
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/342:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
213/343: ii
213/344: df_phenol
213/345: df_phenol=df_phenol.reset_index()
213/346:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/347: 'level_0' in df_cb5.columns
213/348: df_cb5.columns
213/349: df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
213/350: df_cb5.columns
213/351: df_cb5=read_csv('../C
213/352:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
df_cb5=df_cb5.reset_index()
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/353: ii
213/354: df_phenol
213/355: df_phenol.columns
213/356: del df_phenol['level_0']
213/357:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/358: df_phenol.columns
213/359: df_cb5.columns
213/360: ii
213/361:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_phenol).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/362: df_cb5.tail(8)
213/363: df_cb5.reset_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/364: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/365: history
213/366: s_not_found=set(df_b['CAS'])-set(df_cb5['CAS1'])
213/367: len(s_not_found)
213/368: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/369: len(s_not_found)
213/370: a=list(df_not_found['NAME'])
213/371: a
213/372: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/373: a=list(df_not_found['NAME'])
213/374: a
213/375: a=[fuzz.ratio(x.lower(),'') for x in nam_cb5]
213/376: a=[fuzz.ratio(x.lower(),'biphenyl') for x in nam_cb5]
213/377: nam_cb5[a.index(max(a))],max(a)
213/378: df_biphenyl=df_cb5[df_cb5['NAME2']=='biphenyl']
213/379: df_biphenyl
213/380: !grep -i biphenyl tmp>a
213/381:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n').split("'")[1])
213/382: b
213/383: a
213/384: list(df_not_found['NAME'])
213/385: b
213/386: !cat a
213/387:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n').split("S")[1])
213/388: b
213/389:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/390: b=[x.replace('"','') for x in b]
213/391: b
213/392: !vi a
213/393:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n').split("S")[1])
213/394:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n'))
213/395: b
213/396: !vi a
213/397:
with open('a', 'rb') as fp: 
    b=[]
    for line in fp:
        b.append(line.strip('\n'))
213/398: b
213/399: b[2] in list(df_not_found['NAME'])
213/400: b[3] in list(df_not_found['NAME'])
213/401: b[1] in list(df_not_found['NAME'])
213/402:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/403: cas
213/404: cas1
213/405: mw
213/406:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_biphenyl).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/407: df_cb5.tail(8)
213/408: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/409: history
213/410: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/411: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/412: list(df_not_found['NAME'])
213/413: a=[fuzz.ratio(x.lower(),'alpha') for x in nam_cb5]
213/414: nam_cb5=list(df_cb5['NAME'])
213/415: a=[fuzz.ratio(x.lower(),'alpha') for x in nam_cb5]
213/416: nam_cb5=list(df_cb5['NAME2'])
213/417: a=[fuzz.ratio(x.lower(),'terpineol') for x in nam_cb5]
213/418: nam_cb5[a.index(max(a))],max(a)
213/419: b=['Alpha-terpineol']
213/420: df_APP=df_cb5[df_cb5['NAME2']=='terpinene']
213/421: df_APP
213/422:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/423:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/424: df_cb5.tail(8)
213/425: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/426: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/427: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/428: list(df_not_found['NAME'])
213/429: a=[fuzz.ratio(x.lower(),'phthalate') for x in nam_cb5]
213/430: nam_cb5[a.index(max(a))],max(a)
213/431: a=[fuzz.ratio(x.lower(),'ethylhexane') for x in nam_cb5]
213/432: nam_cb5[a.index(max(a))],max(a)
213/433: b=['3-ethylhexane']
213/434:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/435: df_APP=df_cb5[df_cb5['NAME2']=='ethylhexane']
213/436:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/437: df_cb5.tail(8)
213/438: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/439: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/440: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/441: list(df_not_found['NAME'])
213/442: a=[fuzz.ratio(x.lower(),'benzene') for x in nam_cb5]
213/443: nam_cb5[a.index(max(a))],max(a)
213/444: a=[fuzz.ratio(x.lower(),'chlorobenzene') for x in nam_cb5]
213/445: nam_cb5[a.index(max(a))],max(a)
213/446: df_APP=df_cb5[df_cb5['NAME2']=='chlorobenzene']
213/447: b=[ 'Hexachlorobenzene', '1,2,4-Trichlorobenzene']
213/448:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/449:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/450: df_cb5.tail(8)
213/451: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/452: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/453: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/454: list(df_not_found['NAME'])
213/455:
for i in nam_cb5:
    if 'bis' in i:print i
213/456:
for i in nam_cb4:
    if 'bis' in i:print i
213/457:
for i in nam_cb5:
    if 'aldehyde' in i:print i
213/458:
for i in list(df_not_found['NAME']):
    if 'aldehyde' in i:print i
213/459: df_APP=df_cb5[df_cb5['NAME2']=='crotonaldehyde']
213/460: b=['Crotonaldehyde (or 2-Butenal)']
213/461:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
213/462:
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
213/463: df_cb5.tail(8)
213/464: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/465: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/466: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/467: list(df_not_found['NAME'])
213/468: df_APP=df_cb5[df_cb5['NAME2']=='p-tolualdehyde']
213/469: b['o-Tolualdehyde']
213/470: b=['o-Tolualdehyde']
213/471:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
df_cb5.tail(len(b)+1)
213/472: b
213/473: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/474: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/475: list(df_not_found['NAME'])
213/476: a=[fuzz.ratio(x.lower(),'acetophenone') for x in nam_cb5]
213/477: nam_cb5[a.index(max(a))],max(a)
213/478: df_APP=df_cb5[df_cb5['NAME2']=='methylacetophenone']
213/479: b=[ 'Acetophenone (or 1-phenylethanone; Methyl phenyl ketone)']
213/480:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
df_cb5.tail(len(b)+1)
213/481: df_cb5.loc[700,'PAR']=0.0
213/482: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/483: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/484: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/485: list(df_not_found['NAME'])
213/486: df_cb5.tail(len(b)+1)
213/487: 'o-Tolualdehyde' in df_cb5['NAME']
213/488: df_APP=df_cb5[df_cb5['NAME2']=='p-tolualdehyde']
213/489: nam_cb5=list(df_cb5['NAME2'])
213/490:
for i in nam_cb5:
    if 'aldehyde' in i:print i
213/491: b
213/492: b=['o-Tolualdehyde']
213/493: df_APP
213/494:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
df_cb5.tail(len(b)+1)
213/495: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/496:
for i in nam_cb5:
    if 'aldehyde' in i:print i
213/497: b
213/498: df_APP
213/499: nam_cb5=list(df_cb5['NAME2'])
213/500: 'p-tolualdehyde' in nam_cb5
213/501:
for i in nam_cb5:
    if 'aldehyde' in i:print i
213/502:
for i in nam_cb5:
    if 'aldehyde' in i:print i, nam_cb5.count(i)
213/503: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/504: list(df_not_found['NAME'])
213/505: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/506: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/507: list(df_not_found['NAME'])
213/508: a=[fuzz.ratio(x.lower(),'diethylbenzene') for x in nam_cb5]
213/509:
for i in nam_cb5:
    if 'benzene' in i:print i, nam_cb5.count(i)
213/510:
for i in nam_cb5:
    if 'benzene' in i:print nam_cb5.index(i),i
213/511: a=[fuzz.ratio(x.lower(),'diethylbenzene') for x in nam_cb5]
213/512: nam_cb5=list(df_cb5['NAME2'])
213/513: nam_cb5[a.index(max(a))],max(a)
213/514: df_APP=df_cb5[df_cb5['NAME2']=='diethylbenzene']
213/515: b=[ '1,4-diethylbenzene (para)']
213/516:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
df_cb5.tail(len(b)+1)
213/517: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/518: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/519: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/520: list(df_not_found['NAME'])
213/521:
for i in nam_cb5:
    if 'benzaldehyde' in i:print nam_cb5.index(i),i
213/522: b=[ '2,5-Dimethylbenzaldehyde']
213/523: df_APP=df_cb5[df_cb5['NAME2']=='benzaldehyde']
213/524:
cas=[]
cas1=[]
mw=[]
for i in b:
    cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
    cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
    mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
for i in b:
    ii=b.index(i)
    df_cb5=df_cb5.append(df_APP).reset_index()
    del df_cb5['index']
    if 'level_0' in df_cb5.columns:del df_cb5['level_0']
    j=len(df_cb5)-1
    df_cb5.loc[j,'NAME']=i
    df_cb5.loc[j,'NAME2']=i
    df_cb5.loc[j,'CAS']=cas[ii]
    df_cb5.loc[j,'CAS1']=cas1[ii]
    df_cb5.loc[j,'MW']=mw[ii]
df_cb5.tail(len(b)+1)
213/525: df_cb5.loc[703,'PAR']=2.0
213/526: df_cb5.tail(len(b)+1)
213/527: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/528: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/529: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/530: list(df_not_found['NAME'])
213/531: a=[fuzz.ratio(x.lower(),'dicyclopentadiene') for x in nam_cb5]
213/532: nam_cb5[a.index(max(a))],max(a)
213/533: a=[fuzz.ratio(x.lower(),'cyclopentadiene') for x in nam_cb5]
213/534: nam_cb5[a.index(max(a))],max(a)
213/535: a=[fuzz.ratio(x.lower(),'tadiene') for x in nam_cb5]
213/536: nam_cb5[a.index(max(a))],max(a)
213/537: a=[fuzz.ratio(x.lower(),'dicyclopen') for x in nam_cb5]
213/538: nam_cb5[a.index(max(a))],max(a)
213/539:
for i in nam_cb5:
    if 'cresol' in i:print nam_cb5.index(i),i
213/540:
def add_cb5(b,df_APP,df_property):
    df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
    df_phenol=df_cb5[df_cb5['NAME2']=='phenol']
    cas=[]
    cas1=[]
    mw=[]
    for i in b:
        cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
        cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
        mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
    for i in b:
        ii=b.index(i)
        df_cb5=df_cb5.append(df_APP).reset_index()
        del df_cb5['index']
        if 'level_0' in df_cb5.columns:del df_cb5['level_0']
        j=len(df_cb5)-1
        df_cb5.loc[j,'NAME']=i
        df_cb5.loc[j,'NAME2']=i
        df_cb5.loc[j,'CAS']=cas[ii]
        df_cb5.loc[j,'CAS1']=cas1[ii]
        df_cb5.loc[j,'MW']=mw[ii]
    return df_cb5
213/541:
def add_cb5(b,c,df_property):
    df_cb5=read_csv('../CB05/cbm_cb5_2.csv')
    df_APP=df_cb5[df_cb5['NAME2']==c]
    df_phenol=df_cb5[df_cb5['NAME2']=='phenol']
    cas=[]
    cas1=[]
    mw=[]
    for i in b:
        cas.append(list(df_property.loc[df_property['NAME']==i,'CAS'])[0])
        cas1.append(list(df_property.loc[df_property['NAME']==i,'CAS no hyphen'])[0])
        mw.append(list(df_property.loc[df_property['NAME']==i,'SPEC_MW'])[0])
    for i in b:
        ii=b.index(i)
        df_cb5=df_cb5.append(df_APP).reset_index()
        del df_cb5['index']
        if 'level_0' in df_cb5.columns:del df_cb5['level_0']
        j=len(df_cb5)-1
        df_cb5.loc[j,'NAME']=i
        df_cb5.loc[j,'NAME2']=i
        df_cb5.loc[j,'CAS']=cas[ii]
        df_cb5.loc[j,'CAS1']=cas1[ii]
        df_cb5.loc[j,'MW']=mw[ii]
    return df_cb5
213/542:
for i in nam_cb5:
    if 'cresol' in i:print nam_cb5.index(i),i
213/543: b=[''4,6-Dinitro-o-cresol']
213/544: b=['4,6-Dinitro-o-cresol']
213/545: c='o-cresol'
213/546: df_cb5=add_cb5(b,c,df_property)
213/547: df_cb5.tail(len(b)+1)
213/548: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/549: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/550: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/551: list(df_not_found['NAME'])
213/552:
for i in nam_cb5:
    if 'ether' in i:print nam_cb5.index(i),i
213/553: c='diisopropyl ether'
213/554: df_cb5=add_cb5(['Bis(2-chloroisopropyl) ether'],'diisopropyl ether',df_property)
213/555: df_cb5.tail(len(b)+1)
213/556: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/557: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/558:
for i in nam_cb5:
    if 'pentadiene' in i:print nam_cb5.index(i),i
213/559: df_cb5=add_cb5(['Dicyclopentadiene'],'1,3-cyclopentadiene',df_property)
213/560: df_cb5.tail(len(b)+1)
213/561: df_cb5.loc[706,'#CARBONS']=10.0
213/562: df_cb5.loc[706]
213/563: df_cb5.loc[706,'IOLE']=2.5
213/564: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/565: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/566: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/567: list(df_not_found['NAME'])
213/568:
for i in nam_cb5:
    if 'phthalate' in i:print nam_cb5.index(i),i
213/569: c=dimethyl phthalate
213/570: c='dimethyl phthalate'
213/571: b=['Di-n-octyl phthalate']
213/572: df_cb5=add_cb5(b,c,df_property)
213/573: df_cb5.tail(len(b)+1)
213/574: df_cb5.loc[707,'PAR']=17.0
213/575: df_cb5.loc[707,'#CARBONS']=17.0
213/576: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/577: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/578: df_not_found=df_b[df_b['CAS no hyphen'].map(lambda x: x in s_not_found)]
213/579: list(df_not_found['NAME'])
213/580: b=list(df_not_found['NAME'])
213/581: c='Di-n-octyl phthalate'
213/582: df_cb5=add_cb5(b,c,df_property)
213/583: df_cb5.tail(len(b)+1)
213/584: df_cb5.set_index('NAME').to_csv('../CB05/cbm_cb5_2.csv')
213/585: s_not_found=set(df_b['CAS no hyphen'])-set(df_cb5['CAS1'])
213/586: len(s_not_found)
213/587: history
213/588: df_vb=read_csv('gspro.vbird.csv')
213/589: a=df_vb[df_vb['Speciation profile number']==9002]
213/590: sum(list(a['Mass Fraction']))
213/591: a=df_vb[df_vb['Speciation profile number']==9003]
213/592: sum(list(a['Mass Fraction']))
213/593: df_vb['Speciation profile number']
213/594: a=df_vb[df_vb['Speciation profile number']=024]
213/595: a=df_vb[df_vb['Speciation profile number']=='9024']
213/596: a=df_vb[df_vb['Speciation profile number']==9024]
213/597: sum(list(a['Mass Fraction']))
213/598: set(df_vb['Divisor'])
213/599: sum(list(a['Split factor']))
213/600: df_vb.head(10)
213/601: df_a
213/602: df_a.columns
213/603: set(df_a['P_NUMBER'])
213/604: a=df_a[df_a['P_NUMBER']=='8814']
213/605: a['SPECIES_ID']
213/606: len(set(a['SPECIES_ID']))
213/607: df_a.columns
213/608: sum(list(a['WEIGHT_PER']))
213/609: df_b.columns
216/1: from pandas import *
216/2: import numpy as np
216/3: df_pbm=read_csv('d_pbm.csv')
216/4: set( df_pbm['Profile_NO'])
216/5: df_pbm=read_csv('d_pbm2.csv')
216/6: set( df_pbm['Profile_NO'])
216/7: df_pbm=read_csv('d_pbm.csv')
216/8: df_pbm['Profile_NO']=[str(x) for x in df_pbm['Profile_NO']]
216/9:
a=list(df_pbm['Profile_NO'])
b=a
for i in a:
    l=len(i)
    if l<4:b[a.index(i)]=l*'0'+i
b[:5]
216/10:
a=list(df_pbm['Profile_NO'])
b=a
for i in a:
    l=len(i)
    if l<4:b[a.index(i)]=(4-l)*'0'+i
b[:5]
216/11: df_pbm.set_index('SCC').to_csv('d_pbm.csv')
216/12: df_prof=read_csv('../../SPECIATE4.5/GAS_PROFILE.csv')
216/13: set(df_pbm['Profile_NO'])-set(df_prof['P_NUMBER'])
216/14: df_pbm['Profile_NO']=b
216/15: set(df_pbm['Profile_NO'])-set(df_prof['P_NUMBER'])
216/16: fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
216/17:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
                for j in xrange(6):
216/18:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
            for j in xrange(6):
216/19:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
            for j in a[4][i]:perc=j.strip()
            a[4][i] = [float(perc)]
        i+=1
216/20: import struct
216/21:
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
            for j in a[4][i]:perc=j.strip()
            a[4][i] = [float(perc)]
        i+=1
216/22: history
217/1:
from pandas import *
import numpy as np
df_pbm=read_csv('d_pbm.csv')
df_prof=read_csv('../../SPECIATE4.5/GAS_PROFILE.csv')
217/2: def mk_int(s):return int(s)
217/3:
import struct
fmt=['4s37x','5x5s31x','11x3s27x','15x8s18x','24x6s11x','30x11s']
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    n=0
    for line in f:
        n+=1
a=[n*[0] for x in xrange(6)]
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = [float(perc)]
        i+=1
col_a=['P_NUMBER','M_NUMBER','SPEC_NO','CAS','wt_percent','desc']
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
df_vprofile_txt.head(5)
217/4: s
217/5: a[j][i]
217/6:
def mk_int(s):
    s=s.strip(' ')
    if len(s)==0:s='0'
    return int(s)
217/7:
a=[n*[0] for x in xrange(6)]
with open("/home/camxruns/2013/ptse/V_PROFIL.TXT", "r") as f:
    i=0
    for line in f:
        linesp=line.strip('\r\n')
        for j in xrange(6):
            a[j][i]=struct.unpack(fmt[j], linesp)
        for j in xrange(4):
            a[j][i]=map(mk_int, a[j][i])
        for j in a[4][i]:perc=j.strip()
        a[4][i] = [float(perc)]
        i+=1
col_a=['P_NUMBER','M_NUMBER','SPEC_NO','CAS','wt_percent','desc']
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
df_vprofile_txt.head(5)
217/8:
col_a=['P_NUMBER','M_NUMBER','SPEC_NO','CAS','wt_percent','desc']
df_vprofile_txt=DataFrame({})
for i in xrange(6):
    df_vprofile_txt[col_a[i]]=[x[0] for x in a[i]]
df_vprofile_txt.head(5)
217/9: df_property.head(5)
217/10: df_property=read_csv('../../SPECIATE4.5/SPECIES_PROPERTIES.csv')
217/11: set(df_vprofile_txt['CAS'])
217/12:
col_a=['P_NUMBER','SAROAD','SPEC_NO','CAS','wt_percent','desc']
df_vprofile_txt.columns=col_a
217/13: a=df_vprofile_txt.loc['CAS']==0,'SAROAD']
217/14: a=df_vprofile_txt.loc[['CAS']==0,'SAROAD']
217/15: a=df_vprofile_txt.loc[df_vprofile_txt['CAS']==0,'SAROAD']
217/16: a[:5]
217/17: len(a)
217/18: len(set(a))
217/19: df_property.columns
217/20: d={}
217/21:
for i in set(a):
    d.update({i:df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'][0]})
217/22: i
217/23: df_property.loc[df_property['SAROAD']==i,'CAS no hyphen']
217/24: df_property.loc[593]
217/25: df_property.loc[967]
217/26: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5_2.csv')
217/27:
for i in list(df_cb5['name2']):
    if 'octyn' in i:print i
217/28:
for i in list(df_cb5['NAME2']):
    if 'octyn' in i:print i
217/29:
for i in list(df_cb5['NAME2']):
    if 'oct' in i:print i
217/30:
for i in list(df_cb5['NAME']):
    if 'oct' in i:print i
217/31:
for i in list(df_cb5['NAME2']):
    if 'diol' in i:print i
217/32: import cirpy
217/33: cirpy.resolve('Dimethyloctyne','cas')
217/34: cirpy.resolve('Dimethyl octyne','cas')
217/35: cirpy.resolve('dimethyl octyne','cas')
217/36: cirpy.resolve('19482-57-6','name')
217/37: df_property.loc[593,'CAS']='19482-57-6'
217/38: df_property.loc[593,'CAS no hyphen']=19482576
217/39: df_property.set_index('ID').to_csv('../../SPECIATE4.5/SPECIES_PROPERTIES.csv')
217/40:
d={}
for i in set(a):
    d.update({i:df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'][0]})
217/41: df_property.loc[df_property['SAROAD']==i,'CAS no hyphen']
217/42: df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'][0]
217/43:
d={}
for i in set(a):
    d.update({i:list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])[0]})
217/44:
d={}
for i in set(a):
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if len(c)==0:print i
217/45:
d={}
j=0
for i in set(a):
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if len(c)==0:j+=1
print j
217/46: saro=set(df_property['SAROAD'])
217/47: for i in a&saro:
217/48:
d={}
for i in a&saro:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    d.update({i:c[0]})
217/49: df_property.loc[df_property['SAROAD']==i,'CAS no hyphen']
217/50: df_property.loc[1276]
217/51: i
217/52:
d={}
for i in set(a)&saro:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    d.update({i:c[0]})
217/53: len(d)
217/54: c
217/55: d
217/56: df_property['CAS no hyphen'][:5]
217/57: len(d)
217/58: len(set(a)&saro)
217/59: i=43105
217/60: c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
217/61: c
217/62: df_property.loc[df_property['SAROAD']==i]
217/63: mk_int(nan)
217/64:
d={}
for i in set(a)&saro:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if type(c[0])==str: d.update({i:int(c[0])})
217/65: len(d)
217/66: df_vprofile_txt.columns
217/67: df_vprofile_txt.head(5)
217/68: df_vprofile_txt.tail(5)
217/69:
for i in xrange(len(df_vprofile_txt)):
    s=df_vprofile_txt.loc[i,'SAROAD']
    if df_vprofile_txt.loc[i,'CAS']==0 and s in d:
        df_vprofile_txt.loc[i,'CAS']=d[s]
217/70: df_vprofile_txt.head(5)
217/71: len(df_vprofile_txt), list(df_vprofile_txt['CAS']).count(0)
217/72: df_vprofile_txt.set_index('P_NUMBER').to_csv('../../V_PROFILE.csv')
217/73: len(set(df_vprofile_txt['CAS']))
217/74: df_pbm.head(5)
217/75: !head d_pbm.csv
217/76: !head d_pbm2.csv
217/77: max(df_pbm['Profile_NO'])
217/78: a=list(df_pbm['Profile_NO'])
217/79:
b=a
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnan(ii): b[i]=int(ii)
217/80: len(b)
217/81: b
217/82:
b=a
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnotnan(ii): b[i]=int(ii)
217/83:
b=a
for i in xrange(len(a)):
    ii=a[i]
    if not np.isnan(ii): b[i]=int(ii)
217/84: len(b) len(a)
217/85: len(b), len(a)
217/86:
b=[]
for i in a:
    ii=str(a)
    if len(ii)<4:
        b.append((4-len(ii))*'0'+ii)
    else:
        b.append(ii)
217/87: b[:5]
217/88: type(a)
217/89: a[:5]
217/90:
b=[]
for i in a:
    ii=str(i)
    if len(ii)<4:
        b.append((4-len(ii))*'0'+ii)
    else:
        b.append(ii)
217/91: b[:5]
217/92: df_pbm['Profile_NO']=b
217/93: df_pbm.set_index('SCC').to_csv('d_pbm.csv')
217/94: df_cb5.head(10)
217/95: len(df_cb5)
217/96: len(df_cb4)
217/97: df_cb4=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/CBM4.csv')
217/98: len(df_cb4)
217/99: df_cb4.head(5)
217/100: min(df_cb4['SAROA'])
217/101: df_cb4.loc[df_cb4['SAROA']==0]
217/102:
d2={}
a=set(list(df_cb4['SAROA']))-{0}
for i in a
    c=list(df_cb4.loc[df_cb4['SAROA']==i,'CAS'])[0]
    if c>0: d2.update({i:c})
217/103:
d2={}
a=set(list(df_cb4['SAROA']))-{0}
for i in a:
    c=list(df_cb4.loc[df_cb4['SAROA']==i,'CAS'])[0]
    if c>0: d2.update({i:c})
217/104: len(d2)
217/105: len(d)
217/106:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])[0]
    if c>0: d_property.update({i:c})
217/107: len(a)
217/108: 0 in a
217/109:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if type(c)==list:
        if len(c)>=1:
            if c[0]>0: d_property.update({i:c[0]})
217/110: len(d_property)
217/111: d_cb4=d2
217/112: d_vprof=d
217/113: set(d_cb4)-set(d_property)
217/114: len(set(d_cb4)-set(d_property))
217/115: df_property.head(3)
217/116:
b=[]
for i in xrange(len(df_property)):
    a=df_property[i,'SAROAD']
    if np.isnan(a): a=0
    b.append(int(a))
217/117:
b=[]
for i in xrange(len(df_property)):
    a=df_property.loc[i,'SAROAD']
    if np.isnan(a): a=0
    b.append(int(a))
217/118: min(b),max(b)
217/119: df_property['SAROAD']=b
217/120: df_property.set_index('ID').to_csv('df_property.csv')
217/121:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if type(c)==list:
        if len(c)>=1:
            if c[0]>0: d_property.update({i:c[0]})
217/122: len(set(d_cb4)-set(d_property))
217/123: set(d_cb4)-set(d_property)
217/124: 46718 in set(df_property['SAROAD'])
217/125: '46718' in set(df_property['SAROAD'])
217/126: 46718.0 in set(df_property['SAROAD'])
217/127: d_cb4[46718] in set(df_property['SAS no hyphen'])
217/128: d_cb4[46718] in set(df_property['CAS no hyphen'])
217/129: d_cb4[46718]
217/130: df_cb4[df_cb4['SAROA']==46718]
217/131: a=set(d_cb4)-set(d_property)
217/132:
for i in a:
    print df_cb4.loc[df_cb4['SAROA']==i,'NAME']
217/133:
for i in a:
    print df_cb4.loc[df_cb4['SAROA']==i,'NAME'][0]
217/134:
for i in a:
    print list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
217/135: nam_prop=set(df_property['NAME])
217/136: nam_prop=set(df_property['NAME'])
217/137: list(nam_prop)[:5]
217/138: from fuzzywuzzy import fuzz
217/139:
def fuz_lookup(s,a):
    from fuzzywuzzy import fuzz
    mtch=[]
    for i in a:
        b=fuzz.ratio(s.lower(),i.lower())
        mtch.append([b,i])
    return mtch.sort()
217/140: fuz_lookup('GLYOXAL',list(nam_prop))[5:]
217/141: a=fuz_lookup('GLYOXAL',list(nam_prop))
217/142: a[:5]
217/143: a
217/144: fuz_lookup('GLYOXAL',list(nam_prop))
217/145:
mtch=[]
for i in list(nam_prop):
    b=fuzz.ratio('GLYOXAL'.lower(),i.lower())
    mtch.append([b,i])
217/146: mtch.sort
217/147: mtch.sort()
217/148: mtch[:5]
217/149: mtch[-5:]
217/150:
def fuz_lookup(s,a):
    from fuzzywuzzy import fuzz
    mtch=[]
    for i in a:
        b=fuzz.ratio(s.lower(),i.lower())
        mtch.append([b,i])
    return mtch
217/151: a=fuz_lookup('GLYOXAL',list(nam_prop))
217/152: a.sort()[-5:]
217/153: a.sort()
217/154: a[-5:]
217/155:
def fuz_lookup(s,a):
    from fuzzywuzzy import fuzz
    mtch=[]
    for i in a:
        b=fuzz.ratio(s.lower(),i.lower())
        mtch.append([b,i])
    mtch.sort()
    return mtch
217/156: a=fuz_lookup('GLYOXAL',list(nam_prop))
217/157: a[-5:]
217/158:
def fuz_lookup(s,a):
    from fuzzywuzzy import fuzz
    mtch=[]
    for i in a:
        b=fuzz.ratio(s.lower(),i.lower())
        mtch.append([b,i])
    mtch.sort()
    return mtch[-3:]
217/159: fuz_lookup('GLYOXAL',list(nam_prop))
217/160: history
217/161: a=fuz_lookup('GLYOXAL',list(nam_prop))
217/162: a
217/163: d={1:2}
217/164: d2={1:2}
217/165: d==d2
217/166: a=set(d_cb5)&set(d_property)
217/167: a=set(d_cb4)&set(d_property)
217/168: list(a)[:5]
217/169: len(a)
217/170: d in d2
217/171:
for i in a:
    if d_cb5[i] !=d_property[i]:print i,d_cb5[i],d_property[i]
217/172:
for i in a:
    if d_cb4[i] !=d_property[i]:print i,d_cb4[i],d_property[i]
217/173:
for i in a:
    if d_cb4[i] !=d_property[i]:print i,type(d_cb4[i]),type(d_property[i])
217/174:
for i in a:
    if str(d_cb4[i]) !=d_property[i]:print i,d_cb4[i],d_property[i]
217/175:
j=0
for i in a:
    if str(d_cb4[i]) !=d_property[i]:j+=1
j
217/176: len(a)
217/177:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(int(i))
217/178:
for i in b:
    print df_cb4.loc[df_cb4['SAROA']==i,'NAME'],df_property.loc[df_property['SAROAD']==i,'NAME']
217/179:
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    print a1,a2
217/180:
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    print a1,';',a2
217/181:
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    print fuzz.ratio(a1.lower(),a2.lower()),';',a1,';',a2
217/182:
j=0
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
    else:
        j+=1
        print fuzz.ratio(a1.lower(),a2.lower()),';',a1,';',a2
217/183: j
217/184:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),';',a1,';',a2])
217/185: d.sort()
217/186: d[-5:]
217/187: d[-10:]
217/188:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/189: d.sort()
217/190: d[-10:]
217/191:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c>=80:
        d_cb4[i]=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/192: j
217/193: d
217/194: d.sort()
217/195: d
217/196: len(d)
217/197: js=[3,5,14,15,20,23]
217/198:
for i in js:
    print d[i]
217/199:
j=0
for i in b:
    if j in js:d_cb4[i]=d_property[i]
    j+=1
217/200: history
217/201: a=set(d_cb4)&set(d_property)
217/202:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(int(i))
217/203:
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    print fuzz.ratio(a1.lower(),a2.lower()),';',a1,';',a2
217/204: b
217/205: len(b)
217/206: d_cb4[45502],d_property[45502]
217/207: '0'>0
217/208:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if type(c)==list:
        if len(c)>=1:
            if type(c[0])==str: d_property.update({i:int(c[0])})
217/209:
for i in list(df_property['CAS no hyphen']):
    if ';' in i:print i
    if ',' in i:print i
    if 'N/A' in i:print i
217/210:
for i in list(df_property['CAS no hyphen']):
    if type(i)==str:
        if ';' in i:print i
        if ',' in i:print i
        if 'N/A' in i:print i
    else:
        print i
217/211:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if ';' in i or ',' in i or 'N/A' in i or '\r\n' in  i:
            print i
        else:
            a[i]=int(ii)           
    else:
        a[i]=0
217/212:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
        else:
            a[i]=int(ii)           
    else:
        a[i]=0
217/213:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if '-' in ii or ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
        else:
            a[i]=int(ii)           
    else:
        a[i]=0
217/214: df_property=read_csv('df_property.csv')
217/215:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if '-' in ii or ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
        else:
            a[i]=int(ii)           
    else:
        a[i]=0
217/216: df_property=read_csv('SPECIES_PROPERTIES2.csv')
217/217:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if '-' in ii or ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
        else:
            a[i]=int(ii)           
    else:
        a[i]=0
217/218:
df_property.loc[df_property['CAS no hyphen'].map(lambda x:type(x)!=str),'CAS no hyphen']='0'
strange=[",",";",'\r\n\r\n']
for s in strange:
    df_i=df_property[df_property['CAS no hyphen'].map(lambda x:s in x)]
    for i in list(df_i['CAS no hyphen']):
        b=i.split(s)
        lena=len(b)
        df_a=df_property[df_property['CAS no hyphen']==i]
        df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[0]
        for j in xrange(1,lena):
            df_property=df_property.append(df_a).reset_index()
            del df_property['index']
            df_property.loc[df_property['CAS no hyphen']==i,'CAS no hyphen']=b[j]
df_property['CAS no hyphen']=[x.strip('-') for x in df_property['CAS no hyphen']]
217/219:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if '-' in ii or ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
217/220:
df_propertt.loc[df_property['CAS no hyphen']=='N/A','CAS no hyphen']='0'
df_property.loc[df_property['CAS no hyphen']==' N/A','CAS no hyphen']='0'
217/221: df_property.loc[df_property['CAS no hyphen']==' N/A','CAS no hyphen']='0'
217/222:
a=list(df_property['CAS no hyphen'])
for i in xrange(len(a)):
    ii=a[i]
    if type(ii)==str:
        if '-' in ii or ';' in ii or ',' in ii or 'N/A' in ii or '\r\n' in  ii:
            print ii
217/223: df_property.loc[df_property['CAS no hyphen']=='N/A','CAS no hyphen']='0'
217/224: df_property['CAS no hyphen']=[int(x) for x in list(df_property['CAS no hyphen'])]
217/225: df_property.set_index('ID').to_csv('df_property.csv')
217/226:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if type(c)==list:
        if len(c)>=1:
            if type(c[0])==str: d_property.update({i:int(c[0])})
217/227:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(int(i))
217/228:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(i)
217/229: i
217/230: a=set(d_cb4)&set(d_property)
217/231:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(i)
217/232: b
217/233: a
217/234: len(d_property)
217/235:
d_property={}
a=set(list(df_property['SAROAD']))-{0}
for i in a:
    c=list(df_property.loc[df_property['SAROAD']==i,'CAS no hyphen'])
    if len(c)>=1: d_property.update({i:int(c[0])})
217/236: len(d_property)
217/237: a=set(d_cb4)&set(d_property)
217/238: len(a)
217/239:
b=[]
for i in a:
    if str(d_cb4[i]) !=d_property[i]:b.append(i)
217/240: len(b)
217/241: i
217/242: d_cb4[i], d_property[i]
217/243:
b=[]
for i in a:
    if d_cb4[i] !=d_property[i]:b.append(i)
217/244: len(b)
217/245:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c=100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/246:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/247: len(d)
217/248: print i, d[i] for i in xrange(30)
217/249:
for i in xrange(30):
    print i,d[i]
217/250: d.sort()
217/251:
for i in xrange(30):
    print i,d[i]
217/252: js=[4,14,25,26,27,28,29]
217/253: b
217/254:
j=0
for i in b:
    if j in js:
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
        d_cb4[i]=d_property[i]
    j+=1
217/255: len(b),len(d)
217/256: df_cb4=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/CBM4.csv')
217/257:
d_cb4={}
a=set(list(df_cb4['SAROA']))-{0}
for i in a:
    c=list(df_cb4.loc[df_cb4['SAROA']==i,'CAS'])[0]
    if c>0: d_cb4.update({i:c})
217/258:
b=[]
for i in a:
    if d_cb4[i] !=d_property[i]:b.append(i)
217/259: a=set(d_cb4)&set(d_property)
217/260: len(a)
217/261:
b=[]
for i in a:
    if d_cb4[i] !=d_property[i]:b.append(i)
217/262:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/263: len(d)
217/264:
for i in xrange(30):
    print i,d[i]
217/265: d.sort()
217/266: d
217/267:
for i in xrange(30):
    print i,d[i]
217/268:
for j in js:
    a1=d[j][1]
    a2=d[j][2]
    df_cb4.loc[df_cb4['NAME']==a1,'CAS']=df_property.loc[df_property['NAME']==a2,'CAS']
217/269:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/270: len(d)
217/271:
d_cb4={}
a=set(list(df_cb4['SAROA']))-{0}
for i in a:
    c=list(df_cb4.loc[df_cb4['SAROA']==i,'CAS'])[0]
    if c>0: d_cb4.update({i:c})
217/272:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/273: len(d)
217/274:
b=[]
for i in a:
    if d_cb4[i] !=d_property[i]:b.append(i)
217/275: a=set(d_cb4)&set(d_property)
217/276:
b=[]
for i in a:
    if d_cb4[i] !=d_property[i]:b.append(i)
217/277:
j=0
d=[]
for i in b:
    a1=list(df_cb4.loc[df_cb4['SAROA']==i,'NAME'])[0]
    a2=list(df_property.loc[df_property['SAROAD']==i,'NAME'])[0]
    c=fuzz.ratio(a1.lower(),a2.lower())
    if c==100:
        d_cb4[i]=d_property[i]
        df_cb4.loc[df_cb4['SAROA']==i,'CAS']=d_property[i]
    else:
        j+=1
        d.append([fuzz.ratio(a1.lower(),a2.lower()),a1,a2])
217/278: len(d)
217/279: d.sort()
217/280: d
217/281: len(set(df_pbm['Profile_NO']))
217/282: for i in set(df_pbm['Profile_NO']): if i in df_vprofile_txt['P_NUMBER']
217/283:
for i in set(df_pbm['Profile_NO']):
    if i not in df_vprofile_txt['P_NUMBER']:print i
217/284:
for i in set(df_pbm['Profile_NO']):
    if i not in df_vprofile_txt['P_NUMBER
217/285: df_prof.head(5)
217/286: df_gspec=read_csv('../../SPECIATE4.5/GAS_SPECIES.csv')
217/287: df_gspec.head(5)
217/288: s_prof=set(df_gspec['P_NUMBER'])
217/289:
for i in set(df_pbm['Profile_NO']):
    if int(i) not in s_prof: print i
217/290: s_vprof=set(df_vprofile_txt['P_NUMBER'])
217/291:
s=s_vprof+s_prof
for i in set(df_pbm['Profile_NO']):
    if int(i) not in s: print i
217/292:
s=s_vprof|s_prof
for i in set(df_pbm['Profile_NO']):
    if int(i) not in s: print i
217/293: 3007 in s_prof
217/294: 3007 in s_vprof
217/295: 3007 in set(df_prof['P_NUMBER'])
217/296: 3007 in set(df_pbm['Profile_NO'])
217/297: '3007' in set(df_pbm['Profile_NO'])
217/298: df_pbm['Profile_NO']=[int(x) for x in df_pbm['Profile_NO']]
217/299: !grep 3007 ../../V_ASSIGN.SOR
217/300: !grep 3007 ../../V_PROFIL.TXT
217/301: !grep 3007 ../../V_PROFIL.TAB
217/302: !grep 3007 ../../V_PROFILE.csv
217/303: !grep 3007 df_pbm.add
217/304: !grep 3007 df_pbm.csv
217/305: df_prop.head(5)
217/306: df_prof.head(5)
217/307: df_gspec.head(5)
217/308: df_property.head(2)
217/309: df_gs=df_gspec
217/310: a=['ID','UNCERTAINT','ANLYMETHOD','UNC_METHOD']
217/311:
for i in a:
    del df_gs[i]
217/312: l=len(df_gs)
217/313: df_gs['Pollutant ID']=['VOC' for x in xrange(l)]
217/314: df_gs['CBM ID']=['VOC' for x in xrange(l)]
217/315: s_spec=set(df_gs['SPECIES_ID'])
217/316: df_gs['Mass_fraction']=[0.0 for x in xrange(l)]
217/317: df_gs['Divisor']=[1.0 for x in xrange(l)]
217/318: df_gs['Split_Factor']=[0.0 for x in xrange(l)]
217/319: df_gs['MW']=[df_property.loc[df_property['ID']==x,'SPEC_MW'][0] for x in df_gs['SPECIES_ID']]
217/320: x
217/321: list(df_property['ID'])[:5]
217/322: 85 in list(df_property['ID'])
217/323: df_property.loc[df_property['ID']==x,'SPEC_MW']
217/324: df_gs['MW']=[list(df_property.loc[df_property['ID']==x,'SPEC_MW'])[0] for x in df_gs['SPECIES_ID']]
217/325: df_gs.head(5)
217/326: df_gs[df_gs['SPECIES_ID']==85]['MW']
217/327: df_gs[df_gs['SPECIES_ID']==344]['MW']
217/328: df_cb5.head(10)
217/329: df_cb4.set_index('NAME').to_csv('df_cb4.csv')
217/330: df_cb4.set_index('NAME').to_csv('../CB05/df_cb4.csv')
217/331: df_cb5['SAROAD']=[0 for x in xrange(len(df_cb5))]
217/332: set(df_cb5['CAS1'])-set(df_cb4['CAS'])
217/333: df_cb5.head(3)
217/334: df.cb5.loc[1,'CAS1']-1
217/335: df_cb5.loc[1,'CAS1']-1
217/336: len(set(df_cb5['CAS1'])-set(df_cb4['CAS']))
217/337: len(set(df_cb5['CAS1'])-set(df_property['CAS no hyphen']))
217/338: len(set(df_cb4['CAS']))
217/339: len(set(df_cb5['CAS']))
217/340: len(df_cb5['CAS'])
217/341: len(set(df_cb4['CAS'])-set(df_cb5['CAS1']))
217/342: a=set(df_cb4['CAS'])-set(df_cb5['CAS1'])
217/343: nam=[]
217/344:
for i in a:
    nam.append(df_cb4.loc[df_cb4['CAS']==i,'NAME'])
217/345:
b
for i in set(df_cb5['NAME2']):
   b=append(fuz_lookup(i,nam))
217/346:
b
for i in set(df_cb5['NAME2']):
   b=b.append(fuz_lookup(i,nam))
217/347:
b=[]
for i in set(df_cb5['NAME2']):
   b.append(fuz_lookup(i,nam))
217/348:
b=[]
for i in set(df_cb5['NAME2']):
   c=fuz_lookup(i,nam)
   b.append(c)
217/349:
b=[]
for i in set(df_cb5['NAME2']):
   print i, fuz_lookup(i,nam)
217/350: i
217/351: fuz_lookup(i,nam)
217/352: fuz_lookup(i,list(nam))
217/353: nam[:5]
217/354: nam=list(nam)
217/355: nam[:5]
217/356: nam=[]
217/357:
for i in a:
    nam.append(list(df_cb4.loc[df_cb4['CAS']==i,'NAME'])[0])
217/358:
for i in a:
    if i in df_cb4['CAS']:
        nam.append(list(df_cb4.loc[df_cb4['CAS']==i,'NAME'])[0])
217/359:
for i in a:
    if type(i)==int and i in df_cb4['CAS']:
        nam.append(list(df_cb4.loc[df_cb4['CAS']==i,'NAME'])[0])
217/360: len(nam)
217/361: i
217/362: list(a)[:5]
217/363: list(df_cb4['CAS'])[:5]
217/364: list(df_property['CAS1'])[:5]
217/365: list(df_cb5['CAS1'])[:5]
217/366:
j=[]
for i in list(df_cb4['CAS']):
    if np.isnan(i):
        j.append(0)
    else:
        j.append(int(i))
217/367: df_cb4['CAS']=j
217/368: a=set(df_cb4['CAS'])-set(df_cb5['CAS1'])
217/369: len(a)
217/370: a=set(df_cb4['CAS'])-set(df_property['CAS no hyphen'])
217/371: len(a)
217/372: a=set(df_cb4['CAS'])-set(df_cb5['CAS1'])
217/373:
nam=[]
for i in a:
    nam.append(list(df_cb4.loc[df_cb4['CAS']==i,'NAME'])[0])
217/374: len(nam)
217/375:
b=[]
for i in set(df_cb5['NAME2']):
   print i, fuz_lookup(i,nam)
217/376:
b=[]
for i in set(df_cb5['NAME2']):
  c=fuz_lookup(i,nam)
  c.insert(0,i)
  b.append(c)
217/377: b[:5]
217/378: b[5:15]
217/379: b[15:25]
217/380: b[25:35]
217/381: b[35:45]
217/382: b[45:55]
217/383: b[55:]
217/384: b[55:65]
217/385: b[65:]
217/386: len(b)
217/387: a
217/388: len(a)
217/389:
b=[]
nam=list(df_cb5['NAME2'])
for ii in set(a):
   i=list(df_cb4.loc[df_cb4['CAS']==ii,'NAME'])[0]
   c=fuz_lookup(i,nam)
   c.insert(0,i)
   b.append(c)
217/390: b[:10]
217/391:
b=[]
nam=list(df_cb5['NAME2'])
for ii in set(a):
   i=list(df_cb4.loc[df_cb4['CAS']==ii,'NAME'])[0]
   c=fuz_lookup(i,nam)
   c.insert(0,i.lower())
   b.append(c)
217/392: b[:10]
217/393: len(set(df_cb5['CAS1'])-set(df_property['CAS no hyphen']))
217/394: len(set(df_cb5['CAS4'])-set(df_property['CAS no hyphen']))
217/395: len(set(df_cb4['CAS'])-set(df_property['CAS no hyphen']))
217/396: a=set(df_cb5['CAS1'])-set(df_property['CAS no hyphen'])
217/397:
nam=[]
for i in a:
    nam.append(list(df_cb5.loc[df_cb5['CAS1']==i,'NAME2'])[0])
217/398: len(nam)
217/399:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   c.insert(0,i.lower())
   b.append(c)
217/400: b[:10]
217/401:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas=df_property.loc[df_property['NAME'].map(lambda x:x.lower()==c[2][1]),'CAS']
       cas1=df_property.loc[df_property['NAME'].map(lambda x:x.lower()==c[2][1]),'CAS no hyphen']
       df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
       df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/402: len(b)
217/403: b
217/404:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas1=0
       cas=df_property.loc[df_property['NAME']==c[2][1]),'CAS']
       cas1=df_property.loc[df_property['NAME']==c[2][1]),'CAS no hyphen']
       if cas1!=0:
           df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
           df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/405:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas1=0
       cas=df_property.loc[df_property['NAME']==c[2][1]],'CAS']
       cas1=df_property.loc[df_property['NAME']==c[2][1]],'CAS no hyphen']
       if cas1!=0:
           df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
           df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/406:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas1=0
       cas=df_property.loc[df_property['NAME']==c[2][1],'CAS']
       cas1=df_property.loc[df_property['NAME']==c[2][1],'CAS no hyphen']
       if cas1!=0:
           df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
           df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/407: df_cb5=read_csv('/home/camxruns/2013/ptse/TEDS9.0/CB05/cbm_cb5_2.csv')
217/408:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas1=0
       cas=df_property.loc[df_property['NAME']==c[2][1],'CAS']
       cas1=df_property.loc[df_property['NAME']==c[2][1],'CAS no hyphen']
       if cas1!=0:
           df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
           df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/409: cas1
217/410:
nam=list(set(df_property['NAME']))
b=[]
for ii in set(a):
   i=list(df_cb5.loc[df_cb5['CAS1']==ii,'NAME2'])[0]
   c=fuz_lookup(i,nam)
   if c[2][0]==100:
       cas1=0
       cas=list(df_property.loc[df_property['NAME']==c[2][1],'CAS'])[0]
       cas1=list(df_property.loc[df_property['NAME']==c[2][1],'CAS no hyphen'])[0]
       if cas1!=0:
           df_cb5.loc[df_cb5['NAME2']==i,'CAS']=cas
           df_cb5.loc[df_cb5['NAME2']==i,'CAS1']=cas1
   else:
       c.insert(0,i.lower())
       b.append(c)
217/411: len(b)
217/412: a=set(df_cb5['CAS1'])-set(df_property['CAS no hyphen'])
217/413: len(a)
217/414: cas1
217/415: c[2][1]
217/416: df_property.loc[df_property['NAME']==c[2][1],'CAS no hyphen']
217/417: history
217/418: !pwd
217/419: !ls /home
218/1: from pandas import *
218/2: df_gsprof=read_csv('gsprof.cmaq.cb4p25.csv')
218/3: df_gsprof.head
218/4: df_gsprof.head(10)
218/5: df=df_gsprof[df_gsprof['profile number']=='B09C4']
218/6: df
218/7: sum(list(df[' Mass Fraction']))
218/8: sum(list(df['Mass Fraction']))
218/9: a=(list(df['Mass Fraction']))
218/10: sum(a)
218/11: a
218/12: a=[float(x) for x in a]
218/13: sum(a)
218/14: b=[float(x) for x in list(df['Mass Fraction'])]
218/15: c=[x*y for x,y in zip(a,b)]
218/16: sum(c)
218/17: c
218/18: b=[float(x) for x in list(df['Divisor'])]
218/19: c=[x*y for x,y in zip(a,b)]
218/20: sum(c)
218/21: c=[x/y for x,y in zip(a,b)]
218/22: sum(c)
218/23: !pwd
218/24: !lst
219/1: %history>history.170625.am
219/2: %history -g -f history.170625.am
220/1: import os
220/2: os.path.exists('select3.py')
220/3: os.path.exists('select*.py')
220/4: import glob
220/5: glob.glob('xxx')
220/6: 'a' in glob.glob('*)
220/7: 'a' in glob.glob('*')
220/8: !ls - a
220/9: !ls -l a
220/10: 'a' in glob.glob('a*')
220/11: 'a' in glob.glob('./a*')
220/12: !ls -l a*
220/13: !touch a
220/14: os.rm('a')
220/15: help(os)
220/16: os.rename('a','teset/a')
220/17: os.rename()
220/18: os.rename('a','b')
220/19: os.rename('b','test/b')
220/20: os.rename('test/b','testat/b')
220/21: os.renames('test/b','testat/b')
220/22: !touch a
220/23: os.renames('a','testat/b')
220/24: !ls testat
220/25: copy2('a','testat/b')
220/26: !head select3.py
220/27: !head -n20 select3.py
220/28: from shutil import copy2
220/29: copy2('a','testat/b')
220/30: !cat endless.bat
220/31: !grep back *py
220/32: !grep driver *py
221/1: run gspro.py
221/2: df
221/3: df_pbm_pro.head(3)
221/4: !pwd
221/5: df2
221/6: df_s
221/7: div
221/8: mwt
221/9: df_p
221/10: p
221/11: p in p_num
221/12: df_p=df_spec[df_spec['P_NUMBER']==p]
221/13: df_p
222/1: run gspro.py
222/2: !pwd
222/3: df_vprofile_txt=read_csv('../../V_PROFILE.csv',dtype={'P_NUMBER':str,'SAROAD':str})
222/4: df_property.head(3)
222/5: df_vprofile_txt.head(3)
222/6: min(list(df_vprofile_txt['wt_percent']))
222/7: max(list(df_vprofile_txt['wt_percent']))
222/8: set(df_pbm['Profile_NO'])-set(df_spec['P_NUMBER'])
222/9: set(df_pbm['Profile_NO'])-set(df_spec['P_NUMBER'])-set(df_vprofile['P_NIMBER'])
222/10: set(df_pbm['Profile_NO'])-set(df_spec['P_NUMBER'])-set(df_vprofile_txt['P_NIMBER'])
222/11: set(df_pbm['Profile_NO'])-set(df_spec['P_NUMBER'])-set(df_vprofile_txt['P_NUMBER'])
222/12: df_property=read_csv('df_property.csv',dtype={'SAROAD':str,'CAS no hyphen':int})
222/13: s=set(df_pbm['Profile_NO'])-set(df_spec['P_NUMBER'])
222/14: df_s=df_vprofile_txt[df_vprofile_txt['P_NUMBER'].map(lambda x:x in s)]
222/15: m=set(df_s['SAROAD'])
222/16: m-set(df_property['SAROAD'])
222/17: set(df_s['CAS'])-set(df_property['CAS no hyphen'])
222/18: df_s.columns
222/19: df_spec.columns
222/20: df_spec.head(3)
222/21: l=len(df_vprofile_txt)
222/22: set(df_vprofile_txt['CAS'])-set(df_property['CAS no hyphen'])
222/23: df_vprofile_txt['SPEC_NO']=[0 for x in xrange(l)]
222/24:
for i in xrange(3):
    c=df_vprofile_txt.loc[i,'CAS']
    print c
222/25:
for i in xrange(-3):
    c=df_vprofile_txt.loc[i,'CAS']
    print c
222/26:
for i in xrange(-3,-1):
    c=df_vprofile_txt.loc[i,'CAS']
    print c
222/27:
for i in xrange(l-3,l):
    c=df_vprofile_txt.loc[i,'CAS']
    print c
222/28:
df_vprofile_txt['SPECIES_ID']=[0 for x in xrange(l)]
df_vprofile_txt['SPEC_MW']=[0 for x in xrange(l)]
cas=set(df_property['CAS no hyphen'])
for i in xrange(l):
    c=df_vprofile_txt.loc[i,'CAS']
    if c in cas:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPECIES_ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPEC_MW'])[0]
222/29: df_property.head(3)
222/30:
for i in xrange(l):
    c=df_vprofile_txt.loc[i,'CAS']
    if c in cas:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['CAS no hyphen']==c,'ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPEC_MW'])[0]
222/31: len(df_vprofile_txt[df_vprofile_txt['SPEC_MW']==0])
222/32: set(df_vprofile_txt.idx[df_vprofile_txt['SPEC_MW']==0])
222/33: set(df_vprofile_txt.loci[df_vprofile_txt['SPEC_MW']==0])
222/34: set(df_vprofile_txt.iloc[df_vprofile_txt['SPEC_MW']==0])
222/35: a=list(df_vprofile_txt['SPEC_MW'])
222/36: a.index(0)
222/37: a.indexes(0)
222/38: indices = [i for i, x in enumerate(a) if x == 0]
222/39: indices[:5]
222/40: len(indices)
222/41: a=list(df_vprofile_txt['SPEC_ID'])
222/42: df_vprofile_txt.columns
222/43: a=list(df_vprofile_txt['SPEC_NO'])
222/44: indices_id = [i for i, x in enumerate(a) if x == 0]
222/45: len(indices)
222/46: indices_id[:5]
222/47: indices==indeces_id
222/48: indices==indexes_id
222/49: indices==indices_id
222/50: saro=set(df_property['SAROAD'])
222/51:
for i in indices:
    s=df_vprofile_txt.loc[i,'SAROAD']
    if s in saro:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['SAROAD']==s,'ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['SAROAD']==s,'SPEC_MW'])[0]
222/52: indices_id = [i for i, x in enumerate(a) if x == 0]
222/53: a=list(df_vprofile_txt['SPEC_NO'])
222/54: indices_id = [i for i, x in enumerate(a) if x == 0]
222/55: len(indices_id)
222/56: df_vprofile_txt.head(5)
222/57: '00000' in saro
222/58: 0 in cas
222/59:
df_vprofile_txt['SPECIES_ID']=[0 for x in xrange(l)]
df_vprofile_txt['SPEC_MW']=[0 for x in xrange(l)]
for i in xrange(l):
    c=df_vprofile_txt.loc[i,'CAS']
    if c!=0 and c in cas:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPECIES_ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPEC_MW'])[0]
222/60:
df_vprofile_txt['SPEC_NO']=[0 for x in xrange(l)]
df_vprofile_txt['SPEC_MW']=[0 for x in xrange(l)]
for i in xrange(l):
    c=df_vprofile_txt.loc[i,'CAS']
    if c!=0 and c in cas:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['CAS no hyphen']==c,'_ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPEC_MW'])[0]
222/61:
df_vprofile_txt['SPEC_NO']=[0 for x in xrange(l)]
df_vprofile_txt['SPEC_MW']=[0 for x in xrange(l)]
for i in xrange(l):
    c=df_vprofile_txt.loc[i,'CAS']
    if c!=0 and c in cas:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['CAS no hyphen']==c,'ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['CAS no hyphen']==c,'SPEC_MW'])[0]
222/62: indices = [i for i, x in enumerate(a) if x == 0]
222/63: len(indices)
222/64: a=list(df_vprofile_txt['SPEC_NO'])
222/65: indices = [i for i, x in enumerate(a) if x == 0]
222/66: len(indices)
222/67:
for i in indices:
    s=df_vprofile_txt.loc[i,'SAROAD']
    if s !='00000' and s in saro:
        df_vprofile_txt.loc[i,'SPEC_NO']=list(df_property.loc[df_property['SAROAD']==s,'ID'])[0]
        df_vprofile_txt.loc[i,'SPEC_MW']=list(df_property.loc[df_property['SAROAD']==s,'SPEC_MW'])[0]
222/68: a=list(df_vprofile_txt['SPEC_NO'])
222/69: indices = [i for i, x in enumerate(a) if x == 0]
222/70: len(indices)
222/71:
for i in indices[:5]:
    print df_vprofile_txt.loc[i,'SAROAD'],df_vprofile_txt.loc[i,'CAS']
222/72: '43132' in saro
222/73: "628284" in cas
222/74: df_vprofile_txt.head(5)
222/75: del df_vprofile_txt['SPECIES_ID']
222/76: del df_vprofile_txt['desc']
222/77: df_vprofile_txt['SPECIES_ID']=df_vprofile_txt['SPEC_NO']
222/78: del df_vprofile_txt['SPEC_NO']
222/79: df_vprofile_txt['WEIGHT_PER']=df_vprofile_txt['wt_percent']
222/80: df_spec.columns
222/81: col=df_spec.columns[1:]
222/82: df_vprofile_txt[col].head(3)
222/83: df_vprofile_txt[col].set_index('SPECIES_ID').to_csv('../../df_specV.csv',dtype={'P_NUMBER':str,'SAROAD':str},quoting=csv.QUOTE_NONNUMERIC)
222/84: import csv
222/85: df_vprofile_txt[col].set_index('SPECIES_ID').to_csv('../../df_specV.csv',dtype={'P_NUMBER':str,'SAROAD':str},quoting=csv.QUOTE_NONNUMERIC)
222/86: df_vprofile_txt[col].set_index('SPECIES_ID').to_csv('../../df_specV.csv',quoting=csv.QUOTE_NONNUMERIC)
222/87: history
222/88: !grep df_spec *py|grep read_csv
222/89: run vprofileTOspec.py
222/90: len(indices)
222/91: '43132' in saro
222/92: "628284" in cas
222/93: df_vprofile_txt[col].head(3)
222/94: run gspro.py
222/95: col
222/96: df_pbm_pro.columns
222/97: del df_pbm_pro['CB_spec']
222/98: df_pbm_pro.columns
222/99: run gspro.py
222/100: del df_pbm_pro[2]
222/101: del df_pbm_pro[df_pbm_pro.columns[2]]
222/102: df_pbm_pro.columns
222/103: df.columns
222/104: df1.columns
222/105: df2.columns
222/106: run gspro.py
222/107: 8953 in p_num
222/108: "8953" in p_num
222/109: !sed -E 's/^//g' gspro.add|head
222/110: !sed -E 's/^.\"//g' gspro.add|head
222/111: !sed -E 's/^(.{0})\"//g' gspro.add|head
222/112: !sed -E 's/^(.{5})\"/\1/g' gspro.add|head
222/113: cat "10001340100491938001945591"> a.dat
222/114: !cat "10001340100491938001945591"> a.dat
222/115: !echo "10001340100491938001945591"> a.dat
222/116: !sed -E 's/^(.{11})49/\158/' a.dat
222/117: !cat a.dat
223/1: run rd_gscnv.py -i gscnv.cmaq_cb05_soa.txt
223/2: set(df['CNV_FROM'])
223/3: set(df['CNV_TO'])
223/4: len(set(df['P_NUMBER']))
223/5: df.columns
223/6: !head gspro.csv
223/7: !pwd
224/1: !cat gscnv.py
224/2: from pandas import *
224/3: import csv
224/4: df_pbm_pro=read_csv('gspro.csv',dtype={'P_NUMBER':str})
224/5: col=[u'CNV_FROM', u'CNV_TO', u'CONV_FACT', u'P_NUMBER', u'NOTE']
224/6: p_num=set(df_pbm_pro['P_NUMBER'])
224/7: df_pbm_pro.columns
224/8: df_pbm_pro=df_pbm_pro.reset_index()
224/9: p_num=set(df_pbm_pro['P_NUMBER'])
224/10: df_pbm_pro.columns
224/11: df_pbm_pro.head(3)
224/12: vi gspro.csv
224/13: !vi gspro.csv
224/14: !cat gscnv.py
224/15: df_pbm_pro=read_csv('gspro.csv')
224/16: df_pbm_pro.head(3)
224/17: df_pbm_pro.head(3)
224/18: df_pbm_pro.columns
224/19: df_pbm_pro=read_csv('gspro.csv',sep='"')
224/20: df_pbm_pro.columns
224/21: df_pbm_pro=read_csv('gspro.csv',sep=';')
224/22: df_pbm_pro.columns
224/23: !cat gscnv.py
224/24: p_num=set(df_pbm_pro['P_NUMBER'])
224/25:
p_num=list(set(df_pbm_pro['P_NUMBER']))
p_num.sort()
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=df.loc[df['CB_spec']=='NR','MASS_FRAC']
        conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/26: df_pbm_pro.columns
224/27:
p_num=list(set(df_pbm_pro['P_NUMBER']))
p_num.sort()
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=df.loc[df['CB_spec']=='NR','Mass_frac']
        conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/28: conv
224/29:
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=list(df.loc[df['CB_spec']=='NR','Mass_frac'])[0]
        if nr==100.:
            conv.append(6.)
        else:
            conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/30: conv
224/31: import numpy as np
224/32:
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=list(df.loc[df['CB_spec']=='NR','Mass_frac'])[0]
        if np.isnan(nr) or nr==100.:
            conv.append(6.)
        else:
            conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/33: conv
224/34:
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=list(df.loc[df['CB_spec']=='NR','Mass_frac'])[0]
        if np.isnan(nr) or nr==100.:
            conv.append(2.)
        else:
            conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/35: col
224/36: len(p_num)
224/37: l=len(p_num)
223/8: !head gscnv.cmaq_cb05_soa.txt
223/9: !more gscnv.cmaq_cb05_soa.txt
224/38: df_cnv=DataFrame({col[3]:Series(p_num),col[0]:['VOC' for x in xrange(l)],col[1]:['TOG' for x in xrange(l)],col[2]:Series(conv),col[4]:['!by YCKuang' for x in xrange(l)]})
224/39: df_cnv.head(5)
224/40: p_num
224/41: df_pbm_pro=read_csv('gspro.csv',sep=';',dtype={'P_NUMBER':str})
224/42:
p_num=list(set(df_pbm_pro['P_NUMBER']))
p_num.sort()
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=df.loc[df['CB_spec']=='NR','Mass_frac']
        conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/43: p_num
224/44: df_cnv=DataFrame({col[3]:Series(p_num),col[0]:['VOC' for x in xrange(l)],col[1]:['TOG' for x in xrange(l)],col[2]:Series(conv),col[4]:['!by YCKuang' for x in xrange(l)]})
224/45: df_cnv.head(5)
224/46:
conv=[]
for p in p_num:
    df=df_pbm_pro[df_pbm_pro['P_NUMBER']==p]
    s=set(df['CB_spec'])
    if 'NR' in s:
        nr=list(df.loc[df['CB_spec']=='NR','Mass_frac'])[0]
        if np.isnan(nr) or nr==100.:
            conv.append(2.)
        else:
            conv.append(100./(100.-nr))
    else:
        conv.append(1.0)
224/47: df_cnv=DataFrame({col[3]:Series(p_num),col[0]:['VOC' for x in xrange(l)],col[1]:['TOG' for x in xrange(l)],col[2]:Series(conv),col[4]:['!by YCKuang' for x in xrange(l)]})
224/48: df_cnv.head(5)
224/49: col=[u'CNV_FROM', u'CNV_TO', u'P_NUMBER', u'CONV_FACT', u'NOTE']
223/10: !vi a
224/50: history
224/51: !vi gscnv.py
224/52: run gscnv.py
224/53: !more gscnv.csv
224/54: !cp gscnv.csv gscnv.add
224/55: !sed -i -E 's/^(.{0})\"/\1/g' gscnv.add
224/56: !sed -E 's/^(.{0})\"/\1/g' gscnv.add
225/1: a=[]
225/2:
fname='a'
with open(fname) as ftext:
    a=[int(line) for line in ftext]
225/3: len(set(a))
225/4: len(a)
226/1: from pandas import *
226/2: df_pbm=read_csv('d_pbm2.csv',ctype={'Profile_NO':str})
226/3: df_pbm=read_csv('d_pbm2.csv',dtype={'Profile_NO':str})
226/4: len(set(df_pbm['Profile_NO']))
226/5: df_pbm=read_csv('d_pbm.csv',dtype={'Profile_NO':str})
226/6: len(set(df_pbm['Profile_NO']))
227/1:
fname='a'
with open(fname) as ftext:
    a=[int(line) for line in ftext]
227/2: set(a)
226/7: a={8814, 8953, 9002, 9004, 9008, 9024, 95325}
226/8: a-set(df_pbm['Profile_NO'])
227/3: !ls
227/4: !head pbm.profile
227/5: !sed -i 's/\"//g' pbm.profile
227/6:
with open('pbm.profile') as ftext:
    pbm=[int(line) for line in ftext]
227/7: len(set(pbm))
227/8: !head pbm.scc
228/1:
with open('error.pro') as ftext:
    pbm_pro=[line for line in ftext]
with open('error.scc') as ftext:
    pbm_scc=[line for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update(pbm_scc[i]:pbm_pro[i])
228/2:
with open('error.pro') as ftext:
    pbm_pro=[line for line in ftext]
with open('error.scc') as ftext:
    pbm_scc=[line for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
228/3: len(d)
228/4: len(set(pbm_pro))
228/5: len(set(pbm_scc))
228/6: a=list(d)
228/7: b=[d[x] for x in a]
228/8: len(a),len(b)
228/9: from pandas import *
228/10: df=DataFrame({'SCC':a,'P_NUMBER':b})
228/11: df.head(5)
228/12:
with open('error.pro') as ftext:
    pbm_pro=[line.strip('\n') for line in ftext]
with open('error.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
228/13: a=list(d)
228/14: b=[d[x] for x in a]
228/15: df=DataFrame({'SCC':a,'P_NUMBER':b})
228/16: df.head(5)
228/17: df.set_index('SCC').to_csv('error.csv')
226/9: !ls *.csv
226/10: ls ../../SPECIATE4.5/GAS*.csv
226/11: !head ../../SPECIATE4.5/GAS_PROFILE.csv
226/12: df_gspro=read_csv('../../SPECIATE4.5/GAS_PROFILE.csv')
226/13: a-set(df_gspro['P_NUMBER'])
226/14: ls ../../*.csv
226/15: !head ../../df_specV.csv
226/16: df_specV=read_csv('../../df_specV.csv')
226/17: list(set(df_gspro['P_NUMBER']))[:5]
226/18: a
226/19: str_a=set(str(x) for x in a)
226/20: a-set(df_gspro['P_NUMBER'])
226/21: a
226/22: str_a-set(df_gspro['P_NUMBER'])
226/23: str_a-set(df_pbm['Profile_NO'])
226/24: len(set(df_pbm['Profile_NO']))
226/25: df_a=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv')
226/26: df_a.head(4)
226/27: set(df_a.head[P_NUMBER])
226/28: set(df_a.head['P_NUMBER'])
226/29: set(df_a['P_NUMBER'])
226/30: df_a[df_a['SCC']=='10100910']
226/31: df_a[df_a['SCC']==10100910]
229/1:
with open('error.pro') as ftext:
    pbm_pro=[line for line in ftext]
with open('error.scc') as ftext:
    pbm_scc=[line for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
229/2: from pandas import *
229/3: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
229/4: df[df['SCC']==10100910]
229/5: df[df['SCC']=='10100910']
229/6: df[df['SCC']=='10100910\n']
229/7:
with open('error.pro') as ftext:
    pbm_pro=[line.strip('\n') for line in ftext]
with open('error.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
229/8: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
229/9: df.set_index('SCC').to_csv('error.csv')
229/10: df[df['P_NUMBER']=='8953']
229/11: set(df[df['P_NUMBER']=='8953'])
229/12: !grep 8953 $GSREF
229/13: set(df.loc[df['P_NUMBER']=='8953','SCC'])
226/32: ls *.csv
226/33: !head df_orl.csv
226/34: ls *.py
226/35: ls -lrt *py
226/36: !more csv2orl_2.py
226/37: df_pv=read_csv('df_pv.csv')
226/38: sic=set(df_pv.loc[df_pv['SCC'=='10100910'],'SIC'])
226/39: df_pv.columns
226/40: df_pv.head(5)
226/41: sic=set(df_pv.loc[df_pv['SCC'=='10100910'],'COMP_KIND1'])
226/42: sic=set(df_pv.loc[df_pv['SCC'==10100910],'COMP_KIND1'])
226/43: s=set(df_pv['SCC'])
226/44: 10100910 in s
226/45: sic=(df_pv.loc[df_pv['SCC'==10100910],'COMP_KIND1'])
226/46: sic=set(df_pv.loc[df_pv['SCC']==10100910,'COMP_KIND1'])
226/47: sic
226/48: df_pv.columns
226/49: a=df_pv[df_pv['C_NO']=='W0403666']
226/50: a
230/1: ls *.csv
230/2: from pandas import *
230/3: df_error=read_csv('error.csv')
230/4: df_a=df_error[df_error['P_NUMBER']=='8953']
230/5: df_a=df_error[df_error['P_NUMBER']==8953]
230/6: set(df_a['SCC'])
230/7: df_error.loc[df_error['SCC']==28888802,'P_NUMBER']
230/8: !pwd
231/1: a=1/300
231/2: a
231/3: a=1/300.
231/4: a
231/5: a=float('%.4e'% a)
231/6: a
231/7: a=float('%.4f'% a)
231/8: a
231/9: a=1/300000.
231/10: a=float('%.4e'% a)
231/11: a
231/12: !vi *2.py
231/13: ls *2.py
231/14: run csv2orl_2.py
231/15: ls -lrt *.py
231/16: grep \% csv2orl2.py
231/17: !grep \% csv2orl2.py
231/18: !grep % csv2orl2.py
231/19: !grep % csv2orl_2.py
231/20: ls -lrt
231/21: !head df_orl.csv
231/22: !vi *_2.py
231/23: run csv2orl_2.py
231/24: !vi *_2.py
231/25: a[0]
231/26: a=log10(1.31227537015e-05)
231/27: from numpy import *
231/28: log10(1.31227537015e-05)
231/29: int(log10(1.31227537015e-05))
231/30: a=(1.31227537015e-05)
231/31: a/10**(int(log10(a)))
231/32: a/10**(int(log10(a)+0.5))
231/33: round(a,-6)
231/34: round(a,6)
231/35: round(a/10**(int(log10(a))),6)*10**(int(log10(a)))
231/36: b=round(a/10**(int(log10(a))),6)
231/37: b
231/38: b*10**(int(log10(a)))
231/39: ls *.py
231/40: vi gspro.py
231/41: !vi gspro.py
231/42: run gspro.py
231/43: ls -lrt
231/44: !head gspro.csv
231/45: !vi gspro.py
231/46: run gspro.py
231/47: !head gspro.csv
232/1: from pandas import *
232/2: df_error=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv')
232/3: df_error.head(10)
232/4: len(df_error)
232/5:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err2.pro') as ftext:
    pbm_pro=[line.strip('\n') for line in ftext]
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err2.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
232/6: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
232/7: df.set_index('SCC').to_csv('err2.csv')
232/8: df.head(10)
232/9: df_a=df_error[df_error['P_NUMBER']=='8953']
232/10: df_a=df_error[df_error['P_NUMBER']==8953]
232/11: set(df_a['SCC'])
232/12: df_b=df[df_error['P_NUMBER']==8953]
232/13: set(df_b['SCC'])
232/14: set(df_b['SCC'])-set(df_a['SCC'])
232/15: set(df_b['SCC']).int()-set(df_a['SCC'])
232/16: len(set(df_err['P_NUMBER']))
232/17: len(set(df['P_NUMBER']))
232/18: set(df['P_NUMBER'])
232/19: !vi gscnv.py
232/20: run gscnv.py
232/21: !v
232/22: !vi gscnv.py
232/23: run gscnv.py
232/24: !head gscnv.csv
232/25: !cp gspro.cs gscnv.cs
232/26: !vi gscnv.cs
232/27: !gscnv.cs
232/28: set(df[''])
232/29: set(df['SCC'])
232/30: df.head(10)
232/31: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
232/32: set(df['SCC'])
232/33: set(df_error['P_NUMBER'])
233/1: from pandas import *
233/2: !grep df_spec\= *.py
233/3: df_spec=read_csv('df_gspec.csv',dtype={'P_NUMBER':str})
233/4: df_spec=read_csv('../../SPECIATE4.5/df_gspec.csv',dtype={'P_NUMBER':str})
233/5: ls *.csv
233/6: ls ../CB05/*.csv
233/7: !locate df_gspec.csv
233/8: df_spec=read_csv('df_spec.csv',dtype={'P_NUMBER':str})
233/9: df_spec.head(5)
233/10: df_error=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv')
233/11: set(df_error['P_NUMBER'])-set(df_spec['P_NUMBER'])
233/12: df_error=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv',dtype={'P_NUMBER':str})
233/13: set(df_error['P_NUMBER'])-set(df_spec['P_NUMBER'])
233/14: ls -rt *.csv
233/15: df_gspro=read_csv('gspro.csv',dtype={'P_NUMBER':str})
233/16: set(df_error['P_NUMBER'])-set(df_gspro['P_NUMBER'])
233/17: df_gspro.head(4)
233/18: df_gspro=read_csv('gspro.csv',sep=';',dtype={'P_NUMBER':str})
233/19: set(df_error['P_NUMBER'])-set(df_gspro['P_NUMBER'])
233/20: ls -rt *.csv
233/21: !head d_pbm.csv
233/22: df_pbm=read_csv('d_pbm.csv',dtype={'Profile_NO':str})
233/23: set(df_error['SCC'])-set(df_pbm['SCC'])
233/24:
d_err=set()
for i in xrange(len(df_error)):
    d_err.update((df_error.loc[i,'SCC'],df_error.loc[i,'P_NUMBER']))
233/25: len(d_err)
233/26: len(df_error)
233/27:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.update((df_pbm.loc[i,'SCC'],df_pbm.loc[i,'P_NUMBER']))
233/28: df_pbm.head(5)
233/29:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.update((df_pbm.loc[i,'SCC'],df_pbm.loc[i,'Profile_NO']))
233/30: len(d_pbm)
233/31: d_err-d_pbm
233/32: list(d_pbm)[:5]
233/33:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.update(zip(df_pbm.loc[i,'SCC'],df_pbm.loc[i,'P_NUMBER']))
233/34:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.update(zip(df_pbm.loc[i,'SCC'],df_pbm.loc[i,'Profile_NO']))
233/35: zip(5,3)
233/36: a=(5,3)
233/37: a
233/38: b=(2,7)
233/39: c=set(a,b)
233/40: c
233/41: c=set(a)
233/42: c.update(b)
233/43: c
233/44: a=[5,3]
233/45: b=[2,7]
233/46: c=set(a)
233/47: c.update(b)
233/48: c
233/49: a=tup(5,3)
233/50: a=tuple(5,3)
233/51: a=tuple(a)
233/52: a
233/53: b=tuple(b)
233/54: c=set(a)
233/55: c.update(b)
233/56: c
233/57: c={a,b}
233/58: c
233/59: c.add(b)
233/60: c
233/61:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.add({(df_pbm.loc[i,'SCC'],df_pbm.loc[i,'Profile_NO'])})
233/62:
d_pbm=set()
for i in xrange(len(df_pbm)):
    d_pbm.add((df_pbm.loc[i,'SCC'],df_pbm.loc[i,'Profile_NO']))
233/63: d_pbm
233/64: len(d_pbm)
233/65:
d_err=set()
for i in xrange(len(df_error)):
    d_err.add((df_error.loc[i,'SCC'],df_error.loc[i,'P_NUMBER']))
233/66: d_err
233/67: len(d_err)
233/68: d_err-d_pbm
233/69: len(d_err-d_pbm)
233/70: list(d_pbm)[:5]
233/71: a=list(d_pbm)
233/72: a.sort()
233/73: a
233/74: len(a)
233/75: b=list(d_err)
233/76: b.sort()
233/77: b
233/78: a
234/1: df_error=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv',dtype={'P_NUMBER':str})
234/2: from pandas import *
234/3: df_error=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/error.csv',dtype={'P_NUMBER':str})
234/4: df_error.head(10)
234/5: !vi *_2.py
234/6: run csv2orl_2.py
234/7:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err3.pro') as ftext:
    pbm_pro=[line.strip('\n') for line in ftext]
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err3.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
d={}
for i in xrange(len(pbm_scc)):
    d.update({pbm_scc[i]:pbm_pro[i]})
234/8: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
234/9: set(df['P_NUMBER'])
234/10: set(df['SCC'])
234/11: len(set(df['SCC']))
234/12:
d_df=set()
for i in xrange(len(df)):
    d_df.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
234/13: len(d_df)
234/14: d_df
234/15: a=list(d_df)
234/16: a.sort()
234/17: a
234/18: vi gscnv.py
234/19: !vi gscnv.py
234/20: !head gscnv.csv
234/21: !v
234/22: !vi gscnv.py
234/23: run gscnv.py
234/24: !cat gscnv.cs
234/25: !gscnv.cs
234/26: !vi gscnv.py
234/27: !tail *_2.py
234/28: !vi gscnv.py
234/29: !cat gscnv.cs
234/30: !vi gscnv.py
234/31: !vi gscnv.cs
234/32: run gscnv.py
234/33: !tail gscnv.add
234/34: !home gscnv.add
234/35: !head gscnv.add
234/36: !vi gscnv.py
234/37: run gscnv.py
234/38: !v
234/39: !vi gscnv.py
234/40: run gscnv.py
234/41: !head gscnv.add
234/42: !gscnv.cs
234/43: !vi *_2.py
234/44: run csv2orl_2.py
234/45:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/duplicate.pro') as ftext:
    dup_pro=[line.strip('\n') for line in ftext]
234/46: !vi gscnv.py
234/47: run gscnv.py
234/48: !gscnv.cs
234/49: dup_pro
234/50: '0000' in dup_pro
234/51: !vi gscnv.py
234/52: run gscnv.py
234/53: !more gscnv.csv
234/54: !v
234/55: !vi gscnv.py
234/56: run gscnv.py
234/57: !more gscnv.csv
234/58: !gscnv.cs
234/59: !vi *_2.py
234/60: run csv2orl_2.py
234/61: df
234/62: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
234/63: df
234/64: d_df
234/65: !vi gspro.py
234/66: run gspro.py
234/67: !gspro.cs
234/68: !vi gspro.py
234/69: run gspro.py
234/70: !gspro.cs
234/71: df.set_index('SCC').to_csv('err_114.csv')
234/72: df=DataFrame({'SCC':pbm_scc,'P_NUMBER':pbm_pro})
234/73: df.set_index('SCC').to_csv('err_114.csv')
235/1: df_err=read_csv('err_114.csv')
235/2: from pandas import *
235/3: df_err=read_csv('err_114.csv')
235/4:
d_df=set()
for i in xrange(len(df)):
    d_df.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
235/5: df=df_err
235/6:
d_df=set()
for i in xrange(len(df)):
    d_df.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
235/7: d_df
235/8: !vi gscnv.py
235/9: run gscnv.py
235/10: !more gscnv.csv
235/11: !vi gscnv.py
235/12: run gscnv.py
235/13: !more gscnv.csv
235/14: !v
235/15: !vi gscnv.py
235/16: !grep csv\. *py
235/17: !vi gscnv.py
235/18: run gscnv.py
235/19: !vi gscnv.py
235/20: run gscnv.py
235/21: !more gscnv.csv
235/22: !vi gscnv.py
235/23: run gscnv.py
235/24: !vi gscnv.cs
235/25: !gscnv.cs
236/1: vi gspro.py
236/2: !vi gspro.py
236/3: run gscnv.py
236/4: run gspro.py
236/5: !vi gspro.py
236/6: run gspro.py
236/7: !vi gspro.py
236/8: run gspro.py
236/9: !vi gspro.py
236/10: run gspro.py
236/11: !vi gspro.py
236/12: run gspro.py
236/13: !vi gspro.py
236/14: run gspro.py
236/15: round(5.001,2)
236/16: round(5.123,2)
236/17: !vi gspro.py
236/18: run gspro.py
236/19: !vi gspro.py
236/20: run gspro.py
236/21: !grep pivot *py
236/22: df_pbm_pro.head(3)
236/23: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/24: df
236/25: !vi gspro.py
236/26: run gspro.py
236/27: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/28: df
236/29: !vi gspro.py
236/30: run gspro.py
236/31: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/32: df
236/33: !vi gspro.py
236/34: run gspro.py
236/35: !top
236/36: df
236/37: history
236/38: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/39: df
236/40: df_pbm_pro
236/41: df
236/42: df_err=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/err_114.csv')
236/43: df_err=read_csv('err_114.csv')
236/44:
d_df=set()
for i in xrange(len(df)):
    d_df.add((df_err.loc[i,'SCC'],df_err.loc[i,'P_NUMBER']))
236/45: d_df
236/46:
d_df=set()
for i in xrange(len(df_err)):
    d_df.add((df_err.loc[i,'SCC'],df_err.loc[i,'P_NUMBER']))
236/47: d_df
236/48: set(df_err['P_NUMBER'])
236/49: df
236/50: set(df_err['P_NUMBER'])-set(df['P_NUMBER'])
236/51: df.reset_index()
236/52: df=df.reset_index()
236/53: set(df_err['P_NUMBER'])-set(df['P_NUMBER'])
236/54: set(df_err['P_NUMBER'])-set(df_pbm_pro['P_NUMBER'])
236/55: set(df_err['P_NUMBER'])-set(df_pbm['P_NUMBER'])
236/56: df_pbm.head(5)
236/57: set(df_err['P_NUMBER'])-set(df_pbm['Profile_NO'])
236/58: df_pbm=read_csv('d_pbm.csv',dtype={'Profile_NO':str})
236/59: set(df_err['P_NUMBER'])-set(df_pbm['Profile_NO'])
236/60: df_err=read_csv('err_114.csv',dtype={'Profile_NO':str})
236/61: set(df_err['P_NUMBER'])-set(df_pbm['Profile_NO'])
236/62: list(df_err['P_NUMBER'])[:4]
236/63: type(list(df_err['P_NUMBER'])[0])
236/64: df_err=read_csv('err_114.csv',dtype={'P_NUMBER':str})
236/65: set(df_err['P_NUMBER'])-set(df_pbm['P_NUMBER'])
236/66: set(df_err['P_NUMBER'])-set(df_pbm['Profile_NO'])
236/67: set(df_err['P_NUMBER'])-set(df_pbm_pro['P_NUMBER'])
236/68: !top
236/69: !vi gspro.py
236/70: !vi gspro.csv
236/71: !vi gspro.py
236/72: set(df_pbm_pro['P_NUMBER'])
236/73: !vi gspro.csv
236/74: !vi gspro.py
236/75: run gspro.py
236/76: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/77: df
236/78: df_pbm_pro[df_pbm_pro['P_NUMBER']='1032']
236/79: df_pbm_pro[df_pbm_pro['P_NUMBER']=='1032']
236/80: !vi gspro.py
236/81: run gspro.py
236/82: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/83: df
236/84: !v
236/85: !vi gspro.py
236/86: run gspro.py
236/87: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/88: df
236/89: !vi gspro.py
236/90: run gspro.py
236/91: df=pivot_table(df_pbm_pro,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
236/92: df
236/93: !cat gspro.cs
236/94: !vi gspro.py
236/95: run gspro.py
236/96: !more gscnv.csv
236/97: !more gspro.csv
236/98: !vi gspro.py
236/99: run gspro.py
236/100: !more gspro.csv
236/101: !gspro.cs
236/102: !vi gspro.py
236/103: run gspro.py
236/104: !gspro.cs
236/105: !top
236/106: !vi gspro.py
236/107: !vi gspro.py
236/108: !top
236/109: !vi gspro.py
236/110: df_cb5.columns
236/111: ls *.csv
236/112: !head camx.prm.cb05_cf.csv
236/113: !grep camx.prm.cb05_cf.csv *py
236/114: !diff camx.prm.cb05_cf.csv ../CB05/camx.prm.cb05_cf.csv
236/115: !vi gspro.py
236/116: d_s5
236/117: d_s4
236/118: !vi gspro.py
236/119: run gspro.py
236/120: !vi gspro.py
236/121: df3=DataFrame({'Poll_ID'=[s for s in list(df['CB_spec'])],'Mass_frac':[1. for x in xrange(l)],'CB_spec':[s for s in list(df['CB_spec'])],'Split_factor':[1. for x in xrange(l)],'Divisor':[df_s5[s] for s in list(df['CB_spec'])]})
236/122: df3=DataFrame({'Poll_ID':[s for s in list(df['CB_spec'])],'Mass_frac':[1. for x in xrange(l)],'CB_spec':[s for s in list(df['CB_spec'])],'Split_factor':[1. for x in xrange(l)],'Divisor':[df_s5[s] for s in list(df['CB_spec'])]})
236/123: !vi gspro.py
236/124: run gspro.py
236/125: j
236/126: d_s5[j][0]
236/127: d_s5[j]
236/128: !vi gspro.py
236/129: run gspro.py
236/130: !v
236/131: !vi gspro.py
236/132: run gspro.py
236/133: !gspro.cs
237/1:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
237/2: len(pbm_scc)
237/3: len(set(pbm_scc))
237/4: !grep DESC *py
237/5: !grep desc *py
237/6: !grep SCC *py|grep csv
237/7: df_VB=read_csv('vbird_gsref.cmaq.cb4p25.csv')
237/8: from pandas import *
237/9: df_VB=read_csv('vbird_gsref.cmaq.cb4p25.csv')
237/10: df_VB.columns
237/11: set(pbm_scc)-set(df_VB['SCC'])
237/12: len(set(pbm_scc)-set(df_VB['SCC']))
237/13: df_VB.head(10)
237/14: pbm_scc=[int(x) for x in pbm_scc]
237/15: set(pbm_scc)-set(df_VB['SCC'])
237/16: pbm_scc=list(set(pbm_scc))
237/17: pbm_scc.sort()
237/18: pbm_scc[:5]
237/19: df=df_VB[df_VB['SCC'].map(lambda x: for x in pbm_scc)]
237/20: df=df_VB[df_VB['SCC'].map(lambda x: x in pbm_scc)]
237/21: len(df)
237/22: df.head(10)
237/23: set(df['spec'])
237/24: df[df['spec']=='PM2_5']
237/25: len(df[df['spec']=='PM2_5'])
237/26: df=df[df['spec']=='PM2_5'])
237/27: df=df[df['spec']=='PM2_5']
237/28: set(df['SCC'])
237/29: len(set(df['SCC']))
237/30: df.head(10)
237/31: len(set(df['prof']))
237/32: !ls *.csv
237/33: df_gsref=read_csv('/home/SMOKE4.5/data/ge_dat/gsref.csv',sep=';')
237/34: df_gsref=read_csv('/home/SMOKE4.5/data/ge_dat/gsref.csv',sep=';')
237/35: df_gsref.head(3)
237/36: df_gsref=read_csv('/home/SMOKE4.5/data/ge_dat/gsref.csv',sep=';')
237/37: df_gsref.head(3)
237/38:
for i in xrange(3,10):
    del df_gsref['Unnamed: '+str(i)]
237/39: df_gsref.head(3)
237/40: set(df['scc'])-set(df_gsref['SCC'])
237/41: set(df['SCC'])-set(df_gsref['SCC'])
237/42: len(set(df['SCC'])-set(df_gsref['SCC']))
237/43: type (list(df_gsref['SCC'])[0])
237/44: type (list(df['SCC'])[0])
237/45: df_gsref['SCC']=[int(x) for x list(df_gsref['SCC'])]
237/46: df_gsref['SCC']=[int(x) for x in list(df_gsref['SCC'])]
237/47: df['SCC']=[str(x) for x in list(df['SCC'])]
237/48: set(df['SCC'])-set(df_gsref['SCC'])
237/49: df_gsref_PM=df_gsref[df_gsref['spec']=='PM2_5']
237/50: set(df['SCC'])-set(df_gsref_PM['SCC'])
237/51: len(set(df['SCC'])-set(df_gsref_PM['SCC']))
237/52: len(set(pbm_scc)-set(df_gsref_PM['SCC']))
237/53: len(set(df['profile'])-set(df_gsref_PM['P_NUMBER']))
237/54: df.head(3)
237/55: len(set(df['prof'])-set(df_gsref_PM['P_NUMBER']))
237/56: type (list(df['prof'])[0])
237/57: type(list(df_gsref_PM['P_NUMBER'])[0])
237/58: ls
237/59: run ~/bin/rd_gspro.py
237/60: args
237/61: run ~/bin/rd_gspro.py -h
237/62: ls
237/63: run ~/bin/rd_gspro.py -r vbird_gsref.cmaq.cb4p25.csv
237/64: args
237/65: %tb
237/66: run ~/bin/rd_gspro.py -r vbird_gsref.cmaq.cb4p25.csv
237/67: %tb
237/68: run ~/bin/rd_gspro.py -r vbird_gsref.cmaq.cb4p25.csv
237/69: args
237/70: cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
237/71: cols[-1]
237/72: run ~/bin/rd_gspro.py -r vbird_gsref.cmaq.cb4p25.csv
237/73: fname
237/74: iarg
237/75: args
237/76: run ~/bin/rd_gspro.py -r vbird_gsref.cmaq.cb4p25.csv
237/77: x
237/78: run ~/bin/rd_gspro.py -r /home/SMOKE4.5/data/ge_dat/gsref.old
237/79: j
237/80: x
237/81: run ~/bin/rd_gspro.py -r /home/SMOKE4.5/data/ge_dat/gsref.old
237/82: j
237/83: x
237/84: x[0]
237/85: line[0]
237/86: line
237/87: skip
237/88: skip[1]
237/89: !grep POINT /home/SMOKE4.5/data/ge_dat/gsref.old
237/90: run ~/bin/rd_gspro.py -r /home/SMOKE4.5/data/ge_dat/gsref.old
238/1:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
238/2: pbm_scc=set(pbm_scc)
238/3: pbm_scc=list(set(pbm_scc))
238/4: pbm_scc.sort()
238/5: len(pbm_scc)
238/6: df_vb=read.csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/vbird_gsref.cmaq.cb4p25.csv')
238/7: from pandas import *
238/8: df_vb=read.csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/vbird_gsref.cmaq.cb4p25.csv')
238/9: df_vb=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/vbird_gsref.cmaq.cb4p25.csv')
238/10: df_vb.head(5)
239/1: from pandas import *
239/2: df_vb=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/vbird_gsref.cmaq.cb4p25.csv')
239/3:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.scc') as ftext:
    pbm_scc=[line.strip('\n') for line in ftext]
pbm_scc=list(set(pbm_scc))
pbm_scc.sort()
239/4: df_vb.head(5)
239/5: df_vb['SCC']=[str(x) for x in list(df_vb['SCC'])]
239/6: len(set(pbm_scc)-set(df_vb['SCC']))
239/7: len(set(df_vb['SCC']))
239/8: list(df_vb['SCC'])[:5]
239/9:
list(df_vb['SCC'])[-5:
]
239/10: list(df_vb['SCC'])[-5:]
239/11: pbm_scc[:5]
239/12: '10100910' in set(df_vb['SCC'])
239/13: df_VB=df_vb
239/14: df_VB_PM=df_VB[df_VB['spec']=='PM2_5']
239/15: len(set(pbm_scc)-set(df_VB_PM['SCC']))
239/16: pbm_scc2=(set(pbm_scc)-set(df_VB_PM['SCC']))
239/17: run ~/bin/rd_gspro.py -r /home/SMOKE4.5/data/inventory/nei2011/ge_dat/speciation/gsref_cb05_toxics_2011eg_nata_v6_11g_05jan2015.txt
239/18: GSREF='/home/SMOKE4.5/data/inventory/nei2011/ge_dat/speciation/gsref_cb05_toxics_2011eg_nata_v6_11g_05jan2015.txt.csv'
239/19: df=read_csv('/home/SMOKE4.5/data/inventory/nei2011/ge_dat/speciation/gsref_cb05_toxics_2011eg_nata_v6_11g_05jan2015.txt.csv',dtype=str)
239/20: df=df[df['SPEC_ID']=='PM2.5']
239/21: len(set(pbm_scc2)-set(df['SCC']))
239/22: len(df)
239/23: df=read_csv('/home/SMOKE4.5/data/inventory/nei2011/ge_dat/speciation/gsref_cb05_toxics_2011eg_nata_v6_11g_05jan2015.txt.csv',dtype=str)
239/24: df=df[df['SPEC_ID']=='PM2_5']
239/25: len(df)
239/26: len(set(pbm_scc2)-set(df['SCC']))
239/27:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/all_GSREF.nam') as ftext:
    gsref_nam=[line.strip('\n') for line in ftext]
239/28: gsref_nam[:5]
239/29: !vi /home/kuang/bin/rd_gspro.py
239/30: !cp /home/kuang/bin/rd_gspro.py ~/bin/rd_gs.py
239/31: !vi ~/bin/rd_gs.py
239/32: import /home/kuang/bin/rd_gs.py
239/33: !ln -s /home/kuang/bin/rd_gs.py .
239/34: import rd_gs
239/35: !vi ~/bin/rd_gs.py
239/36: import rd_gs
239/37: fname
239/38: fname='/home/SMOKE4.5/data/inventory/nei2011/ge_dat/speciation/gsref_cb05_toxics_2011eg_nata_v6_11g_05jan2015.txt'
239/39: dfa=rd_gs({'gsref':fname})
239/40: help(rd_gs)
239/41: from rd_gs import rd_gs
239/42: dfa=rd_gs({'gsref':fname})
239/43: !tail /home/kuang/bin/rd_gspro.py
239/44: dfa[cols].set_index(cols[0]).to_csv(fname+'.csv')
239/45: !grep cols /home/kuang/bin/rd_gspro.py
239/46: cols=['SCC','P_NUMBER','SPEC_ID']
239/47: dfa[cols].set_index(cols[0]).to_csv('b.csv')
239/48: cols[0]
239/49: dfa.head(3)
239/50: !vi ~/bin/rd_gs.py
239/51: a=rd_gs({'gsref':fname})
239/52: a
239/53: fname
239/54: from rd_gs import rd_gs
239/55: a=rd_gs({'gsref':fname})
239/56: type a
239/57: type(a)
239/58: a
239/59: from rd_gs import rd_gs
239/60: a=rd_gs({'gsref':fname})
239/61: type(a)
239/62: a
239/63: cat rd_gs
239/64: cat rd_gs.py
239/65:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
        from pandas import DataFrame,Series
        skip=['#','/','!']
        return_df={}
        for iarg in args:
                fname=args[iarg]
                if type(fname)==str:
                        if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
                        if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
                        if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
                        lns=[]
                        with open(fname) as ftext:
                                for line in ftext:
                                        if line[0] not in skip: lns.append(line.strip('\n').replace('"','').split(';'))
                                d={}
                                for i in cols:
                                        j=cols.index(i)
                                        d.update({i:Series([x[j] for x in lns])})
                                    df=DataFrame(d)
239/66:             note=[x+'!' for x in df[cols[-1]]]
239/67:             df[cols[-1]]=[x.split('!')[0] for x in note]
239/68:             df['NOTE']=[x.split('!')[1] for x in note]
239/69:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
    from pandas import DataFrame,Series
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)==str:
            if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
            if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
            if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
            lns=[]
            with open(fname) as ftext:
                for line in ftext:
                if line[0] not in skip: lns.append(line.strip('\n').replace('"','').split(';'))
                d={}
                for i in cols:
                    j=cols.index(i)
                    d.update({i:Series([x[j] for x in lns])})
                    df=DataFrame(d)
239/70:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
    from pandas import DataFrame,Series
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)==str:
            if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
            if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
            if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
            lns=[]
            with open(fname) as ftext:
                for line in ftext:
                    if line[0] not in skip: lns.append(line.strip('\n').replace('"','').split(';'))
                    d={}
                    for i in cols:
                        j=cols.index(i)
                        d.update({i:Series([x[j] for x in lns])})
                        df=DataFrame(d)
            note=[x+'!' for x in df[cols[-1]]]
                        df[cols[-1]]=[x.split('!')[0] for x in note]
239/71:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
    from pandas import DataFrame,Series
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)!=str:cotinue
        if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
        if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
        if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
        lns=[]
        with open(fname) as ftext:
            for line in ftext:
                if line[0] not in skip: lns.append(line.strip('\n').replace('"','').split(';'))
        d={}
        for i in cols:
            j=cols.index(i)
            d.update({i:Series([x[j] for x in lns])})
        df=DataFrame(d)
        note=[x+'!' for x in df[cols[-1]]]
        df[cols[-1]]=[x.split('!')[0] for x in note]
        df['NOTE']=[x.split('!')[1] for x in note]
        return_df.update({iarg:df})
    return return_df
239/72: a=rd_gs({'gsref':fname})
239/73: a
239/74: for i in a:print i
239/75: df=a['gsref']
239/76: df[cols].set_index('SCC').to_csv('b.csv')
239/77: gsref_nam
239/78: for i in
239/79:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']='PM2_5']
    for i in xrange(df):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/80:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']=='PM2_5']
    for i in xrange(df):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/81:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']=='PM2_5']
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/82: df.head(3)
239/83:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/84: lns
239/85: fname
239/86: a=rd_gs({'gsref':fname})
239/87: j
239/88: x
239/89: lns.index(x)
239/90: i
239/91: cols
239/92: a
239/93: a=rd_gs({'gsref':fname})
239/94:
args={'gsref':fname}
if len(args)!=0:
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)!=str:cotinue
        if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
        if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
        if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
        lns=[]
        with open(fname) as ftext:
            for line in ftext:
                if line[0] not in skip: lns.append(line.strip('\n').replace('"','').split(';'))
        d={}
        for i in cols:
            j=cols.index(i)
            d.update({i:Series([x[j] for x in lns])})
        df=DataFrame(d)
        note=[x+'!' for x in df[cols[-1]]]
        df[cols[-1]]=[x.split('!')[0] for x in note]
        df['NOTE']=[x.split('!')[1] for x in note]
        return_df.update({iarg:df})
239/95: lns.index(x)
239/96: lns
239/97: x
239/98:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/99:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
    from pandas import DataFrame,Series
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)!=str:cotinue
        if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
        if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
        if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
        lns=[]
        with open(fname) as ftext:
            for line in ftext:
                if line[0] not in skip and line.count(';')>=len(cols) : lns.append(line.strip('\n').replace('"','').split(';'))
        d={}
        for i in cols:
            j=cols.index(i)
            d.update({i:Series([x[j] for x in lns])})
        df=DataFrame(d)
        note=[x+'!' for x in df[cols[-1]]]
        df[cols[-1]]=[x.split('!')[0] for x in note]
        df['NOTE']=[x.split('!')[1] for x in note]
        return_df.update({iarg:df})
    return return_df
239/100:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/101: gsref_nam.index(fname)
239/102: df.columns
239/103: df.head(3)
239/104: len(df)
239/105:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/106: len(s_SCCnPRO)
239/107: list(s_SCCnPRO)[:5]
239/108: a=list(s_SCCnPRO)
239/109: a[0][1]
239/110: a[1][1]
239/111: a_scc=[x[0] for x in a]
239/112: a_scc[1]
239/113: len(pbm_scc-set(a_scc))
239/114: len(set(pbm_scc)-set(a_scc))
239/115: len(set(pbm_scc))
239/116: len(set(a_scc))
239/117: gsref_nam
239/118: set(df_VB_PM)-set(a_scc)
239/119: set(df_VB_PM['SCC'])-set(a_scc)
239/120:
s_SCCnPRO=set()
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    print fname
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/121: gsref_nam
239/122: !head /home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gsref.cmaq.cb4p25.txt
239/123: !head -n 20 /home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gsref.cmaq.cb4p25.txt
239/124:
s_SCCnPRO=set()
df=df_VB_PM.reset_index()
for i in xrange(df):
    s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    print fname
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/125:
s_SCCnPRO=set()
df=df_VB_PM.reset_index()
for i in xrange(len(df)):
    s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    print fname
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/126:
s_SCCnPRO=set()
df=df_VB_PM.reset_index()
df['P_NUMBER']=df['Prof']
for i in xrange(len(df)):
    s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    print fname
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/127: df.head(3)
239/128:
s_SCCnPRO=set()
df=df_VB_PM.reset_index()
for i in xrange(len(df)):
    s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'prof']))
for fname in gsref_nam:
    a=rd_gs({'gsref':fname})
    df=a['gsref']
    if 'PM2_5' not in set(df['SPEC_ID']):continue
    print fname
    df=df[df['SPEC_ID']=='PM2_5'].reset_index()
    for i in xrange(len(df)):
        s_SCCnPRO.add((df.loc[i,'SCC'],df.loc[i,'P_NUMBER']))
239/129: len(set(pbm_scc)-set(a_scc))
239/130: a=list(s_SCCnPRO)
239/131: a_scc=[x[0] for x in a]
239/132: len(set(pbm_scc)-set(a_scc))
239/133: a_pro=[x[1] for x in a]
239/134: df=DataFrame({'SCC':a_scc,'P_NUMBER':a_pro})
239/135: df_1=df[df['SCC'].map(lambda x:x in pbm_scc)]
239/136: len(df_1)
239/137: len(set(df_1['SCC']))
239/138: df_a
239/139: df_1
239/140: df_1.set_index('SCC').to_csv('found.csv')
239/141: history
239/142: %history -g -f history.170702.pm.py
239/143: !vi history.170702.pm.py
239/144: df_scc=read_csv('/home/SMOKE4.5/data/ge_dat/sic_desc.csv')
239/145: pbm_scc2=(set(pbm_scc)-set(df_1['SCC']))
239/146: len(pbm_scc2)
239/147: df_scc.columns
239/148: df_scc.head(3)
239/149: %history -g -f history.all.py
239/150: fname='SCC_Codes.xlsx'
239/151: from pandas import DataFrame
239/152: from openpyxl import Workbook, load_workbook
239/153: wb= load_workbook(fname,data_only='true')
239/154: fname='/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/SCC_Codes.xlsx'
239/155: wb= load_workbook(fname,data_only='true')
239/156: ws=wb['SCC Codes']
239/157: data = ws.values
239/158: cols = next(data)[1:]
239/159: data = list(data)
239/160: idx = [r[0] for r in data]
239/161: data = (islice(r, 1, None) for r in data)
239/162: df_scc = DataFrame(data, index=idx, columns=cols)
239/163: from itertools import islice
239/164: df_scc = DataFrame(data, index=idx, columns=cols)
239/165: df_scc.set_index('SCC').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/SCC_Codes.csv')
239/166: data = (islice(r, 1, None) for r in data)
239/167: df_scc = DataFrame(data, index=idx, columns=cols)
239/168: df_scc.head(4)
239/169: cols
239/170: idx
239/171: idx = [r[1] for r in data]
239/172: idx[:5]
239/173: data
239/174: data = ws.values
239/175: cols = next(data)[1:]
239/176: cols
239/177: l_data = list(data)
239/178: l_data[0]
239/179: idx = [r for r in xrange(len(l_data))]
239/180: l_data2= (islice(r, 1, None) for r in l_data)
239/181: ldata2[0]
239/182: l_data2[0]
239/183: l_data2
239/184: df_scc = DataFrame(l_data2, index=idx, columns=cols)
239/185: df_scc.head(4)
239/186: df_scc.set_index('SCC').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/SCC_Codes.csv')
239/187: history
239/188: run /home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/SCC_Codes.py
239/189: len(pbm_scc2)
239/190: df_scc2=df_scc[df_scc['SCC'].map(lambda x: x in pbm_scc2)]
239/191: df_gspro=read_csv('/home/camxruns/2013/ptse/SPECIATE4.5/GAS_PROFILE.csv')
239/192: df_scc2.head(5)
239/193: type(list(df_scc['SCC'])[0])
239/194: df_scc['SCC']=[str(x) for x in list(df_scc['SCC'])]
239/195: df_scc2=df_scc[df_scc['SCC'].map(lambda x: x in pbm_scc2)]
239/196: df_scc2.head(5)
239/197: df_scc2=df_scc2.reset_index()
239/198: len(df_scc2)
239/199: df_scc2.head(5)
239/200: df_scc2['P_NUMBER']=['0000' for x in xrange(len(df_scc2))]
239/201: df_scc2[1,'P_NUMBER']='0025'
239/202: df_scc2[0,'P_NUMBER']='0333'
239/203: df[df['SCC_L4'].map(lambda x: 'dryer' in x.lower())]
239/204: df_scc2[df_scc2['SCC_L4'].map(lambda x: 'dryer' in x.lower())]
239/205: df_scc2[1,'P_NUMBER'][0]='0025'
239/206: df_scc2.loc[1,'P_NUMBER']='0025'
239/207: df_scc2.loc[0,'P_NUMBER']='0333'
239/208: del df_scc['(1, P_NUMBER)']
239/209: del df_scc['1, P_NUMBER']
239/210: del df_scc['1\, P_NUMBER']
239/211: df_scc2.columns
239/212: c=df_scc2.columns
239/213: c[7:8]
239/214: c[7:9]
239/215: del df_scc[c[7]]
239/216: df_scc2.head(5)
239/217: del df_scc[(1\, 'P_NUMBER')]
239/218: df_scc2.loc[2,'P_NUMBER']='1033'
239/219: df_scc2.loc[3,'P_NUMBER']='1032'
239/220: df_scc2.loc[4,'P_NUMBER']='1034'
239/221: df_scc2.head(10)
239/222: df_scc2.(5:10)
239/223: df_scc2(5:10)
239/224: df_scc2.head(5:10)
239/225: df_scc2.loc(5:10)
239/226:
for i in xrange(5,10):
    print df_scc2.loc[i]
239/227: del df_scc2['index']
239/228:
for i in xrange(5,10):
    print df_scc2.loc[i]
239/229: df_scc2.loc[5,'P_NUMBER']='1091'
239/230: df_scc2.head(3)
239/231: df_scc2.loc[6,'P_NUMBER']='0333'
239/232: df_scc2.loc[7,'P_NUMBER']='1091'
239/233: df_scc2.set_index('SCC').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_scc2.csv')
240/1: from pandas import *
240/2: df_scc2=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_scc2.csv
240/3: df_scc2=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_scc2.csv')
240/4: col=df_scc2.columns
240/5: col
240/6: col[:-2]
240/7: col=col[:-2]
240/8: col
240/9: df_scc2[col].set_index('SCC').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_scc2.csv')
240/10: df_scc2=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_scc2.csv')
240/11: col=df_scc2.columns
240/12: col
240/13: df_scc2['SCC','P_NUMBER'].set_index('SCC').to_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/not_found.csv')
240/14: c=['SCC','P_NUMBER']
240/15: df_scc2[c].set_index('SCC').to_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/not_found.csv')
241/1: from pandas import *
241/2: df=read_csv('found.csv')
241/3: df.head(10)
241/4: set(df['P_NUMBER'])
241/5: df=read_csv('not_found.csv')
241/6: set(df['P_NUMBER'])
241/7: df['P_NUMBER']=[(4-len(x))*'0'+str(x) for x in list(df['P_NUMBER'])]
241/8: df['P_NUMBER']=[(4-len(str(x)))*'0'+str(x) for x in list(df['P_NUMBER'])]
241/9: set(df['P_NUMBER'])
241/10: df.set_index('SCC').to_csv('not_found.csv',dtype=str)
241/11: df.set_index('SCC').to_csv('not_found.csv')
241/12: !head not_found.csv
240/16: !pwd
240/17: from rd_gs import rd_gs
240/18: a=rd_gs({'gspro':'/home/SMOKE4.5/data/ge_dat/gspro.cmaq_cb05_soa.txt'})
240/19: a.head(3)
240/20: list(a)[:5]
240/21: df=a['gspro']
240/22: df.head(3)
240/23: PM2_5 in set(df['POLL_ID'])
240/24: 'PM2_5' in set(df['POLL_ID'])
240/25: df_PM2_5=df[df['POLL_ID']=='PM2_5']
240/26: len(df_PM2_5),len(df)
240/27: df_PM2_5.head(20)
240/28: set(df_PM2_5['P_NUMBER'])
240/29: len(set(df_PM2_5['P_NUMBER']))
240/30: !pwd
240/31: df_found=read_csv('/home/SMOKE4.5/subsys/smoke/scripts/run/found.csv',dtype=str)
240/32: set(df_found['P_NUMBER']))
240/33: set(df_found['P_NUMBER'])
240/34: df.columns
240/35: set(df_found['P_NUMBER'])-set(df_PM2_5['P_NUMBER'])
240/36: df_pmpro=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_PROFILE.csv')
240/37: !cat /home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_PROFILE.csv.columns
240/38: set(df_found['P_NUMBER'])-set(df_pmpro['P_NUMBER'])
240/39: len(set(df_found['P_NUMBER'])-set(df_pmpro['P_NUMBER']))
240/40: len(set(df_found['P_NUMBER']))
240/41:
for i in xrange(51,62):
    print df_scc2.loc[i]
240/42: df_scc2.loc[53]
240/43: df_scc2.loc[53,'P_NUMBER']='91107'
240/44: df_scc2.loc[53,'P_NUMBER']='92107'
240/45: df_scc2.loc[53,'P_NUMBER']='91107'
240/46: df_point=read_csv('point.csv')
240/47: cols_point=df_point.columns
240/48: cols_point[30]
240/49: set(df_point['ASSUME_H'])
240/50: df_orl=read_csv('df_orl.csv')
240/51: !ls *.csv
240/52: df_pv=read_csv('df_pv.csv')
240/53: a=df_pv[df_pv['SCC']=='40200928']
240/54: a=df_pv[df_pv['SCC']==40200928]
240/55: a
240/56: !grep 40200928 df_orl.csv
240/57: !pwd
240/58:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.pro') as ftext:
    err_PM2_5.pro=[line.strip('\n') for line in ftext]
240/59:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.pro') as ftext:
    err_pro=[line.strip('\n') for line in ftext]
240/60: len(set(err_pro))
240/61: len(df_pmpro)
240/62: set(err_pro)-set(df_pmpro['P_NUMBER'])
240/63: len(set(err_pro)-set(df_pmpro['P_NUMBER']))
240/64: df_gspro=read_csv('/home/camxruns/2013/ptse/SPECIATE4.5/GAS_PROFILE.csv')
240/65: len(set(err_pro)-set(df_gspro['P_NUMBER']))
240/66: (set(err_pro)-set(df_gspro['P_NUMBER']))
240/67:
for i in xrange(51,62):
    print df_scc2.loc[i]
240/68: len(set(err_pro))
240/69: err_pro2=set()
240/70:
for i in set(err_pro):
    if int(i)>10000:err_pro2.add(i)
240/71: len(err_pro2)
240/72: not_in_pmpro=err_pro2-set(df_pmpro['P_NUMBER'])
240/73: len(not_in_pmpro)
240/74:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/all_GSPRO.nam') as ftext:
    gspro_nam=[line.strip('\n') for line in ftext]
240/75: d_fn_pro={}
240/76: from rd_gs import rd_gs
240/77:
d_fn_pro=set()
for n in gspro_nam:
    if 'vbird' in i:
        with open(i) as ftext:
            pro=[line.strip('\n').split(' ')[0] for line in ftext]
        for p in pro:
            d_fn_pro.add((p,n))
    else:
        a=rd_gs('gspro',n)
        df=a['gspro']
        for p in set(df['P_NUMBER']):
            d_fn_pro.add((p,n))
240/78:
d_fn_pro=set()
for n in gspro_nam:
    if 'vbird' in i:
        with open(i) as ftext:
            pro=[line.strip('\n').split(' ')[0] for line in ftext]
        for p in pro:
            d_fn_pro.add((p,n))
    else:
        a=rd_gs({'gspro':n})
        df=a['gspro']
        for p in set(df['P_NUMBER']):
            d_fn_pro.add((p,n))
240/79:
def rd_gs(args):#args={'gsref':fnameR,'gspro':fnameP,'gscnv':fnameC}
    from pandas import DataFrame,Series
    skip=['#','/','!']
    return_df={}
    for iarg in args:
        fname=args[iarg]
        if type(fname)!=str:cotinue
        if iarg=='gspro':cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
        if iarg=='gsref':cols=['SCC','P_NUMBER','SPEC_ID']
        if iarg=='gscnv':cols=['ID_FROM','ID_TO','CONV_FAC']
        lns=[]
        with open(fname) as ftext:
            for line in ftext:
                if line[0] not in skip and line.count(';')>=len(cols) : lns.append(line.strip('\n').replace('"','').split(';'))
        d={}
        for i in cols:
            j=cols.index(i)
            d.update({i:Series([x[j] for x in lns])})
        df=DataFrame(d)
        note=[x+'!' for x in df[cols[-1]]]
        df[cols[-1]]=[x.split('!')[0] for x in note]
        df['NOTE']=[x.split('!')[1] for x in note]
        return_df.update({iarg:df})
    return return_df
240/80:
d_fn_pro=set()
for n in gspro_nam:
    if 'vbird' in i:
        with open(i) as ftext:
            pro=[line.strip('\n').split(' ')[0] for line in ftext]
        for p in pro:
            d_fn_pro.add((p,n))
    else:
        a=rd_gs({'gspro':n})
        df=a['gspro']
        for p in set(df['P_NUMBER']):
            d_fn_pro.add((p,n))
240/81: history
240/82: !vi rd_gs.py
240/83: len(d_fn_pro)
240/84: (d_fn_pro)
240/85: gspro_nam
240/86: !head /home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cbiv.beis3.txt
240/87: 'vbird' in '/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cbiv.beis3.txt'
240/88:
d_fn_pro=set()
for n in gspro_nam:
    if 'vbird' in n:
        with open(n) as ftext:
            pro=[line.strip('\n').split(' ')[0] for line in ftext]
        for p in pro:
            if p[0]!='\#':d_fn_pro.add((p,n))
    else:
        a=rd_gs({'gspro':n})
        df=a['gspro']
        for p in set(df['P_NUMBER']):
            d_fn_pro.add((p,n))
240/89: p
240/90: d_fn_pro
240/91: len(d_fn_pro)
240/92: s=set([x[0] for x in d_fn_pro])
240/93: err_pro2-s
240/94: len(err_pro2)
240/95: len(not_in_pmpro)
240/96: not_in_pmpro-s
240/97: s=list([x[0] for x in d_fn_pro])
240/98: s.sort()
240/99:
for i in  not_in_pmpro:
    print i,s.count(i)
240/100: f=set([x[1] for x in d_fn_pro])
240/101:
for i in  not_in_pmpro:
    for j in xrange(len(s)):
        if i==s[j]:
            print i,f[j]
240/102: s=list([x[0] for x in d_fn_pro])
240/103: f=list([x[1] for x in d_fn_pro])
240/104:
for i in  not_in_pmpro:
    for j in xrange(len(s)):
        if i==s[j]:
            print i,f[j]
240/105: !grep 22040 /home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.saprc99pm.abp.txt
240/106: !grep 22040 /home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.cb4p25.txt
240/107:
cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
for n in gspro_nam:
    if 'vbird' in n:
        with open(n) as ftext:
            pro_df=[line.strip('\n').split(' ') for line in ftext]
        break
240/108: len(pro_df)
240/109: pro_df[0]
240/110:
for n in gspro_nam:
    if 'vbird' in n:
        with open(n) as ftext:
            pro_df=[line.strip('\n').split() for line in ftext]
        break
240/111: pro_df[0]
240/112: len(pro_df)
240/113:
n='/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/gspro.cmaq.saprc99pm.abp.txt'
with open(n) as ftext:
    pro_df=[line.strip('\n').split() for line in ftext]
240/114: len(pro_df)
240/115:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:[x[i] for x in pro_df]})
240/116: i
240/117: x
240/118:
n='/home/SMOKE4.5/subsys/smoke/scripts/run/gspro.vbird.txt'
with open(n) as ftext:
    pro_df=[line.strip('\n').split() for line in ftext]
240/119: len(pro_df)
240/120:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:[x[i] for x in pro_df]})
240/121: len(d)
240/122: d
240/123: df_vb=DataFrame(d)
240/124: df_vb_PM=df_vb[df_vb['POLL_ID']=='PM2_5']
240/125: len(df_vb_PM)
240/126: not_in_pmpro - set(df_vb_PM['P_NUMBER'])
240/127: df_vb_PM2=df_vb_PM[df_vb_PM['P_NUMBER'].map(lambda x: x in not_in_pmpro)]
240/128: df_vb_PM2
240/129: df_vb_PM2=df_vb_PM2.reset_index()
240/130: pivot_table[df_vb_PM2,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=sum)
240/131: import numpy as np
240/132: pivot_table(df_vb_PM2,index=['P_NUMBER'],values=['Mass_frac'],aggfunc=np.sum)
240/133: pivot_table(df_vb_PM2,index=['P_NUMBER'],values=['MASS_FRAC'],aggfunc=np.sum)
240/134: df_vb_PM2['MASS_FRAC']=[float(x) for x in df_vb_PM2['MASS_FRAC']]
240/135: pivot_table(df_vb_PM2,index=['P_NUMBER'],values=['MASS_FRAC'],aggfunc=np.sum)
240/136: df_vb_PM2.head(3)
240/137: del df_vb_PM2[index]
240/138: del df_vb_PM2['index']
240/139: df_vb_PM2.head(3)
240/140: df_vb_PM2[cols].head(3)
240/141: df_vb_PM2[cols].set_index('P_NUMBER').to_csv('df_vb_PM2_5')
240/142: !pwd
240/143: df_vb_PM2[cols].set_index('P_NUMBER').to_csv('df_vb_PM2_5.csv')
240/144: set(df_vb_PM2['P_NUMBER'])-not_in_pmpro
242/1: from pandas import *
242/2: fd_vb=read_csv('df_vb_PM2_5.csv')
242/3:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.pro') as ftext:
    err_pro=[line.strip('\n') for line in ftext]
243/1: from pandas import *
243/2: df_vb=read_csv('df_vb_PM2_5.csv')
243/3:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.pro') as ftext:
    err_pro=[line.strip('\n') for line in ftext]
    err_pro=set(err_pro)
243/4: found=err_pro-set(df_vb['P_NUMBER'])
243/5: found
243/6: df_vb['P_NUMBER']=[str(x) for x in df_vb['P_NUMBER']]
243/7: found=err_pro-set(df_vb['P_NUMBER'])
243/8: found
243/9: df_pmpro=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_PROFILE.csv')
243/10: found-set(df_pmpro['P_NUMBER'])
243/11: df_spec=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_spec.csv',dtype={'P_NUMBER':str})
243/12: df_spec.head(4)
243/13: df_found=df_pmpro[df_pmpro['P_NUMBER'].map(lambda x:x in found)]
243/14: df_found
244/1: from pandas import *
244/2:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/err_PM2_5.pro') as ftext:
    err_pro=[line.strip('\n') for line in ftext]
    err_pro=set(err_pro)
244/3: df_vb=read_csv('df_vb_PM2_5.csv')
244/4: df_vb['P_NUMBER']=[str(x) for x in df_vb['P_NUMBER']]
244/5: found=err_pro-set(df_vb['P_NUMBER'])
244/6: df_pmpro=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_PROFILE.csv')
244/7: df_found=df_pmpro[df_pmpro['P_NUMBER'].map(lambda x:x in found)]
244/8: df_found
244/9: df_pmspec=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_SPECIES.csv')
244/10: df_found=df_pmspec[df_pmspec['P_NUMBER'].map(lambda x:x in found)]
244/11: df_found.head(3)
244/12: df_pmspec=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/../../SPECIATE4.5/PM_SPECIES.csv',dtype={'P_NUMBER':str})
244/13: df_found=df_pmspec[df_pmspec['P_NUMBER'].map(lambda x:x in found)]
244/14: df_found.head(3)
244/15: df_property=read_csv('/home/camxruns/2013/ptse/SPECIATE4.5/PM_PROFILE.csv')
244/16: df_property.head(5)
244/17: df_property=read_csv('/home/camxruns/2013/ptse/SPECIATE4.5/PM_SPECIES.csv')
244/18: df_property.head(5)
244/19: df_property=read_csv('/home/camxruns/2013/ptse/SPECIATE4.5/SPECIES_PROPERTIES.csv')
244/20: df_property.head(5)
244/21: df_found.head(3)
244/22: co=df_found.columns
244/23: del df_found[co[0]]
244/24: del df_found[co[4]]
244/25: del df_found[co[5]]
244/26: df_found.head(3)
244/27: co
244/28: del df_found[co[6]]
244/29: df_found=df_found.reset_index()
244/30:
id=list(df_property['ID'])
for i in xrange(len(df_found)):
    id_i=df_found.loc[i,'SPECIES_ID']
    if id_i in id:
        df_found.loc[i,'SPECIES_ID']=list(df_property.loc[df_property['ID']==id_i,'NAME'])[0]
244/31: df_found.head(3)
244/32: del df_found['index']
244/33: set(df_found['SPECIES_ID'])
244/34: df_found.set_index('P_NUMBER').to_csv('df_found_PM.csv')
244/35: df_found.head(30)
244/36: df_vb.head(10)
244/37: set(df_found['SPECIES_ID'])
244/38: s=set(df_found['SPECIES_ID'])
244/39: %history -g -f history.all2.py
245/1: from pandas import *
245/2: df_found_PM=read_csv('df_found_PM.csv')
245/3: df_found_PM.head(10)
245/4: s=set(df_found_PM['SPECIES_ID'])
245/5: s
245/6: !pwd
245/7:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/camx.spec') as ftext:
    camx_spec=[line.strip('\n') for line in ftext]
245/8: camx_spec
245/9:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/camx.spec') as ftext:
    camx_spec=[line.strip('\n') for line in ftext]
245/10: camx_spec
245/11:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/camx.spec') as ftext:
    camx_spec=[line.strip('\n') for line in ftext]
245/12: camx_spec
245/13: len(camx_spec)
245/14:
for i in xrange(38):
    print i,camx_spec[i]
245/15: s
245/16: l_spec=list(s)
245/17: l_spec.sort()
245/18: l_spec
245/19: camx_spec
245/20: df=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/d_spec_PM.csv')
245/21: l_spec
245/22:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID']:df.loc[i,'POLL_ID']})
245/23: d_spec_PM['Zinc']
245/24: 'Zinc'
245/25: d_spec_PM
245/26:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID'].remove[0]:df.loc[i,'POLL_ID'].remove[0]})
245/27:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID'].replace(' ',''):df.loc[i,'POLL_ID'].replace(' ','')})
245/28: d_spec_PM['Zinc']
245/29: df=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/d_spec_PM.csv')
245/30:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID'].replace(' ',''):df.loc[i,'POLL_ID'].replace(' ','')})
245/31: d_spec_PM['Zinc']
245/32: df_found_PM.head(10)
245/33:
for i in xrange(len(df_found_PM)):
    s=df_found_PM.loc[i,'SPECIES_ID']
    if s in d_spec_PM:
        df_found_PM.loc[i,'SPECIES_ID']=d_spec_PM[s]
    else:
        print s
245/34: df=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/d_spec_PM.csv')
245/35: d_spec_PM['Zinc']
245/36:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID'].replace(' ',''):df.loc[i,'POLL_ID'].replace(' ','')})
245/37:
for i in xrange(len(df_found_PM)):
    s=df_found_PM.loc[i,'SPECIES_ID']
    if s in d_spec_PM:
        df_found_PM.loc[i,'SPECIES_ID']=d_spec_PM[s]
    else:
        print s
245/38: d_spec_PM['Other Unspeciated PM2.5']
245/39: df=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/d_spec_PM.csv')
245/40: df
245/41:
d_spec_PM={}
for i in xrange(len(df)):
    d_spec_PM.update({df.loc[i,'SPEC_ID']:df.loc[i,'POLL_ID']})
245/42:
for i in xrange(len(df_found_PM)):
    s=df_found_PM.loc[i,'SPECIES_ID']
    if s in d_spec_PM:
        df_found_PM.loc[i,'SPECIES_ID']=d_spec_PM[s]
    else:
        print s
245/43: df_found_PM.head(10)
245/44: df_found_PM['WEIGHT_PER']=[round(x/100,6) for x in df_found_PM['WEIGHT_PER']]
245/45: pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum)
245/46: df=pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum)
245/47: df
245/48:
for i in xrange(len(df_found_PM)):
    p=df_found_PM.loc[i,'P_NUMBER']
    f=df.loc[df['P_NUMBER']==p,'WEIGHT_PER']
    df_found_PM.loc[i,'P_NUMBER']=df_found_PM.loc[i,'P_NUMBER']/f
245/49: df=df.reset_index()
245/50:
for i in xrange(len(df_found_PM)):
    p=df_found_PM.loc[i,'P_NUMBER']
    f=df.loc[df['P_NUMBER']==p,'WEIGHT_PER']
    df_found_PM.loc[i,'P_NUMBER']=df_found_PM.loc[i,'P_NUMBER']/f
245/51:
for i in xrange(len(df_found_PM)):
    p=df_found_PM.loc[i,'P_NUMBER']
    f=list(df.loc[df['P_NUMBER']==p,'WEIGHT_PER'])[0]
    df_found_PM.loc[i,'P_NUMBER']=df_found_PM.loc[i,'P_NUMBER']/f
245/52: pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum)
245/53: f
245/54:  df
245/55: df_found_PM.head(10)
245/56: df_found_PM=read_csv('df_found_PM.csv')
245/57:
for i in xrange(len(df_found_PM)):
    s=df_found_PM.loc[i,'SPECIES_ID']
    if s in d_spec_PM:
        df_found_PM.loc[i,'SPECIES_ID']=d_spec_PM[s]
    else:
        print s
245/58: df_found_PM['WEIGHT_PER']=[round(x/100,6) for x in df_found_PM['WEIGHT_PER']]
245/59: pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum)
245/60: df=pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum).reset_index()
245/61: df
245/62:
for i in xrange(len(df_found_PM)):
    p=df_found_PM.loc[i,'P_NUMBER']
    f=list(df.loc[df['P_NUMBER']==p,'WEIGHT_PER'])[0]
    df_found_PM.loc[i,'WEIGHT_PER']=df_found_PM.loc[i,'WEIGHT_PER']/f
245/63: df_found_PM.head(10)
245/64: pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum)
245/65: l=len(df_found_PM)
245/66: df_found_PM['Divider']=[1.0 for x in xrange(l)]
245/67: df_found_PM['POLL_ID']=['PM2_5' for x in xrange(l)]
245/68: df_found_PM['Split_fac']=[x for x in df_found_PM['WEIGHT_PER']]
245/69: df_found_PM.head(10)
245/70: col=["P_NUMBER";"POLL_ID";"SPECIES_ID";"Split_fac";"Divider";"WEIGHT_PER"]
245/71: col=["P_NUMBER","POLL_ID","SPECIES_ID","Split_fac","Divider","WEIGHT_PER"]
245/72: df_found_PM[col].set_index('P_NUMBER').to_csv('gsproPM.csv',sep=';', quoting=csv.QUOTE_NONNUMERIC)
245/73: import csv
245/74: df_found_PM[col].set_index('P_NUMBER').to_csv('gsproPM.csv',sep=';', quoting=csv.QUOTE_NONNUMERIC)
245/75: df_found_PM[col].set_index('P_NUMBER').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/gsproPM.csv',sep=';', quoting=csv.QUOTE_NONNUMERIC)
245/76: !pwd
245/77: df
245/78:
for p in set(df['P_NUMBER']):
    df_p=df_found_PM[df_found_PM['P_NUMBER']==p]
    df=pivot_table(df_p,index=['SPECIES_ID'],values=['WEIGHT_PER','Split_fac'],aggfunc=sum).reset_index()    l=len(df)
245/79:
new=1
for p in set(df['P_NUMBER']):
    df_p=df_found_PM[df_found_PM['P_NUMBER']==p]
    df=pivot_table(df_p,index=['SPECIES_ID'],values=['WEIGHT_PER','Split_fac'],aggfunc=sum).reset_index()
    l=len(df)
    df['P_NUMBER']=[p for x in xrange(l)]
    df['Divider']=[1.0 for x in xrange(l)]
    df['POLL_ID']=[1.0 for x in xrange(l)]
    if new==1:
        df_new=df
        new=0
    else:
        df_new=df_new.append(df).reset_index()
        del df_new['index']
245/80: len(df_new)
245/81: len(df_found_PM)
245/82: df_new
245/83: df_new[col]
245/84:
new=1
for p in set(df['P_NUMBER']):
    df_p=df_found_PM[df_found_PM['P_NUMBER']==p]
    df=pivot_table(df_p,index=['SPECIES_ID'],values=['WEIGHT_PER','Split_fac'],aggfunc=sum).reset_index()
    l=len(df)
    df['P_NUMBER']=[p for x in xrange(l)]
    df['Divider']=[1.0 for x in xrange(l)]
    df['POLL_ID']=['PM2_5' for x in xrange(l)]
    if new==1:
        df_new=df
        new=0
    else:
        df_new=df_new.append(df).reset_index()
        del df_new['index']
245/85: df_new[col]
245/86: df=pivot_table(df_found_PM,index=['P_NUMBER'],values=['WEIGHT_PER'],aggfunc=sum).reset_index()
245/87: df
245/88:
new=1
for p in set(df['P_NUMBER']):
    df_p=df_found_PM[df_found_PM['P_NUMBER']==p]
    df=pivot_table(df_p,index=['SPECIES_ID'],values=['WEIGHT_PER','Split_fac'],aggfunc=sum).reset_index()
    l=len(df)
    df['P_NUMBER']=[p for x in xrange(l)]
    df['Divider']=[1.0 for x in xrange(l)]
    df['POLL_ID']=['PM2_5' for x in xrange(l)]
    if new==1:
        df_new=df
        new=0
    else:
        df_new=df_new.append(df).reset_index()
        del df_new['index']
245/89: df_new[col]
245/90: df_new[col].set_index('P_NUMBER').to_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/gsproPM.csv',sep=';', quoting=csv.QUOTE_NONNUMERIC)
245/91: df_new[col].set_index('P_NUMBER').to_csv('gsproPM.csv',sep=';', quoting=csv.QUOTE_NONNUMERIC)
245/92: !pwd
245/93: df_vb=read_csv('df_vb_PM2_5.csv')
245/94: df_vb.head(5)
245/95: set(df_vb['SPEC_ID'])
245/96: d_spec_PM2={'PEC':'PEC','POA':'POC','PNO3':'PNO3','PSO4':'PSO4','PMFINE':'FPRM'}
246/1:
with open('maco.sfc') as ftext:
    met=[line.strip('\n') for line in ftext]
met=met[1:]
246/2: met[0]
246/3:
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
met[0]
246/4:
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
min(monin), max(monin)
246/5:
import numpy as np
import matplotlib.pyplot as plt
bins = np.linspace(-1.0,0.3, 100)
plt.hist(a, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()
246/6:
import numpy as np
import matplotlib.pyplot as plt
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("Hue Histogram")
plt.xlabel("Hue")
plt.ylabel("Frequency")

fig = plt.gcf()
246/7:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/Z Histogram")
plt.xlabel("1/Z (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
py.iplot(fig, filename='hist')
246/8:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/Z Histogram")
plt.xlabel("1/Z (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
246/9:
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
min(monin), max(monin) ,len(monin)
246/10:
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
min(monin), max(monin) ,len(monin)
246/11:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/L Histogram")
plt.xlabel("1/L (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
246/12:
import numpy as np
from pandas import *
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix})
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=np.mean])
min(monin), max(monin) ,len(monin)
df_v
246/13:
import numpy as np
from pandas import *
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix})
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=np.mean)
min(monin), max(monin) ,len(monin)
df_v
246/14:
import numpy as np
from pandas import *
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix.clap(0),'MMIX':mmix})
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=np.mean)
min(monin), max(monin) ,len(monin)
df_v
246/15:
import numpy as np
from pandas import *
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix.clip(0),'MMIX':mmix})
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=np.mean)
min(monin), max(monin) ,len(monin)
df_v
246/16:
import numpy as np
from pandas import *
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=np.mean)
min(monin), max(monin) ,len(monin)
df_v
246/17:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive)
min(monin), max(monin) ,len(monin)
df_v
246/18:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR'],list(df_v['CMIX'], label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR'],list(df_v['MMIX'], label = "Mechanical MIXH".format(0))
plt.xlabel("Hour of day")             
plt.ylabel("c-MIXH or m-MIXH(m)")
x.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/19:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR'],list(df_v['CMIX'], label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR'],list(df_v['MMIX'], label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")             
plt.ylabel("c-MIXH or m-MIXH(m)")
x.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/20:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR'],list(df_v['CMIX'], label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR'],list(df_v['MMIX'], label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
x.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/21:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
x.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/22:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
246/23:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
x.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/24:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/25:
fig, ax = plt.plots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/26:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
246/27:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.05, 1), loc=1, borderaxespad=0.)
plt.show()
246/28:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.0, 1), loc=1, borderaxespad=0.)
plt.show()
246/29:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.9, 1), loc=1, borderaxespad=0.)
plt.show()
246/30:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(1.0, 0.9), loc=1, borderaxespad=0.)
plt.show()
246/31:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.95, 0.9), loc=1, borderaxespad=0.)
plt.show()
246/32:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.9), loc=1, borderaxespad=0.)
plt.show()
246/33:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.9), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
246/34:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
246/35:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
246/36:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/L Histogram")
plt.xlabel("1/L (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
246/37:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
#fig = plt.gcf()
#plot_url = py.plot_mpl(fig, filename='line_plot')
246/38: 101/73
246/39: 101./73.
246/40:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
246/41:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/L Histogram")
plt.xlabel("1/L (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
246/42:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
#fig = plt.gcf()
#plot_url = py.plot_mpl(fig, filename='line_plot')
246/43:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
248/1:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
248/2:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/L Histogram")
plt.xlabel("1/L (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
248/3:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
248/4:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
249/1:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:E', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[3]]))
wdeg=np.array(list(wind_df[cols[2]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
249/2: !pip install colorlover
249/3:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:E', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[3]]))
wdeg=np.array(list(wind_df[cols[2]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
249/4: wdeg
249/5:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:G', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[7]]))
wdeg=np.array(list(wind_df[cols[6]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
249/6:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:H', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[7]]))
wdeg=np.array(list(wind_df[cols[6]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
249/7:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:H', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[7]]))
wdeg=np.array(list(wind_df[cols[6]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot_mpl(fig, filename='pandas-wind-rose-chart')
249/8:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:H', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[7]]))
wdeg=np.array(list(wind_df[cols[6]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot_mpl(fig, filename='polar-area-chart')
249/9: plot_url = py.plot(fig, filename='polar-area-chart')
249/10:
import plotly.plotly as py
import plotly.graph_objs as go
from numpy import *
from pandas import *
import colorlover as cl
#import plotly.tools as tls
#tls.set_credentials_file(username='sinotec2',api_key='yuxyoghypd')

wind_df = read_csv('wind.txt', index_col=0, sep='\t')
orient = list(wind_df.columns)
intense = list(wind_df.index)
wind_bins_df = wind_df.stack()
wind_bins_df = wind_bins_df.reset_index()
wind_bins_df.columns = ['intensity', 'direction', 'freq'] 
(m,n)=(len(intense),len(orient))
rev=list(reversed(intense))
cum=array(m*[n*[0.0]])
freq=cum
for i in xrange(m):
    ff=wind_bins_df[wind_bins_df['intensity']==intense[i]]
    freq[i,:]=list(ff['freq']*100)
for j in xrange(n): 
    cum[:,j]=cumsum(freq[:,j])
trace=[]
for i in xrange(9,0,-1): # for each level of wind speed(intensity)
    item = go.Area(
        r=list(cum[i,0:16]),
        t=orient[0:16],        
        marker=dict(color=cl.scales['10']['div']['PRGn'][i]),#'rgb(252,141,89)'), 
        name=intense[i] + ' m/s' )
    trace.append(item)
layout = go.Layout(
    title='Wind Speed Distribution in Laurel, NE',
    font=dict(
        size=16
    ),
    legend=dict(
        font=dict(
            size=16
        )
    ),
    radialaxis=dict(
        ticksuffix='%'
    ),
    orientation=270
)
fig = go.Figure(data=trace, layout=layout)
py.iplot(fig, filename='polar-area-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
249/11:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../da_tan_shan/TG_Hr_2011-2016.xlsx'#2015_九澳氣象站_氣象資料.xlsx'
wind_df = pd.read_excel(fname,skiprows=1, parse_cols = 'A:H', 
                     na_values=['NA'], convert_float=True)
cols=wind_df.columns
wspd=np.array(list(wind_df[cols[7]]))
wdeg=np.array(list(wind_df[cols[6]]))      
ws=[]
wd=[]
for i in xrange(len(wspd)):
    if wspd[i]!='---':
        ws.append(float(wspd[i])/3.6)
    else:
        ws.append(0.)
    if wdeg[i]=='---':
        wd.append(0.)
    else:
        fw=float(wdeg[i])
        if fw <= 360:
            wd.append(fw)
        else:
            wd.append(0.)
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
#calculate the joint frequency(probabilities)        
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notations
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plotly website
#plot_url = py.plot(data, filename='polar-area-chart')
250/1: from pandas import *
250/2: df_vb=read_csv('df_vb_PM2_5.csv')
250/3: df_vb.head(5)
250/4: len(df_vb)
250/5: list(df_vb['SPEC_ID']).count('PMFINE')
250/6: df_vb.loc[df_vb['SPEC_ID']=='PMFINE','SPEC_ID']='FPRM'
250/7: df_vb.head(5)
250/8: df_vb.loc[df_vb['SPEC_ID']=='POA','SPEC_ID']='POC'
250/9: set(df_vb['SPEC_ID'])
250/10: df_vb_PM2[cols].set_index('P_NUMBER').to_csv('df_vb_PM2_5.csv')
250/11: cols
250/12: cols=['P_NUMBER','POLL_ID','SPEC_ID','SPLIT_FAC','DIVISOR','MASS_FRAC']
250/13: df_vb[cols].set_index('P_NUMBER').to_csv('df_vb_PM2_5.csv',sep=';')
250/14: !head df_vb_PM2_5.csv
250/15: !grep sep\= *py
250/16: !grep csv\. *py
250/17: !grep QUOTE *py
250/18: import csv
250/19: df_vb[cols].set_index('P_NUMBER').to_csv('df_vb_PM2_5.csv',sep=';',quoting=csv.QUOTE_NONNUMERIC)
250/20: !head df_vb_PM2_5.csv
250/21: !cp df_vb_PM2_5.csv gsproPM_vb.add
250/22: !sed -i '1d' gsproPM_vb.add
250/23: !sed -i 's/$/\! add by YCKuang/g' gsproPM_vb.add
251/1: vi *_2.py
251/2: !vi *_2.py
251/3: run *_2.py
251/4: ls *py
251/5: run csv2orl_2.py
252/1: run csv2orl_2.py
252/2: !vi csv2orl_2.py
252/3: df_pv.head(0)
252/4: df_pv.head(1)
252/5: a=[int(x)/1000 for x in df_pv['FIPS']]
252/6: set(a)
253/1: run csv2orl_2.py
253/2: oldDICT[:5]
253/3: !vi csv2orl_2.py
253/4: df_pv.head(5)
253/5: set(df_pv['FIPS'])
253/6: !vi csv2orl_2.py
253/7: run csv2orl_2.py
253/8: set(df_pv['FIPS'])
254/1:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline >1:
            ntab=1
            ipas=1
            for i in line.split():
                if ntab==2:
                    m=int(i)
                    if (m-6)*(m-7)*(m-8)==0:ipas=0
                if ntab==16 and ipas==0:ws.append(float(i))
                if ntab==17 and ipas==0:wd.append(float(i))
                ntab=ntab+1
        nline=nline+1
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(data, filename='polar-area-chart')
254/2:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline >1:
            ntab=1
            ipas=1
            for i in line.split():
                if ntab==2:
                    m=int(i)
                    if (m-3)*(m-4)*(m-5)==0:ipas=0
                if ntab==16 and ipas==0:ws.append(float(i))
                if ntab==17 and ipas==0:wd.append(float(i))
                ntab=ntab+1
        nline=nline+1
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(data, filename='polar-area-chart')
254/3:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline >1:
            ntab=1
            ipas=1
            for i in line.split():
                if ntab==2:
                    m=int(i)
                    if (m-3)*(m-4)*(m-5)==0:ipas=0
                if ntab==16 and ipas==0:ws.append(float(i))
                if ntab==17 and ipas==0:wd.append(float(i))
                ntab=ntab+1
        nline=nline+1
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/4:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[2])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:ws.append(float(lns[16])
            if ipas==0:wd.append(float(lns[17])
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/5:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[2])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[16]))
                wd.append(float(lns[17]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/6:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/7:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/8:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(data, filename='polar-area-chart')
254/9:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(data, filename='polar-area-chart')
254/10:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
py.iplot(fig, filename='pandas-wind-rose-chart')
#plot_url = py.plot(data, filename='polar-area-chart')
254/11:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
            if (m-3)*(m-4)*(m-5)==0:ipas=0
#           if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/12:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
#            if (m-3)*(m-4)*(m-5)==0:ipas=0
            if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/13:
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])
#            if (m-3)*(m-4)*(m-5)==0:ipas=0
            ipas=1
            if (m-6)*(m-7)*(m-8)==0:ipas=0                        
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/14:
"""plot the windrose of mmif output (sfc file)"""
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])

            ipas=1
#            if (m-9)*(m-10)*(m-11)==0:ipas=0  #autumn
#            if (m-6)*(m-7)*(m-8)==0:ipas=0 #summer
            if (m-3)*(m-4)*(m-5)==0:ipas=0 #spring
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/15:
"""plot the windrose of mmif output (sfc file)"""
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])

            ipas=1
#            if (m-9)*(m-10)*(m-11)==0:ipas=0  #autumn
#            if (m-6)*(m-7)*(m-8)==0:ipas=0 #summer
            if (m-3)*(m-4)*(m-5)==0:ipas=0 #spring
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/16:
"""plot the windrose of mmif output (sfc file)"""
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])

            ipas=1
            if (m-9)*(m-10)*(m-11)==0:ipas=0  #autumn
#            if (m-6)*(m-7)*(m-8)==0:ipas=0 #summer
#            if (m-3)*(m-4)*(m-5)==0:ipas=0 #spring
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
254/17:
"""plot the windrose of mmif output (sfc file)"""
import numpy as np
import pandas as pd
import colorlover as cl
import plotly.plotly as py
import plotly.graph_objs as go

numBins = [numBinWS,numBinWD]=[8,16]
#reading the aermet sfc data
fname='../maco.sfc'
nline=0
ws,wd=([],[])
with open(fname) as ftext:
    for line in ftext:
        if nline ==0:
            nline=1
            continue
        else:
            lns=line.split()
            m=int(lns[1])

            ipas=1
            if (m-12)*(m-1)*(m-2)==0:ipas=0  #autumn
#            if (m-9)*(m-10)*(m-11)==0:ipas=0  #autumn
#            if (m-6)*(m-7)*(m-8)==0:ipas=0 #summer
#            if (m-3)*(m-4)*(m-5)==0:ipas=0 #spring
            if ipas==0:
                ws.append(float(lns[15]))
                wd.append(float(lns[16]))
data=[]
for i in xrange(len(wd)):
    if ws[i]*wd[i] !=0:
        data.append(ws[i])
        data.append(wd[i])
ll=len(data)/2
data=np.array(data).reshape(ll,2)
print max(data[:,0]),min(data[:,0]),max(data[:,1]),min(data[:,1]),
jointProbs, edges = np.histogramdd(data, bins=numBins)
jointProbs /= jointProbs.sum()
#making the wind speed and wind direction notes
x=np.linspace(0,max(ws),num=numBinWS)
its=[]
for i in xrange(numBinWS):its.append(str(int(x[i]*10.)/10.))
for i in xrange(numBinWS-1):its[i]=its[i]+'-'+its[i+1]
wts=['NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 
     'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW','N']
wts_output=[wts[numBinWD-1]]+wts[:numBinWD-1] #output sequence, 0 for N
#forming the output dataframe
d1={'intensity':pd.Series(its)} 
for i in xrange(numBinWD):d1.update({wts[i]:pd.Series(jointProbs[:,i])})
df=pd.DataFrame(d1)
cols=['intensity']+wts_output #due to no sequence in set, the index must be made
df=df[np.array(cols)].set_index('intensity').T
#plotting the wind rose for df
data = []
counter = 0
for col in df.columns:
    data.append(
        go.Area(t=wts_output,
                r=df[col],
                marker=dict(color=cl.scales[str(numBinWS)]['div']['PRGn'][counter]),
                name=col+' m/s' ) )
    counter+=1

fig = go.Figure(data=data, layout=go.Layout(orientation=270, barmode='stack'))

# IPython notebook
#py.iplot(fig, filename='pandas-wind-rose-chart')
plot_url = py.plot(fig, filename='polar-area-chart')
255/1: from pandas import *
255/2: df=read_csv('town2.csv',dtype=str)
255/3: df.head(5)
255/4:
with open('tw_county.txt') as ftext:
    cty=[line.strip('\n').split() for line in ftext]
255/5: cty
255/6: s_cty=set(df['code1'])
255/7: c_cty
255/8: s_cty
255/9: len(s_cty)
255/10: len(cnty)
255/11: len(cty)
255/12: a=len(cty)
255/13: b=[]
255/14:
for i in xrange(25):
    b.append(cnty[i][0][1:3])
255/15:
for i in xrange(25):
    b.append(cty[i][0][1:3])
255/16: a=b
255/17: a=list(cty)
255/18: a==b
255/19: a
255/20: cty
255/21:
with open('tw_county.txt') as ftext:
    cty=[line.strip('\n').split() for line in ftext]
255/22: b
255/23: cty
255/24: a=list(s_cty)
255/25: a==b
255/26: a
255/27: b
255/28: a.sort()
255/29: a==b
255/30: df['Name']=[x+(21-len(x))*' ' for x in df['Name']]
255/31: list(df['Name'])[:5]
255/32: d_cty={}
255/33:
for i in xrange(25):
    d_cty.update(b[i]:' '+cty[i][0][3:5]+' ')
255/34:
for i in xrange(25):
    d_cty.update({b[i]:' '+cty[i][0][3:5]+' '})
255/35: d_cty['01']
255/36: d_ctyA=d_cty
255/37: d_ctyN={}
255/38:
for i in xrange(25):
    d_ctyN.update({b[i]:cty[i][0][0:3]})
255/39: d_ctyN['21']
255/40:
seq=1
for i in xrange(25):
    df_a=df[df['code1']==b[i]].reset_index()
    for j in xrange(len(df_a)):
        sseq=str(seq)
        s=d_cty[b[i]]+df_a.loc[j,'Name']+' '+d_ctyN[b[i]]+' '+df_a.loc[j,'code2']+' '+d_ctyN[b[i]]+' '+df_a.loc[j,'code2']
        print s
255/41:
seq=1
for i in xrange(25):
    df_a=df[df['code1']==b[i]].reset_index()
    for j in xrange(len(df_a)):
        sseq=str(seq)
        s=d_cty[b[i]]+df_a.loc[j,'Name']+' '+b[i]+' '+df_a.loc[j,'code2']+' '+d_ctyN[b[i]]+' '+df_a.loc[j,'code2']
        print s
255/42:
seq=1
for i in xrange(25):
    df_a=df[df['code1']==b[i]].reset_index()
    for j in xrange(len(df_a)):
        sseq=str(seq)
        s=d_cty[b[i]]+df_a.loc[j,'Name']+' '+d_ctyN[b[i]]+' '+df_a.loc[j,'code2']+' '+b[i]+' '+df_a.loc[j,'code2']
        print s
255/43: appdx=' MSTx-103.4678  24.3027   281.917755 -103.6014 -103.3427  24.1022  24.4541       -9'
255/44:
s=[]
for i in xrange(25):
    df_a=df[df['code1']==b[i]].reset_index()
    for j in xrange(len(df_a)):
        sseq=str(seq)
        s.append(d_cty[b[i]]+df_a.loc[j,'Name']+' '+d_ctyN[b[i]]+' '+df_a.loc[j,'code2']+' '+b[i]+' '+df_a.loc[j,'code2']+appdx)
255/45: s
255/46: history
255/47: vi town2.py
255/48: !vi town2.py
255/49: run town2.py
255/50: !vi town2.py
255/51: run town2.py
255/52: run town2.py>>tw2_costcy.txt
255/53: !python town2.py>>tw2_costcy.txt
255/54: !vi town2.py
255/55: !python town2.py>a
255/56: !vi a
255/57: !vi town2.py
255/58: !python town2.py>a
255/59: !vi a
255/60: !python town2.py>>tw2_costcy.txt
255/61: !pwd
256/1: from pandas import *
256/2: df_town=read_csv('town2.csv',dtype=str)
256/3: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
256/4: s1=set(df_pv['C_NO'])
256/5: s2=set(df_town['code'])
256/6: s1-s2
256/7: df_pv.columns
256/8: s1=set(df_pv['DICT_NO'])
256/9: s1-s2
256/10: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv',dtype=str)
256/11: s1=set(df_pv['DICT_NO'])
256/12: s1-s2
256/13: df_pv['DICT_NO']=[(4-len(x))*'0'+x for x in df_pv['DICT_NO']]
256/14: s1=set(df_pv['DICT_NO'])
256/15: s1-s2
257/1: fname='stack_groups.point.sChina_27k.teds9_13.ncf'
257/2: import netCDF4
257/3: from pandas import *
257/4: nc = netCDF4.Dataset(fname)
257/5: nc.variables
257/6: vname='IFIP'
257/7: f=nc.variables[vname]
257/8: f[:5]
257/9: len(f)
257/10: len(f[0])
257/11: len(f[0][0][0])
257/12: len(f[0][0][0][0])
257/13: len(f[0][0][0])
257/14: f[0][0][0]
257/15: f[0][0]
257/16: len(list(f[0][0]))
257/17: import xarray as xr
257/18: !pip install xarray
257/19: import xarray as xr
257/20: ds = xr.open_dataset(fname)
257/21: len(list(f[0]))
257/22: help nc
257/23: help(nc)
257/24: nc.dimensions
257/25: nc.dimensions['COL']
257/26: f=nc.dimensions['COL']
257/27: f[:5]
257/28: f
257/29: nc.dimensions['COL']
257/30: f=nc['COL']
257/31: nc['COL']
257/32: help(nc)
257/33: nc.data_model
257/34: help(nc)
257/35: nc.groups
257/36: nc.group
257/37: help(nc)
257/38: nc.variables
257/39: f=nc.variables['STKDM']
257/40: f[:5]
257/41: f=nc.variables['COL']
257/42: f[:5]
257/43: set(f)
257/44: set(f[0][0])
257/45: f=nc.variables['LAY']
257/46: f=nc.variables['LAYS']
257/47: v=nc.variables
257/48: v[1]
257/49: v['COL']
257/50:
for i in v:
    print i
257/51: f
257/52: f[:5]
257/53: f=list(f[0][0])
257/54: f[:5]
257/55: f[5]
257/56: f=list(f[5])
257/57: f
257/58: f=nc.variables['LAYS']
257/59: f=nc.variables['STKDM']
257/60: a=list(f[0][0][0])
257/61: a
257/62: a=list(f[0][0])
257/63: a
257/64: b=[x x in a]
257/65: b=[x for x in a]
257/66: b[:5]
257/67: b=[x[0] for x in a]
257/68: b[:5]
257/69: history
257/70: !pwd
257/71: lv=list(v)
257/72: lv
257/73: fromp ncv2df import ncv2df
257/74: from ncv2df import ncv2df
257/75: from ncv2df.py import ncv2df
257/76: from ncv2df_py import ncv2df
257/77: from ncv2df import ncv2df
257/78: !pwd
257/79: run ncv2df.py
257/80: df=ncv2df(fname)
257/81:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        d.update({c:[x[0] for x in list(nc.variables[c][0][0])]})
    return DataFrame(d)
257/82: df=ncv2df(fname)
257/83: from ncv2df import ncf2df
257/84: df=ncf2df(fname)
257/85: d
257/86:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        d.update({c:[x[0] for x in list(nc.variables[c][0][0])]})
    return DataFrame(d)
257/87: df=ncf2df(fname)
257/88: d
257/89: cols
257/90:
cols=list(nc.variables)
d={}
for c in cols:
    d.update({c:[x[0] for x in list(nc.variables[c][0][0])]})
df=DataFrame(d)
257/91: cols
257/92: c
257/93: a=list(nc.variables[c][0][0])
257/94: a
257/95: a=list(nc.variables[c])
257/96: a
257/97: a[0]
257/98: a=list(nc.variables[c][0])
257/99: a
257/100:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:[x[i] for x in pro_df]})
257/101:
d={}
for c in cols:
    d.update({c:[x[0] for x in list(nc.variables[c][0])]})
df=DataFrame(d)
257/102: a=list(nc.variables[c][0])
257/103: a
257/104: c
257/105: d
257/106:
d={}
for c in cols:
    a=list(nc.variables[c])
    d.update({c:[x[0] for x in a]})
df=DataFrame(d)
257/107: df.head(5)
257/108: len(a)
257/109:
d={}
for c in cols:
    a=list(nc.variables[c])
    for i in xrange(3):
        if len(a)==1:
            a=[x[0] for x in a]
        else:
            break
    d.update({c: a})
df=DataFrame(d)
257/110: a
257/111: i
257/112: c
257/113: a=list(nc.variables[c])
257/114: len(a)
257/115: a=[x[0] for x in a]
257/116: len(a)
257/117: a
257/118: a=list(nc.variables[c])
257/119: a
257/120: a[0]
257/121: len(a[0])
257/122:
d={}
for c in cols:
    if c==''TFLAG':continue
    a=list(nc.variables[c])
    for i in xrange(3):
        if len(a)==1:
            a=[x[0] for x in a]
        else:
            break
    d.update({c: a})
df=DataFrame(d)
257/123:
d={}
for c in cols:
    if c=='TFLAG':continue
    a=list(nc.variables[c])
    for i in xrange(3):
        if len(a)==1:
            a=[x[0] for x in a]
        else:
            break
    d.update({c: a})
df=DataFrame(d)
257/124: df.head(5)
257/125: len(df)
257/126: a
257/127: c
257/128: a=list(nc.variables[c])
257/129: a=[x[0] for x in a]
257/130: len(a)
257/131: a
257/132: a[0]
257/133:
d={}
for c in cols:
    if c=='TFLAG':continue
    a=list(nc.variables[c])
    for i in xrange(3):
        if len(a)==1:
            a=[x for x in a[0]]
        else:
            break
    d.update({c: a})
df=DataFrame(d)
257/134: df.head(5)
257/135: len(df)
257/136:
d={}
for c in cols:
    if c=='TFLAG':continue
    a=list(nc.variables[c])
    for i in xrange(3):
        if len(a)==1:
            a=[x for x in a[0]]
        else:
            break
    a=[x[0] for x in a]
    d.update({c: a})
df=DataFrame(d)
257/137: df.head(5)
257/138: set(df['COL'])
257/139: set(df['ROW'])
257/140: history
257/141: from ncf2df import ncf2df
257/142: df=ncf2df(fname)
257/143: df.head(5)
257/144: df_p=df[df['LPING']==1]
257/145: len(df_p)
257/146: df_p
257/147: fname='../cmaq_cb05_soa/pgts_l.point.20130010.1.sChina_27k.teds9_13.ncf
257/148: fname='../cmaq_cb05_soa/pgts_l.point.20130010.1.sChina_27k.teds9_13.ncf'
257/149: df=ncf2df(fname)
257/150: df.head(5)
257/151: df.columns
257/152: !echo $POUT
257/153: !echo $P_OUT/pgts_l.$SRCABBR.$ESDATE.$NDAYS.$GRID.$PSCEN.nc
257/154: !ls -l $P_OUT/pgts_l.$SRCABBR.$ESDATE.$NDAYS.$GRID.$PSCEN.nc
257/155: !ls -l $P_OUT/pgts_l.$SRCABBR.$ESDATE.$NDAYS.$GRID.$PSCEN.ncf
258/1: from pandas import *
258/2:
with open('mountain.bln') as ftext:
    Ey=[line.strip('\n').split() for line in ftext]
258/3: !ls
258/4: !mv montain.bln mountain.bln
258/5:
with open('mountain.bln') as ftext:
    Ey=[line.strip('\n').split() for line in ftext]
258/6: Ey
258/7: len(Ey)
258/8:
for i in xrange(1,14):
    print i
258/9:
for i in xrange(1,14):
    print Ey[i]
258/10: Ey.sort()
258/11:
for i in xrange(1,14):
    print i
258/12:
for i in xrange(1,14):
    print Ey[i]
258/13: Ey[0]=['213800','0']
258/14:
for i in xrange(14):
    print Ey[i]
258/15: Ey[1]=['213850','3']
258/16:
for i in xrange(14):
    print Ey[i]
258/17: d={}
258/18:
for i in xrange(14):
    d.update({int(Ey[i][0]):float(Ey[i][1])})
258/19: d
258/20:
d={}
for i in xrange(14):
    d.update({int(Ey[i][0]-213900):float(Ey[i][1])})
258/21:
d={}
for i in xrange(14):
    d.update({int(Ey[i][0])-213900:float(Ey[i][1])})
258/22: d
258/23: x=[-100+2*i for i in xrange(601)]
258/24: x[:5]
258/25: x[-5:]
258/26: !head CO.fds
258/27: x=[-100+2*i for i in xrange(301)]
258/28: x[-5:]
258/29:
E=[]
for i in xrange(301):
    a=int(x[i]/50)*50
    print a,d[a]
258/30:
E=[]
for i in xrange(301):
    a=int(x[i]/50)*50
    print x[i],a,d[a]
258/31:
E=[]
for i in xrange(301):
    a=int(x[i]/50)*50
    E1=d[a]
    E2=d[a+50]
    E.append(E1+(E2-E1)/50*(x[i]-a))
258/32:
E=[]
for i in xrange(301):
    a=int(x[i]/50)*50
    E1=d[a]
    E2=d[a+50]
    E.append(E1+(E2-E1)/50*(x[i]-a))
    print x[i],E1,E2,E[i]
258/33: df=DataFrame({'X':x},{'E':E})
258/34: len(E)
258/35: len(x)
258/36: df=DataFrame({'X':x,'E':E})
258/37: df
258/38: !tail CO.fds
258/39: !vi CO.fds
258/40: df['X1']=['&OBST XB='+str(x) for x in x]
258/41: df['X2']=[i+2 for i in x]
258/42: df['X1']
258/43: x
258/44: x=list(df['X'])
258/45: x
258/46: df['X2']=[i+2 for i in x]
258/47: df['Y2']=[1 for i in x]
258/48: df['Y1']=[-1 for i in x]
258/49: df['Z1']=[0 for i in x]
258/50: df['Z2']=[i for i in E]
258/51: df['Z2']=[str(i)+'/' for i in E]
258/52: df['Z2']
258/53: col=['X1','X2','Y1','Y2','Z1','Z2']
258/54: df(col).set_index('X1').to_csv('mount.csv')
258/55: df[col].set_index('X1').to_csv('mount.csv')
258/56: !more mount.csv
258/57: !cat mount.csv>>CO.fds
258/58: !vi CO.fds
258/59: !pwd
258/60: !top
259/1: from pandas import *
259/2:
with open('pig_id.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
259/3: s[:10]
259/4: s[:20]
259/5: s[20:50]
259/6: s[38:50]
259/7: a=s[38:]
259/8: a[:5]
259/9: nox=[x[4] for x in a]
259/10: hts=[x[6] for x in a]
259/11: df=DataFrame({'nox':nox,'hts':hts})
259/12: df[df['hts']>245]
259/13: type(df['hts'][5])
259/14: df['hts']=[float(x) for x in df['hts']]
259/15: df[df['hts']>245]
259/16:
with open('pig_id.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
259/17: a=s[38:]
259/18: nox=[x[4] for x in a]
259/19: hts=[x[6] for x in a]
259/20: df=DataFrame({'nox':nox,'hts':hts})
259/21: hts=[float(x[6]) for x in a]
259/22: df=DataFrame({'nox':nox,'hts':hts})
259/23: df[df['hts']>245]
259/24:
with open('pig_id.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
259/25: a=s[38:]
259/26: nox=[x[4] for x in a]
259/27: hts=[float(x[6]) for x in a]
259/28: df=DataFrame({'nox':nox,'hts':hts})
259/29: df[df['hts']>245]
260/1: from pandas import *
260/2: !vi csv2orl_2.py
260/3: df_pv=read_csv('df_pv.csv')
260/4: df_pv.head(0)
260/5: df_pv.head(1)
260/6: df_pv.loc[df_pv['C_NO']=='L9101748','NOX_EMI']
260/7: df_pv.loc[df_pv['C_NO']=='L9101748'&df_pv['NO_S']=='P003','NOX_EMI']
260/8: df_pv.loc[df_pv['C_NO']=='L9101748'&&df_pv['NO_S']=='P003','NOX_EMI']
260/9: boo=df_pv['C_NO']=='L9101748'&df_pv['NO_S']=='P003'
260/10: boo=df_pv['C_NO']=='L9101748' & df_pv['NO_S']=='P003'
260/11: !grep boo /home/python_eg/*py
260/12: !grep boo /home/python_eg/*/*py
260/13: !grep boo\= /home/python_eg/*/*py
260/14: boo=(df_pv['C_NO']=='L9101748') &( df_pv['NO_S']=='P003')
260/15: df_pv.loc[boo,'NOX_EMI']
260/16: df_pv.loc[boo]
260/17: df_pv.columns
260/18: df_pv.loc[boo,'HEI']
260/19: boo
260/20: a=df_pv.loc[df_pv['HEI']==250]
260/21: a
260/22: a['NO_S'=='P203]
260/23: a['NO_S'=='P203']
260/24: a[a['NO_S']=='P203']
260/25: !pwd
259/30: a[:5]
259/31: len(a)
259/32: df.loc[0]
259/33: df.loc[3794]
259/34: df.loc[1927]
259/35: df.loc[1]
259/36: df.loc[2053]
259/37: df.loc[2054]
259/38: !top
259/39: !pwd
261/1: from pandas import *
261/2: df_pv=read_csv('df_pv.csv')
261/3: cols=df_pv.columns
261/4: cols
261/5: run csv2orl_2.py
261/6: !tail csv2orl_2.py
261/7: col_orl
261/8: max(df_orl['STKVEL'])
261/9: !vi csv2orl_2.py
261/10: min(df_orl['STKVEL'])
261/11: !grep tab *py
261/12: !vi /home/SMOKE4.5/data/inventory/nei2005/point/oldy/tab8.25.ORLforPTINV
262/1: fname='/home/SMOKE4.5/data/run_teds9_13/output/merge/stack_groups.point.sChina_27k.teds9_13.ncf'
262/2: from ncf2df import ncf2df
262/3: ls *.py
262/4:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        d.update({c:[x[0] for x in list(nc.variables[c][0][0])]})
    return DataFrame(d)
262/5: import netCDF4
262/6: df=ncf2df(fname)
262/7:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
262/8: df=ncf2df(fname)
262/9: from ncf2df import ncf2df
262/10: from pandas import *
262/11: df=ncf2df(fname)
262/12: df.columns
262/13: df['STKVE
262/14: max(df['STKVE'])
262/15: max(df['STKDM'])
262/16: len(df)
262/17: max(df['ISTACK'])
262/18: max(df['STKHT'])
262/19: m=max(df['STKDM'])
262/20: df[df['STKDM']==m]
262/21: !echo $TEDS
263/1: from pandas import *
263/2: df_pv=read_csv('df_pv.csv')
263/3: cols=df_pv.columns
263/4: cols
263/5: max(df_pv['VEL'])
263/6: max(df_pv['DIA'])
262/22: max(df['STKVEL'])
262/23: max(df['STKVE'])
263/7: max(df_pv['ORI_QU1'])
262/24: cols
262/25: col
262/26: cols=df.columns
262/27: col
262/28: cols
262/29: max(df['STKFLW'])
262/30: m=max(df['STKFLW'])
262/31: df[df['STKFLW']==m]
262/32: min(df['STKFLW'])
262/33: max(df['STKFLW'])
262/34: type(df['STKFLW'][0])
262/35: set(df['STKFLW'])
262/36: cols
262/37: max(df['STKCNT'])
262/38: df[df['STKCNT']==20]
262/39: len(df)
262/40: sum(df['STKCNT'])
262/41: !echo $MERGE
262/42: !pwd
264/1: from pandas import *
264/2:
with open('e.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
264/3: s[0]
264/4: s[1]
264/5: s[2]
264/6: len(s)
264/7: l=len(s)
264/8: s1=[s[x] for x in xrange(0,l,2)]
264/9: s1[0]
264/10: s1[1]
264/11: s2=[s[x] for x in xrange(1,l,2)]
264/12: len(s2)
264/13: len(s1)
264/14: df=DataFrame({'CO_N':[x[3] for x in s1]})
264/15: df['S_NO']=[x[4] for x in s1]
264/16: df['HT']=[x[0] for x in s2]
264/17: df['DM']=[x[1] for x in s2]
264/18: df['TS']=[x[2] for x in s2]
264/19: df['VE']=[x[3] for x in s2]
264/20: cols=['CO_N','S_NO','HT','DM','TS','VE']
264/21:
for i in xrange(2,6):
    df[cols[i]]=[float(x) for x in  df[cols[i]]]
264/22: df[df['HT']>245]
264/23: !pwd
264/24: !grep " 250\. " pig_id.txt
264/25: df['VE']=[x/3600. for x in df['VE']]
264/26: df[df['HT']>245]
262/43: boo=(df_pv['C_NO']=='L0200473') &( df_pv['NO_S']=='P011')
262/44: !pwd
264/27: !echo $TEDS
264/28: !pwd
262/45: !echo $TEDS
262/46: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
262/47: boo=(df_pv['C_NO']=='L0200473') &( df_pv['NO_S']=='P011')
262/48: df_pv[boo]
262/49: boo=(df_pv['C_NO']=='L0200473') &( df_pv['NO_S']=='P021')
262/50: df_pv[boo]
262/51: boo=(df_pv['C_NO']=='P5802421') &( df_pv['NO_S']=='P05A')
262/52: df_pv[boo]
262/53: !pwd
262/54: fname
264/29: !ls
262/55: !grep elevts_l *csh
262/56: !grep elev *csh
262/57: !grep SMK_ASCIIELEV_YN *csh
262/58: !grep SMK_ASCIIELEV_YN $ASSIGNS_FILE
264/30: len(df)
264/31: df.columns
264/32: df=ncf2df(fname)
264/33: fname='/home/SMOKE4.5/data/run_teds9_13/output/merge/stack_groups.point.sChina_27k.teds9_13.ncf'
264/34:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
264/35: df_grp=ncf2df(fname)
264/36: import netCDF4
264/37: df_grp=ncf2df(fname)
264/38: df_grp.columns
264/39: max[df_grp['STKVE']]
264/40: type(df_grp['STKVE'][0])
264/41: max(df_grp['STKVE'])
264/42: !locate repconfig*
264/43: !locate REPCONF*
264/44: !pwd
264/45: !vi $RUN/smk_point*.csh
264/46: !vi /home/SMOKE4.5/subsys/smoke/scripts/run/smk_point_teds.csh
264/47: !vi /home/SMOKE4.5/subsys/smoke/scripts/run/smk_run.csh
264/48: len(df_pv)
264/49: df_pv=read_csv('df_pv.csv')
264/50: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
264/51: df_pv.loc[df_pv['CO_N']=='Z6603001','VEL']
264/52: df_pv.loc[df_pv['C_NO']=='Z6603001','VEL']
264/53: df_pv.loc[df_pv['C_NO']=='Z6603001','VEL','NO_S']
264/54: df_pv.loc[df_pv['C_NO']=='Z6603001','VEL']
264/55: df_pv.loc[df_pv['C_NO']=='Z6603001','S_NO']
264/56: df_pv.loc[df_pv['C_NO']=='Z6603001','SO_N']
264/57: df_pv.loc[df_pv['C_NO']=='Z6603001','S_NO']
264/58: df_pv.columns
264/59: df_pv.loc[df_pv['C_NO']=='Z6603001','NO_S']
264/60: df_pv.loc[df_pv['C_NO']=='Z6603001','VEL']
264/61: df_pv.loc[df_pv['C_NO']=='Z6303328','NO_S']
264/62: df_pv.loc[df_pv['C_NO']=='Z6303328','NO_P']
264/63: df_pv.loc[df_pv['C_NO']=='Z6303328','VEL']
264/64:  df_grp.tail(1)
264/65: df_grp[df_grp['STKHT']>249]
264/66: df_grp.loc[df_grp['STKHT']>249,'STKVE']
264/67: fname='/home/SMOKE4.5/data/run_teds9_13/output/cmaq_cb05_soa/pgts_l.point.20130010.1.sChina_27k.teds9_13.ncf'
264/68: df=ncf2df(fname)
264/69: df.head
264/70: df.head(1)
264/71: len(df)
264/72: len(df['XYL'][0])
264/73: nc.dimensions
264/74: nc = netCDF4.Dataset(fname)
264/75: nc.dimensions
264/76: cols=list(nc.variables)
264/77: cols
264/78: len(cols)
264/79: c='PMC'
264/80: a=list(nc.variables[c])
264/81: a[0]
264/82: len(a[0])
264/83: len(a[0][0])
264/84: len(a[0][0][0])
265/1: from pandas import *
265/2:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
265/3: import netCDF4
265/4: fname="/home/SMOKE4.5/data/inventory/teds9_13/point.teds9_13_dLINYUAN_dat/NOX.ncf"
265/5: df=ncf2df(fname)
265/6: df.columns
265/7: max(df['NOx'])
265/8: df.columns
265/9: max(df['NOX'])
265/10: max(df['C1_NOX'])
265/11: max(df['C2_NOX'])
265/12: max(df['CE_NOX'])
265/13: min(df['CE_NOX'])
265/14: min(df['DY_NOX'])
265/15: max(df['DY_NOX'])
265/16: fname="/home/SMOKE4.5/data/inventory/teds9_13/point.teds9_13_dLINYUAN.ncf"
265/17: df=ncf2df(fname)
265/18: len(df)
265/19: df.columns
265/20: nc=netCDF4.Dataset(fname)
265/21: nc.dimensions
265/22: nc.variables
265/23: nc['INVYR']
265/24: nc('INVYR')
265/25: nc.dimensions['COL']
265/26: len(list(nc.dimensions['COL']))
265/27: df['INVYR']
265/28: fname="/home/SMOKE4.5/data/inventory/teds9_13/point.teds9_13_dLINYUAN_dat/NOX.ncf"
265/29: df2=ncf2df(fname)
265/30: len(df2)
265/31: df2.head(10)
265/32: df.head(10)
265/33: more /home/SMOKE4.5/data/inventory/teds9_13/pnts.map.point.teds9_13.txt
265/34: more /home/SMOKE4.5/data/inventory/teds9_13/pointsrc.teds9_13.txt
265/35:     !locate *mact*
265/36:     !locate *mact*|grep smoke
265/37:     !locate *mact*|grep -i smoke
266/1: from pandas import *
266/2: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
266/3: df_pv.columns
266/4: df_pv.head(3)
267/1: from pandas import *
267/2: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
267/3: df_linyuan=df_pv[df_pv['DICT_NO']==4205]
267/4: df_linyuan.to_csv('linyuan.csv')
267/5: import netCDF4
267/6:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
267/7: fname="/home/SMOKE4.5/data/run_teds9_13/static/pcmat.point.teds9_13.ncf"
267/8: df=ncf2df(fname)
267/9: df.head(5)
267/10: len(df)
267/11: !grep EOF $(locate *job)
267/12: !pwd
267/13: ls ../../
267/14: pwd
267/15: df_orl=read_csv('df_orl.csv')
267/16: run csv2orl_2
267/17:
with open('/home/SMOKE4.5/subsys/smoke/scripts/run/PCs.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
267/18: s
267/19: len(s)
267/20: a=[x[0] for x in s]
267/21: a
267/22: df_orl.columns
267/23: d={}
267/24:
for i in a:
    d.update({i:list(df_orl.loc['PLANTID']==i,'FIPS')[0]})
267/25:
for i in a:
    d.update({i:list(df_orl.loc(df_orl['PLANTID']==i,'FIPS'))[0]})
267/26:
for i in a:
    d.update({i:list(df_orl.loc[df_orl['PLANTID']==i,'FIPS'])[0]})
267/27: d
267/28:
d={}
for i in a:
    f=700000+int(list(df_orl.loc[df_orl['PLANTID']==i,'FIPS'])[0])
    d.update({i:f})
267/29: d
267/30:
for i in d:
    print d[i],i
267/31:
for i in d:
    print d[i],",0,'NOX',,100.,100.,100.,,,Y,R,'",i,"',,,,,"
267/32: history
268/1: from pandas import *
268/2: run csv2orl_2
268/3: df_nox=df_orl[df_orl['CAS']=='NOX']
268/4: len(df_nox)
268/5: df_orl.columns
268/6: df_nox=df_orl[df_orl['CAS']=='NOX'&&df_orl['ANN_EMIS']>0]
268/7: df_nox=df_orl[df_orl['CAS']=='NOX' & df_orl['ANN_EMIS']>0]
268/8: df_nox=df_orl[df_orl['CAS']=='NOX' && df_orl['ANN_EMIS']>0]
268/9: boo=df_orl['CAS']=='NOX' && df_orl['ANN_EMIS']>0
268/10: boo=df_orl['CAS']=='NOX' & df_orl['ANN_EMIS']>0
268/11: boo=df_orl['CAS']=='NOX' & df_orl['ANN_EMIS']>0.
268/12: len(df_nox)
268/13: df_nox=df_nox[df_nox['ANN_EMIS']>0.]
268/14: len(df_nox)
268/15: df_nox=df_nox[df_nox['ANN_EMIS']>10.]
268/16: len(df_nox)
268/17: df_nox=df_nox.sort(['ANN_EMIS'], ascending=[False])
268/18: df_nox=df_nox.sort_values(by=['ANN_EMIS'], ascending=[False])
268/19: df_nox.head(10)
268/20: list(df_nox['ANN_EMIS'])[:10]
268/21: df_nox.columns
268/22: B_K=',0,NOX,,100.,100.,100.,,,Y,R,'
268/23: O_Q=',,,'
268/24: A=df_nox['FIPS']
268/25: L=df_nox['PLANTID']
268/26: M=df_nox['POINTID']
268/27: N=df_nox['STACKID']
268/28:
c=','
s=[]
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
    print s[i]
268/29:
c=','
s=[]
for i in xrange(100):
    print A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q
268/30: A[0]
268/31: A=list(df_nox['FIPS'])
268/32: L=list(df_nox['PLANTID'])
268/33: M=list(df_nox['POINTID'])
268/34: N=list(df_nox['STACKID'])
268/35:
c=','
s=[]
for i in xrange(100):
    print A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q
268/36: A=[x+700000 for x in A]
268/37: A=[int(x)+700000 for x in A]
268/38:
c=','
s=[]
for i in xrange(100):
    print A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q
268/39: A=list(df_nox['FIPS'])
268/40: A=[str(int(x)+70000) for x in list(df_nox['FIPS'])]
268/41:
c=','
s=[]
for i in xrange(100):
    print A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q
268/42: A=[str(int(x)+700000) for x in list(df_nox['FIPS'])]
268/43:
c=','
s=[]
for i in xrange(100):
    print A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q
268/44: !grep write *.py
268/45: vi history.170625.am.py
268/46: !vi history.170625.am.py
268/47:
f=open('tmp','w')
[f.write(x) for x in A]
268/48: !ls tmp
268/49: !more tmp
268/50:
f=open('tmp','w')
[f.write(x,'\n') for x in A[:10]]
268/51:
f=open('tmp','w')
[f.write(x+'\n') for x in A[:10]]
268/52: !more tmp
268/53:
a=A[:10]
f=open('tmp','w')
[f.write(x+'\n') for x in a]
268/54: !more tmp
268/55:
c=','
s=[]
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q+'\n')
268/56:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dLARGE100.txt','w')
[f.write(x+'\n') for x in s]
268/57:
c=','
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q+'\n')
s.append('/END/')
268/58:
c=','
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/59:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dLARGE100.txt','w')
[f.write(x+'\n') for x in s]
268/60:
c=','
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/61: len(s)
268/62:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dLARGE100.txt','w')
[f.write(x+'\n') for x in s]
268/63: f.close()
268/64: history
268/65: !pwd
268/66: LinYuanUTM=(18860,2486960)
268/67: LinYuanUTM[0]
268/68: LinYuanUTM[1]
268/69: df_orl.columns
268/70: boo=(abs(df_orl['XLOC']-LinYuanUTM[0])<1500.) and (abs(df_orl['YLOC']-LinYuanUTM[1])<=1500.)
268/71: boo=(abs(df_orl['XLOC']-LinYuanUTM[0])<1500.) & (abs(df_orl['YLOC']-LinYuanUTM[1])<=1500.)
268/72: df_NB=df_orl[boo]
268/73: len(df_NB)
268/74: boo[:5]
268/75: boo.count(True)
268/76: type(boo)
268/77: boo=list(boo)
268/78: boo.count(True)
268/79: list(df_orl['XLOC'])[:10]
268/80: boo=(abs(df_orl['XLOC']-LinYuanUTM[0])<1500.)
268/81: boo=list(boo)
268/82: boo.count(True)
268/83: boo1=list(abs(df_orl['XLOC']-LinYuanUTM[0])<1500.)
268/84: boo2=list(abs(df_orl['YLOC']-LinYuanUTM[1])<1500.)
268/85: boo2.count(True)
268/86: df_NB=df_orl[boo1]
268/87: df_NB=df_NB[boo2]
268/88: len(df_NB)
268/89: boo2=list(abs(df_NB['YLOC']-LinYuanUTM[1])<1500.)
268/90: boo2.count(True)
268/91: boo1=list(abs(df_orl['XLOC']-LinYuanUTM[0])<3000.)
268/92: df_NB=df_orl[boo1]
268/93: boo2=list(abs(df_NB['YLOC']-LinYuanUTM[1])<3000.)
268/94: boo.count(True)
268/95: boo2.count(True)
268/96: boo1.count(True)
268/97: df_NB['YLOC']
268/98: LinYuanUTM[1]
268/99: LinYuanUTM
268/100: LinYuanUTM=(188602,2486960)
268/101: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<1500.) & (abs(df_orl['YLOC']-LinYuanUTM[1])<=1500.))
268/102: boo.count(True)
268/103: dist=3000
268/104: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist))
268/105: boo.count(True)
268/106: boo1=list(abs(df_orl['XLOC']-LinYuanUTM[0])<dist)
268/107: df_NB=df_orl[boo1]
268/108: len(df_NB)
268/109: boo2=list(abs(df_NB['YLOC']-LinYuanUTM[1])<dist)
268/110: boo.count(True)
268/111: df_NB['XLOC']
268/112: df_NB['YLOC']
268/113: len(df_orl)
268/114: !grep XLOC csv2orl_2.py
268/115: !grep YLOC csv2orl_2.py
268/116: df_orl['XLOC']=[x-44000. for x in df_orl['XLOC']]
268/117: df_orl['YLOC']=[y-13000. for y in df_orl['YLOC']]
268/118: boo1=list(abs(df_orl['XLOC']-LinYuanUTM[0])<dist)
268/119: boo1.count(True)
268/120: dist=1500
268/121: boo1=list(abs(df_orl['XLOC']-LinYuanUTM[0])<dist)
268/122: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist))
268/123: boo.count(True)
268/124: df_NB=df_orl[boo]
268/125: df_NB.reset_index
268/126: df_NB=df_orl[boo].reset_index
268/127: len(df_NB)
268/128: df_NB=df_orl[boo]
268/129: df_NB=df_NB.reset_index()
268/130: len(df_NB)
268/131: df_NB=df_NB[df_NB['CAS'=='NOX']]
268/132: df_NB=df_NB[df_NB['CAS']=='NOX']
268/133: len(df_NB)
268/134: sum(list(df_NB['ANN_EMIS']))
268/135: a=list(df_NB['ANN_EMIS'])
268/136: a.sort
268/137: a.sort()
268/138: a
268/139: dist=3000
268/140: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist))
268/141: df_NB=df_orl[boo].reset_index()
268/142: df_NB=df_NB[df_NB['CAS']=='NOX']
268/143: sum(list(df_NB['ANN_EMIS']))
268/144: a=list(df_NB['ANN_EMIS']).sort()
268/145: a[-5:]
268/146: len(a)
268/147: a=list(df_NB['ANN_EMIS'])
268/148: a.sort()
268/149: len(a)
268/150: a[-5:]
268/151: a[-50:]
268/152: df_nox=df_NB.sort_values(by=['ANN_EMIS'], ascending=[False])
268/153: A=[str(int(x)+700000) for x in list(df_nox['FIPS'])]
268/154: L=list(df_nox['PLANTID'])
268/155: M=list(df_nox['POINTID'])
268/156: N=list(df_nox['STACKID'])
268/157:
c=','
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/158: len(A)
268/159: A[:5]
268/160: L[:5]
268/161: N[:5]
268/162: M[:5]
268/163: O_Q
268/164: c
268/165: s
268/166:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/167: i
268/168: A[i]
268/169: print A[i],B_K,L[i],M[i],N[i],O_Q
268/170:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(100):
    if type(M[i])==float:M[i]=' '
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/171:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dNBLRG100.txt','w')
[f.write(x+'\n') for x in s]
f.close()
268/172: history
268/173: dist=5000
268/174: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist))
268/175: df_NB=df_orl[boo].reset_index()
268/176: df_NB=df_NB[df_NB['CAS']=='NOX']
268/177: df_nox=df_NB.sort_values(by=['ANN_EMIS'], ascending=[False])
268/178: len(df_nox)
268/179: dist=1500
268/180: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist) & (df_orl['CAS']=='NOX'))
268/181: df_NB=df_orl[boo].reset_index()
268/182: df_nox=df_NB.sort_values(by=['ANN_EMIS'], ascending=[False])
268/183: len(df_nox)
268/184: sum(list(df_NB['ANN_EMIS']))
268/185: A=[str(int(x)+700000) for x in list(df_nox['FIPS'])]
268/186: L=list(df_nox['PLANTID'])
268/187: M=list(df_nox['POINTID'])
268/188: N=list(df_nox['STACKID'])
268/189:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(57):
    if type(M[i])==float:M[i]=' '
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/190:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dNB1.5Km.txt','w')
[f.write(x+'\n') for x in s]
f.close()
268/191: A=[str(int(x)+700000) for x in list(df_orl['FIPS'])]
268/192: A=list(set([str(int(x)+700000) for x in list(df_orl['FIPS'])]))
268/193: A.sort()
268/194: len(A)
268/195: df_nox=df_orl[df_orl['CAS']=='NOX' && df_orl['ANN_EMIS']>0]
268/196: df_nox=df_orl[df_orl['CAS']=='NOX' & df_orl['ANN_EMIS']>0]
268/197: df_nox=df_orl[df_orl['CAS']=='NOX']
268/198: A=list(set([str(int(x)+700000) for x in list(df_nox['FIPS'])]))
268/199: len(A)
268/200:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(305):
    s.append(A[i]+B_K+''+c+''+c+''+O_Q)
s.append('/END/')
268/201: s
268/202:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dAllNOX.txt','w')
[f.write(x+'\n') for x in s]
f.close()
268/203: xcsc=list(df_orl.loc[df_orl['PLANTID']==E5600841,'XLOC'])[0]
268/204: xcsc=list(df_orl.loc[df_orl['PLANTID']=='E5600841','XLOC'])[0]
268/205: ycsc=list(df_orl.loc[df_orl['PLANTID']=='E5600841','YLOC'])[0]
268/206: sqrt((xcsc-LinYuanUTM[0])**2+(ycsc-LinYuanUTM[1])**2)
268/207: from numpy import sqrt
268/208: sqrt((xcsc-LinYuanUTM[0])**2+(ycsc-LinYuanUTM[1])**2)
268/209: dist=10000
268/210: boo=list((abs(df_orl['XLOC']-LinYuanUTM[0])<dist) & (abs(df_orl['YLOC']-LinYuanUTM[1])<dist) & (df_orl['CAS']=='NOX'))
268/211: df_NB=df_orl[boo].reset_index()
268/212: df_nox=df_NB.sort_values(by=['ANN_EMIS'], ascending=[False])
268/213: len(df_nox)
268/214: A=list(set([str(int(x)+700000) for x in list(df_nox['FIPS'])]))
268/215: L=list(df_nox['PLANTID'])
268/216: M=list(df_nox['POINTID'])
268/217: N=list(df_nox['STACKID'])
268/218:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(100):
    s.append(A[i]+B_K+''+c+''+c+''+O_Q)
s.append('/END/')
268/219: len(A)
268/220: A=[str(int(x)+700000) for x in list(df_nox['FIPS'])]
268/221:
c=','
s=[]
s=['/CONTROL/']
for i in xrange(100):
    if type(M[i])==float:M[i]=' '
    s.append(A[i]+B_K+L[i]+c+M[i]+c+N[i]+O_Q)
s.append('/END/')
268/222:
f=open('/home/SMOKE4.5/data/inventory/teds9/point/gcntl.dNB10Km.txt','w')
[f.write(x+'\n') for x in s]
f.close()
268/223:
with open('/home/camxruns/2013/outputs/con06/JJJ_52.result.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
268/224: s
268/225: len(s)
268/226: s[8]
268/227: del s[8]
268/228: del s[7][0].split('.')[1]
268/229: s[7][0].split('.')[1]
268/230:
dd=[]
for i in xrange(8):
    dd.append(s[i][0].split('.')[1])
268/231: dd
268/232:
ee=[]
for i in xrange(8):
    ee.append(s[i][10])
268/233: ee
268/234:
d={}
for i in xrange(8):
    d.update({dd[i]:ee[i]})
268/235: df=DataFrame(d)
268/236: d
268/237: len(df_nox)
268/238: df_nox.head(10)
268/239: df_nox.head(1)
268/240: list(df_nox['STKHGT'])[:10]
268/241: list(df_nox['ANN_EMIS'])[:10]
268/242: list(df_nox['PLANTID'])[:10]
268/243: 10**1.5
268/244: 10**0.5
268/245: history
268/246:
case=[]
nox_ge=[]
for i in d:
    case.append(i)
    nox_ge.append(d[i])
268/247: df=DataFrame({'CASE':case,'NOX_GE':nox_ge})
268/248: df
268/249: df.sort_values(by=['NOX_GE'],accend=False)
268/250: df.sort_values(by=['NOX_GE'],ascending=[False])
268/251: df=df.sort_values(by=['NOX_GE'],ascending=[False])
268/252: df.reset_index()
268/253: df=df.reset_index()
268/254: df
268/255: del df['index']
268/256: df
268/257: history
268/258: df=DataFrame({'CASE':dd,'NOX_GE':ee})
268/259: df
268/260: df=df.sort_values(by=['NOX_GE'],ascending=[False]) .reset_index()
268/261: df
268/262: del df['index']
268/263: df
269/1:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=pd.read_csv('point.csv')
q=list(df['ORI_QU1'])
bins = np.linspace(min(q),max(q), 100)
plt.hist(q, bins, alpha=0.5)
plt.title("ORI_QU1 Histogram")
plt.xlabel("(m3/min)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/2:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=pd.read_csv('point.csv')
q=list(df['ORI_QU1'])
minq=0
maxq=100
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("ORI_QU1 Histogram")
plt.xlabel("(m3/min)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/3:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=pd.read_csv('point.csv')
q=list(df['ORI_QU1'])
minq=1
maxq=100
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("ORI_QU1 Histogram")
plt.xlabel("(m3/min)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/4:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=pd.read_csv('point.csv')
q=list(df['VEL'])
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("ORI_QU1 Histogram")
plt.xlabel("(m3/min)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/5:
h=list(df['HEI'])
q=[7.5*(x/10)**(1/7) for x in h]
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("VEL2 Histogram")
plt.xlabel("(m/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/6:
h=list(df['HEI'])
q=[7.5*(x/10)**(1./7.) for x in h]
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("VEL2 Histogram")
plt.xlabel("(m/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/7:
h=list(df['HEI'])
q=[7.5*(x/10)**(1./7.) for x in h]
minq=2 #min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("VEL2 Histogram")
plt.xlabel("(m/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
269/8:
!cd /home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke
run csv2orl_2
269/9:
!cd /home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke
run csv2orl_2.py
272/1: run csv2orl_2
272/2:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKVEL'])
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
272/3: run csv2orl_2
272/4:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKVEL'])
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
272/5:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKVEL'])
minq=5 #min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
273/1: from numpy import sqrt
273/2: from pandas import *
273/3: run csv2orl_2
273/4: a=list(df_orl['STKFLOW'])
273/5: min(a)
273/6: a=list(df_orl['STKHT'])
273/7: a=list(df_orl['STKHGT'])
273/8: min(a)
273/9: a=list(df_orl['STKDIA'])
273/10: a=list(df_orl['STKDIAG'])
273/11: a=list(df_orl['STKDIAM'])
273/12: min(a)
274/1: run csv2orl_2
274/2:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKDIAM'])
minq=5 #min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/3:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKDIAM'])
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/4:
df=df_orl[df_orl['STKDIAM']<0]
df.head(10)
274/5:
df=df_orl[df_orl['STKDIAM']<0&df_orl['STKHGT']!=0]
df.head(10)
274/6:
df=df_orl[df_orl['STKDIAM']<0 and df_orl['STKHGT']!=0]
len(df)
274/7:
df=df_orl[df_orl['STKDIAM']<0 & df_orl['STKHGT']!=0]
len(df)
274/8:
boo=(df_orl['STKDIAM']<0) & (df_orl['STKHGT']!=0)
df=df_orl[boo]
len(df)
274/9:
boo=(df_orl['STKDIAM']<0) #& (df_orl['STKHGT']!=0)
df=df_orl[boo]
set(list(df['STKHGT']))
274/10: run csv2orl_2
274/11:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKDIAM'])
minq=min(q)
maxq=max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/12: max(q)
274/13:
boo=(df_orl['STKDIAM']==max(q)) #& (df_orl['STKHGT']!=0)
df=df_orl[boo]
df
274/14:
boo=(df_orl['STKDIAM']==max(q)) #& (df_orl['STKHGT']!=0)
df=df_orl[boo]
df['PLANTID']
274/15:
boo=(df_orl['STKDIAM']==max(q)) #& (df_orl['STKHGT']!=0)
df=df_orl[boo]
df['STKHGT']
274/16:
boo=(df_orl['STKDIAM']==max(q)) #& (df_orl['STKHGT']!=0)
df=df_orl[boo]
df['CAS']
274/17: max(q)*0.3048
274/18:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
q=list(df_orl['STKDIAM'])
minq=1.#min(q)
maxq=50 #max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/19:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=df_orl[df_orl['STKID']!='Y000']
q=list(df['STKDIAM'])
minq=1.#min(q)
maxq=50 #max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/20:
"""plot the histogram of datanshan exls file"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
df=df_orl[df_orl['STACKID']!='Y000']
q=list(df['STKDIAM'])
minq=1.#min(q)
maxq=50 #max(q)
bins = np.linspace(minq,maxq, 100)
plt.hist(q, bins, alpha=0.5)
plt.title("Histogram")
plt.xlabel("(ft/s)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/21:
q=list(df['STKHGT'])
min(q),max(q)
274/22:
q=list(df['STKHGT'])
min(q),max(q)*0.3045
274/23:
import numpy as np
q=np.array(list(df['STKHGT']))
min(q),max(q)*0.3045, np.percentile(1,95)*0.3045
274/24:
import numpy as np
q=np.array(list(df['STKHGT']))
min(q),max(q)*0.3045, np.percentile(1,5)*0.3045
274/25:
import numpy as np
q=np.array(list(df['STKHGT']))
min(q),max(q)*0.3045, np.percentile(q,5)*0.3045
274/26:
import numpy as np
q=np.array(list(df['STKHGT']))
min(q),max(q)*0.3045, np.percentile(q,95)*0.3045
274/27:
import numpy as np
q=np.array(list(df['STKDIAM']))
min(q),max(q)*0.3045, np.percentile(q,95)*0.3045
274/28:
import numpy as np
q=np.array(list(df['VEL']))
min(q),max(q)*0.3045, np.percentile(q,95)*0.3045
274/29:
import numpy as np
q=np.array(list(df['STKVEL']))
min(q),max(q)*0.3045, np.percentile(q,95)*0.3045
274/30:
import numpy as np
q=np.array(list(df['STKVEL']*0.3045))
min(q),max(q), np.percentile(q,95)
274/31:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM'])*0.3045)
    print i,min(q),np.percentile(q,5),np.percentile(q,95),max(q)
274/32:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM'])*0.3045)
    print i,min(q),np.percentile(q,5),np.percentile(q,95),max(q)
274/33:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    print i,min(q),np.percentile(q,5),np.percentile(q,95),max(q)
274/34:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    print i,len(q),min(q),np.percentile(q,5),np.percentile(q,95),max(q)
274/35:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    print i,len(q),min(q),np.percentile(q,5),mean(q),np.percentile(q,95),max(q)
274/36:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
274/37:
"""plot the histogram of datanshan exls file"""
def his_q(q)
    import numpy as np
    import matplotlib.pyplot as plt
    import plotly.plotly as py
    minq=min(q)
    maxq=max(q)
    bins = np.linspace(minq,maxq, 100)
    plt.hist(q, bins, alpha=0.5)
    plt.title("Histogram")
    plt.xlabel("(ft/s)")
    plt.ylabel("Frequency")
    fig = plt.gcf()
    plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/38:
"""plot the histogram of datanshan exls file"""
def his_q(q):
    import numpy as np
    import matplotlib.pyplot as plt
    import plotly.plotly as py
    minq=min(q)
    maxq=max(q)
    bins = np.linspace(minq,maxq, 100)
    plt.hist(q, bins, alpha=0.5)
    plt.title("Histogram")
    plt.xlabel("(ft/s)")
    plt.ylabel("Frequency")
    fig = plt.gcf()
    plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
274/39:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    his_q(q)
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
274/40:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(6):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    if i==4:his_q(q)
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
274/41:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    #if i==4:his_q(q)
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
274/42:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    #if i==4:his_q(q)
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
df_h
274/43: df_columns
274/44: df.columns
274/45:
cols=[u'SCC', u'STACKID',             u'STKTEMP',
                                  u'STKFLOW',             u'STKDIAM',                      
                   u'POINTID',                 u'SIC',              u'STKVEL',
                      u'FIPS',                u'XLOC',             u'PLANTID',
                    u'STKHGT',                 u'CAS',            u'ANN_EMIS',
                  u'AVD_EMIS',              ]
df_h[cols]
274/46:
cols=[u'SCC', u'STACKID',             u'STKTEMP',
                                  u'STKFLOW',             u'STKDIAM',                      
                   u'POINTID',                 u'SIC',              u'STKVEL',
                          u'PLANTID',
                    u'STKHGT',                 u'CAS',            u'ANN_EMIS',
                  u'AVD_EMIS',              ]
df_h[cols]
274/47:
cols=[u'SCC', u'STACKID',             u'STKTEMP',
                                  u'STKFLOW',             u'STKDIAM',                      
                   u'POINTID',                        u'STKVEL',
                          u'PLANTID',
                    u'STKHGT',                 u'CAS',            u'ANN_EMIS',
                                ]
df_h[cols]
274/48:
cols=[u'SCC', u'STACKID',             u'STKTEMP',
                                  u'STKFLOW',             u'STKDIAM',                      
                   u'POINTID',                        u'STKVEL',
                          u'PLANTID',
                    u'STKHGT',                 u'CAS',            u'ANN_EMIS',
                                ]
df_h[cols]
274/49:
import numpy as np
lowb=[0,12.5,50,100,150,200]
upb=[12.5,50,100,150,200,251]
for i in xrange(4):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))    
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
his_q(q)
274/50:
import numpy as np
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
for i in xrange(4):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))    
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
his_q(q)
274/51:
import numpy as np
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))    
    print i,len(q),min(q),np.percentile(q,5),np.mean(q),np.percentile(q,95),max(q)
his_q(q)
274/52:
import numpy as np
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))    
    print i,len(q),min(q),np.percentile(q,10),np.mean(q),np.percentile(q,90),max(q)
his_q(q)
274/53: !grep norm /home/python_eg/*/*.py
274/54: !grep stat /home/python_eg/*/*.py|grep import
274/55: !grep data_m /home/python_eg/*/*.py
274/56: !grep ran_p\= /home/python_eg/*/*.py
274/57:
import numpy as np
from scipy import stats
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
ran_p=np.random.random(10000)
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(q),np.percentile(E_q2,90),max(q)
his_q(E_q2)
274/58:
import numpy as np
from scipy import stats
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
ran_p=np.random.random(10000)
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    print i,len(q),min(q),np.percentile(E_q2,5),np.mean(q),np.percentile(E_q2,95),max(q)
#his_q(E_q2)
274/59:
import numpy as np
from scipy import stats
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
ran_p=np.random.random(10000)
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q)
#his_q(E_q2)
274/60:
import numpy as np
from scipy import stats
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
ran_p=np.random.random(10000)
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    if i >=3:
        print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q)
    else:
        print i,len(q),min(q),np.percentile(q,10),np.mean(q),np.percentile(q,90),max(q)
#his_q(E_q2)
274/61:
import numpy as np
from scipy import stats
lowb=[0,12.5,50,100,200]
upb=[12.5,50,100,200,251]
ran_p=np.random.random(10000)
for i in xrange(5):
    boo=(lowb[i]/0.3045<=df['STKHGT']) & (df['STKHGT']<upb[i]/0.3045)
    df_h=df[boo]
    q=np.array(list(df_h['STKDIAM']*0.3045))
    h=np.array(list(df_h['STKHGT']*0.3045))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    if i >=3:
        print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
    else:
        print i,len(q),min(q),np.percentile(q,10),np.mean(q),np.percentile(q,90),max(q),r
#his_q(E_q2)
275/1: (-86.9126 -86.4060)/2
275/2: 55350/1566
275/3: 1.6*1.6
275/4: 1.6*1.6 *1668.6723493
275/5:
with open('/home/SMOKE4.5/data/ge_dat/Surrogates_12km/USA_100_12km.txt') as ftext:
    s=[line.strip('\n').split(';') for line in ftext]
275/6: s[:5]
275/7: del s[0]
275/8: s[:5]
275/9: p=[x[4] for x in s]
275/10: p[:5]
275/11: p=[float(x[4]) for x in s]
275/12: p[:5]
275/13: sum(p)
275/14: len(p)
275/15: from pandas import *
275/16: i=[int(x[3]) for x in s]
275/17: df=DataFrame({'Indx':i,'Port':p})
275/18: df1=df[df['Indx']==1]
275/19: p1=list(df1['Port'])
275/20: sum(p1)
275/21: len(df1)
275/22: f=[x[1]) for x in s]
275/23: f=[x[1] for x in s]
275/24: df['FIPS']=f
275/25: list(set(f))[:10]
275/26: a=list(set(f))
275/27: a.sort()
275/28: a[:5]
275/29: len(a)
275/30: i=[x[2] for x in s]
275/31: df['IndxI']=i
275/32: a=list(set(i))
275/33: len(a)
275/34:  i=[int(x[3]) for x in s]
275/35: a=list(set(i))
275/36: len(a)
275/37: s[:5]
275/38: df_fips=df[df['FIPS']=='13077']
275/39: sum(list(df_fips['Port']))
275/40: sum(list(df_fips=df[df['FIPS']=='13199']))
275/41: sum(list(df[df['FIPS']=='13199']))
275/42: sum(list(df.loc[df['FIPS']=='13199','Port']))
275/43: len(df_fips)
275/44: df_fips
275/45: df_fips2=df[df['FIPS'].map(lambda x: x[0:2] =='06')]
275/46: df_fips2.head(10)
275/47: df_fips2=df[df['FIPS'].map(lambda x: x[0:2] =='13')]
275/48: df_fips2
275/49: sum(list(df_fips2['Port']))
275/50: 19959/1530
275/51: !pwd
275/52: import netCDF4
275/53:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
275/54: fname='/home/WrfRuns/WPS/geo_em.d04.nc'
275/55: df=ncf2df(fname)
275/56: history
275/57: !grep '%his' *py
275/58: !pwd
275/59: !grep '%his' TEDS9.0/TedsToSmoke/*py
275/60:  %history -g -f history.170730.pm
275/61: vi history.170730.pm
275/62: !vi history.170730.pm
275/63: cd TEDS9.0/TedsToSmoke/
275/64: !pwd
276/1: from pandas import *
276/2: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
276/3: import numpy as np
276/4: from scipy import stats
276/5: lowb=[0,12.5,50,100,200]
276/6: upb=[12.5,50,100,200,251]
276/7: ran_p=np.random.random(10000)
276/8: df_pv.columns
276/9:
df=df_pv[df_pv['NO_S']!='Y000']
for i in xrange(5):
    boo=(lowb[i]<=df['HEI']) & (df['HEI']<upb[i])
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    if i >=3:
        print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
    else:
        print i,len(q),min(q),np.percentile(q,10),np.mean(q),np.percentile(q,90),max(q),r
276/10: h=df_pv['HEI']
276/11: cut(h,10)
276/12: h=df['HEI']
276/13: cut(h,10)
276/14: cut(h,11)
276/15: cut(h,9)
276/16: min(h)
276/17: df['HEI_cat']=list(cut(h,10))
276/18: a=list(cut(h,10))
276/19: len(a)
276/20: len(df)
276/21: df['HEI_cat']=a
276/22: df.reset_index()
276/23: df=df.reset_index()
276/24: df['HEI_cat']=a
276/25: df.head(1)
276/26: len(df[df['HEI_cat']==(50.08, 75.07]])
276/27: len(df[df['HEI_cat']=='(50.08, 75.07]'])
276/28: type(a[0])
276/29: len(df[df['HEI_cat']==(50.08, 75.07]])
276/30: a=list(cut(h,10,labels=[x for x in xrange(10)]))
276/31: a[:5]
276/32: df['HEI_cat']=a
276/33: len(df[df['HEI_cat']==10])
276/34: len(df[df['HEI_cat']==9])
276/35: len(df[df['HEI_cat']==0])
276/36: a=list(cut(h,10))
276/37: df['HEI_intv']=a
276/38: set(a)
276/39: a=list(a)
276/40: a.sort
276/41: a.sort()
276/42: a[0]
276/43: a[0][1]
276/44:
for i in xrange(10):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0:
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/45:
for i in xrange(10):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0:
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),mean(h),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/46:
for i in xrange(10):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0:
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),np.mean(h),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/47: a=list(cut(h,5))
276/48: df['HEI_intv']=a
276/49: h=df['HEI']
276/50: a=list(cut(h,5))
276/51: df['HEI_intv']=a
276/52: a=list(cut(h,5,labels=[x for x in xrange(5)]))
276/53: df['HEI_cat']=a
276/54:
for i in xrange(5):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0:
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),np.mean(h),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/55: a=list(cut(h,10))
276/56: set(a)
276/57: h=df['HEI']
276/58: a=list(cut(h,10))
276/59: set(a)
276/60: history
276/61: run qa.py
276/62: run qa.py
276/63: df_4=df[df['HEI_cat']==7]
276/64: df_4
276/65: df_4['DIA']
276/66: df_4['HEI']
275/65: run qa.py
275/66: df_7=df[df['HEI_cat']==7]
275/67: df_7
276/67: run qa.py
276/68: run qa.py
276/69: run qa.py
276/70:
for i in xrange(10):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0:
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),np.mean(h),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/71: df_7=df[df['HEI_cat']==7]
276/72:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    a=[x/10. for x in a]
    for j in xrange(len(a)):
        print j
276/73:
df=df_pv[df_pv['NO_S']!='Y000']
for i in xrange(idv):
    boo=(lowb[i]<=df['HEI']) & (df['HEI']<upb[i])
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/74:
df=df_pv[df_pv['NO_S']!='Y000']
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/75:
df=df_pv[df_pv['NO_S']!='Y000']
HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/76:
df=df_pv[df_pv['NO_S']!='Y000']
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/77: df_7=df[df['HEI_cat']==7]
276/78:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    a=[x/10. for x in a]
    for j in xrange(len(a)):
        df_pv.loc[df_pv['C_NO']==i,'HEI'][j]=a[j]
276/79:
df=df_pv[df_pv['NO_S']!='Y000']
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/80: df_7
276/81: df_7['HEI']
276/82: a
276/83:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/84: run qa.py
276/85: run qa.py
276/86:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/87:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    print i,a
276/88: a[0]
276/89: a
276/90: run qa.py
276/91:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/92:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    print i,a
276/93:
for i in set(df_7['C_NO']):
    a=list(df_pv.loc[df_pv['C_NO']==i,'HEI'])
    a=[x/10. for x in a]
    for j in xrange(len(a)):
        df_pv.loc[df_pv['C_NO']==i,'HEI'][j]=a[j]
276/94:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    print i,a
276/95:
for i in set(df_7['C_NO']):
    a=list(df_pv.loc[df_pv['C_NO']==i,'HEI'])
    a=[x/10. for x in a]
    df_pv.loc[df_pv['C_NO']==i,'HEI']=a
276/96:
for i in set(df_7['C_NO']):
    a=df_pv.loc[df_pv['C_NO']==i,'HEI']
    print i,a
276/97:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    q=np.array(list(df_h['DIA']))
    h=np.array(list(df_h['HEI']))
    data_m,data_s=stats.norm.fit(q)
    E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
    r=np.mean(q)/np.mean(h)
    print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/98:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        print i,len(q),min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/99:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),min(q),h,np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/100: df_6=df[df['HEI_cat']==6]
276/101: df_6
276/102: print(df_6)
276/103: print(df_6).encode('big5')
276/104: s=list(df_6['COMP_NAM'])
276/105:
for i in set(s):
    print s
276/106:
for i in set(s):
    print (s)
276/107:
for i in set(s):
    print i.encode('big5')
276/108:
for i in set(s):
    print i.decode('big5')
276/109:
for i in set(s):
    print i
276/110: s=(df_6['COMP_NAM'],df_6['HEI'])
276/111: print s
276/112:
for i in set(s):
    print i
276/113:
for i in s:
    print i
276/114:
for i in s:
    print i[0],s[1]
276/115:
for i in set(s):
    print i
276/116:
for i in s:
    print i
276/117: s=list(df_6['COMP_NAM'])
276/118:
for i in s:
    print i
276/119: d=list(df_6['DIA'])
276/120: d
276/121: run qa.py
276/122:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/123: run qa.py
276/124:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/125: df_8=df[df['HEI_cat']==8]
276/126: s=list(df_6['COMP_NAM'])
276/127:
for i in list(df_8['COMP_NAM']):
    print i
276/128:
for i in list(df_8['DIA']):
    print i
276/129:
for i in list(df_8['HEI']):
    print i
276/130:
for i in list(df_8['HEI']):
    print i
276/131: run qa.py
276/132: run qa.py
276/133: run qa.py
276/134:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/135: df_5=df[df['HEI_cat']==5]
276/136: dia=list(df_5['DIA'])
276/137: h=list(df_5['HEI'])
276/138: r=[x/y for x y in zip(dia,h)]
276/139: r=[x/y for x, y in zip(dia,h)]
276/140: df_5=df[df['HEI_cat']==5].reset_index()
276/141: dia=list(df_5['DIA'])
276/142: h=list(df_5['HEI'])
276/143: r=[x/y for x, y in zip(dia,h)]
276/144: df_5['r']=r
276/145: len(df_5[df_5['r']<0.01])
276/146: df_5[df_5['r']<0.01]
276/147: a=df_5[df_5['r']<0.01].reset_index()
276/148: a=df_5[df_5['r']<0.01]
276/149: a=a.reset_index()
276/150: a
276/151: del a[level_0]
276/152: del a['level_0']
276/153: del a['index']
276/154: a
276/155: a=a.reset_index()
276/156:
for i in list(a['COMP_NAM']):
    print i
276/157:
for i in list(a['DIA']):
    print i
276/158:
for i in list(a['HEI']):
    print i
276/159:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/160: history
276/161:
for i in list(a['COMP_NAM','HEI','DIA']):
    print i
276/162:
for i in a['COMP_NAM','HEI','DIA']:
    print i
276/163:
c=a['COMP_NAM','HEI','DIA']
for i in c:
    print i
276/164: c
276/165:
c=a[['COMP_NAM','HEI','DIA']]
for i in c:
    print i
276/166: c=['COMP_NAM','HEI','DIA']
276/167:
for i in a[c]:
    print i
276/168: a[c]
276/169: icat=4
276/170: df_i=df[df['HEI_cat']==icat].reset_index()
276/171: dia=list(df_i['DIA'])
276/172: h=list(df_i['HEI'])
276/173: r=[x/y for x, y in zip(dia,h)]
276/174: len(df_5[df_5['r']<0.01])
276/175: a=df_5[df_5['r']<0.01]
276/176:
for i in list(a['COMP_NAM']):
        print i
    for i in list(a['DIA']):
276/177:     print i
276/178:     print i
276/179:
for i in list(a['COMP_NAM']):
    print i
for i in list(a['DIA']):
    print i
for i in list(a['HEI']):
    print i
276/180: icat
276/181: len(df_i[df_i['r']<0.01])
276/182: df_i['r']=r
276/183: len(df_i[df_i['r']<0.01])
276/184: a=df_i[df_i['r']<0.01]
276/185:
for i in list(a['COMP_NAM']):
    print i
for i in list(a['DIA']):
    print i
for i in list(a['HEI']):
    print i
276/186:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/187: icat=3
276/188: run ck.py
276/189: df_i=df[df['HEI_cat']==icat].reset_index()
276/190: dia=list(df_i['DIA'])
276/191: h=list(df_i['HEI'])
276/192: r=[x/y for x, y in zip(dia,h)]
276/193: df_i['r']=r
276/194: len(df_i[df_i['r']<0.01])
276/195: a=df_i[df_i['r']<0.01]
276/196:
for i in list(a['COMP_NAM']):
    print i
for i in list(a['DIA']):
    print i
for i in list(a['HEI']):
    print i
276/197: len(df_i[df_i['DIA']==0.1])
276/198: icat
276/199:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/200: icat=2
276/201: df_i=df[df['HEI_cat']==icat].reset_index()
276/202: df_i=df[df['HEI_cat']==icat].reset_index()
276/203: boo=(df['HEI_cat']==icat) & (df['DIA']>5.)
276/204: df_i=df[boo].reset_index()
276/205: len(df_i)
276/206: a=df_i.sort_values('DIA')
276/207: a['DIA']
276/208:
for i in list(a['COMP_NAM'])[-12:]:
    print i
for i in list(a['DIA'])[-12:]:
    print i
for i in list(a['HEI'])[-12:]:
    print i
276/209:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/210: icat=1
276/211: boo=(df['HEI_cat']==icat) & (df['DIA']>5.)
276/212: df_i=df[boo].reset_index()
276/213: len(df_i)
276/214: a=df_i.sort_values('DIA')
276/215: list(a['DIA'])[-20:]
276/216:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in list(a['DIA'])[-20:]:
    print i
for i in list(a['HEI'])[-20:]:
    print i
276/217:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in xrange(-20:len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/218:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in xrange(-20,len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/219:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in xrange(len(a)-20,len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/220: a[a['DIA']==14.1]
276/221: a[a['DIA']==14.1].head(1)
276/222: c=df.columns
276/223: a.loc0[a['DIA']==14.1,c].head(1)
276/224: a.loc[a['DIA']==14.1,c]
276/225:
s=[]
for i in c:
    if i[-4:]=='_EMI':s.append(i)
276/226: s
276/227: a[s]
276/228: a.loc[a['DIA']==14.1,s]
276/229:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in xrange(len(a)-20,len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/230: a.loc[a['DIA']==12.38,s]
276/231: icat
276/232: run qa.py
276/233: run qa.py
276/234:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/235: icat=0
276/236: boo=(df['HEI_cat']==icat) & (df['DIA']>5.)
276/237: df_i=df[boo].reset_index()
276/238: len(df_i)
276/239: a=df_i.sort_values('DIA')
276/240:
for i in list(a['COMP_NAM'])[-20:]:
    print i
for i in xrange(len(a)-20,len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/241:
for i in list(a['COMP_NAM'])[-40:]:
    print i
for i in xrange(len(a)-40,len(a)):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/242:
for i in list(a['COMP_NAM'])[:40]:
    print i
for i in xrange(40):
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/243: boo=(df['HEI_cat']==icat) & (df['DIA']>9.76)
276/244: df_i=df[boo].reset_index()
276/245: a=df_i.sort_values('DIA')
276/246:
for i in list(a['COMP_NAM'])[:10]:
    print i
for i in xrange(10):
    
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/247: boo=(df['HEI_cat']==icat) & (df['DIA']>=9.76)
276/248: df_i=df[boo].reset_index()
276/249: a=df_i.sort_values('DIA')
276/250:
for i in list(a['COMP_NAM'])[:10]:
    print i
for i in xrange(10):    
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/251: len(a)
276/252:
for i in set(a['COMP_NAM']):
    print i
276/253:
for i in list(a['COMP_NAM'])[10:30]:
    print i
for i in xrange(10,30):    
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/254: dia=list(a['DIA'])
276/255: h=list(a['HEI'])
276/256: r=[x/y for x, y in zip(dia,h)]
276/257: a['r']=r
276/258: a=a.sort_values('r')
276/259:
for i in list(a['COMP_NAM'])[-30:]:
    print i
for i in xrange(len(a)-30,len(a)):    
    print list(a['DIA'])[i],list(a['HEI'])[i]
276/260:
for i in list(a['COMP_NAM'])[-30:]:
    print i
for i in xrange(len(a)-30,len(a)):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/261:
for i in list(a['COMP_NAM'])[-60:30]:
    print i
for i in xrange(len(a)-60,len(a)-30):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/262:
for i in list(a['COMP_NAM'])[-90:60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/263:
for i in list(a['COMP_NAM'])[-90:-60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/264: a=a.sort_values(['r'])
276/265:
for i in list(a['COMP_NAM'])[-90:-60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/266: a.reset_index()
276/267: del a['index']
276/268: del a['level_0']
276/269: a.columns
276/270: a['r']
276/271:
for i in list(a['COMP_NAM'])[-90:-60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/272: a=a.sort_values(['r'])
276/273:
for i in list(a['COMP_NAM'])[-90:-60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/274: dia=list(a['DIA'])
276/275: h=list(a['HEI'])
276/276: r=[x/y for x, y in zip(dia,h)]
276/277: a['r']=r
276/278: a=a.sort_values(['r']).reset_index()
276/279: del a['level_0']
276/280: del a['index']
276/281:
for i in list(a['COMP_NAM'])[-90:-60]:
    print i
for i in xrange(len(a)-90,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/282: len(a)
276/283:
for i in list(a['COMP_NAM'])[:-60]:
    print i
for i in xrange(0,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/284: boo=(df['HEI_cat']==icat) & (df['DIA']==18.3)
276/285: b=df[boo].reset_index()
276/286: len(b)
276/287: boo=(df['HEI_cat']==icat) & (df['HEI']==18.3)
276/288: len(b)
276/289: icat
276/290: boo=(df['HEI_cat']==icat) & (df['DIA']==24.0)
276/291: boo=(df['HEI_cat']==icat) & (df['HEI']==18.3)
276/292: b=df[boo].reset_index()
276/293: len(b)
276/294: boo=(df['HEI_cat']==icat) & (df['HEI']==18.3) & (df['DIA']==24.0)
276/295: b=df[boo].reset_index()
276/296: len(b)
276/297:
for i in list(b['COMP_NAM']):
    print i
276/298:
for i in list(a['COMP_NAM'])[:-60]:
    print i
for i in xrange(0,len(a)-60):    
    print list(a['DIA'])[i],list(a['HEI'])[i],list(a['r'])[i]
276/299: min(df_i['DIA'])
276/300: b
276/301: run qa.py
276/302:
df=df_pv[df_pv['NO_S']!='Y000'].reset_index()
df['HEI_cat']=list(cut(df['HEI'],idv,labels=[x for x in xrange(idv)]))
for i in xrange(idv):
    boo=df['HEI_cat']==i
    df_h=df[boo]
    if len(df_h)>0 :
        q=np.array(list(df_h['DIA']))
        h=np.array(list(df_h['HEI']))
        data_m,data_s=stats.norm.fit(q)
        E_q2 = stats.norm.ppf(ran_p, loc=data_m, scale=data_s)
        r=np.mean(q)/np.mean(h)
        h=np.mean(h)
        print i,len(q),h,min(q),np.percentile(E_q2,10),np.mean(E_q2),np.percentile(E_q2,90),max(q),r
276/303: run qa.py
276/304: run qa.py
276/305: run csv2orl_2
276/306: col=df_orl.columns
276/307: col=col.sort()
276/308: col.sort()
276/309: col=list(df_orl.columns)
276/310: col.sort()
276/311: col
276/312: df_orl['PLANT'][5:]
276/313: col
276/314: df=df_orl[df_orl['STACKID'].map(lambda x:x[0]=='P')]
276/315: list(df['STACKID'])[:5]
276/316: !vi qa.py
276/317: run del_dup2
276/318: run del_dup2
276/319: run del_dup2
276/320: df.columns
276/321: df.head(5)
276/322: :q
278/1: run del_dup2
279/1: run del_dup2
279/2: run del_dup2
279/3: df.columns
280/1: run del_dup
280/2: run del_dup2
280/3: cols=['HEI', 'DIA', 'C_NO']
280/4: df=df_pv[cols]
280/5: df.columns
280/6: run del_dup2
280/7: df=df[cols]
280/8: df=df.reset_index()
280/9: run del_dup2
280/10: df=df.reset_index()
280/11: df.head(10)
281/1: run del_dup2
281/2: df.head(5)
281/3: df=df.reset_index()
281/4: df.head(5)
281/5: 'index' in cols
281/6: 'index' in df.columns
281/7: del df['index']
281/8: 'index' in df.columns
282/1: run del_dup2
282/2: df.columns
282/3: cols
282/4: run del_dup2
282/5: cols
282/6: run del_dup2
282/7: df_i
282/8: run del_dup2
282/9: run del_dup2
282/10: run del_dup2
282/11: !lst
282/12: run del_dup2
282/13: run del_dup2
282/14: run del_dup2
282/15: cols=['HEI', 'DIA', 'C_NO']
282/16: df=df_pv[cols]
282/17: df=df.reset_index(['C_NO'])
282/18: d=df.reset_index(['C_NO'])
282/19: d=df.reset_index()
282/20: d.head(10)
282/21: df.head(5)
282/22: run del_dup2
282/23: run del_dup2
282/24: !lst
282/25: run qa
282/26: !lst
282/27:
def rms(a):
    return sqrt(mean(square(a)))
282/28: rms([1,2])
282/29:
def rms(a):
    return sqrt(np.mean(np.square(a)))
282/30: rms([1,2])
282/31:
def rms(a):
    return np.sqrt(np.mean(np.square(a)))
282/32: rms([1,2])
282/33: col_id=["C_NO"]
282/34: df_pv5=pivot_table(df,index=col_id,values=['DIA'],aggfunc=rms)
282/35: df_pv5.head(10)
282/36: max(df_pv5['DIA'])
282/37: df_pv5=pivot_table(df,index=col_id,values=['HEI'],aggfunc=max)
282/38: df_pv5.head(10)
282/39: max(df_pv5['HEI'])
282/40: min(df_pv5['HEI'])
282/41: run del_dup3
282/42: run del_dup3
282/43: df_pv.columns
282/44: cols=list(df.columns)[1:]
282/45: cols
282/46: col_mn
282/47: from mostfreqword import *
282/48: col_id=["C_NO"]
282/49: col_na=["NO_P","COMP_NAM","COMP_KIND1","DICT_NO","EQ_1","EQ_2","NO_S","SCC"]
282/50: col_mn=['TEMP','UTM_E', 'UTM_N','HY1','HD1']
282/51: cols=list(df.columns)[1:]
282/52: col_em=filter((lambda x: 'EMI' in x),cols)
282/53: col_em.append('ORI_QU1')
282/54: col_ef=filter((lambda x: 'EFF' in x),cols)
282/55: df_pv1=pivot_table(df,index=col_id,values=col_em,aggfunc=np.sum)
282/56: df_pv2=pivot_table(df,index=col_id,values=col_ef,aggfunc=np.mean)
282/57: df_pv3=pivot_table(df,index=col_id,values=col_mn,aggfunc=np.mean)
282/58:     df_pv4=pivot_table(df,index=col_id,values=col_na,aggfunc=mostfreqword)
282/59: df_pv4=pivot_table(df,index=col_id,values=col_na,aggfunc=mostfreqword)
282/60:     df_pv5=pivot_table(df,index=col_id,values=['DIA'],aggfunc=rms)
282/61:     df_pv6=pivot_table(df,index=col_id,values=['HEI'],aggfunc=max)
282/62:     df_pv=concat((df_pv1,df_pv2,df_pv3,df_pv4,df_pv5,df_pv6),axis=1)
282/63: df_pv['VEL']=[q/(3.14159*d**2/4) for q,d in zip(list(df_pv['ORI_QU1']),list(df_pv['DIA']))]
282/64: q=list(df_pv['ORI_QU1'])
282/65: d=list(df_pv['DIA'])
282/66: df_pv['VEL']=[q/(3.14159*d**2/4) for q,d in zip(q,d)]
282/67: len(q),len(d)
282/68: len(df_pv)
282/69: df_pv.columns
282/70: df_pv={}
282/71: df_pv5=pivot_table(df,index=col_id,values=['DIA'],aggfunc=rms)
282/72: df_pv6=pivot_table(df,index=col_id,values=['HEI'],aggfunc=max)
282/73: df_pv=concat((df_pv1,df_pv2,df_pv3,df_pv4,df_pv5,df_pv6),axis=1)
282/74: df_pv.columns
282/75: col_em
282/76: list(df_pv['ORI_QU1'])[:5]
282/77: min(list(df_pv['DIA']))
282/78: d=[max(0,x) for x in list(df_pv['DIA'])]
282/79: df_pv['VEL']=[q/(3.14159*d**2/4) for q,d in zip(q,d)]
282/80: q=list(df_pv['ORI_QU1'])
282/81: len(q)
282/82: df_pv['VEL']=[q/(3.14159*d**2/4) for q,d in zip(q,d)]
282/83: dia=[max(0,x) for x in list(df_pv['DIA'])]
282/84: qu=list(df_pv['ORI_QU1'])
282/85: df_pv['VEL']=[q/(3.14159*d**2/4) for q,d in zip(qu,dia)]
282/86: type(qu)
282/87: type(dia)
282/88: vel=[q/(3.14159*d**2/4) for q,d in zip(qu,dia)]
282/89: q
282/90: d
282/91: len(vel)
282/92: vel[:5]
282/93: dia[3]
282/94: dia=[max(0.1,x) for x in list(df_pv['DIA'])]
282/95: vel=[q/(3.14159*d**2/4) for q,d in zip(qu,dia)]
283/1: run del_dup3
283/2: df_pv.head(10)
283/3: run del_dup3
283/4: run del_dup3
283/5: df_pv.head(10)
283/6: run del_dup3
283/7: df_pv.head(10)
283/8: df_pv.columns
283/9: df_pv.index
283/10: df_pv['C_NO']]
283/11: df_pv['C_NO']
283/12: df_pv.col
283/13: df_pv.columns
283/14: run del_dup3
283/15: df_pv.columns
283/16: 'C_NO' in df_pv.columns
283/17: 'C_NO' in df.columns
283/18: run del_dup3
283/19: 'C_NO' in df_pv.columns
283/20: run del_dup3
283/21: len(df_pv)
283/22: !ls
283/23: !lst
283/24: !cp df_pv3.csv df_pv.csv
283/25: run csv2orl_2
275/68: !top
275/69:
with open('/home/backup/2008Backup/m3_all/models3/vbird/emission/teds5.0_2000/ge_dat/agpro.004.txt.alltaiwan') as ftext:
    s=[line.strip('\n').split() for line in ftext]
275/70: del s[0]
275/71: s[:5]
275/72: x1=[x[1] for x in s]
275/73: len(x1)
275/74: len(set(x1))
275/75: x2=[x[2] for x in s]
275/76: x2=[int(x[2]) for x in s]
275/77: min(x2),max(x2)
275/78: x3=[int(x[3]) for x in s]
275/79: min(x3),max(x3)
275/80: import netCDF4
275/81: help(netCDF4)
275/82: fnmae='/home/WrfRuns/WPS/geo_em.d04.nc'
275/83:  nc = netCDF4.Dataset(fname)
275/84: cols=list(nc.variables)
275/85: cols
275/86: c='LANDUSEF'
275/87:  a=list(nc.variables[c])
275/88: len(a)
275/89: a
275/90: a1=[x[0] for x in a]
275/91: len(a1)
275/92: a2=[x[0] for x in a1]
275/93: len(a2)
275/94: a2
275/95: a3=[x[0] for x in a2]
275/96: len(a3)
275/97: a3
275/98: a1=[x for x in a[0]]
275/99: len(a1)
275/100: a1[0]
275/101: len(a1[0])
275/102: cols
275/103: a1[0][0]
275/104: len(a1[0][0])
275/105: a1[13][0]
275/106: a1[13][45]
275/107: a1[13][50]
275/108: a1[15][50]
275/109: history
284/1:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
284/2:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
284/3:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(-1.0,0.3, 100)
plt.hist(monin, bins, alpha=0.5)
plt.title("1/L Histogram")
plt.xlabel("1/L (1/m)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
285/1: import pydat
285/2: import Pydat
285/3: import pydap.handlers.cdms
285/4: help()
286/1: import netCDF4
286/2:
def ncf2df(fname):
    nc = netCDF4.Dataset(fname)
    cols=list(nc.variables)
    d={}
    for c in cols:
        if c=='TFLAG':continue
        a=list(nc.variables[c])
        for i in xrange(3):
            if len(a)==1:
                a=[x for x in a[0]]
            else:
                break
        a=[x[0] for x in a]
        d.update({c: a})
    return DataFrame(d)
286/3: fnmae='/home/WrfRuns/WPS/modis/geo_em.d04.nc'
286/4: fname='/home/WrfRuns/WPS/modis/geo_em.d04.nc'
286/5: nc = netCDF4.Dataset(fname)
286/6: cols=list(nc.variables)
286/7: cols
286/8: c='LANDUSEF'
286/9: a=list(nc.variables[c])
286/10: type a
286/11: type(a)
286/12: a1=[x for x in a[0]]
286/13: a1[0][0]
286/14: len(a1[0][0])
286/15: a1[13][0]
286/16: a1[16][0]
286/17: a1[16][50]
286/18: len(a1[16])
286/19: a1[16][150]
286/20: a1[16][100]
286/21: a1[16][137]
286/22: len(a1[16][137])
286/23: from pandas import *
286/24: df=DataFrame({})
286/25: n=20*138*78
286/26: df['ix']=[0 for x in xrange(n)]
286/27: df['iy']=[0 for x in xrange(n)]
286/28: df['lu']=[0 for x in xrange(n)]
286/29: df['value']=[0 for x in xrange(n)]
286/30: a1[16][137][0]
286/31: a1[16][137][77]
286/32:
seq=0
for i in xrange(78):
    for j in xrange(138):
        for l in xrange(20):
            df.loc[seq,'ix']=i
            df.loc[seq,'iy']=j
            df.loc[seq,'lu']=l
            df.loc[seq,'value']=a1[l][j][i]
            seq=seq+1
286/33: len(df)
286/34: df.head(10)
286/35: df.head(100)
286/36: fname2='lu.txt'
286/37: fo=open(fname2,'rw+')
286/38: !vi lu.txt
286/39: fo=open(fname2,'rw+')
286/40:
for j in xrange(138):
    for l in xrange(20):
        fo.write(a1[l][j])
286/41: !vi lu.txt
286/42: fo=open(fname2,'rw+')
286/43:
for j in xrange(138):
    for l in xrange(20):
        fo.write(a1[l][j],%f)
286/44:
for j in xrange(138):
    for l in xrange(20):
        fo.write(a1[l][j],fmt='f%')
286/45:
for j in xrange(138):
    for l in xrange(20):
        fo.write(a1[l][j],'f%')
286/46:
for j in xrange(138):
    for l in xrange(20):
        fo.write(a1[l][j])
286/47: !vi lu.txt
286/48:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(x) for x in a1[l][j]]
286/49:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
286/50: !vi lu.txt
286/51: !head lu.txt
286/52:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
        fo.write("\n")
286/53: !head lu.txt
286/54: !vi lu.txt
286/55:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
        fo.write("\n")
286/56: !vi lu.txt
286/57: fo=open(fname2,'rw+')
286/58:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
        fo.write("\n")
286/59: !vi lu.txt
286/60: cols
287/1: import netCDF4
287/2: fname='/home/WrfRuns/WPS/modis/geo_em.d04.nc'
287/3: history
287/4: %history -g -f history.170818.pm
287/5: !pwd
287/6: nc = netCDF4.Dataset(fname)
287/7: c='LANDUSEF'
287/8: a=list(nc.variables[c])
287/9: fname='/home/WrfRuns/WPS/modis/geo_em.d04.nc'
287/10: a=list(nc.variables[c])
287/11: cols=list(nc.variables)
287/12: a=list(nc.variables[c])
287/13: cols
287/14: nc = netCDF4.Dataset(fname)
287/15: cols=list(nc.variables)
287/16: cols
287/17: a=list(nc.variables[c])
287/18: a1=[x for x in a[0]]
287/19: fname2='lu.txt'
287/20: !vi lu.txt
287/21:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
        fo.write("\n")
287/22: fo=open(fname2,'rw+')
287/23:
for j in xrange(138):
    for l in xrange(20):
        [fo.write(str(x)+' ') for x in a1[l][j]]
        fo.write("\n")
287/24: len(a1[16])
287/25: len(a1[16][137])
287/26: !vi lu.txt
288/1:  %history -g -f history.170818.pm
289/1: from pandas import *
290/1: exp(-10.)
290/2: from numpy import *
290/3: exp(-10.)
290/4: exp(-50.)
290/5: exp(-500.)
291/1: from numpy import *
291/2: exp(-50.) + exp(-50.)
291/3: exp(-50.) + exp(-49.)
292/1: from numpy import *
292/2: fname='pig_id.txt_file'
292/3:
with open(fname) as ftext:
    s=[line.strip('\n').split() for line in ftext]
292/4: len(s)
292/5: s[0]
292/6: s[1]
292/7: s[:10]
292/8: s[11:20]
292/9: s[21:50]
292/10: s[37]
292/11: del s[0:38]
292/12: s[0]
292/13: df=DataFrame({})
292/14: df=DataFrame({'x':s[:][1],'y':s[:][2]})
292/15: from pandas import *
292/16: df=DataFrame({'x':s[:][1],'y':s[:][2]})
292/17: col=['x','y','e1','e2','e3','h','d','t','v','q']
292/18: len(s[1])
292/19: c={}
292/20:
for i in xrange(10):
    c.update({col[i]:s[:][i+1]})
292/21: df=DataFrame(c)
292/22: df.head(10)
292/23: df=df[col]
292/24: df.head(10)
292/25: s[100][0]
292/26: s[100][2]
292/27: s[0:9][0]
292/28: s[0:9][1]
292/29: s[1]
292/30: c={}
292/31:
for i in xrange(10):
    c.update({col[i]:s[i+1][:]})
292/32: df=DataFrame(c)
292/33: df=df[col]
292/34: df.head(10)
292/35: a=len(s)
292/36: a
292/37: c={}
292/38:
for i in xrange(10):
    c.update({col[i]:s[0:a][i+1]})
292/39: df=DataFrame(c)
292/40: df=df[col]
292/41: df.head(10)
292/42: i=1
292/43: x=s[0:a][i+1]
292/44: x
292/45: x=[s[x][1] for x in xrange(a)]
292/46: x
292/47:
c={}
for i in xrange(10):
    x=[s[j][i+1] for j in xrange(a)]
    c.update({col[i]:x})
292/48: df=DataFrame(c)
292/49: df=df[col]
292/50: df.head(10)
292/51: len(set(q))
292/52: len(set(df['q']))
292/53: del df[q]
292/54: del df['q']
292/55: min(df['d'])
292/56: a=df['d']
292/57: a.sort()
292/58: a.sort
292/59: a_sort()
292/60: sort(a)
293/1: from openpyxl import load_workbook
293/2: fname=2013APF.xlsx
293/3: fname='2013APF.xlsx'
293/4: wb2= load_workbook(fname)
293/5: print wb2.get_sheet_names()
293/6: s=wb2['SOx']
293/7: s
293/8: from pandas import *
293/9: df_s = DataFrame(s.values)
293/10: df_s.columns
293/11: df_s.head(10)
293/12: n=wb2['NOx']
293/13: df_n = DataFrame(n.values)
293/14: v=wb2['VOCs']
293/15: df_v = DataFrame(v.values)
293/16: p=wb2['TSP']
293/17: df_p = DataFrame(p.values)
293/18:
nox_tpy=[]
for i in xrange(len(df_n)):
    tpy=df_n.loc(i,'4')+df_n.loc(i,'5')+df_n.loc(i,'6')+df_n.loc(i,'7')
    nox_tpy.append(tpy/1000.)
293/19: i=1
293/20: df_n.iloc(i,'4')
293/21: df_n.iloc[i,'4']
293/22: df_n.loc[i,'4']
293/23: df_n.loc[i,4]
293/24: df_n.head(3)
293/25: i
293/26:
nox_tpy=[]
for i in xrange(len(df_n)):
    tpy=0
    for j in xrange(4,8):
        tpy=tpy+df_n.loc(i,j)
    nox_tpy.append(tpy/1000.)
293/27:
nox_tpy=[]
for i in xrange(len(df_n)):
    tpy=0
    for j in xrange(4,8):
        tpy=tpy+df_n.loc[i,j]
    nox_tpy.append(tpy/1000.)
293/28: (i,j)=(0,4)
293/29: df_n.loc[i,j]
293/30:
nox_tpy=[]
for i in xrange(len(df_n)):
    tpy=0
    for j in xrange(4,8):
        tpy=tpy+float(df_n.loc[i,j])
    nox_tpy.append(tpy/1000.)
293/31:
nox_tpy=[0.]
for i in xrange(1,len(df_n)):
    tpy=0
    for j in xrange(4,8):
        tpy=tpy+df_n.loc[i,j]
    nox_tpy.append(tpy/1000.)
293/32: i
293/33: for j in xrange(4,8):print df_n.loc[i,j]
293/34:
nox_tpy=[0.]
for i in xrange(1,len(df_n)):
    tpy=0
    for j in xrange(4,8):
        a=df_n.loc[i,j]
        if type(a) != string: tpy=tpy+a
    nox_tpy.append(tpy/1000.)
293/35: type(a)
293/36: a='ad'
293/37: type(a)
293/38:
nox_tpy=[0.]
for i in xrange(1,len(df_n)):
    tpy=0
    for j in xrange(4,8):
        a=df_n.loc[i,j]
        if type(a) != str: tpy=tpy+a
    nox_tpy.append(tpy/1000.)
293/39:
nox_tpy=[0.]
for i in xrange(1,len(df_n)):
    tpy=0
    for j in xrange(4,8):
        a=df_n.loc[i,j]
        if type(a) == float: tpy=tpy+a
    nox_tpy.append(tpy/1000.)
293/40: len(nox_tpy)
293/41: len(df_n)
293/42: df_n['TPY']=nox_tpy
293/43: df_n.head(10)
293/44: import numpy as npdf_n1=pivot_table(df_n,index=0,values=['TPY'],aggfunc=np.sum)
293/45: import numpy as np
293/46: df_n1=pivot_table(df_n,index=0,values=['TPY'],aggfunc=np.sum)
293/47: df_n1.head(10)
293/48: df_pv=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv.csv')
293/49: df_pv.columns
293/50: df_pv.[:1]
293/51: df_pv.head(:1)
293/52: df_pv.head(0:1)
293/53: df_pv.head(1)
293/54: df_n2=pivot_table(df_pv,index=['C_NO'],values=['NOX_EMI'],aggfunc=np.sum)
293/55: len(df_n2),len(df_n1)
293/56: set(df_n1[0])-set(df_n2['C_NO'])
293/57: df_n2.columns
293/58: df_n1.columns
293/59: df_n1.head(1)
293/60: df_n1.reset_index()
293/61: df_n1=df_n1.reset_index()
293/62: df_n1.head(1)
293/63: df_n2=df_n2.reset_index()
293/64: df_n2.head(1)
293/65: set(df_n1[0])-set(df_n2['C_NO'])
293/66: a=set(df_n1[0])-set(df_n2['C_NO'])
293/67: len(a)
293/68: len(set(df_n1[0]))
293/69: len(df_n2)
293/70: len(set(df_n2['C_NO']))
293/71: boo=df_n2[0] in a
293/72: boo=df_n1[0] in a
293/73: boo=0 in a
293/74: df_a=df_n1[boo]
293/75: sum(df_a['TPY'])
293/76: df_a.head(10)
293/77: df_a=df_n1[boo]['TPY']
293/78: df_n1.head(10)
293/79: df_a=df_n1[boo,'TPY']
293/80: df_a=df_n1[boo]['TPY']
293/81: sum(df_n1.loc[boo,'TPY'])
293/82: sum(df_n1.iloc[boo,'TPY'])
293/83: boo=df_n1[0] in a
293/84: boo=df_n1[0].map(lambda x: x in a)
293/85: len(a)
293/86: df_a=df_n1[boo]
293/87: df_a.head(10)
293/88: sum(df_a['TPY'])
293/89: sum(df_n1['TPY'])
293/90: sum(df_n2['NOX_EMI'])
293/91: len(df_n2)
293/92: len(df_pv)
293/93: df_pv.head(10)
293/94: df_pv.columns
293/95: len(set(df_pv['C_NO']))
293/96: 'E5400878' in set(df_pv['C_NO'])
293/97: 'E5400878' in set(df_n1[0])
293/98: 'E5400878' in a
293/99: b=df_pv['C_NO']
293/100: b.count('E5400878')
293/101: count(b,'E5400878')
293/102: b.count('E5400878')
293/103: b[:5]
293/104: list(b).count('E5400878')
293/105: df_p=read_csv('/home/camxruns/2013/ptse/TEDS9.0/point.csv')
293/106: df_n2=pivot_table(df_p,index=['C_NO'],values=['NOX_EMI'],aggfunc=np.sum)
293/107: len(df_n2)
293/108: df_n2=df_n2.reset_index()
293/109: sum(df_n2['NOX_EMI'])
293/110: a=set(df_n1[0])-set(df_n2['C_NO'])
293/111: len(a)
293/112: boo=df_n1['C_NO']=='E5600841'
293/113: df_n1['C_NO']=df_n1[0]
293/114: boo=df_n1['C_NO']=='E5600841'
293/115: df_n1[boo]
293/116: boo=df_n2['C_NO']=='E5600841'
293/117: df_n2[boo]
293/118: for i in xrange(len(df_n2)):
293/119:
apf=[]
b=set(df_n1['C_NO'])
for i in xrange(len(df_n2)):
    name=df_n2.loc[i,'C_NO']
    a=0.
    if name in b: a=list(df_n1[df_n1[0]==name]['TPY'])[0]
    apf.append(a)
293/120: df_n2['APF']=apf
293/121: df_n2.head(10)
293/122: a=df_n2.sort_values('NOX_EMI')
293/123: a.head(10)
293/124: a.head(-10)
293/125: len(a)
293/126: a[a['C_NO']=='E5600841']
293/127: a.head(-10:)
293/128: a.head(len(a)-10:)
293/129: a.tail(10)
293/130: a.tail(20)
293/131: df_n2['abs_del']=[abs(x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/132: a=df_n2.sort_values('abs_del')
293/133: a.tail(20)
293/134: df_n2['del']=[x-y for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/135: a=df_n2.sort_values('del')
293/136: a.tail(20)
293/137: df_n2['del']=[max(0,x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/138: sum(df_n2['del'])
293/139: df_n2['del']=[max(0,-x+y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/140: sum(df_n2['del'])
293/141: sum(df_n2['abs_del'])
293/142: df_n2.set_index('C_NO').to_csv('df_n.csv')
293/143: !more df_n.csv
293/144: sum(df_n1['TPY'])
293/145: sum(df_n[3])
293/146: df_n.columns
293/147: df_n.head(3)
293/148: df_n.loc[1,3]
293/149: df_n.loc[0,3]
293/150: df_n.loc[0,3]=0
293/151: sum(df_n[3])
293/152: df_n1[0,3]
293/153: df_n1.head(3)
293/154: sum(df_n1['TPY'])
293/155: df_n1=pivot_table(df_n,index=0,values=[3],aggfunc=np.sum)
293/156: sum(df_n1[3])
293/157: df_n1=df_n1.reset_index()
293/158: df_n1.head(3)
293/159:
apf=[]
b=set(df_n1[0])
for i in xrange(len(df_n2)):
    name=df_n2.loc[i,'C_NO']
    a=0.
    if name in b: a=list(df_n1[df_n1[0]==name][3])[0]/1000.
    apf.append(a)
293/160: df_n2['APF']=apf
293/161: df_n2['abs_del']=[abs(x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/162: sum(df_n2['abs_del'])
293/163: df_n2['del']=[max(0,-x+y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/164: sum(df_n2['del'])
293/165: df_n2['del']=[max(0,x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/166: sum(df_n2['del'])
293/167: len(df_n1)
293/168: 7008-350
293/169: len(df_n2)
293/170: len(df_n2)-6658
293/171: len(set(df_n2['C_NO'])-set(df_n1[0]))
293/172: len(set(df_n2['C_NO'])|set(df_n1[0]))
293/173: 14844+350
293/174: DnN=(set(df_n2['C_NO'])-set(df_n1[0]))
293/175: boo=df_n2['C_NO'].map(lambda x: x in DnN)
293/176: sum(df_n2[boo]['NOX_EMI'])
293/177: sum(df_n2['NOX_EMI'])-sum(df_n2[boo]['NOX_EMI'])
293/178: a=set(df_n1[0])-set(df_n2['C_NO'])
293/179: len(a)
293/180: boo_a=df_n1[0].map(lambda x: x in a)
293/181: sum(df_n1[boo_a][3])
293/182: sum(df_n1[3])-sum(df_n2[boo_a][3])
293/183: sum(df_n1[3])
293/184: sum(df_n2[boo_a][3])
293/185: sum(df_n1[3])-sum(df_n1[boo_a][3])
293/186: boo=df_pv['C_NO'].map(lambda x: x in DnN)
293/187: !pwd
293/188: boo=df_pv['C_NO'].map(lambda x: x in DnN)
293/189: df_pv.columns
293/190:
boo=df_pv['C_NO'].map(lambda x: x in DnN)
df_pv[boo]['COMP_NAM']
293/191:
boo=df_pv['C_NO'].map(lambda x: x in DnN)
f=open('tmp.txt','w')
[f.write(x) for x in list(df_pv[boo]['COMP_NAM'])]
293/192: !lst
293/193: !pwd
293/194:
boo=df_pv['C_NO'].map(lambda x: x in DnN)
f=open('tmp.txt','w')
[f.write(x+'\n') for x in list(df_pv[boo]['COMP_NAM'])]
293/195: df_n1=pivot_table(df_n,index=0,values=[3,4,5,6,7],aggfunc=np.sum)
293/196: df_n1=df_n1.reset_index()
293/197: df_n1.head(10)
293/198: tpy_sum=[x*4/1000 for x in list(df_n1[6])]
293/199: tpy_sum=[float(x)*4/1000 for x in list(df_n1[6])]
293/200: sum(tpy_sum)
293/201: tpy_sum
293/202:
for i in len(tpy_sum):
    if tpy_sum[i]==nan: tpy_sum[i]=0
293/203:
for i in xrange(len(tpy_sum)):
    if tpy_sum[i]==nan: tpy_sum[i]=0
293/204: NaN
293/205: Nan
293/206:
for i in len(tpy_sum):
    if  np.isnan(tpy_sum[i]): tpy_sum[i]=0
293/207:
for i in xrange(len(tpy_sum)):
    if  np.isnan(tpy_sum[i]): tpy_sum[i]=0
293/208: sum(tpy_sum)
293/209: sum(df_n1[3])
293/210: tpy_aut[float(x)*4/1000 for x in list(df_n1[7])]
293/211: tpy_aut=[float(x)*4/1000 for x in list(df_n1[7])]
293/212:
for i in xrange(len(tpy_aut)):
    if  np.isnan(tpy_aut[i]): tpy_aut[i]=0
293/213: sum(tpy_aut)
293/214: tpy_win=[float(x)*4/1000 for x in list(df_n1[4])]
293/215:
for i in xrange(len(tpy_win)):
    if  np.isnan(tpy_win[i]): tpy_win[i]=0
293/216: sum(tpy_win)
293/217: tpy_spr=[float(x)*4/1000 for x in list(df_n1[5])]
293/218:
for i in xrange(len(tpy_spr)):
    if  np.isnan(tpy_spr[i]): tpy_spr[i]=0
293/219: sum(tpy_spr)
293/220:
for i in xrange(len(df_n1)):
    for j in xrange(3,8):
        if np.isnan(df_n1.loc[i,j]): df_n1.loc[i,j]=0
        df_n1.loc[i,j]=df_n1.loc[i,j]/1000
293/221: (i,j)
293/222: df_n1.loc[i,j]
293/223: df_n1.loc[i,0]
293/224: df_n1.loc[i,1]
293/225: df_n1.loc[i,2]
293/226: df_n1.head(10)
293/227: len(df_n1)
293/228: i
293/229: df_n1.loc[7007]
293/230: df_n1.loc[7007,4]=0
293/231: for i in xrange(5,8):df_n1.loc[7007,i]=0
293/232: sum(df_n1[7])
293/233: sum(df_n1[7])*4
293/234:
for i in xrange(len(df_n1)):
    for j in xrange(4,8):
        df_n1.loc[i,j]=df_n1.loc[i,j]*4
293/235: sum(df_n1[7])
293/236: %history -g -f history.170907.am
293/237: !pwd
293/238: apf=[]
293/239: b=set(df_n1[0])
293/240:
for i in xrange(len(df_n2)):
    name=df_n2.loc[i,'C_NO']
    a=0.
    if name in b: a=list(df_n1[df_n1[0]==name][7])[0]
    apf.append(a)
df_n2['APF']=apf
df_n2['abs_del']=[abs(x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
df_n2['del']=[x-y for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
a=df_n2.sort_values('del')
a.tail(20)
293/241: a.tail(50)
293/242: sum(df_n2['abs_del
293/243: sum(df_n2['abs_del'])
293/244: sum(df_n2['del'])
293/245: df_n2['del']=[max(0,x-y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/246: sum(df_n2['del'])
293/247: df_n2['del']=[max(0,-x+y) for x,y in zip(list(df_n2['NOX_EMI']),list(df_n2['APF']))]
293/248: sum(df_n2['del'])
293/249: df_n2['COUNTY']=[x[0] for x in df_n2['C_NO']]
293/250: df_n2.head(10)
293/251: a=pivot_table(df_n2,,index=['COUNTY'],values=['NOX_EMI','APF','abs_del','del'],aggfunc=np.sum)
293/252: a=pivot_table(df_n2,index=['COUNTY'],values=['NOX_EMI','APF','abs_del','del'],aggfunc=np.sum)
293/253: a.reset_index()
293/254: a=a.reset_index()
293/255:
def rms(a):
    return np.sqrt(np.mean(np.square(a)))
293/256: rms([1,1])
293/257: df_pv3=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv3.csv')
293/258: df_pv3['DIA'][:30]
293/259: df_pv['DIA'][:30]
293/260: max(df_pv['DIA'])
293/261: max(df_pv3['DIA'])
293/262: a=df_pv3['DIA']
293/263: a=list(df_pv3['DIA'])
293/264: a.sort
293/265: a.sort()
293/266: a[-10:]
293/267: a[-30:]
293/268: df_pv3=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/df_pv3.csv')
293/269: df_pv3.sort_values('DIA')
293/270: a=df_pv3.sort_values('DIA')
293/271: a.tail(30)
293/272: a[a['C_NO']=='E5600841']
293/273: df_pv[df_pv['C_NO']=='E5600841']
293/274: df_p[df_p['C_NO']=='E5600841']
293/275: df_p[df_p['C_NO']=='E5600841']['DIA']
293/276: a=list(df_p[df_p['C_NO']=='E5600841']['DIA'])
293/277:
def rss(a):
    return np.sqrt(np.sum(np.square(a)))
293/278: rss(a)
293/279: len(a)
293/280: df_pv[df_pv['C_NO']=='E5600841']
293/281: rms(a)
293/282: df=df_p
293/283: from mostfreqword import *
293/284: col_id=["C_NO"]
293/285: df_pv5=pivot_table(df,index=col_id,values=['DIA'],aggfunc=rss)
293/286: df_pv6=pivot_table(df,index=col_id,values=['HEI'],aggfunc=max)
293/287: a=concat((df_pv5,df_pv6),axis=1)
293/288: a.head(10)
293/289: a=a.reset_index()
293/290: a=a.sort_values('DIA')
293/291: a.tail(30)
293/292: a[a['C_NO']=='E5600841']['DIA']
293/293: df_p=read_csv('/home/camxruns/2013/ptse/TEDS9.0/TedsToSmoke/pointQA.csv')
293/294: df=df_p
293/295: df_pv5=pivot_table(df,index=col_id,values=['DIA'],aggfunc=rss)
293/296: df_pv6=pivot_table(df,index=col_id,values=['HEI'],aggfunc=max)
293/297: a=concat((df_pv5,df_pv6),axis=1)
293/298: a=a.reset_index()
293/299: a=a.sort_values('DIA')
293/300: a[a['C_NO']=='E5600841']['DIA']
293/301: df_p[df_p['C_NO']=='E5600841']['DIA']
293/302: csc_d=list(df_p[df_p['C_NO']=='E5600841']['DIA'])
293/303: csc_d.sort()
293/304: csc_d[-30:]
293/305: len(csc_d)
293/306: df_p=read_csv('/home/camxruns/2013/ptse/TEDS9.0/point.csv')
293/307: csc_d=list(df_p[df_p['C_NO']=='E5600841']['DIA'])
293/308: len(csc_d)
293/309: csc_d.sort()
293/310: csc_d[-30:]
294/1: import png
294/2: r=png.Reader(file=urllib.urlopen('http://www.schaik.com/pngsuite/basn0g02.png'))
294/3: !pip install urllib
295/1: import png
295/2: import urllib
295/3: r=png.Reader(file=urllib.urlopen('http://www.schaik.com/pngsuite/basn0g02.png'))
295/4: r.read()
295/5: !locate wgrib
295/6: r
295/7: l=list(_[2])
295/8: r.read()
295/9: a=r.read()
295/10: type(a)
295/11: a[2]
295/12: a[_2]
295/13: a_[2]
295/14: l=list(a[2])
295/15: l
295/16: l[0]
295/17: b=png.Reader.asDirect(r)
295/18: b=png.Reader.asDirect()
295/19: png.Reader.asDirect()
295/20: b=r.png.Reader.asDirect()
295/21: b=r.asDirect()
295/22: r2=png.Reader.asDirect(file=urllib.urlopen('http://www.schaik.com/pngsuite/basn0g02.png'))
295/23: r2=png.Reader.asDirect()
295/24: x, y, pixels, meta = r.asDirect()
295/25: r
295/26: r=png.Reader(file='Image.png')
295/27: x, y, pixels, meta = r.asDirect()
295/28: a=r.read()
295/29: !vi wpng.py
295/30: r=png.Reader(file=open('Image.png'))
295/31: r
295/32: r.read()
295/33: x, y, pixels, meta = r.asDirect()
295/34: image = png.Image(pixels, meta)
295/35: type(x)
295/36: x
295/37: y
295/38: type(pixels)
295/39: type(image)
295/40: import numpy
295/41: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pngdata))
295/42: !pip install itertools
295/43: a=list(pixels)
295/44: a=numpy.array(pixels)
295/45: shape(a)
295/46: numpy.shape(a)
295/47: a.shapre
295/48: type(a)
295/49: a
295/50: a=array(list(pixels))
295/51: a=numpy.array(list(pixels))
295/52: a.shape
295/53: a
295/54: a[0]
295/55: a=list(pixels)
295/56: a
295/57: type(pixels)
295/58: pixcels
295/59: pixels
295/60: pixels[0]
295/61: Image
295/62: image = png.Image(pixels, meta)
295/63: a=numpy.array(image)
295/64: a
295/65: numpy.shape(a)
295/66: r=png.Reader(file=urllib.urlopen('http://www.schaik.com/pngsuite/basn0g02.png'))
295/67: a=r.read()
295/68: l=list(a[2])
295/69: l
295/70: len(l)
295/71: l=list(pixcels)
295/72: l=list(pixels)
295/73: len(l)
295/74: r=png.Reader(file=open('Image.png'))
295/75: a=r.read()
295/76: l=list(a[2])
295/77: len(l)
295/78: len(l[0])
295/79: l[0][0]
295/80: l[0]
295/81: import itertools
295/82: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/83: type(pixels)
295/84: image_2d = numpy.vstack(itertools.imap(numpy.uint8, pixels))
295/85: a=numpy.array()
295/86: a=numpy.array([])
295/87: image_2d = numpy.vstack(itertools.imap(numpy.uint8, pixels,a))
295/88: image_2d = numpy.vstack(itertools.imap(numpy.uint8,a))
295/89: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pixels),a)
295/90: itertools.imap(numpy.uint16, pixels)
295/91: a=itertools.imap(numpy.uint16, pixels)
295/92: type a
295/93: type(a)
295/94: image_2d = numpy.vstack(itertools.imap(pixels))
295/95: image_2d = numpy.vstack(pixels)
295/96: type(pixels)
295/97:  png.Reader.asDirect()(open'Image.png')
295/98: x,y,pix,met=png.Reader(file=open('Image.png')).asDirect()
295/99: pix
295/100: x
295/101: y
295/102: image_2d = numpy.vstack(itertools.imap(pix))
295/103: a=itertools.imap(numpy.uint16, pixels))
295/104: a=itertools.imap(numpy.uint16, pixels)
295/105: a
295/106: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/107: image_2d=[]
295/108: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/109: image_2d =+ numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/110: image_2d
295/111: image_2d=numpy.array([])
295/112: image_2d =+ numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/113: image_2d += numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/114: numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/115: !export CUDA_LAUNCH_BLOCKING=1
295/116: image_2d = numpy.vstack(itertools.imap(numpy.uint16, pixels))
295/117: type(l)
295/118: len(l)
295/119: len(l[0])
295/120: l[0]
295/121: im=[704*0,1153*0,3*0]
295/122: im.shape
295/123: im=array([704*0,1153*0,3*0])
295/124: im=numpy.array([704*0,1153*0,3*0])
295/125: im.shape
295/126: im
295/127: im=[704*0,1153*0,3*0]
295/128: im
295/129: im=array([0*704,0*1153,0*3])
295/130: im=numpy.array([0*704,0*1153,0*3])
295/131: im
295/132: im=numpy.array([0]*704,[0]*1153,[0]*3])
295/133: im=numpy.array([0]*704,[0]*1153,[0]*3)
295/134: im=list([0]*704,[0]*1153,[0]*3)
295/135: im=list([[0]*704,[0]*1153,[0]*3])
295/136: im=numpy.array([[0]*704,[0]*1153,[0]*3])
295/137: im.shape
295/138: im
295/139: im=[:,:,:]
295/140: len(l)
295/141: l[100][1000:1002]
295/142: l[100][1000:1003]
295/143: list(l[100][1000:1003])
295/144: x
295/145:
im=[]
for i in xrange(y):
    im2=[]
    for j in xrange(0,x*3,3):
        a=list(l[i][j:j+3])
        im2.append(a)
    im.append(im2)
295/146: ima=numpy.array(im)
295/147: im.shape()
295/148: ima.shape()
295/149: numpy.shape(ima)
295/150: ima[100,333,:]
295/151: l[0][0]
295/152: l[0][0:3]
295/153: ima[0,0,:]
295/154: from PIL import Image
295/155: !pip install PIL
295/156: !pip install pil
295/157: from PIL import Image
295/158: Image.fromarray(ima).save('image.tiff')
295/159: type(ima)
295/160: ima[100,333,:]
295/161: a=Image.fromarray(ima)
295/162: type(ima)
295/163: ima.shape
295/164: ima=numpy.array(ima)
295/165: type(ima)
295/166: a=Image.fromarray(ima)
295/167: a=list(ima)
295/168: a=Image.fromarray(ima)
295/169: import matplotlib
295/170: matplotlib.image.imsave('name.png', ima)
295/171: import cv2
295/172: !pip install cv2
295/173: !pip install OpenCV
295/174: !pip install opencv-python
295/175: import cv2
295/176: cv2.imwrite("filename.png",ima)
295/177: !ls
295/178: cv2.imwrite("filename.tiff",ima)
295/179: cap = Image.open('Image.png')
295/180: im = numpy.array(cap)
295/181: Image.fromarray(im).save('lu_3.tiff')
295/182: !pwd
295/183: !top
295/184: !top
295/185: cd ~/py_programs/tiff/python-kmeans-dominant-colors
295/186:
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import argparse
import utils
import cv2
import numpy as np
from PIL import Image
295/187: run km_leg.py
295/188: run km_leg.py km_leg.py -i legend.png -c 100
295/189: !run km_leg.py km_leg.py -i legend.png -c 100
295/190: run km_leg km_leg.py -i legend.png -c 100
295/191: run km_leg -i legend.png -c 100
295/192: mn
295/193: im[5,200,:],im[5,201,:]
295/194: im[5,200,:],im[5,203,:]
295/195: im[5,200:204,:]
295/196: im[5,100:104,:]
295/197: im[5,100:110,:]
295/198: run km_leg -i legend.png -c 100
295/199: run km_leg -i legend.png -c 400
295/200: im[5,100:110,:]
295/201: mn
295/202: run km_leg -i legend.png -c 500
295/203: im[5,100:110,:]
295/204: cap = Image.open('Image.png')
295/205: im_cap = numpy.array(cap)
295/206: im[:0,:]
295/207: im[:,0,:]
295/208: cap = Image.open('Image.png')
295/209: im = numpy.array(cap)
295/210: im.shape()
295/211: nu.shape(im)
295/212: np.shape(im)
295/213: im[0,0,:]
295/214: im[200,500,:]
295/215: im_cap[200,500,:]
295/216: run km_leg -i legend.png -c 500
295/217: np.shape(im)
295/218: np.shape(im_cap)
295/219: im[5,480:,:]
295/220: mn=np.shape(im_cap)
295/221:
s11(18.14,110.94)
s2=(18.22,129.46)
s32(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if im_cap[i,j,:]==[0,0,0]: 
            c.append(-1)
        else:
            if im_cap[i,j,:]==[255,255,255]: 
                c.append(-1)
        else:
            ipas=0
            for k in xrange(484):
                if im[5,k,:]==im_cap[i,j,:]:
                    ipas=1
                    c.append(k*2.)
                    continue
            if ipas==0:
                c.append(-1)
     pm25.append(c)
295/222:
s11(18.14,110.94)
s2=(18.22,129.46)
s32(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if im_cap[i,j,:]==[0,0,0]: 
            c.append(-1)
        else:
            if im_cap[i,j,:]==[255,255,255]: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,:]==im_cap[i,j,:]:
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
     pm25.append(c)
295/223:
s11(18.14,110.94)
s2=(18.22,129.46)
s32(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if im_cap[i,j,:]==[0,0,0]: 
            c.append(-1)
        else:
            if im_cap[i,j,:]==[255,255,255]: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,:]==im_cap[i,j,:]:
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
   pm25.append(c)
295/224:
s11(18.14,110.94)
s2=(18.22,129.46)
s32(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if im_cap[i,j,:]==[0,0,0]: 
            c.append(-1)
        else:
            if im_cap[i,j,:]==[255,255,255]: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,:]==im_cap[i,j,:]:
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
    pm25.append(c)
295/225:
s1=(18.14,110.94)
s2=(18.22,129.46)
s3=(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if im_cap[i,j,:]==[0,0,0]: 
            c.append(-1)
        else:
            if im_cap[i,j,:]==[255,255,255]: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,:]==im_cap[i,j,:]:
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
    pm25.append(c)
295/226:
s1=(18.14,110.94)
s2=(18.22,129.46)
s3=(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if np.sum(im_cap[i,j,:])==0:
            c.append(-1)
        else:
            if np.sum(im_cap[i,j,:])==255*3: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,:]==im_cap[i,j,:]:
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
    pm25.append(c)
295/227:
s1=(18.14,110.94)
s2=(18.22,129.46)
s3=(28.75,110.15)
s4=(28.76,130.21)
pm25=[]
for i in xrange(mn[0]):
    c=[]
    for j in xrange(mn[1]):
        if np.sum(im_cap[i,j,:])==0:
            c.append(-1)
        else:
            if np.sum(im_cap[i,j,:])==255*3: 
                c.append(-1)
            else:
                ipas=0
                for k in xrange(484):
                    if im[5,k,0]==im_cap[i,j,0] and im[5,k,1]==im_cap[i,j,1] and im[5,k,2]==im_cap[i,j,2] :
                        ipas=1
                        c.append(k*2.)
                        continue
                if ipas==0:
                    c.append(-1)
    pm25.append(c)
295/228: !pip install ECMWFDataServer
296/1: from pandas import *
296/2: df=read_csv('point.csv')
296/3: df.columns
296/4: min(df['DIA'])
296/5: max(df['DIA'])
296/6: m=max(df['DIA'])
296/7: boo=df['DIA']==m
296/8: df[boo]
296/9: df[boo]['CO_N']
296/10: df[boo]['C_NO']
296/11: !pwd
296/12: !gzip point.csv
296/13: !lst
296/14: !gunzip point.csv
296/15: !grep point.csv *py
296/16: !ls -lrt *py
296/17: !ls -lrt del*py
296/18: !diff del_dup.py del_dup2.py
296/19: !vi del_dup.py
296/20: !vi del_dup.py
296/21: !cp del_dup.py del_dup4.py
296/22: !vi del_dup4.py
296/23: run del_dup4.py
296/24: !vi del_dup4.py
296/25: run del_dup4.py
296/26: df.columns
296/27: !head point.csv
296/28: !vi del_dup4.py
296/29: !ls -lrt *py
296/30: !vi csv2orl_3.py
296/31: !vi del_dup4.py
296/32: run del_dup4.py
296/33: !vi del_dup4.py
296/34: run del_dup4.py
296/35: !vi del_dup4.py
296/36: run del_dup4.py
296/37: !vi del_dup4.py
296/38: run del_dup4.py
296/39: !v
296/40: !vi del_dup4.py
296/41: run del_dup4.py
296/42: !grep csv *.py
296/43: !grep csv csv*.py
296/44: !grep \.csv csv*.py
296/45: !vi csv2orl_3.py
296/46: !grep sqrt *.py
296/47: !vi del_dup3.py
296/48: !vi del_dup4.py
296/49: !vi del_dup3.py
296/50: !vi del_dup4.py
296/51: run del_dup4.py
296/52: !grep index del*py
296/53: df_pv.head(3)
296/54: df_pv=df_pv.reset_index()
296/55: !v
296/56: !vi del_dup4.py
296/57: df_pv=[]
296/58: run del_dup4.py
296/59: df_pv.head(3)
296/60: !vi del_dup4.py
296/61: del df_pv['NO_S'],df_pv['C_NO']
296/62: df_pv=df_pv.reset_index()
296/63: df_pv.head(3)
296/64: !vi del_dup4.py
296/65: !vi del_dup4.py
296/66: run del_dup4.py
296/67: !vi
296/68: !vi del_dup4.py
296/69: run del_dup4.py
296/70: df_pv.columns
296/71: !vi del_dup4.py
296/72: run del_dup4.py
296/73: !vi del_dup4.py
296/74: !vi del_dup4.py
296/75: !grep avg_positiv *py
296/76:
def avg_positive_speed(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.
296/77: speed = [1., 2., 0., 3.]
296/78: print avg_positive_speed(speed)
296/79: !vi del_dup4.py
296/80: !run km_leg.py km_leg.py -i legend.png -c 100
296/81: run del_dup4.py
296/82: !vi del_dup4.py
296/83: run del_dup4.py
296/84: !v
296/85: !vi del_dup4.py
296/86: run del_dup4.py
296/87: !vi del_dup4.py
296/88: run del_dup4.py
296/89: !vi del_dup4.py
296/90: run del_dup4.py
296/91: !vi del_dup4.py
296/92: run del_dup4.py
296/93: !vi del_dup4.py
296/94: run del_dup4.py
296/95: !vi del_dup4.py
296/96: run del_dup4.py
296/97: !v
296/98: !vi del_dup4.py
296/99: run del_dup4.py
296/100: !grep boo\= *py
296/101: !vi del_dup4.py
296/102: run del_dup4.py
296/103: !vi del_dup4.py
296/104: run del_dup4.py
296/105: !vi del_dup4.py
296/106: run del_dup4.py
296/107: ls -lrt csv*py
296/108: !vi csv2orl_3.py
296/109: !diff csv2orl_2.py csv2orl_3.py
296/110: !diff csv2orl_2.py csv2orl.py
296/111: !vi csv2orl_2.py
296/112: run csv2orl_2.py
296/113: !lst
296/114: !more df_orl.csv
297/1: from pandas import *
297/2:
with open('pig_id.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
297/3: s[:5]
298/1: from pandas import *
298/2:
with open('pig_id.txt') as ftext:
    s=[line.strip('\n').split() for line in ftext]
298/3: vel=[x[9] for x in s]
298/4: import numpy as np
298/5: np.mean(vel)
298/6: vel[:5]
298/7: vel=[float(x[9]) for x in s]
298/8: vel
299/1: import datetime
299/2:
dt = '2001-10-18'
year, month, day = (int(x) for x in dt.split('-'))    
answer = datetime.date(year, month, day).weekday()
299/3: answer
299/4: dt='2017-09-25'
299/5: year, month, day = (int(x) for x in dt.split('-'))
299/6: datetime.date(year, month, day).weekday()
299/7: answer = datetime.date(year, month, day).weekday()
299/8: answer
299/9: dt='2017-09-24'
299/10: year, month, day = (int(x) for x in dt.split('-'))
299/11: datetime.date(year, month, day).weekday()
299/12: dt='2013-07-01'
299/13: year, month, day = (int(x) for x in dt.split('-'))
299/14: datetime.date(year, month, day).weekday()
300/1: from pandas import *
300/2: df=read_csv('2014.csv')
300/3: df.head(5)
300/4: df.head(15)
300/5: df['Hour']=[x[11:13] for x in df['TimeInterval']]
300/6: df.head(15)
300/7: df.head(150:180)
300/8: df.head(150,180)
300/9: df['Hour'][150:180]
300/10: set(df['Hour'])
300/11: df.head(15)
300/12: import numpy as np
300/13: df['Date']=[x[0:11] for x in df['TimeInterval']]
300/14: df.head(15)
300/15: col_id=["Date","Hour"]
300/16: col_id=["Date","Hour","GantryID","VehicleType"]
300/17: df_hr=pivot_table(df,index=col_id,values=['Volume'],aggfunc=np.sum)
300/18: len(df_hr),len(df)
300/19: df_hr.head(10)
300/20: (Date,Hour, GantryID, VehicleType)=zip(*list(df_hr.index))
300/21: df_hr.head(10)
300/22: df_pv['Date']=Series(Date,index=df_pv.index)
300/23: df_pv['Date']=Series(Date,index=df_hr.index)
300/24: df_hr['Date']=Series(Date,index=df_hr.index)
300/25: df_hr['Hour']=Series(Hour,index=df_hr.index)
300/26: df_hr['GantryID']=Series(GantryID,index=df_hr.index)
300/27: df_hr['VehicleType']=Series(VehicleType,index=df_hr.index)
300/28: df_hr.head(10)
300/29: df_hr=df_hr.reset_index()
300/30: df_hr.head(10)
300/31: df_hr=df_hr.set_index('Date')
300/32: df_hr.head(10)
300/33: df_hr.set_index('Date').to_csv('df_hr.csv')
300/34: df_hr.to_csv('df_hr.csv')
300/35: !head df_hr.csv
300/36: df_hr=df.reset_index('Date')
301/1: from pandas import *
301/2: import numpy as np
301/3: df_hr=read_csv('df_hr.csv')
301/4: !pwd
301/5: df_hr.head(10)
301/6: import datetime
301/7:
def WofD(it):
    year, month, day = (int(x) for x in dt.split('-'))
    return datetime.date(year, month, day).weekday()
301/8: WofD('2014-01-01')
301/9:
def WofD(dt):
    year, month, day = (int(x) for x in dt.split('-'))
    return datetime.date(year, month, day).weekday()
301/10: WofD('2014-01-01')
301/11: df_hr['WeekOfDate']=[WofD(x) for x in df_hr['Date']]
301/12: df_hr.head(10)
301/13: col_id=["WeekOfDate","VehicleType"]
301/14: df_w=pivot_table(df_hr,index=col_id,values=['Volume'],aggfunc=np.sum)
301/15: len(df_w)
301/16: df_w
301/17: df_w=df_w.reset_index()
301/18: df_w
301/19: df_w.to_csv('df_w.csv')
301/20: !pwd
301/21: df_hr.head(10)
301/22: df_hr['Month']=[x[5:7] for x in df_hr['Date']]
301/23: df_hr.head(10)
301/24: df_m=pivot_table(df_hr,index=['VehicleType','Month'],values=['Volume'],aggfunc=np.sum)
301/25: df_m=df_m.reset_index()
301/26: df_m
301/27: df_m.to_csv('df_m.csv')
301/28: df_hr.head(10)
301/29: df_h=pivot_table(df_hr,index=['VehicleType','Hour'],values=['Volume'],aggfunc=np.sum)
301/30: df_h=df_h.reset_index()
301/31: df_h.to_csv('df_h.csv')
301/32: df_hr.to_csv('df_hr.csv')
302/1: from pandas import *
302/2: import datetime
302/3: import numpy as np
302/4:
def WofD(dt):
    year, month, day = (int(x) for x in dt.split('-'))
    return datetime.date(year, month, day).weekday()
302/5: df=read_csv('2015.csv')
302/6: df.head(15)
302/7: df['Hour']=[x[11:13] for x in df['TimeInterval']]
302/8: col_id=["Date","Hour","GantryID","VehicleType"]
302/9: df['Date']=[x[0:11] for x in df['TimeInterval']]
302/10: df_hr=pivot_table(df,index=col_id,values=['Volume'],aggfunc=np.sum)
302/11: df_hr['Month']=[x[5:7] for x in df_hr['Date']]
302/12: df_hr=df.reset_index('Date')
302/13: df_hr=pivot_table(df,index=col_id,values=['Volume'],aggfunc=np.sum).reset_index()
302/14: df_hr.head(10)
302/15: df_hr['Month']=[x[5:7] for x in df_hr['Date']]
302/16: df_hr['WeekOfDate']=[WofD(x) for x in df_hr['Date']]
302/17: col_id=["WeekOfDate","VehicleType"]
302/18: df_w=pivot_table(df_hr,index=col_id,values=['Volume'],aggfunc=np.sum).reset_index()
302/19: !pwd
302/20: df_w.to_csv('df_w.csv')
302/21: df_m=pivot_table(df_hr,index=['VehicleType','Month'],values=['Volume'],aggfunc=np.sum).reset_index()
302/22: df_m.to_csv('df_m.csv')
302/23: df_h=pivot_table(df_hr,index=['VehicleType','Hour'],values=['Volume'],aggfunc=np.sum).reset_index()
302/24: df_h.to_csv('df_h.csv')
302/25: df_hr.to_csv('df_hr.csv')
302/26: !ls -lrt *.csv
302/27: !mv df*.csv 2015
302/28: %history -g -f history.170925.pm
302/29: !vi history.170925.pm
303/1: from pandas import *
303/2: df_hr=read_csv('df_hr.csv')
303/3: df_hr.columns
303/4: col=['Date', 'Hour', 'GantryID', 'VehicleType', 'Volume','Month', 'WeekOfDate']
303/5: df_hr[col].set_index('Date').to_csv('df_hr2.csv')
303/6: !head df_hr2.csv
303/7: !cd ../2015
303/8: df_hr=read_csv('df_hr.csv')
303/9: df_hr[col].set_index('Date').to_csv('df_hr2.csv')
303/10: !cd ../2014
303/11: df_hr=read_csv('df_hr.csv')
303/12: df_hr[col].set_index('Date').to_csv('df_hr2.csv')
303/13: !cd ..
303/14: !sed -i '1d' 201[56]/df_hr2.csv
303/15: !sed -i '1d' 2015/df_hr2.csv
303/16: !pwd
303/17: !cd /home/backup/data/ETC/M03A
303/18: !sed -i '1d' 201[56]/df_hr2.csv
303/19: !pwd
303/20: !sed -i '1d' ../201[56]/df_hr2.csv
303/21: !cat ../201[56]/df_hr2.csv >>../2014/df_hr2.csv
303/22: df_hr=read_csv('../2014/df_hr2.csv')
303/23: len(df_hr)
303/24: df_hr.head(5)
303/25: df_hr.tail(5)
303/26: !pwd
303/27: df_hr=read_csv('../2015/df_hr.csv')
303/28: df_hr[col].set_index('Date').to_csv('../2015/df_hr2.csv')
303/29: df_hr=read_csv('../2014/df_hr.csv')
303/30: df_hr[col].set_index('Date').to_csv('../2014/df_hr2.csv')
303/31: !pwd
303/32: df_hr=read_csv('../2014/df_hr.csv')
303/33: df_hr.head(5)
303/34: del df_hr['Unnamed: 0']
303/35: df_hr.head(5)
303/36: col_id=["WeekOfDate","Hour","Month"]
303/37: df_whm=pivot_table(df_hr,index=["WeekOfDate","Hour","Month","VehicleType"],values=['Volume'],aggfunc=np.mean).reset_index()
303/38: df_whm.head(5)
303/39: df_whm.tail(5)
303/40: df_whm["WeekOfDate","Hour","Month","VehicleType","Volume"].set_index('WeekOfDate').to_csv('../df_whm.csv')
303/41: col=['WeekOfDate', 'Hour', 'Month', 'VehicleType', 'Volume']
303/42: df_whm[col].set_index('WeekOfDate').to_csv('../df_whm.csv')
303/43: cal
303/44: set(df_whm['Month'])
304/1: import datetime
304/2: dt='2013-01-05'
304/3: year, month, day = (int(x) for x in dt.split('-'))
304/4: datetime.date(year, month, day).weekday()
304/5: dt='2017-09-27'
304/6: year, month, day = (int(x) for x in dt.split('-'))
304/7: datetime.date(year, month, day).weekday()
305/1: from pandas import *
305/2: df=read_csv('df_m.csv')
305/3: df.head(5)
305/4: del df['Unnamed: 0']
305/5: df_big=df[df['VehicleType'].map(lambda x:x[0]=='4')]
305/6: boo=df['VehicleType'].map(lambda x: x[0]=='4')
305/7: boo=df['VehicleType'].map(lambda x: x>40)
305/8: df_big=df[boo]
305/9: len(df),len(df_big)
305/10: df_big
305/11: ndays={1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}
305/12: nday[1]
305/13: ndays[1]
305/14: df_big['ND']=[ndays[x] for x in df_big['Month']]
305/15: a=[ndays[x] for x in df_big['Month']]
305/16: a[:10]
305/17: df_big['ND']=a
305/18: df_big=df_big.reset_index()
305/19: df_big['ND']=a
305/20: df_big.head(10)
305/21: df_pv=pivot_table(df_big,index=['Month'],values=['Volume'],aggfunc=sum)
305/22: df_pv
305/23: df_pv=df_pv.reset_index()
305/24: df_pv
305/25: df_pv['ND']=[ndays[x] for x in df_pv['Month']]
305/26: df_pv['VpD']=[x/y  for x y in zip(df_pv['Volume'],df_pv['ND'])]
305/27: df_pv['VpD']=[x/y  for x, y in zip(df_pv['Volume'],df_pv['ND'])]
305/28: df_pv
305/29: s=sum(df_pv['VpD'])
305/30: df_pv['VpDoS']=[x/s  for x in df_pv['VpD']]
305/31: df_pv
305/32: df_pv['VpDoS']=[float(x/s)  for x in df_pv['VpD']]
305/33: df_pv
305/34: s
305/35: df_pv['VpDoS']=[float(x)/s  for x in df_pv['VpD']]
305/36: df_pv
305/37: so=sum(df_pv['VpDoS'])
305/38: so
305/39: df_pv.to_csv('df_mp.csv')
306/1: from pandas import *
306/2:
with open('bioemis.space.01') as ftext:
    s=[line.strip('\n').split() for line in ftext]
306/3: s[0]
306/4: s[1]
306/5: df=DataFrame({})
306/6: df['X']=[float(s[x][0]) for x in xrange(len(s))]
306/7: df['Y']=[float(s[x][1]) for x in xrange(len(s))]
306/8: df.head(3)
306/9: df['TBVOC']=[float(s[x][2]) for x in xrange(len(s))]
306/10: df['SPEC1']=[float(s[x][3]) for x in xrange(len(s))]
306/11: df['SPEC3']=[float(s[x][4]) for x in xrange(len(s))]
306/12: df['OTVOC']=[float(s[x][5]) for x in xrange(len(s))]
306/13: df['rr']=[float(s[x][5]) for x in xrange(len(s))]
306/14: df['OTVOC']=[float(s[x][4]) for x in xrange(len(s))]
306/15: df['SPEC1']=[float(s[x][2]) for x in xrange(len(s))]
306/16: df['SPEC3']=[float(s[x][3]) for x in xrange(len(s))]
306/17: df.head(3)
306/18: del df['TBVOC']
306/19:
with open('bioemis.space.01') as ftext:
    s=[line.strip('\n').split() for line in ftext]
306/20: !head bioemis.space.01
306/21: del df['TBVOC']
306/22: df.head(3)
306/23: !head bioemis.space.01
306/24: sum(df['SPEC1'])
306/25: sum(df['SPEC1'])/1000
306/26: (sum(df['SPEC1'])+sum(df['SPEC3'])+sum(df['OTVOC'])+sum(df['rr']))/10000
306/27: df['TVOC']=df['SPEC1']
306/28: del df['SPEC1']
306/29: df['ISO']=df['SPEC3']
306/30: del df['SPEC3']
306/31: df['MONO']=df['rr']
306/32: del df['rr']
306/33: df.head(3)
306/34: !head bioemis.space.01
306/35: df['OVOC']=df['MONO']
306/36: df['MONO']=df['OTVOC']
306/37: del df['OTVOC']
306/38: df['MBO']=[float(s[x][6]) for x in xrange(len(s))]
306/39: df.head(3)
306/40: df['a']=[a+b+c+d for a,b,c,d in zip(df['ISO'],df['MONO'],df['OVOC'],df['MBO'])]
306/41: df.head(10)
306/42: del df['a']
306/43: sum(df['TVOC'])/1000/10000
307/1: import urllib2
308/1: import urllib2
308/2: url='https://earth.nullschool.net/#2017/10/12/1900Z/particulates/surface/level/anim=off/overlay=pm2.5/orthographic=-240.19,24.25,2484'
308/3: resp=urllib2.urlopen(url)
308/4: url='https://earth.nullschool.net'
308/5: resp=urllib2.urlopen(url)
307/2: !cat url.txt
307/3:
url='https://earth.nullschool.net/#2017/10/12/1900Z/particulates/surface/level/anim=off/overlay=pm2.5/orthographic=-240.19,24.25,2428'
response=urllib2.urlopen(url)
309/1: import urllib.request
309/2: headers={'User-Agent':user_agent,}
309/3: response = urllib.request.urlopen(request)
309/4: data = response.read()
309/5: import urllib2.request
309/6: import urllib2
309/7: user_agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'
309/8: url = "http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers"
309/9: headers={'User-Agent':user_agent,}
309/10: request=urllib2.request.Request(url,None,headers)
309/11: help(urllib2)
309/12: help(urllib2)
309/13: request=urllib2.Request(url,None,headers)
309/14: response = urllib2.urlopen(request)
309/15: data = response.read()
309/16: data
309/17: !cat url.txt
309/18: url = "https://earth.nullschool.net/#2017/10/12/1900Z/particulates/surface/level/anim=off/overlay=pm2.5/orthographic=-240.19,24.25,2484"
309/19: request=urllib2.Request(url,None,headers)
309/20: response = urllib2.urlopen(request)
309/21: data = response.read()
309/22: data
309/23: data = response.get()
309/24: request=urllib2.get(url,None,headers)
309/25: response = urllib2.urlopen(request)
309/26: image_on_web = urllib2.urlopen(request)
309/27:
file_path='./'
downloaded_image = file(file_path, "wb")
while True:
    buf = image_on_web.read(65536)
    if len(buf) == 0:
        break
    downloaded_image.write(buf)
downloaded_image.close()
image_on_web.close()
309/28:
file_path='./test.png'
downloaded_image = file(file_path, "wb")
while True:
    buf = image_on_web.read(65536)
    if len(buf) == 0:
        break
    downloaded_image.write(buf)
downloaded_image.close()
image_on_web.close()
309/29: !lst
309/30: url = "https://earth.nullschool.net/#2017/10/12/1900Z/particulates/surface/level/anim=off/overlay=pm2.5/orthographic=-240.19,24.25,2484"
309/31: history
309/32: response = urllib2.urlopen(request)
309/33: image_on_web = urllib2.urlopen(request)
309/34: !more test.png
309/35:  !vi scn.py
309/36: fron scn import *
309/37: from scn import *
309/38: !pip install PyQt4
309/39: !vi sc2.py
309/40: from sc2 import *
309/41: url = 'http://stackoverflow.com/questions/1197172/how-can-i-take-a-screenshot-image-of-a-website-using-python'
309/42:
screen_path, crop_path, thumbnail_path = get_screen_shot(
        url=url, filename='sof.png',
        crop=True, crop_replace=False,
        thumbnail=True, thumbnail_replace=False,
        thumbnail_width=200, thumbnail_height=150, )
309/43: url = 'http://stackoverflow.com/questions/1197172/how-can-i-take-a-screenshot-image-of-a-website-using-python'
309/44:
screen_path, crop_path, thumbnail_path = get_screen_shot(
        url=url, filename='sof.png',
        crop=True, crop_replace=False,
        thumbnail=True, thumbnail_replace=False,
        thumbnail_width=200, thumbnail_height=150, )
309/45: from scn import *
309/46: !pip install pyqt4
309/47: from selenium import webdriver
309/48:  Save a screenshot from spotify.com in current directory.
309/49: DRIVER = 'chromedriver'
309/50: driver.get('https://www.spotify.com')
309/51: driver = webdriver.Chrome(DRIVER)
309/52: driver = webdriver.chrome(DRIVER)
309/53: driver = webdriver.Chrome(DRIVER)
309/54: !pip install pyqt
309/55: !pip install pyqt5
309/56: !pip install pyqt4
309/57: !pip install python-qt
309/58: from scn import *
309/59: import pyqt4
309/60: import py-qt
309/61: import python-qt
309/62: import qt
309/63: import qt4
309/64: driver = webdriver(DRIVER)
309/65: DRIVER = 'firefoxdriver'
309/66: driver = webdriver(DRIVER)
309/67: !wget from selenium import webdriver
309/68: DRIVER = 'chromedriver'
309/69: !wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
309/70: !unzip chromedriver_linux64.zip
309/71: !lst
309/72: !ls ch*
309/73: driver = webdriver(DRIVER)
309/74: driver = webdriver.Chrome(DRIVER)
309/75: vi sc_chr.py
309/76: !vi sc_chr.py
309/77: from selenium import webdriver
309/78: !vi sc_fire.py
309/79: run sc_fire.py
310/1: !cat sc_fire.py
310/2: !vi sc_fire.py
310/3: !vi sc_fire.py
310/4: run sc_fire.py -d 171010
310/5: !v
310/6: !vi sc_fire.py
310/7: run sc_fire.py -d 171010
310/8: !v
310/9: !vi sc_fire.py
311/1: from sklearn.cluster import KMeans
311/2: import matplotlib.pyplot as plt
311/3: import argparse
311/4: import utils
311/5: import cv2
311/6: import numpy as np
311/7: from PIL import Image
311/8: image = cv2.imread('legend.png')
311/9: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
311/10: mn=image.shape
311/11: mn
311/12: image = image.reshape((mn[0] * mn[1], 3))
311/13:
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=args["clusters"], n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
311/14:
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
311/15: kmeans=clt.fit(image)
311/16: category=np.reshape(kmeans.labels_,(-1,mn[1]))
311/17: x = np.array(clt.cluster_centers_)
311/18: x
311/19: len(x)
311/20: x[0]
311/21: image2 = cv2.imread('171010/17101000.png')
311/22: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
311/23: mn2=image2.shape
311/24: mn2
311/25: conc=[880*zero,1280*zero]
311/26: conc=np.empty[mn2[0],mn2[1]]
311/27: conc=np.empty([mn2[0],mn2[1]])
311/28: conc
311/29: conc.shape
311/30: mn
311/31: image2[100,100,:]==image[1,1,:]
311/32: image2[100,100,1]==image[1,1,1]
311/33: image2[100,100,1]==image[1,1,1]
311/34: image2.shape
311/35: image2
311/36: image2[100,100,1]
311/37: image[1,100,1]
311/38: image
311/39: image.shape
311/40: image = cv2.imread('legend.png')
311/41: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
311/42: image[1,100,1]
311/43: image[1,100,:]
311/44: image2[1,100,:]
311/45: image[1,100,:]==image2[1,100,:]
311/46: if image[1,100,:]==image2[1,100,:]:print 'true'
311/47: boo=image[1,100,:]==image2[1,100,:]
311/48: if boo.all()==true:print 'true'
311/49: if boo.all()==.true. :print 'true'
311/50: if boo.all()==True :print 'true'
311/51: if boo.all()==True :print 'true'
311/52:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        for k in xrange(mn[1]):
            boo=image[i,j,:]==image2[1,k,:]
            if boo.all()==True:conc[i,j]=k*2
311/53:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        for k in xrange(mn[1]):
            boo=image2[i,j,:]==image[1,k,:]
            if boo.all()==True:conc[i,j]=k*2
311/54: i,j,k
311/55:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        for k in xrange(mn[1]):
            boo=image2[i,j,:]==image[1,k,:]
            if boo.all()==True:
                conc[i,j]=(k+1)*2
                break
311/56:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        if image2[i,j,:]==[0,0,0]:continue
        if image2[i,j,:]==[255,255,255]:continue
        for k in xrange(mn[1]):
            boo=image2[i,j,:]==image[1,k,:]
            if boo.all()==True:
                conc[i,j]=(k+1)*2
                break
311/57:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        if (image2[i,j,:]==[0,0,0]).all():continue
        if (image2[i,j,:]==[255,255,255]).all():continue
        for k in xrange(mn[1]):
            boo=image2[i,j,:]==image[1,k,:]
            if boo.all()==True:
                conc[i,j]=(k+1)*2
                break
311/58: kmeans2=clt.fit(image2)
311/59: im2 = image2.reshape((mn2[0] * mn2[1], 3))
311/60: kmeans2=clt.fit(im2)
311/61:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=44, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
311/62: kmeans2=clt2.fit(im2)
311/63: category=np.reshape(kmeans.labels_,(-1,mn[1]))
311/64: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
311/65: x2 = np.array(clt2.cluster_centers_)
311/66: category2.shape
311/67: x2.shape
311/68: x.shape
311/69:
for i in xrange(44):
    for j in xrange(484):
        if (x2[i,:]==x[j,:]).all():
            print i,j
            break
311/70:
for i in xrange(44):
    for j in xrange(484):
        if (x2[i,:]==x[j,:]).all():
            print i,j
311/71:
for i in xrange(44):
    for j in xrange(484):
        if (x2[i,:]==x[j,:]).all()==True:
            print i,j
311/72: print x2
311/73: print x[:10,:]
311/74: round(55.95965717,0)
311/75: round(55.95965717,1)
311/76: round(55.95965717,2)
311/77: x3=round(x2,0)
311/78: x3=round(x2[:,:,:],0)
311/79: x2.shape
311/80: x3=round(x2[:,:],0)
311/81:
x3=[]
for i in xrange(44):
    a=[round(j,0) for i in x2[i,:]]
    x3.append(a)
311/82: x3
311/83:
x3=[]
for i in xrange(44):
    a=[round(j,0) for j in x2[i]]
    x3.append(a)
311/84: x3
311/85:
for i in xrange(44):
    for j in xrange(484):
        if (x2[i,:]==x[j,:]).all()==True:
            print i,j
311/86:
for i in xrange(44):
    for j in xrange(484):
        if (x3[i,:]==x[j,:]).all()==True:
            print i,j
311/87: x3.shape
311/88: x3=np.array(x3)
311/89: x3.shape
311/90:
for i in xrange(44):
    for j in xrange(484):
        if (x3[i,:]==x[j,:]).all()==True:
            print i,j
312/1:
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import argparse
import utils
import cv2
import numpy as np
from PIL import Image
312/2: image = cv2.imread('legend.png')
312/3:
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
mn=image.shape
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
kmeans=clt.fit(image)
category=np.reshape(kmeans.labels_,(-1,mn[1]))
x = np.array(clt.cluster_centers_)
312/4:
image = image.reshape((mn[0] * mn[1], 3))
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/5: kmeans=clt.fit(image)
312/6:
category=np.reshape(kmeans.labels_,(-1,mn[1]))
x = np.array(clt.cluster_centers_)
312/7: x
312/8: image2 = cv2.imread('171010/17101000.png')
312/9: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
312/10: mn2=image2.shape
312/11: mn2
312/12:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=44, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/13: image2 = image2.reshape((mn2[0] * mn2[1], 3))
312/14: kmeans2=clt.fit(image2)
312/15: kmeans2=clt2.fit(image2)
312/16: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/17: x2 = np.array(clt2.cluster_centers_)
312/18: x2
312/19:
def rms(a):
    return np.sqrt(np.mean(np.square(a)))
312/20: a=[1,2,3]
312/21: b=[4,5,6]
312/22: a-b
312/23: len(x2)
312/24:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        del=[a-b for a,b in zip(x2[i,:],x[j,:])]
        ldel.append(rms(del))
    print min(ldel)
312/25:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        del=[]
        for k in xrange(3):
            del.append(x2[i,k]-x[j,k])
        ldel.append(rms(del))
    print min(ldel)
312/26:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        dd=[]
        for k in xrange(3):
            dd.append(x2[i,k]-x[j,k])
        ldel.append(rms(dd))
    print min(ldel)
312/27: a
312/28: min(a)
312/29: a.count(min(a))
312/30: a.icount(min(a))
312/31: a.index(min(a))
312/32:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        dd=[]
        for k in xrange(3):
            dd.append(x2[i,k]-x[j,k])
        ldel.append(rms(dd))
    m=ldel.index(min(ldel))
    print x2[i,:],x[m,:]
312/33: rms(a)
312/34: a
312/35: im = cv2.imread('171010/17101000.png')
312/36: im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)
312/37: im.shape
312/38:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
312/39: Image.fromarray(im).save('test.png')
312/40:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        dd=[]
        for k in xrange(3):
            dd.append(x2[i,k]-x[j,k])
        ldel.append(rms(dd))
    m=ldel.index(min(ldel))
    print x2[i,:],x[m,:],min(ldel)
312/41:
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        dd=[]
        for k in xrange(3):
            dd.append(x2[i,k]-x[j,k])
        ldel.append(rms(dd))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
312/42: category2[100,200]
312/43:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        dd=[]
        for k in xrange(3):
            dd.append(x2[i,k]-x[j,k])
        ldel.append(rms(dd))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/44:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/45: Image.fromarray(im).save('test2.png')
312/46:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])
    d = sum((2+rm,4,3-rm)*(rgb1-rgb2)**2)**0.5
    return d
312/47:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(x2[i,:],x[j,:]))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/48:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/49: Image.fromarray(im).save('test2.png')
312/50:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/51:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
        print i,j,ColorDistance(np.array(x2[i,:]),np.array(x[j,:]))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/52:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2+rm),4,(3-rm))*(rgb1-rgb2)**2)**0.5
    return d
312/53:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = (sum((2+rm),4,(3-rm))*(rgb1-rgb2)**2)**0.5
    return d
312/54:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
        print i,j,ColorDistance(np.array(x2[i,:]),np.array(x[j,:]))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/55:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2+rm,4,3-rm)*(rgb1-rgb2)**2)**0.5
    return d
312/56:
mmap=[]
for i in xrange(44):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
        print i,j,ColorDistance(np.array(x2[i,:]),np.array(x[j,:]))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/57:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/58: Image.fromarray(im).save('test2.png')
312/59:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=121, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/60: kmeans2=clt2.fit(image2)
312/61: x2=np.array(clt2.cluster_centers_)
312/62: len(x2)
312/63: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/64:
mmap=[]
for i in xrange(121):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
        print i,j,ColorDistance(np.array(x2[i,:]),np.array(x[j,:]))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/65:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/66: Image.fromarray(im).save('test2.png')
312/67:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[category2[i,j],0:3]
312/68: Image.fromarray(im).save('test3.png')
312/69:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
312/70: Image.fromarray(im).save('test3.png')
312/71:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2,4,3)*(rgb1-rgb2)**2)**0.5
    return d
312/72:
mmap=[]
for i in xrange(121):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/73:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/74: Image.fromarray(im).save('test2.png')
312/75:
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff import delta_e_cie2000
312/76: from colormath.color_conversions import convert_color
312/77: import colormath
312/78: color1_rgb = sRGBColor(1.0, 0.0, 0.0)
312/79: color2_rgb = sRGBColor(0.0, 0.0, 1.0)
312/80: color1_lab = colormath.color_conversions.convert_color(color1_rgb, LabColor)
312/81: color1_lab = colormath.convert_color(color1_rgb, LabColor)
312/82: help(colormath)
312/83: color1_lab = colormath.color_conversions(color1_rgb, LabColor)
312/84: from colormath import color_conversions
312/85: help(colormath)
312/86: help(colormath.color_conversions)
312/87: help(color_conversions)
312/88: help(colormath)
312/89: from colormath import color_conversions
312/90: color1_lab = colormath.color_conversions(color1_rgb, LabColor)
312/91: color1_lab = color_conversions(color1_rgb, LabColor)
312/92: color1_lab = colormath(color1_rgb, LabColor)
312/93: import webcolors
312/94: !pip install webcolors
312/95: import webcolors
312/96:
def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.css3_hex_to_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]
312/97:
def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name
312/98:
for i in xrange(484):
    actual_name, closest_name = get_colour_name(x[i,:])
    print i, "Actual colour name:", actual_name, ", closest colour name:", closest_name
312/99:
for i in xrange(121):
    actual_name, closest_name = get_colour_name(x2[i,:])
    print i, "Actual colour name:", actual_name, ", closest colour name:", closest_name
312/100: hsv=cv2.cvtColor(x, cv2.COLOR_RGB2HSV)
312/101: hsv=cv2.cvtColor(x, cv2.COLOR_BGR2HSV)
312/102: hsv=cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
312/103: image.shape
312/104: help(cv2)
312/105: image = cv2.imread('legend.png')
312/106:
image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
mn=image.shape
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
kmeans=clt.fit(image)
category=np.reshape(kmeans.labels_,(-1,mn[1]))
x = np.array(clt.cluster_centers_)
312/107: image = image.reshape((mn[0] * mn[1], 3))
312/108: kmeans=clt.fit(image)
312/109: category=np.reshape(kmeans.labels_,(-1,mn[1]))
312/110: x = np.array(clt.cluster_centers_)
312/111: x[:10,:]
312/112: image2 = cv2.imread('171010/17101000.png')
312/113: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2HSV)
312/114: image2 = image2.reshape((mn2[0] * mn2[1], 3))
312/115: kmeans2=clt2.fit(image2)
312/116: x2=np.array(clt2.cluster_centers_)
312/117: category=np.reshape(kmeans.labels_,(-1,mn[1]))
312/118: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/119:
mmap=[]
for i in xrange(121):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/120:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/121: Image.fromarray(im).save('test2.png')
312/122: im = cv2.cvtColor(im, cv2.COLOR_HSV2RGB)
312/123: Image.fromarray(im).save('test2.png')
312/124: mmap
312/125: len(set(mmap))
312/126: len(set(x2))
312/127:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
312/128: im = cv2.cvtColor(im, cv2.COLOR_HSV2RGB)
312/129: Image.fromarray(im).save('test3.png')
312/130: image = cv2.imread('legend.png')
312/131: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
312/132: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
312/133: image = image.reshape((mn[0] * mn[1], 3))
312/134: kmeans=clt.fit(image)
312/135: category=np.reshape(kmeans.labels_,(-1,mn[1]))
312/136: x = np.array(clt.cluster_centers_)
312/137: image2 = cv2.imread('171010/17101000.png')
312/138: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
312/139: image2 = image2.reshape((mn2[0] * mn2[1], 3))
312/140: kmeans2=clt2.fit(image2)
312/141: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/142: x2=np.array(clt2.cluster_centers_)
312/143:
mmap=[]
for i in xrange(121):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/144:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/145: Image.fromarray(im).save('test2.png')
312/146: len(set(mmap))
312/147:
!date
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
!date
312/148:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/149: !date
312/150: kmeans2=clt2.fit(image2)
312/151: !date
312/152:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=200, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/153: date
312/154: !date
312/155: kmeans2=clt2.fit(image2)
312/156: !date
312/157: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/158: x2=np.array(clt2.cluster_centers_)
312/159:
mmap=[]
for i in xrange(200):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/160: len(set(mmap))
312/161: len(set(x))
312/162: sx=[x[i,0]*1000*1000+x[i,1]*1000+x[i,2] for i in xrange(484)]
312/163: len(set(sx))
312/164: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(200)]
312/165: len(x2)
312/166: len(set(sx2))
312/167:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=400, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/168: !date
312/169: kmeans2=clt2.fit(image2)
312/170: !date
312/171:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=300, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
312/172: !date
312/173: kmeans2=clt2.fit(image2)
312/174: !date
312/175: x2=np.array(clt2.cluster_centers_)
312/176: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(300)]
312/177: len(set(sx2))
312/178:
mmap=[]
for i in xrange(300):
    ldel=[]
    for j in xrange(484):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
312/179: len(set(mmap))
312/180: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
312/181:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[category2[i,j]],0:3]
312/182: Image.fromarray(im).save('test2.png')
312/183:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j]],0:3]
312/184:
for i in range(mn[0]):
    for j in range(mn[1]):
        im[i,j,0:3]=x[category[i,j],0:3]
312/185: Image.fromarray(im).save('leg2.png')
312/186: im=image
312/187: im.shape
312/188: image = cv2.imread('legend.png')
312/189: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
312/190: im=image
312/191: image2 = cv2.imread('171010/17101000.png')
312/192: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
312/193: image2[100,100,:]
312/194: category2.shape
312/195: mmap=category2
312/196:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1])
        rgb=np.array(image2[i,j,:])
        ldel=[]
        for k in xrange(484):
            ldel.append(ColorDistance(rgb,np.array(x[j,:])))
        m=ldel.index(min(ldel))
        mmap[i,j]=m
312/197:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        rgb=np.array(image2[i,j,:])
        ldel=[]
        for k in xrange(484):
            ldel.append(ColorDistance(rgb,np.array(x[j,:])))
        m=ldel.index(min(ldel))
        mmap[i,j]=m
312/198:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        rgb=np.array(image2[i,j,:])
        ldel=[]
        for k in xrange(484):
            ldel.append(ColorDistance(rgb,np.array(x[k,:])))
        m=ldel.index(min(ldel))
        mmap[i,j]=m
312/199: mmap[100,100]
312/200: x[mmap[100,100]]
312/201: im.shape
312/202: category2.shape
312/203: image2.shape
312/204: im=image2
312/205:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x[mmap[i,j]]
312/206: Image.fromarray(im).save('test2.png')
312/207: len(set(mmap))
312/208: mp=mp.reshape(mn2[0]*mn2[1],1)
312/209: mp=mmap.reshape(mn2[0]*mn2[1],1)
312/210: mp.shape
312/211: len(set(mp))
312/212: len(set(list(mp)))
312/213: mp[:10]
312/214: mp=[a[0] for a in mp[:,1]]
312/215: mp=[a[0] for a in mp[:,0]]
312/216: mp=[a[0] for a in mp]
312/217: mp[:3]
312/218: len(set(list(mp)))
312/219: len(set(sx))
312/220: Image.fromarray(image2).save('test2.png')
312/221: image2 = cv2.imread('171010/17101000.png')
312/222: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
312/223: Image.fromarray(image2).save('test2.png')
312/224: !date
312/225:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        rgb=np.array(image2[i,j,:])
        ldel=[]
        for k in xrange(484):
            ldel.append(ColorDistance(rgb,np.array(x[k,:])))
        m=ldel.index(min(ldel))
        mmap[i,j]=m
312/226: import pp
312/227: ppservers = ()
312/228: job_server = pp.Server(ppservers=ppservers)
312/229: print "Starting pp with", job_server.get_ncpus(), "workers"
312/230:
def maping(mn2,image2,x):
    for i in xrange(mn2[0]):
        for j in xrange(mn2[1]):
            rgb=np.array(image2[i,j,:])
            ldel=[]
            for k in xrange(484):
                ldel.append(ColorDistance(rgb,np.array(x[k,:])))
            m=ldel.index(min(ldel))
            mmap[i,j]=m         
    return mmap
312/231: job1 = job_server.submit(maping, (mn2,image2,x,), (ColorDistance,), ("np","min",))
312/232: mmap=job1()
312/233:
def maping(mn2,image2,x):
    for i in xrange(mn2[0]):
        for j in xrange(mn2[1]):
            rgb=image2[i,j,:]
            ldel=[]
            for k in xrange(484):
                ldel.append(ColorDistance(rgb,x[k,:]))
            m=ldel.index(min(ldel))
            mmap[i,j]=m         
    return mmap
312/234: job1 = job_server.submit(maping, (mn2,image2,x,), (ColorDistance,), ("min",))
312/235: mmap=job1()
312/236: job1 = job_server.submit(maping, (mn2,image2,x,), (ColorDistance,), (,))
312/237: job1 = job_server.submit(maping, (mn2,image2,x,), (ColorDistance,), ())
312/238: mmap=job1()
312/239: result=job1()
312/240: result.shape
312/241: job_server = pp.Server(ppservers=ppservers)
312/242: history
312/243: bg _ip.magic('run rdpng.py')
312/244: %bg _ip.magic('run rdpng.py')
312/245: run -i rdpng.py
312/246: run -i rdpng.py
313/1: %history -g -f history.171011.pm
314/1: vi rdpng.py
314/2: !vi rdpng.py
314/3: run -i rdpng.py
314/4: run -i rdpng.py
314/5: image2.shape
314/6: image2=image2.reshape((mn2[0] , mn2[1], 3))
314/7: image2.shape
314/8: =image2.reshape((mn2[0] , mn2[1], 3))
314/9: image=image.reshape((mn[0] , mn[1], 3))
314/10:
for i in xrange(mn(1)):
    for j in xrange(mn(0)):
        image2[i,j,:]=image[j,i,:]
314/11:
for i in xrange(mn[1]):
    for j in xrange(mn[0]):
        image2[i,j,:]=image[j,i,:]
314/12: image2=image2.reshape((mn2[0]*mn2[1], 3))
314/13: kmeans2=clt.fit(image2)
315/1: run -i rdpng.py
315/2: image=image.reshape((mn[0] , mn[1], 3))
315/3: image2=image2.reshape((mn2[0] , mn2[1], 3))
315/4:
for i in xrange(mn[1]):
    for j in xrange(mn[0]):
        image2[i,j,:]=image[j,i,:]
315/5:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=200, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
315/6: kmeans2=clt2.fit(image2)
315/7: image2=image2.reshape((mn2[0]*mn2[1], 3))
315/8: kmeans2=clt2.fit(image2)
315/9: category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
315/10: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
315/11: x2=np.array(clt2.cluster_centers_)
315/12: import numpy as np
315/13: x2=np.array(clt2.cluster_centers_)
315/14: im.shape
315/15:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
315/16: Image.fromarray(im).save('test2.png')
315/17: print category2[0,0:mn[1]]
315/18: len(set(category2[0,0:mn[1]]))
315/19: len(set(category2[1,0:mn[1]]))
315/20: len(set(category2[2,0:mn[1]]))
315/21: len(set(category2[11,0:mn[1]]))
315/22: len(set(category2[110,0:mn[1]]))
315/23: len(set(category2))
315/24: len(set(category2[:,:]))
315/25: len(set(category2[0:800,:]))
315/26: len(set(category2[800,:]))
315/27: !grep xs *pm
315/28: !grep xs\= *pm
315/29: !grep sx\= *pm
315/30: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(200)]
315/31: len(x2)
315/32: len(set(sx2))
315/33: image2=image2.reshape((mn2[0] , mn2[1], 3))
315/34:
for i in xrange(mn[1]):
    for j in xrange(mn[0]*5):
        image2[i,j,:]=image[j,i,:]
315/35:
for i in xrange(mn[1]):
    for j in xrange(mn[0]):
        for k in xrange(5):
            image2[i,j+mn[0]*k,:]=image[j,i,:]
315/36: image2=image2.reshape((mn2[0]*mn2[1], 3))
315/37:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=200, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
315/38: kmeans2=clt2.fit(image2)
315/39: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
315/40: x2=np.array(clt2.cluster_centers_)
315/41: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(200)]
315/42: len(set(sx2))
315/43: len(set(category2[800,:]))
315/44: len(set(category2[11,0:mn[1]]))
315/45: len(set(category2[1,0:mn[1]]))
315/46: len(set(category2[51,0:mn[1]]))
315/47: len(set(category2[501,0:mn[1]]))
315/48:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
315/49: Image.fromarray(im).save('test2.png')
315/50: len(set(category2[701,0:mn[1]]))
315/51: image2=image2.reshape((mn2[0] , mn2[1], 3))
315/52:
for i in xrange(mn[1]):
    for j in xrange(mn[0]):
        for k in xrange(5):
            image2[i,j+mn[0]*k,:]=image[j,i,:]
            image2[i,mn2[1]-(j+mn[0]*k),:]=image[j,i,:]
315/53:
for i in xrange(mn[1]):
    for j in xrange(mn[0]):
        for k in xrange(5):
            image2[i,j+mn[0]*k,:]=image[j,i,:]
            image2[i,mn2[1]-(j+mn[0]*k)-1,:]=image[j,i,:]
315/54: image2=image2.reshape((mn2[0]*mn2[1], 3))
315/55:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=100, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
315/56: kmeans2=clt2.fit(image2)
315/57: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
315/58: x2=np.array(clt2.cluster_centers_)
315/59: len(set(category2[51,0:mn[1]]))
315/60: len(set(category2[mn2[0],0:mn[1]]))
315/61:
for i in range(mn2[0]):
    for j in range(mn2[1]):
        im[i,j,0:3]=x2[category2[i,j],0:3]
315/62: Image.fromarray(im).save('test2.png')
315/63: len(set(category2[0:mn[1],10]))
315/64: len(set(category2[0:mn[1],0]))
315/65: len(set(category2[0:mn[1],20]))
315/66: len(set(category2[0:mn[1],50]))
315/67: len(set(category2[0:mn[1],mn2[1]-1-10]))
315/68: len(set(category2[0:mn[1],500]))
315/69: len(set(category2[0:mn[1],700]))
315/70: len(set(category2[0:mn[1],100]))
315/71: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(200)]
315/72: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(100)]
315/73: len(set(sx2))
315/74: len(x)
315/75: sx=[x[i,0]*1000*1000+x[i,1]*1000+x[i,2] for i in xrange(484)]
315/76: len(set(sx))
315/77: image3 = cv2.imread('171010/17101001.png')
315/78: image3 = cv2.cvtColor(image3, cv2.COLOR_BGR2RGB)
315/79: mn3=image3.shape
315/80: mn3
315/81: (mn3==mn2).all()
315/82: (mn3==mn2)=='True'.all()
315/83: (mn3==mn2)==True.all()
315/84: mn3==mn2
315/85: image2 = cv2.imread('171010/17101000.png')
315/86: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
315/87: image2=image2.reshape((mn2[0]*mn2[1], 3))
315/88: kmeans2=clt2.fit(image2)
315/89: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
315/90: x2=np.array(clt2.cluster_centers_)
315/91: kmeans3=clt2.fit(image3)
315/92: image3=image3.reshape((mn2[0]*mn2[1], 3))
315/93: kmeans3=clt2.fit(image3)
315/94: mmap=category2
315/95:
for i in xrange(100):
    ldel=[]
    for j in xrange(100):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x[j,:])))
    m=ldel.index(min(ldel))
    rint i,m,x2[i,:],x[m,:],min(ldel)
    mmap.append(m)
315/96: x3=np.array(clt2.cluster_centers_)
315/97: category3=numpy.reshape(kmeans3.labels_,(-1,mn2[1]))
315/98: x3=np.array(clt2.cluster_centers_)
315/99: x2=x3
315/100: x2=np.array(clt2.cluster_centers_)
315/101: x2==x3
315/102: kmeans2=clt2.fit(image2)
315/103: x2=np.array(clt2.cluster_centers_)
315/104: x2==x3
315/105: x2
315/106: x3
315/107: from pandas import *
315/108: df_x2=DataFrame({'X2R':[x2[i,0] for i in xrange(100)],'X2G':[x2[i,1] for i in xrange(100)],'X2B':[x2[i,2] for i in xrange(100)]})
315/109: df_x2.tail
315/110: df_x3=DataFrame({'X3R':[x3[i,0] for i in xrange(100)],'X3G':[x3[i,1] for i in xrange(100)],'X3B':[x3[i,2] for i in xrange(100)]})
315/111: df_x3.tail
315/112: x3
315/113: df_x3.tail
315/114: df_x3.sort['X3R']
315/115: !grep sort *pm
315/116: df2=df_x2.sort_values(by=['X2R'],ascending=[True])
315/117: df3=df_x3.sort_values(by=['X3R'],ascending=[True])
315/118: df2.head(10)
315/119: df3.head(10)
315/120: x3s=[[df3.loc[i,'X3R'],df3.loc[i,'X3G'],df3.loc[i,'X3B']] for i in xrange(100)]
315/121: x3s
315/122: df3=df_x3.sort_values(by=['X3R'],ascending=[True]).reset_index()
315/123: x3s=[[df3.loc[i,'X3R'],df3.loc[i,'X3G'],df3.loc[i,'X3B']] for i in xrange(100)]
315/124: x3s
315/125: df2=df_x2.sort_values(by=['X2R'],ascending=[True]).reset_index()
315/126: x2s=[[df2.loc[i,'X2R'],df2.loc[i,'X2G'],df2.loc[i,'X2B']] for i in xrange(100)]
315/127: x2s
315/128: im=np.empty([20,100,3])
315/129:
for i in xrange(10):
    for j in xrange(100):
        im[i,j,:]=x2s[j,:]
        im[i+10,j,:]=x3s[j,:]
315/130: x2s[5,:]
315/131: x2s[5]
315/132:
for i in xrange(10):
    for j in xrange(100):
        im[i,j,:]=x2s[j][:]
        im[i+10,j,:]=x3s[j][:]
315/133: Image.fromarray(im).save('legend23.png')
315/134: im.shape
315/135: image.shape
315/136: im
315/137: image
315/138: im[0,0,:]
315/139: image[0,0,:]
315/140: type(image2)
315/141: type(image)
315/142: type(im)
315/143: im
315/144: Image.fromarray(im).save('legend23.png')
315/145: im=np.array(im)
315/146: Image.fromarray(im).save('legend23.png')
315/147: image[0,0,2]
315/148: im[0,0,2]
315/149: im.shape
315/150: image.shape
315/151: image2.shape
315/152: Image.fromarray(image).save('legend23.png')
315/153: Image.fromarray(im).save('legend23.png')
315/154: !grep round *pm
315/155: Image.fromarray(im).save('legend23.png')
315/156: im
315/157: im.save('legend23.png')
315/158:
for i in xrange(10):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3)
           rgb2.append(round(x2s[j][k]))
           rgb3.append(round(x3s[j][k]))
        im[i,j,:]=rgb2
        im[i+10,j,:]=rgb3
315/159:
for i in xrange(10):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3):
           rgb2.append(round(x2s[j][k]))
           rgb3.append(round(x3s[j][k]))
        im[i,j,:]=rgb2
        im[i+10,j,:]=rgb3
315/160: Image.fromarray(im).save('legend23.png')
315/161: im
315/162: image
315/163:
for i in xrange(10):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3):
           rgb2.append(int(round(x2s[j][k])))
           rgb3.append(int(round(x3s[j][k])))
        im[i,j,:]=rgb2
        im[i+10,j,:]=rgb3
315/164: Image.fromarray(im).save('legend23.png')
315/165: im
315/166:
for i in xrange(10):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3):
           rgb2.append(int(round(x2s[j][k])))
           rgb3.append(int(round(x3s[j][k])))
        im[i,j,0:3]=rgb2
        im[i+10,j,0:3]=rgb3
315/167: Image.fromarray(im).save('legend23.png')
315/168: im=image
315/169:
for i in xrange(5):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3):
           rgb2.append(int(round(x2s[j][k])))
           rgb3.append(int(round(x3s[j][k])))
        im[i,j,0:3]=rgb2
        im[i+5,j,0:3]=rgb3
315/170: Image.fromarray(im).save('legend23.png')
315/171:
for i in xrange(5):
    for j in xrange(100):
        rgb2=[]
        rgb3=[]
        for k in xrange(3):
           rgb2.append(int(round(x2[j][k])))
           rgb3.append(int(round(x3[j][k])))
        im[i,j,0:3]=rgb2
        im[i+5,j,0:3]=rgb3
315/172: Image.fromarray(im).save('legend23.png')
315/173:
for i in xrange(5):
    for j in xrange(100):
        im[i,j,0:3]=x2[j,0:3]
        im[i+5,j,0:3]=x3[j,0:3]
315/174: Image.fromarray(im).save('legend23.png')
315/175:
mmap=[]
for i in xrange(100):
    ldel=[]
    for j in xrange(100):
        ldel.append(ColorDistance(np.array(x2[i,:]),np.array(x3[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x2[i,:],x3[m,:],min(ldel)
    mmap.append(m)
315/176:
for i in xrange(5):
    for j in xrange(100):
        im[i,j,0:3]=x2[j,0:3]
        im[i+5,j,0:3]=x3[mmap(j),0:3]
315/177:
for i in xrange(5):
    for j in xrange(100):
        im[i,j,0:3]=x2[j,0:3]
        im[i+5,j,0:3]=x3[mmap[j],0:3]
315/178: Image.fromarray(im).save('legend23.png')
315/179: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(100)]
315/180: len(set(sx2))
315/181:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(100):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
315/182:
for i in xrange(5):
    for j in xrange(484):
        im[i,j,0:3]=x[j,0:3]
        im[i+5,j,0:3]=x2[mmap[j],0:3]
315/183: Image.fromarray(im).save('legend23.png')
315/184:
for i in xrange(5):
    for j in xrange(484):
        im[i,j,0:3]=x[category[i,j],0:3]
        im[i+5,j,0:3]=x2[mmap[category[i+5,j]],0:3]
315/185: Image.fromarray(im).save('legend23.png')
315/186: len(set(mmap))
315/187:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=400, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
315/188: image2.shape
315/189: kmeans2=clt2.fit(image2)
315/190: %bg kmeans2=clt2.fit(image2)
315/191: % bg kmeans2=clt2.fit(image2)
315/192: %background kmeans2=clt2.fit(image2)
315/193: kmeans2=clt2.fit(image2)
316/1: run -i rdpng.py
316/2:
clt2 = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=200, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
316/3: image2 = cv2.imread('171010/17101000.png')
316/4: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
316/5: mn2
316/6: image2=image2.reshape((mn2[0]*mn2[1], 3))
316/7: kmeans2=clt2.fit(image2)
316/8: sx2=[x2[i,0]*1000*1000+x2[i,1]*1000+x2[i,2] for i in xrange(200)]
316/9: x2=np.array(clt2.cluster_centers_)
316/10: import numpy as np
316/11: x2=np.array(clt2.cluster_centers_)
316/12: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
316/13: image2=image2.reshape((mn2[0] , mn2[1], 3))
316/14: im=image2
316/15: image.shape
316/16:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(200):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
316/17: im=image.reshape((mn[0] , mn[1], 3))
316/18:
for i in xrange(5):
    for j in xrange(484):
        im[i,j,0:3]=x[category[i,j],0:3]
        im[i+5,j,0:3]=x2[mmap[category[i+5,j]],0:3]
316/19: Image.fromarray(im).save('legend23.png')
316/20: len(set(mmap))
316/21: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
316/22: c=category2.reshape(mn2[0]*mn2[1])
316/23:
cc=0
for i in xrange(mn2[0]*mn2[1]):
    if c[i] in set(mmap):cc=cc+1
316/24: cc/mn2[0]*mn2[1]
316/25: cc
316/26: cc/(mn2[0]*mn2[1])
316/27: cc/(mn2[0]*mn2[1])*100
316/28: float(cc)/(mn2[0]*mn2[1])
316/29: im.shape
316/30: image2.shape
316/31: im=image2
316/32:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=[255,255,255]
        if category2[i,j] in set(mmap):
            im[i,j,0:3]=x2[category2[i,j]],0:3]
316/33:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=[255,255,255]
        if category2[i,j] in set(mmap):
            im[i,j,0:3]=x2[category2[i,j],0:3]
316/34: Image.fromarray(im).save('hole.png')
316/35:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=[255,255,255]
        #if category2[i,j] in set(mmap):
        im[i,j,0:3]=x2[category2[i,j],0:3]
316/36: Image.fromarray(im).save('hole.png')
316/37:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=[255,255,255]
        if category2[i,j] in set(mmap):
            im[i,j,0:3]=x2[category2[i,j],0:3]
316/38: Image.fromarray(im).save('hole.png')
316/39:
cc=0
c1=[]
for i in xrange(mn2[0]*mn2[1]):
    if c[i] in set(mmap):
        cc=cc+1
        c1.append(c[i])
316/40: len(set(c1))
316/41:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((4,4,1)*(rgb1-rgb2)**2)**0.5
    return d
316/42:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(200):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
316/43: len(set(mmap))
316/44:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((1,1,1)*(rgb1-rgb2)**2)**0.5
    return d
316/45:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(200):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
316/46: len(set(mmap))
316/47:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2+rm,4,3-rm)*(rgb1-rgb2)**2)**0.5
    return d
316/48:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(200):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
316/49: len(set(mmap))
316/50:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])
    d = sum((2+rm,4,max(0,3-rm))*(rgb1-rgb2)**2)**0.5
    return d
316/51:
mmap=[]
for i in xrange(484):
    ldel=[]
    for j in xrange(200):
        ldel.append(ColorDistance(np.array(x[i,:]),np.array(x2[j,:])))
    m=ldel.index(min(ldel))
    print i,m,x[i,:],x2[m,:],min(ldel)
    mmap.append(m)
316/52: len(set(mmap))
316/53:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=[255,255,255]
        if category2[i,j] in set(mmap):
            im[i,j,0:3]=x2[category2[i,j],0:3]
316/54: Image.fromarray(im).save('hole.png')
316/55: history
316/56: max(mmap)
316/57: len(mmap)
316/58: len(set(mmap))
316/59:
mmapR=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/60: len(set(mmapR))
316/61:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=x[mmapR[category2[i,j]],0:3]
316/62: Image.fromarray(im).save('test2.png')
316/63:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/64:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=x[mmapR[category2[i,j]],0:3]
316/65: len(set(mmapR))
316/66: Image.fromarray(im).save('test4.png')
316/67:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2+rm,4,max(0,3-rm))*(rgb1-rgb2)**2)**0.5
    return d
316/68:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/69:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=x[mmapR[category2[i,j]],0:3]
316/70: Image.fromarray(im).save('test4.png')
316/71: len(set(mmapR))
316/72:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((1+rm,4,max(0,3-rm))*(rgb1-rgb2)**2)**0.5
    return d
316/73:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/74:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=x[mmapR[category2[i,j]],0:3]
316/75: Image.fromarray(im).save('test4.png')
316/76:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((0.1+rm,4,max(0,3-rm))*(rgb1-rgb2)**2)**0.5
    return d
316/77:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/78: Image.fromarray(im).save('test2.png')
316/79:
def ColorDistance(rgb1,rgb2):
    '''d = {} distance between two colors(3)'''
    rm = 0.5*(rgb1[0]+rgb2[0])/256
    d = sum((2+rm,4,max(0,3-rm))*(rgb1-rgb2)**2)**0.5
    return d
316/80:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/81: Image.fromarray(im).save('test2.png')
316/82: len(set(mmapR))
316/83:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        im[i,j,0:3]=x[mmapR[category2[i,j]],0:3]
316/84: Image.fromarray(im).save('test2.png')
316/85: conc=category2
316/86:
xseq=[category[5,j] for j in xrange(mn[1])]
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        conc[i,j]=xseq.index(mmapR[category2[i,j]])
316/87: min(xseq)
316/88: max(xseq)
316/89: 459 in xseq
316/90: x[459,:]
316/91: xseq
316/92: len(set(xseq))
316/93:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/94: category.shape
316/95: image.shape
316/96:
clt = KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300, \
    n_clusters=484, n_init=10, n_jobs=-1, precompute_distances='auto', \
    random_state=None, tol=0.0001, verbose=0)
316/97: kmeans=clt.fit(image)
316/98: xa = np.array(clt.cluster_centers_)
316/99: xa==x
316/100: x=xa
316/101: category=np.reshape(kmeans.labels_,(-1,mn[1]))
316/102:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/103:
xseq=[category[5,j] for j in xrange(mn[1])]
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        conc[i,j]=xseq.index(mmapR[category2[i,j]])
316/104: category2.shape
316/105: mn2
316/106: mmrapR.shape
316/107: mmapR.shape
316/108: len(mmapR)
316/109: max(xseq)
316/110: category.shape
316/111: sx=[x[i,0]*1000*1000+x[i,1]*1000+x[i,2] for i in xrange(484)]
316/112: len(set(sx))
316/113:
xseq=[category[5,j] for j in xrange(mn[1])]
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        conc[i,j]=xseq.index(mmapR[category2[i,j]])
316/114: i,j
316/115: category2[i,j]
316/116: mmapR[284]
316/117: image2.shape
316/118: image2=image2.reshape((mn2[0]*mn2[1], 3))
316/119: kmeans2=clt2.fit(image2)
316/120: x2=np.array(clt2.cluster_centers_)
316/121: category2=numpy.reshape(kmeans2.labels_,(-1,mn2[1]))
316/122:
mmapR=[]
mmap=[]
for i in xrange(200):
    if i in set(mmap):
        mmapR.append(mmap.index(i))
    else:
        ldel=[]
        for j in xrange(484):
            ldel.append(ColorDistance(np.array(x[j,:]),np.array(x2[i,:])))
        m=ldel.index(min(ldel))
        mmapR.append(m)
316/123:
xseq=[category[5,j] for j in xrange(mn[1])]
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        conc[i,j]=xseq.index(mmapR[category2[i,j]])
316/124: x[221,:]
316/125: category2[i,j]
316/126: mmapR[category2[i,j]]
316/127: 221 in category[5,:]
316/128: [x[category[5,j],:] j in xrange(mn[1])]
316/129: [x[category[5,j],:] for j in xrange(mn[1])]
316/130:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        for k in xrange(mn[0]):
            if mmapR[category2[i,j]] in category[k,:]:
                conc[i,j]=category[k,:].index(mmapR[category2[i,j]])
            else:
                conc[i,j]=0
316/131:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        for k in xrange(mn[0]):
            if mmapR[category2[i,j]] in category[k,:]:
                conc[i,j]=list(category[k,:]).index(mmapR[category2[i,j]])
            else:
                conc[i,j]=0
316/132: max(conc)
316/133: max(conc.all())
316/134: conc[:5,:5]
316/135: conc.shape
316/136: import save_surfer
316/137: from save_surfer import *
316/138: fname='00.grd'
316/139: fname_d='dict.grd'
316/140: mnx=(105.53+107.01)/2.
316/141: mny=16.28
316/142: mxx=(136.35+134.87)/2.
316/143: mxy=29.65
316/144: ndx=mn2[1]
316/145: ndy=mn2[0]
316/146: cn=np.empty([ndx,ndy])
316/147:
for  i in xrange(ndx):
    for j in xrange(ndy)L
316/148:
for  i in xrange(ndx):
    for j in xrange(ndy):
        cn[i,j]=conc[j,i]
316/149: save_surfer(fname_d,nxd,nyd,mnx,mny,(mxx-mnx)/ndx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/150: nxd=mn2[1]
316/151: nyd=mn2[0]
316/152: save_surfer(fname_d,nxd,nyd,mnx,mny,(mxx-mnx)/ndx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/153: !cp rdpng.py dict.grd
316/154: save_surfer(fname_d,nxd,nyd,mnx,mny,(mxx-mnx)/ndx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/155: !pwd
316/156:
for  i in xrange(ndx):
    for j in xrange(ndy):
        cn[i,j]=conc[ndy-j-1,i]
316/157: save_surfer(fname_d,nxd,nyd,mnx,mny,(mxx-mnx)/ndx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/158: history
316/159: save_surfer(fname_d,nxd,nyd,mnx,mny,(mxx-mnx)/ndx,conc.reshape(nxd*nyd))
316/160: run -i rdpng2.py
316/161: run -i rdpng2.py
316/162: run -i rdpng2.py
316/163: run -i rdpng2.py
316/164: (nyd,nxd)=mn2
316/165: (nyd,nxd)=(mn2[0],mn2[1])
316/166:  delx=(mxx-mnx)/(nxd-1)
316/167:  dely=(mxy-mny)/(nyd-1)
316/168:
xx=[mnx+delx*i for i in xrnage(nxd)]
yy=[mny+dely*i for i in xrnage(nyd)]
cn=np.empty([ndx,ndy])
c0=np.empty([ndx,ndy])
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
for i in xrange(nxd):
    for j in xrange(nyd):
        if c0[i,j]<=0:
            sum1=0
            sum2=0
            for ii in xrange(nxd):
                for jj in xrange(nyd):
                    if c0[ii,jj]==0:continue
                    d2=(xx[i]-xx[ii])**2+(yy[j]-yy[jj])**2
                    sum1+=1/d2
                    sum2+=c0[ii,jj]/d2
            cn[i,j]=sum2/sum1
        else:
            cn[i,j]=c0[i,j]
316/169:
xx=[mnx+delx*i for i in xrange(nxd)]
yy=[mny+dely*i for i in xrange(nyd)]
cn=np.empty([ndx,ndy])
c0=np.empty([ndx,ndy])
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
for i in xrange(nxd):
    for j in xrange(nyd):
        if c0[i,j]<=0:
            sum1=0
            sum2=0
            for ii in xrange(nxd):
                for jj in xrange(nyd):
                    if c0[ii,jj]==0:continue
                    d2=(xx[i]-xx[ii])**2+(yy[j]-yy[jj])**2
                    sum1+=1/d2
                    sum2+=c0[ii,jj]/d2
            cn[i,j]=sum2/sum1
        else:
            cn[i,j]=c0[i,j]
316/170: run -i rdpng2.py
316/171: i,j,ii,jj
316/172: d2
316/173: xx[i],xx[ii],yy[j],yy[jj]
316/174:  c0[ii,jj]
316/175: sum1
316/176:  c0[i,j]
316/177:  c0[i+1,j+1]
316/178: c=c0.reshape(mn2[0]*mn2[1])
316/179: max(c)
316/180: min(c)
316/181: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/182: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/183:
for i in xrange(nxd):
    for j in xrange(nyd):
        if c0[i,j]<=0:
            sum1=0
            sum2=0
            for ii in xrange(max(0,i-5),min(i+5,nxd)):
                for jj in xrange(max(0,j-5),min(j+5,nyd)):
                    if c0[ii,jj]==0:continue
                    d2=(xx[i]-xx[ii])**2+(yy[j]-yy[jj])**2
                    sum1+=1/d2
                    sum2+=c0[ii,jj]/d2
            cn[i,j]=sum2/sum1
        else:
            cn[i,j]=c0[i,j]
316/184: !cp rdpng.py dict.grd
316/185: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/186:
cn=np.empty([ndx,ndy])
c0=np.empty([ndx,ndy])
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
for i in xrange(nxd):
    for j in xrange(nyd):
        if c0[i,j]<=0:
            sum1=0
            sum2=0
            for ii in xrange(max(0,i-5),min(i+5,nxd)):
                for jj in xrange(max(0,j-5),min(j+5,nyd)):
                    if c0[ii,jj]==0:continue
                    d2=(xx[i]-xx[ii])**2+(yy[j]-yy[jj])**2
                    sum1=sum1+1/d2
                    sum2=sum2+c0[ii,jj]/d2
            cn[i,j]=sum2/sum1
        else:
            cn[i,j]=c0[i,j]
316/187: ii
316/188: sum1,sum2
316/189: i,j,ii,jj
316/190: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/191: !cp rdpng.py dict2.grd
316/192: save_surfer('dict2.grd',nxd,nyd,mnx,mny,delx,np.matrix.transpose(cn).reshape(nxd*nyd))
316/193: c=cn.reshape(mn2[0]*mn2[1])
316/194: min(c)
316/195: max(c)
316/196: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
317/1:
import cv2
mask = cv2.imread('lu_gray.tiff',0)
317/2: mask.shape
317/3: mask[0,0]
316/197: import statistics
316/198: !pip install statistics
316/199: import statistics
316/200:
for i in xrange(484):
    rgb=x[i,:]
    if statistics.stdev(rgb) < 15:print i,rgb
316/201:
for i in xrange(484):
    rgb=x[i,:]
    print i, statistics.stdev(rgb)
316/202: ss=[statistics.stdev(x[i,:]) for i in xrange(484)]
316/203: min(ss)
316/204: !pwd
316/205: ss=category.reshape(mn[0]*mn[1],1)
316/206: min(ss)
316/207: min(list(ss))
316/208: max(ss)
316/209: ss
316/210:
for i in xrange(484):
    rgb=x[i,:]
    if abs(np.mean(rgb)-rms(rgb))<0.15:print i,rgb
316/211:
for i in xrange(484):
    rgb=x[i,:]
    print abs(np.mean(rgb)-rms(rgb))
316/212: ss=[abs(np.mean(x[i,:])-rms(x[i,:])) for i in xrange(484)]
316/213: min(ss)
316/214:
for i in xrange(484):
    rgb=x[i,:]
    if abs(np.mean(rgb)-rms(rgb)) < 1.5:
        for j in xrange(mn[0]*mn[1]):
            if kmeans.labels_[j] == i: kmeans.labels_[j]=-1
316/215: category=np.reshape(kmeans.labels_,(-1,mn[1]))
316/216: ss=category.reshape(mn[0]*mn[1],1)
316/217: min(ss)
316/218:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        for k in xrange(mn[0]):
            if m in category[k,:]:
                conc[i,j]=list(category[k,:]).index(m)*2
            else:
                conc[i,j]=0
316/219:
for i in xrange(484):
    print category[:,i]
316/220: from mostfreqword import *
316/221: mostfreqword(category[:483])
316/222: mostfreqword(list(category[:483]))
316/223: rgb
316/224: mostfreqword(list(category[:,483]))
316/225: categoryx=[mostfreqword(category[:,i]) for i in xrange(483)]
316/226: categoryx
316/227:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
                conc[i,j]=list(categoryx[:]).index(m)*2
            else:
                conc[i,j]=0
316/228:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=list(categoryx[:]).index(m)*2
        else:
            conc[i,j]=0
316/229:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]]
316/230: list(categoryx[:]).index(m)*2
316/231:
for i in xrange(mn2[0]):
    print i
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=categoryx.index(m)*2
        else:
            conc[i,j]=0
316/232:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=categoryx.index(m)*2
        else:
            conc[i,j]=0
316/233:
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
316/234: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/235: save_surferi(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/236: from save_surfer import *
316/237: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/238: mnx,mny
316/239: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/240: from save_surfer import *
316/241: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
316/242:
mnx=107.57
mxx=134.27
(mnx+mxx)/2
316/243:
mny2=15.35
mxy2=31.89
(mny2+mxy2)/2
316/244:
mnx2=112.48
mxx2=129.5
 (mnx2+mxx2)/2
316/245:
mnx2=112.48
mxx2=129.5
(mnx2+mxx2)/2
316/246:
mnx=107.57
mxx=134.27
mny=15.35
mxy=31.89
(nyd,nxd)=(mn2[0],mn2[1])
delx=(mxx-mnx)/(nxd-1)
dely=(mxy-mny)/(nyd-1)
xx=[mnx+delx*i for i in xrange(nxd)]
yy=[mny+dely*i for i in xrange(nyd)]
mnx2=112.48
mxx2=129.5
mny2=15.35
mxy2=31.89
(nx2,ny2)=(67,67)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
x2=[mnx2+delx*i for i in xrange(nx2)]
y2=[mny2+dely*i for i in xrange(ny2)]
cn=np.empty([nx2,ny2])

for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=(x2(i)-mnx)/delx
        jc=(y2(j)-mny)/dely
        for ii in xrange(max(0,ic-5),min(ic+5,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+5,nyd)):
                d2=(x2[i]-xx[ii])**2+(y2[j]-yy[jj])**2
                if d2==0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
316/247:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=(x2[i]-mnx)/delx
        jc=(y2[j]-mny)/dely
        for ii in xrange(max(0,ic-5),min(ic+5,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+5,nyd)):
                d2=(x2[i]-xx[ii])**2+(y2[j]-yy[jj])**2
                if d2==0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/1: run -i rdpng2.py
318/2: run -i rdpng2.py
319/1:
from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(5) as p:
        print(p.map(f, [1, 2, 3]))
319/2:
with Pool(5) as p:
    print(p.map(f, [1, 2, 3]))
320/1: import numpy as np
320/2: a=np.empty([5,5])
318/3:
conc=category2
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=list(categoryx[:]).index(m)*2
        else:
            conc[i,j]=0
320/3: !vi *2.py
318/4:
fname_d='dict.grd'
mnx=107.57
mxx=134.27
mny=15.35
mxy=31.89
(nyd,nxd)=(mn2[0],mn2[1])
delx=(mxx-mnx)/(nxd-1)
dely=(mxy-mny)/(nyd-1)
xx=[mnx+delx*i for i in xrange(nxd)]
yy=[mny+dely*i for i in xrange(nyd)]
c0=np.empty([nyd,nxd])
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
mnx2=112.48
mxx2=129.5
mny2=15.35
mxy2=31.89
(nx2,ny2)=(67,67)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
x2=[mnx2+delx*i for i in xrange(nx2)]
y2=[mny2+dely*i for i in xrange(ny2)]
cn=np.empty([nx2,ny2])
318/5: j
318/6: nyd-j-1,i
318/7: category2.shape
318/8: conc.shape
318/9: nxd
318/10: nyd
318/11: c0.shape
318/12: c0=np.empty([nxd,nyd])
318/13:
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
318/14:
mnx2=112.48
mxx2=129.5
mny2=15.35
mxy2=31.89
(nx2,ny2)=(67,67)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
x2=[mnx2+delx*i for i in xrange(nx2)]
y2=[mny2+dely*i for i in xrange(ny2)]
cn=np.empty([nx2,ny2])
318/15:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((x2[i]-mnx)/delx)
        jc=int((y2[j]-mny)/dely)
        for ii in xrange(max(0,ic-5),min(ic+5,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+5,nyd)):
                d2=(x2[i]-xx[ii])**2+(y2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/16: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/17: from save_surfer import *
318/18: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
320/4: del *pyc
320/5: !del *pyc
320/6: !rm *pyc
318/19: from save_surfer import *
318/20: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/21: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/22:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((x2[i]-mnx)/delx)
        jc=int((y2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(x2[i]-xx[ii])**2+(y2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/23: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/24: save_surfer(fname_d,nxd,nyd,mnx,mny,delx,np.matrix.transpose(c0).reshape(nxd*nyd))
320/7: !vi *2.py
318/25:
x2=[mnx2+delx2*i for i in xrange(nx2)]
y2=[mny2+dely2*i for i in xrange(ny2)]
cn=np.empty([nx2,ny2])
318/26:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((x2[i]-mnx)/delx)
        jc=int((y2[j]-mny)/dely)
        for ii in xrange(max(0,ic-5),min(ic+5,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+5,nyd)):
                d2=(x2[i]-xx[ii])**2+(y2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/27: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/28:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=list(categoryx[:]).index(m)
        else:
            conc[i,j]=0
318/29: category2.shape
318/30:
mmapR=[]
for i in xrange(200):
    ldel=[ColorDistance(x[j,:],x2[i,:]) for j in xrange(484)]
    mmapR.append(ldel.index(min(ldel)))
318/31: x.shape
318/32: x2.shape
318/33:
x2=np.array(clt2.cluster_centers_)
category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
mmapR=[]
for i in xrange(200):
    ldel=[ColorDistance(x[j,:],x2[i,:]) for j in xrange(484)]
    mmapR.append(ldel.index(min(ldel)))
318/34:
conc=category2
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=list(categoryx[:]).index(m)
        else:
            conc[i,j]=0
318/35: category2[i,j]
318/36: max(mmapR)
318/37: 290 in mmapR
318/38: x2.shape
318/39: category2.shape
318/40: x
318/41: x.shape
318/42: mmapR
318/43: run -i rdpng2.py
318/44: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/45:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/46:
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
318/47:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
318/48: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
318/49: !vi /home/sespub/teds90_camx/REAS/emission/ems1*.f
318/50: vi *2.py
318/51: !vi *2.py
318/52: len(categoryx)
318/53: max(categoryx)
318/54: categoryx
318/55: !head -n5 dict.grd
318/56: sqrt(60)*10
318/57: np.sqrt(60)*10
318/58: 60**2/10000
318/59: 60.**2/10000
318/60: 60.**2/100
318/61: 100.**2/100
318/62: 1.**2/100
318/63: !vi *2.py
318/64: !vi *2.py
318/65:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=(float(categoryx[:].index(m)))**2/484*2
        else:
            conc[i,j]=0
321/1: run -i rdpng2.py
321/2: i,j
321/3: ii,jj
321/4: d2
321/5: sum1
321/6:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
321/7: sum1
321/8:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:        
            cn[i,j]=sum2/sum1
321/9: save_surfer(fname_d,nx2,ny2,mnx2,mny2,delx2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/10: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/11: image2 = cv2.imread('171008/17100812.png')
321/12: image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
321/13: image2.shape
321/14: image2=image2.reshape((mn2[0]*mn2[1], 3))
321/15: kmeans2=clt2.fit(image2)
321/16:
x2=np.array(clt2.cluster_centers_)
category2=np.reshape(kmeans2.labels_,(-1,mn2[1]))
mmapR=[]
for i in xrange(200):
    ldel=[ColorDistance(x[j,:],x2[i,:]) for j in xrange(484)]
    mmapR.append(ldel.index(min(ldel)))
321/17:
for i in xrange(mn2[0]):
    for j in xrange(mn2[1]):
        m=mmapR[category2[i,j]] #index of x
        if m in categoryx[:]:
            conc[i,j]=(float(categoryx[:].index(m)))**2/484*2
        else:
            conc[i,j]=0
321/18:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-5),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        cn[i,j]=sum2/sum1
321/19:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:        
            cn[i,j]=sum2/sum1
321/20: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/21: !cp rdpng.py dict.grd
321/22: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/23: history
321/24:
for i in xrange(nxd):
    for j in xrange(nyd):
        c0[i,j]=conc[nyd-j-1,i]
321/25:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:        
            cn[i,j]=sum2/sum1
321/26: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/27:
(nx2,ny2)=(65,65)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
321/28: cn=np.empty([nx2,ny2])
321/29:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:
            cn[i,j]=sum2/sum1
321/30: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/31: mnx,mny
321/32: mnx2,mny2
321/33:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2==0: break
                if c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
            if d2==0: break
        if d2==0:
           cn[i,j]=c0[ii,jj]
        else:
            if sum1*sum2 == 0:
                cn[i,j]=0.
            else:
                cn[i,j]=sum2/sum1
321/34: save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/35: !a
321/36: !cat d2.in
321/37:
len2=877.50*2
len1=len2/7.88*9.98 #measured on powerpoint
len1x=len2/7.88*14.52 #measured on powerpoint
mnx=-len1x/2
mxx=+len1x/2
mny=-len1/2
mxy=+len1/2
(nyd,nxd)=(mn2[0],mn2[1])
delx=(mxx-mnx)/(nxd-1)
dely=(mxy-mny)/(nyd-1)
xx=[mnx+delx*i for i in xrange(nxd)]
yy=[mny+dely*i for i in xrange(nyd)]
321/38:
mnx2=-len2/2
mxx2=+len2/2
mny2=-len2/2
mxy2=+len2/2
(nx2,ny2)=(65,65)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
321/39:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2==0:
                   cn[i,j]=c0[ii,jj]
                   break
                if c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
            if d2==0: break
        if d2==0:
           cn[i,j]=c0[ii,jj]
        else:
            if sum1*sum2 == 0:
                cn[i,j]=0.
            else:
                cn[i,j]=sum2/sum1
save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/40: !a
321/41:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:
            cn[i,j]=sum2/sum1
save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/42: !a
321/43:
len2=877.50*2
len1=len2/7.88*9.98 #measured on powerpoint
len1x=len2/7.88*14.52 #measured on powerpoint
mnx=-len1x/2
mxx= len1x/2
mny=-len1/2
mxy= len1/2
(nyd,nxd)=(mn2[0],mn2[1])
delx=(mxx-mnx)/(nxd-1)
dely=(mxy-mny)/(nyd-1)
xx=[mnx+delx*i for i in xrange(nxd)]
yy=[mny+dely*i for i in xrange(nyd)]
delx,dely
321/44:
mnx2=-len2/2
mxx2= len2/2
mny2=-len2/2
mxy2= len2/2
(nx2,ny2)=(65,65)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
delx2,dely2
321/45:
mnx2=-len2/2
mxx2= len2/2
mny2=-len2/2
mxy2= len2/2
(nx2,ny2)=(66,66)
delx2=(mxx2-mnx2)/(nx2-1)
dely2=(mxy2-mny2)/(ny2-1)
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
delx2,dely2
321/46:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:
            cn[i,j]=sum2/sum1
save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/47: cn=np.empty([nx2,ny2])
321/48:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:
            cn[i,j]=sum2/sum1
save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/49: !a
321/50: cn.shape
321/51: nx2,ny2
321/52:
mnx2=-len2/2
mxx2= len2/2
mny2=-len2/2
mxy2= len2/2
(nx2,ny2)=(65,65)
delx2=(mxx2-mnx2)/nx2
dely2=(mxy2-mny2)/ny2
xx2=[mnx2+delx2*i for i in xrange(nx2)]
yy2=[mny2+dely2*i for i in xrange(ny2)]
delx2,dely2
321/53: cn=np.empty([nx2,ny2])
321/54:
for i in xrange(nx2):
    for j in xrange(ny2):
        sum1=0
        sum2=0
        ic=int((xx2[i]-mnx)/delx)
        jc=int((yy2[j]-mny)/dely)
        for ii in xrange(max(0,ic-3),min(ic+3,nxd)):
            for jj in xrange(max(0,jc-3),min(jc+3,nyd)):
                d2=(xx2[i]-xx[ii])**2+(yy2[j]-yy[jj])**2
                if d2*c0[ii,jj]<=0:continue
                sum1=sum1+1/d2
                sum2=sum2+c0[ii,jj]/d2
        if sum1*sum2 == 0:
            cn[i,j]=0.
        else:
            cn[i,j]=sum2/sum1
save_surfer(fname_d,nx2,ny2,mnx2,mny2,mxx2,mxy2,np.matrix.transpose(cn).reshape(nx2*ny2))
321/55: !pwd
322/1: import Image
322/2: from PIL import Image
322/3: im = Image.open("Global_Surface_Ozone_36.gif")
322/4: im.shape
322/5: a=Image.fromarray(im).read
322/6: import cv2
322/7: image = cv2.imread("Global_Surface_Ozone_36.gif")
322/8: image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
322/9: image = cv2.imread("Global_Surface_Ozone_36.gif")
322/10: image.shape
322/11:
def get_gif_num_frames(filename):
    frames = 0
    with open(filename, 'rb') as f:
        if f.read(6) not in ('GIF87a', 'GIF89a'):
            raise GIFError('not a valid GIF file')
        f.seek(4, 1)
        def skip_color_table(flags):
            if flags & 0x80: f.seek(3 << ((flags & 7) + 1), 1)
        flags = ord(f.read(1))
        f.seek(2, 1)
        skip_color_table(flags)
        while True:
            block = f.read(1)
            if block == ';': break
            if block == '!': f.seek(1, 1)
            elif block == ',':
                frames += 1
                f.seek(8, 1)
                skip_color_table(ord(f.read(1)))
                f.seek(1, 1)
            else: raise GIFError('unknown block type')
            while True:
                l = ord(f.read(1))
                if not l: break
                f.seek(l, 1)
    return frames
322/12: filename="Global_Surface_Ozone_36.gif"
322/13: fr=get_gif_num_frames(filename)
322/14: fr.shape
322/15: fr
322/16: im = Image.open("Global_Surface_Ozone_36.gif")
322/17: gif = cv2.VideoCapture(filename)
322/18: ret,frame = gif.read()
322/19: img = Image.fromarray(frame)
322/20: ret
322/21: frame
322/22: ret,frame = im.read()
322/23: img = Image.fromarray(im)
322/24: image = cv2.imread("Global_Surface_Ozone_36.gif")
322/25: image
322/26: !ls -l
322/27: im = Image.open(filename)
322/28: pix = im.load()
322/29: pix
322/30: pix[1,1]
322/31: rgb_im = im.convert('RGB')
322/32: r, g, b = rgb_im.getpixel((1, 1))
322/33: print(r, g, b)
322/34:
import scipy.misc
im = scipy.misc.imread(filename,flatten=False, mode='RGB')
im.shape
323/1: from PseudoNetCDF.camxfiles.Memmaps import uamiv
323/2: !pip install pyproj
323/3: !pip install basemap
323/4: from PseudoNetCDF.camxfiles.Memmaps import uamiv
323/5: path='./pm2_5.avrg'
323/6: con_file = uamiv(path,'r')
323/7: con_file.variables
323/8: con_file.dims
323/9: help(uamiv)
323/10: con_file.variables.keys
323/11: con_file.variables.keys()
323/12: help(uamiv)
323/13: con_file.sync()
323/14: !lst
323/15: pm25=con_file.variables['PM2_5']
323/16: pm25.unit
323/17: print pm25.units,pm25[:].mean()
323/18: pm25[:]=pm25[:]*2
323/19: con_file = uamiv(path,'r+')
323/20: pm25=con_file.variables['PM2_5']
323/21: pm25[:]=pm25[:]*2
323/22: print pm25.units,pm25[:].mean()
323/23: con_file.sync()
323/24: flush = close()
323/25: flush = con_file.close()
323/26: con_file.close()
323/27: !lst
323/28: con_file2 = uamiv(path,'r+')
323/29: pm25_2=con_file2.variables['PM2_5']
323/30: print pm25.units,pm25_2[:].mean()
323/31: pm25_2[:]=pm25_2[:]+2
323/32: con_file2.close()
323/33: !lst
323/34: !date
323/35: con_file = uamiv(path,'r+')
323/36: pm25=con_file.variables['PM2_5']
323/37: print pm25.units,pm25[:].mean()
323/38: vi /cluster/miniconda/lib/python2.7/site-packages/PseudoNetCDF/camxfiles/uamiv/Memmap.py
323/39: !vi /cluster/miniconda/lib/python2.7/site-packages/PseudoNetCDF/camxfiles/uamiv/Memmap.py
323/40: con_file.isMine()
323/41: con_file.isMine(path)
323/42: con_file2.isMine(path)
323/43: con_file2.isMine('pm25.cs')
323/44: con_file2.isMine('')
323/45: con_file2.isMine('~/group')
323/46: con_file2.isMine('/home/kuang/group')
323/47: con_file.add(con_file2)
323/48: con_file.add()
323/49: from PseudoNetCDF.core._files.PseudoNetCDFFile import add
323/50: from PseudoNetCDF.core._files import add
323/51: from PseudoNetCDF.core._files import *
323/52: help()
323/53: PseudoNetCDFFile.add
323/54: help(_files)
323/55: help(PseudoNetCDF.core._files)
323/56: help()
323/57: from PseudoNetCDF.core._files.PseudoNetCDFFile import *
323/58: help(PseudoNetCDFFile)
323/59: help(PseudoNetCDFFile.add())
323/60: help(PseudoNetCDFFile._add_)
323/61: help(PseudoNetCDFFile.__add__)
324/1: from PseudoNetCDF.camxfiles.point_source.Memmap import point_source
324/2: path='fortBE.14'
324/3: pt=point_source(path,'r+')
324/4: pt=point_source(path)
324/5: help(point_source)
324/6: rows,cols = 65,83
324/7: pt=point_source(path,rows,cols)
324/8: help(point_source)
324/9: pt=point_source(rows,cols)
324/10: pt=point_source(path)
324/11: pt.variables
324/12: help(point_source)
324/13: help(point_source)
324/14: from PseudoNetCDF.camxfiles.point_source.Memmap import point_source
324/15: point_source_path='fortBE.14'
324/16: point_sourcefile = point_source(point_source_path,rows,cols)
324/17: a=[point_source_path,rows,cols]
324/18: point_sourcefile = point_source(a)
324/19: point_sourcefile = point_source(path)
325/1: from pandas import *
325/2: df_105=read.csv('105_all.csv')
325/3: df_105=csv.read('105_all.csv')
325/4: df_105=read_csv('105_all.csv')
325/5: df_105.head(5)
325/6:
nn=[]
nm=[]
with open('106.txt') as ftext:
    for line in ftext:
        t=[]
        for i in line.split('\t'): t.append(i)
        nn.append(t[0])
        nm.append(t[1])
325/7: nn
325/8: print nm
325/9: for i in nm:print i
325/10: df_105.columns
325/11: df_105=read_csv('105_all.csv')
325/12: df_105.columns
325/13: df_105=read_csv('105_all.csv')
325/14: df_105.columns
325/15: df_105.head(5)
325/16: nn_105=df_105['no']
325/17: nn_105=df_105['(no']
325/18: nn_105=df_105['\(no']
325/19: df_105.head(5)
325/20: nn_105=df_105[1]
325/21: nn_105=df_105['1']
325/22: nn_105=df_105[col=1]
325/23: df_105.head(5)
325/24: ll=[]
325/25:
for i in len(df_105):
    ll.append(df_105.loc(i))
325/26:
for i in len(df_105):
    ll.append(df_105.loc[i])
325/27: len(df_105)
325/28:
ll=[]
for i in xrange(len(df_105)):
    ll.append(df_105.loc[i])
325/29: ll
325/30: ll[1]
325/31:
ll=[]
for i in xrange(len(df_105)):
    ll.append(list(df_105.loc[i]))
325/32: ll[1]
325/33: ll[0]
325/34:
nn_105=[]
for i in xrange(len(ll)):
    nn_105.append(ll[i][0][1:7])
325/35: nn_105[:5]
325/36:
nn_105=[]
for i in xrange(len(ll)):
    nn_105.append(ll[i][0][2:6])
325/37: nn_105[:5]
325/38: set(nn)-set(nn_105)
325/39: len(set(nn)-set(nn_105))
325/40:
dp=[]
with open('106.txt') as ftext:
    for line in ftext:
        t=[i for i in line.split('\t')]
        dp.append(t[2])
325/41: df_106=DataFrame{'no':nn, 'name':nm,'dept':dp}
325/42: df_106=DataFrame({'no':nn, 'name':nm,'dept':dp})
325/43: df_106
325/44:
em_105=[]
for i in xrange(len(ll)):
    nn_105.append(ll[i][6])
325/45: em_105[:5]
325/46:
nn_105=[]
for i in xrange(len(ll)):
    nn_105.append(ll[i][0][2:6])
325/47: em_105=[ll[i][6] for i in xrange(len(ll))]
325/48: em_105[:5]
325/49: em_105=[ll[i][6][3:-2] for i in xrange(len(ll))]
325/50: em_105[:5]
325/51: em_105=[ll[i][6][3:-1] for i in xrange(len(ll))]
325/52: em_105[:5]
325/53: dp_105=[ll[i][7][:-1] for i in xrange(len(ll))]
325/54: dp_105[:5]
325/55: dp_105=[ll[i][7][3:-2] for i in xrange(len(ll))]
325/56: dp_105[:5]
325/57: ll[1]
325/58: dp_105=[ll[i][7][2:-2] for i in xrange(len(ll))]
325/59: dp_105[:5]
325/60: ll[1]
325/61: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/62: nm_105=[ll[i][2][3:-1] for i in xrange(len(ll))]
325/63: ll[1]
325/64: nm_105=[ll[i][1][3:-1] for i in xrange(len(ll))]
325/65: nm_105[:5]
325/66: ll[:5]
325/67: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/68: df_105bak=df_105
325/69: df_105bak=df_105n
325/70:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:del df_105n.loc[i]
325/71: i=1
325/72: del df_105n.loc[i]
325/73:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:df_105n.drop(df_105n.index[i])
325/74: len(df_105bak), len(df_105n)
325/75: len(df_105bak), len(df_105n)
325/76: set(nn_105)-set(nn)
325/77: len(set(nn_105)-set(nn))
325/78: '6754' in set(nn)
325/79: '6754' in nn
325/80: df_105n[:10]
325/81: nn=[int(x) for x in nn]
325/82:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:df_105n.drop(df_105n.index[i])
325/83: len(df_105bak), len(df_105n)
325/84: df_105n[:10]
325/85: 5865 in nn
325/86: nn
325/87: len(nn)
325/88: i=0
325/89: df_105n.loc[i,'no']
325/90:
nn=[]
nm=[]
with open('106.txt') as ftext:
    for line in ftext:
        t=[]
        for i in line.split('\t'): t.append(i)
        nn.append(t[0])
        nm.append(t[1])
325/91: len(set(nn_105)-set(nn))
325/92: set(nn_105)-set(nn)
325/93: '6510' in nn
325/94: df_105n==df_105bak
325/95: df_105n[:10]
325/96: df_105n.drop(1)
325/97:
a=df_105n
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:a=a.drop(df_105n.index[i])
325/98: len(a)
325/99: len(df_105bak), len(df_105n)
325/100: len(set(nn_105)-set(nn))
325/101: df_105n=a
325/102: a=list(df_105['name'])
325/103: a=list(df_105n['name'])
325/104: set(a)-set(nn)
325/105: a=list(df_105n['no'])
325/106: set(a)-set(nn)
325/107:
b=len(df_106)
for i in xrange(len(df_106)):
    if df_106.loc[i,'no'] in a:b=b.drop(df_106.index[i])
325/108:
b=df_106
for i in xrange(len(df_106)):
    if df_106.loc[i,'no'] in a:b=b.drop(df_106.index[i])
325/109: len(b)
325/110: len(set(nn)-set(nn_105))
325/111: set(b)-set(set(nn)-set(nn_105))
325/112: set(list(b['no']))-set(set(nn)-set(nn_105))
325/113: b.columns
325/114: df_105n.columns
325/115: b['email']=['' for i in xrange(len(b))]
325/116: b.columns
325/117: df_106.columns
325/118: df_106n=concat([df_105n,b])
325/119: len(df_106n)
325/120: len(nn)
325/121: set(df_106n['no'])-set(nn)
325/122: col=[ u'no', u'name',u'dept',u'email']
325/123: df_106n[col].set_index('no').to_csv('106_all.csv')
325/124:
nn_105=[]
for i in xrange(len(ll)):
    nn_105.append(ll[i][0])
325/125: history>rd106.py
325/126: history>/home/kaung/py_programs/bike/rd106.py
325/127: history
325/128: nm_105=[ll[i][2][2:-1] for i in xrange(len(ll))]
325/129: ll[:5]
325/130: ll[:2]
325/131: nm_105=[ll[i][1][2:-1] for i in xrange(len(ll))]
325/132: nm_105[:5]
325/133: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/134:
df_105bak=df_105n
a=df_105n
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:a=a.drop(df_105n.index[i])
325/135:
df_105n=a
a=list(df_105n['name'])
325/136: set(a)-set(nn)
325/137: df_106n=concat([df_105n,b])
325/138: df_106n[col].set_index('no').to_csv('106_all.csv')
325/139: len(df_105n)
325/140: len(df_105bak)
325/141: df_105bak[:5]
325/142: nn_105=[x[1:] for x in nn_105]
325/143: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/144: df_105bak=df_105n
325/145: df_105bak[:5]
325/146: a=df_105n
325/147:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:df_105n.drop(df_105n.index[i])
325/148: len(df_105n)
325/149: len(a)
325/150:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:a=a.drop(df_105n.index[i])
325/151: len(a)
325/152:
for i in xrange(len(df_105n)):
    if df_105bak.loc[i,'no'] not in nn:a=a.drop(df_105n.index[i])
325/153: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/154: df_105bak=df_105n
325/155: a=df_105n
325/156:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:a=a.drop(i)
325/157: len(a)
325/158: i=1
325/159: df_105n.loc[i,'no']
325/160: nn_105=[x[1:-1] for x in nn_105]
325/161: nn_105[:3}
325/162: nn_105[:3]
325/163: df_105n=DataFrame({'no':nn_105, 'name':nm_105,'dept':dp_105,'email':em_105})
325/164: df_105bak=df_105n
325/165: a=df_105n
325/166:
for i in xrange(len(df_105n)):
    if df_105n.loc[i,'no'] not in nn:a=a.drop(i)
325/167: len(a)
325/168: df_105n=a
325/169: df_106n=concat([df_105n,b])
325/170: df_106n[col].set_index('no').to_csv('106_all.csv')
326/1: from pandas import *
326/2: !vi title.txt
326/3: fname='title.txt'
326/4:
col=[]
with open(fname) as ftext:
    for line in ftext:
        for i in line.split():
            col.append(i)
326/5: col
326/6: icd01=col.index('CD01')
326/7: icd01
326/8: fname='2013'
326/9:
with open(fname) as ftext:
    mtx=[]
    for line in ftext:
        s=[i for i in line.split()]
        if len(s) != len(col):
            print 'wrong'
            exit
        mtx.append(line)
326/10: len(col)
326/11: len(mtx)
326/12: lm=len(mtx)
326/13: df=DataFrame({col[0]:[mtx[i].split()[0] for i in xrange(lm)]},{col[1]:[mtx[i].split()[1] for i in xrange(lm)]},{col[20]:[mtx[i].split()[20] for i in xrange(lm)]},{col[21]:[mtx[i].split()[21] for i in xrange(lm)]},{col[22]:[mtx[i].split()[22] for i in xrange(lm)]})
326/14: i
326/15: len(df)
326/16: cd1=[mtx[i].split()[0] for i in xrange(lm)]
326/17: stno=cd1
326/18: yyyymmddhh=[mtx[i].split()[1] for i in xrange(lm)]
326/19: CD01=[mtx[i].split()[20] for i in xrange(lm)]
326/20: CD01[:5]
326/21: min(CD01)
326/22: CD02=[mtx[i].split()[21] for i in xrange(lm)]
326/23: max(CD01)
326/24: max(CD02)
326/25: CD03=[mtx[i].split()[22] for i in xrange(lm)]
326/26: max(CD03)
326/27: ceil=(max(i,j,k) for i,j,k in zip(CD01, CD02,CD03)]
326/28: ceil=[max(i,j,k) for i,j,k in zip(CD01, CD02,CD03)]
326/29: ceil[:5}
326/30: ceil[:5]
326/31: CD02[:5]
326/32: CD03[:5]
326/33: ceil[16]
326/34: yyyymmddhh[:5]
326/35: set([x[0:4] for x in yyyymmddhh])
326/36: set(stno)
326/37: len(set(stno))
326/38: df=DataFrame({'stno':stno,'ceil':ceil,'yyyy':[int(x[0:4]) for x in yyyymmddhh],'mm':[int(x[4:6]) for x in yyyymmddhh],'dd':[int(x[6:8]) for x in yyyymmddhh],'hh':[int(x[8:10]) for x in yyyymmddhh]})
326/39: df.head(5)
326/40: df.head(25)
326/41: boo1=df['yyyy']==2011
326/42: df['yyyymmddhh']=yyyymmddhh
326/43: bool2=df['mm']==1 and df['dd']==1 and boo1
326/44: bool2=df['mm']==1 and df['dd']==1
326/45:
for i in set(stno):
    df2=df[df['stno']==i]
    df2[df2['yyyymmddhh'].map(lambda x x[0:8]='20110101')]
326/46:
for i in set(stno):
    df2=df[df['stno']==i]
    df2[df2['yyyymmddhh'].map(lambda x for x[0:8]=='20110101')]
326/47:
for i in set(stno):
    df2=df[df['stno']==i]
    df2[df2['yyyymmddhh'].map(lambda x: x[0:8]=='20110101')]
326/48:
for i in set(stno):
    df2=df[df['stno']==i]
    print df2[df2['yyyymmddhh'].map(lambda x: x[0:8]=='20110101')]
326/49:
for i in set(stno):
    df2=df[df['stno']==i]
    if len(set(df2['ceil']))==1:print i
326/50:
no_ceil=[]
for i in set(stno):
    df2=df[df['stno']==i]
    if len(set(df2['ceil']))==1:no_ceil.append(i)
326/51: no_ceil
326/52:
for i in (set(stno)-set(no_ceil)):
    df2=df[df['stno']==i]
    print df2[df2['yyyymmddhh'].map(lambda x: x[0:8]=='20110101')]
326/53: col2=['stno','yyyy','mm','dd','hh','ceil']
326/54: df[df['yyyy']==2011][col2].set_index('stno').to_csv('2011.csv')
326/55: df[df['yyyy']==2012][col2].set_index('stno').to_csv('2012.csv')
326/56: df[df['yyyy']==2013][col2].set_index('stno').to_csv('2013.csv')
326/57: history
326/58: !vi rd.py
327/1: from pandas import *
327/2: df=read_csv('2013.csv')
327/3: len(set(df['stno']))
327/4: set(df['stno'])
328/1: from pandas import *
328/2: fname='2011-2013.txt'
328/3:
with open(fname) as ftext:
        mtx=[]
        for line in ftext:
                s=[i for i in line.split()]
                if len(s) != len(col):
                        print 'wrong'
                        exit
                    mtx.append(line)
328/4:
with open(fname) as ftext:
    mtx=[]
    for line in ftext:
        s=[i for i in line.split()]
        if len(s) != len(col):
            print 'wrong'
            exit
        mtx.append(line)
328/5: fname='title.txt'
328/6: col=[]
328/7:
with open(fname) as ftext:
    for line in ftext:
        for i in line.split():
            col.append(i)
328/8:
with open(fname) as ftext:
    mtx=[]
    for line in ftext:
        s=[i for i in line.split()]
        if len(s) != len(col):
            print 'wrong'
            exit
        mtx.append(line)
328/9: len(s)
328/10: len(mtx)
328/11: fname='2011-2013.txt'
328/12:
with open(fname) as ftext:
    mtx=[]
    for line in ftext:
        s=[i for i in line.split()]
        if len(s) != len(col):
            print 'wrong'
            exit
        mtx.append(line)
328/13: len(mtx)
328/14: yyyymmddhh=[mtx[i].split()[1] for i in xrange(lm)]
328/15: lm=len(mtx)
328/16: yyyymmddhh=[mtx[i].split()[1] for i in xrange(lm)]
328/17: stno=[mtx[i].split()[0] for i in xrange(lm)]
328/18: CD03=[mtx[i].split()[22] for i in xrange(lm)]
328/19: col.index('CD10')
328/20: ht=[mtx[i].split()[29] for i in xrange(lm)]
328/21: ht[:10]
328/22: CD03[:10]
328/23: PP01=[mtx[i].split()[col.index('PP01')] for i in xrange(lm)]
328/24: PP02=[mtx[i].split()[col.index('PP02')] for i in xrange(lm)]
328/25: CD11=[mtx[i].split()[col.index('CD11')] for i in xrange(lm)]
328/26: PS01=[mtx[i].split()[col.index('PS01')] for i in xrange(lm)]
328/27: RH01=[mtx[i].split()[col.index('RH01')] for i in xrange(lm)]
328/28: col2=['stno','yy','mm','dd','hh','TX01','RH01','CD11','WD02','WD03','PP01','PP02','PS01']
328/29: dd={}
328/30:
for itm in col2:
    if itm in col:
        dd.update({itm:[mtx[i].split()[col.index(itm)] for i in xrange(lm)]})
328/31: dd
328/32: df=DataFrame(dd)
328/33: df.head(10)
328/34: yyyymmddhh=[mtx[i].split()[1] for i in xrange(lm)]
328/35: dd.update({'yyyy':[int(x[0:4]) for x in yyyymmddhh],'mm':[int(x[4:6]) for x in yyyymmddhh],'dd':[int(x[6:8]) for x in yyyymmddhh],'hh':[int(x[8:10]) for x in yyyymmddhh]})
328/36: df=DataFrame(dd)
328/37: df.head(10)
328/38: df.tail(10)
328/39: col2
328/40: CD01=[mtx[i].split()[20] for i in xrange(lm)]
328/41: CD02=[mtx[i].split()[21] for i in xrange(lm)]
328/42: CD03=[mtx[i].split()[22] for i in xrange(lm)]
328/43: ceil=[max(i,j,k) for i,j,k in zip(CD01, CD02,CD03)]
328/44: col2.append('ceil')
328/45: df['ceil']=ceil
328/46: for iy in xrange(2011,2014);do df[df['yyyy']==2013][col2].set_index('stno').to_csv('2013.csv')
328/47:
for iy in xrange(2011,2014):
    df[df['yyyy']==iy][col2].set_index('stno').to_csv('Out'+str(iy)+'.csv')
328/48: df['yy']=[mod(x,100) for x in df['yyyy']]
328/49: df['yy']=[int(str(x)[2:4]) for x in df['yyyy']]
328/50: df.head(10)
328/51:
for iy in xrange(2011,2014):
    df[df['yyyy']==iy][col2].set_index('stno').to_csv('Out'+str(iy)+'.csv')
328/52: history
328/53: !vi rd2.py
328/54: run rd2.py
329/1: run rd2.py
330/1: run rd2.py
330/2: df2=df[df['stno']=='46706']
330/3: df2.head(10)
330/4: df.head(5)
330/5: df2=df[df['stno']==467060]
330/6: df2.head(10)
330/7: set(df['stno'])
330/8: df2=df[df['stno']=='467060']
330/9: df2.head(10)
330/10: df3=df2[df2['yyyy']==2013]
330/11: df3.head(10)
330/12: !ls
330/13: !more 10151437361.txt
330/14: !pwd
330/15: df3.head(10)
331/1: from pandas import *
331/2:
fname1='sta.dat'
with open(fname1) as ftext:
    nam=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam.append(s[0])
331/3: len(nam)
331/4:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam.append(s[1])
331/5: s
331/6:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam.append(s[1])
331/7:
fname3='../sta_list.txt'
with open(fname3) as ftext:
    nam3=[]
    x=[]
    y=[]
    for line in ftext:
        s=[i for i in line.split()]
        if s[0]=='ID':continue
        nam3.append(s[0])
        x.append(s[2])
        y.append(s[3])
331/8:
eng_nam2=eng_nam
eng_nam=[]
x3=x
y3=y
(x,y)=([],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/9: !tail ../sta_list.txt
331/10: !grep 778 ../sta_list.txt
331/11: !grep 778 sta.txt
331/12: !grep 778 sta.dat
331/13:
eng_nam2=eng_nam
eng_nam=[]
x3=x
y3=y
(x,y)=([],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/14:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/15:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/16:
fname3='../sta_list.txt'
with open(fname3) as ftext:
    nam3=[]
    x3=[]
    y3=[]
    for line in ftext:
        s=[i for i in line.split()]
        if s[0]=='ID':continue
        nam3.append(s[0])
        x3.append(s[2])
        y3.append(s[3])
331/17:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/18: x[nam3.index('TaiNan')]
331/19: nam3
331/20: nam3[eng_nam3.index('TaiNan')]
331/21: nam2[eng_nam2.index('TaiNan')]
331/22: x3[nam3.index('046')]
331/23: y3[nam3.index('046')]
331/24:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/25:
fname3='../sta_list.txt'
with open(fname3) as ftext:
    nam3=[]
    x3=[]
    y3=[]
    for line in ftext:
        s=[i for i in line.split()]
        if s[0]=='ID':continue
        nam3.append(s[0])
        x3.append(s[2])
        y3.append(s[3])
331/26:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/27:
fname3='../sta_list.txt'
with open(fname3) as ftext:
    nam3=[]
    x3=[]
    y3=[]
    for line in ftext:
        s=[i for i in line.split()]
        if s[0]=='ID':continue
        nam3.append(s[0])
        x3.append(s[2])
        y3.append(s[3])
331/28:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/29:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/30:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/31:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/32:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/33:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/34:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/35:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/36:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/37:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/38:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/39:
fname2='/home/camxruns/2013/outputs/nameMET.eng'
with open(fname2) as ftext:
    nam2=[]
    eng_nam2=[]
    for line in ftext:
        s=[i for i in line.split()]
        nam2.append(s[0])
        eng_nam2.append(s[1])
331/40:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/41: df=DataFrame({'Number':nam,'Name':eng_nam,'LLC_X':x,'LLC_Y':y})
331/42: df
331/43: df[index]
331/44: df['index']
331/45: df.index
331/46: df
331/47: seq=['CWB'+str(i) for i in xrange(len(df))]
331/48: seq[29:]
331/49: for i in xrange(29:len(df)):
331/50:
for i in xrange(29,len(df)):
    seq[i]='EPA'+str(i)
331/51: df['SEQ']=seq
331/52: df.head(10)
331/53: seq=[i+' =' for i in seq]
331/54: df['SEQ']=seq
331/55: df.head(10)
331/56: col=['SEQ','Name','Number','LCC_X','LCC_Y']
331/57: df[col].set_index('SEQ').to_csv('sta.csv')
331/58: df.head(10)
331/59: col=['SEQ','Name','Number','LLC_X','LLC_Y']
331/60: df[col].set_index('SEQ').to_csv('sta.csv')
331/61: df['Time zone']=[-8 for i in xrange(df)]
331/62: df['Time zone']=[-8 for i in xrange(len(df))]
331/63: col=['SEQ','Name','Number','LLC_X','LLC_Y','Time zone']
331/64: df['LLC_X']=[x/1000 for x in df['LLC_X']]
331/65: df['LLC_X']=[int(x)/1000 for x in df['LLC_X']]
331/66: df['LLC_Y']=[int(x)/1000 for x in df['LLC_Y']]
331/67: df.head(10)
331/68: df['LLC_Y']=[float(i)/1000 for i in y]
331/69: x
331/70:
(eng_nam,x,y)=([],[],[])
for i in nam:
    eng_nam.append(eng_nam2[nam2.index(i)])
    x.append(x3[nam3.index(i)])
    y.append(y3[nam3.index(i)])
331/71: df['LLC_X']=[float(i)/1000 for i in x]
331/72: df.head(10)
331/73: df[col].head(10)
331/74: df[col]>a
331/75: df[col].head(81)
331/76: df[col].head(29)
331/77: df[col].set_index(SEQ).head(29)
331/78: df[col].set_index('SEQ').head(29)
331/79: df[col].set_index('SEQ').head(40)
331/80: df['SEQ']=['!'+i for i in df['SEQ']]
331/81: df['Time zone']=[str(i)+'!' for i in df['Time zone']]
331/82: df.head(10)
331/83: df[col].set_index('SEQ').head(40)
331/84: df[col].set_index('SEQ').head(40:)
331/85: df[col].set_index('SEQ').head(40:81)
331/86: df[col].set_index('SEQ').head(40,81)
331/87: df[col].set_index('SEQ').tail(40)
331/88: df[col].set_index('SEQ').tail(42)
331/89: df['Time zone']=[-8 for i in xrange(len(df))]
331/90: df['AnnHt']=['10 !' for i in xrange(len(df))]
331/91: col=['SEQ','Name','Number','LLC_X','LLC_Y','Time zone','AnnHt']
331/92: df[col].set_index('SEQ').head(40)
331/93: df[col].set_index('SEQ').tail(42)
332/1: from pandas import *
332/2: fname='../../2013/cent.txt'
332/3:
with open(fname) as ftext:
    for line in ftext:
        cent=[float(i) for i in line.split()]
332/4: fname2='/home/cpuff/2013/sta_list.txt'
332/5:
(num2,x2,y2)=([],[],[])
with open(fname2) as ftext:
    for line in ftext:
        s=[float(i) for i in line.split()]
        num2.append(s[0])
        x2.append(s[2])
        y2.append(s[3])
332/6:
(num2,x2,y2)=([],[],[])
with open(fname2) as ftext:
    for line in ftext:
        s=[i for i in line.split()]
        if s[0] =='ID':continue
        num2.append(s[0])
        x2.append(float(s[2]))
        y2.append(float(s[3]))
332/7: s
332/8: len(num2)
332/9: !wc /home/cpuff/2013/sta_list.txt
332/10:
(num2,x2,y2)=([],[],[])
with open(fname2) as ftext:
    for line in ftext:
        s=[i for i in line.split()]
        if s[0] =='ID':continue
        num2.append(s[0])
        x2.append(float(s[2]))
        y2.append(float(s[3]))
332/11:
fname3='sta_utm.dat'
(num3,x3,y3)=([],[],[])
with open(fname3) as ftext:
    for line in ftext:
        s=[i for i in line.split()]
        num3.append(s[0])
        x3.append(float(s[1]))
        y3.append(float(s[2]))
332/12: len(num3)
332/13:
(lcc_x,lcc_y)=([],[])
for i in num3:
    lcc_x=x2[num2.index(i)]
    lcc_y=y2[num2.index(i)]
332/14:
for i in xrange(len(num3)):
    print num3[i],lcc_x[i],lcc_y[i]
332/15:
(lcc_x,lcc_y)=([],[])
for i in num3:
    lcc_x.append(x2[num2.index(i)])
    lcc_y.append(y2[num2.index(i)])
332/16:
for i in xrange(len(num3)):
    print num3[i],lcc_x[i],lcc_y[i]
332/17: !vi sta_lcc.dat
332/18: history >sta.py
333/1: fname='b'
333/2:
b=[]
with open(fname) as ftext:
    for line in ftext:
        s=[i for i in line.split()]
        b.append(s[0])
333/3: fname='sta_a.txt'
333/4:
a=[]
with open(fname) as ftext:
    for line in ftext:
        s=[i for i in line.split()]
        for j in s:
            a.append(j)
333/5: set(a)-set(b)
333/6: len(a),len(b)
333/7:
for i in xrange(81):
    a[i]-b[i]
333/8:
for i in xrange(81):
    print str(a[i])-str(b[i])
333/9:
for i in xrange(81):
    print int(a[i])-int(b[i])
331/94: history>eng_nam.py
334/1: from pandas import *
334/2: fname='/home/backup/data/cwb/txt/Out2013.csv'
334/3: df.read_csv(fname)
334/4: df=read_csv(fname)
334/5: df.cols
334/6: df.col
334/7: df.columns
334/8: df.head(10)
334/9: a=df[df['stno']=='46779']
334/10: a=df[df['stno']==46779]
334/11: a.head(10)
334/12: a=df[df['stno']==467790]
334/13: a.head(10)
334/14: set(df['stno'])
334/15: a=df[df['stno']==467990]
334/16: a.head(10)
334/17: 467790 in set(df['stno'])
334/18: 467990 in set(df['stno'])
334/19: !pwd
334/20: !vi surf.dat
334/21: !vi surf.dat
334/22: !vi surf.dat
335/1: s=[!ZFACE=0, 20., 32.03, 64.07, 96.32, 128.58, 193.77, 258.96, 358.51, 458.05,
335/2: s=[0, 20., 32.03, 64.07, 96.32, 128.58, 193.77, 258.96, 358.51, 458.05, 730.37, 1011.02, 1374.45, 1753.08, 2562.08, 11656.23]
335/3: len(s)
335/4: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
335/5: len(m)
335/6: m
335/7: cd=['        cellzc('+str(i+1)+')='+str(m[i]) for m in xrange(15)]
335/8: cd=['        cellzc('+str(i+1)+')='+str(m[i]) for i in xrange(15)]
335/9: m
335/10: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
335/11: cd=['        cellzc('+str(i+1)+')='+str(m[i]) for i in xrange(15)]
335/12: cd
335/13: s
335/14: history>cellzc.py
336/1: run cellzc.py
336/2: !ls cell*
336/3: !ls *py
337/1: s=[0, 20., 32.03, 64.07, 96.32, 128.58, 193.77, 258.96, 358.51, 458.05, 730.37, 1011.02, 1374.45, 1753.08, 2562.08, 11656.23]
337/2: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
337/3: cd=['        cellzc('+str(i+1)+')='+str(m[i]) for i in xrange(15)]
337/4: cd
337/5: history >cellzc.py
337/6: !ls *py
337/7: history >/home/cpuff/2013/mm01/cellzc.py
337/8: !ls
337/9: %history >cellzc.py
337/10: !ls
337/11: %history -g -f cellzc.py
337/12: !ls
338/1: s=[0.0,20.0,47.0,75.0,106.5,141.5,181.0,226.0,277.0,334.5,399.5,555.5,757.0,1177.0,1566.5,2403.5]
338/2: len(s)
338/3: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
338/4: cd=['        cellzc('+str(i+1)+')='+str(m[i]) for i in xrange(15)]
338/5: cd
341/1: d={1:'kuang',2:'yaachun'}
341/2: d[1]
341/3: d[2]
341/4: d['kuang']
341/5: d.index('kuang')
342/1: fname='item2.txt'
342/2:
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line)
342/3: len(itm)
342/4: itm
342/5:
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
342/6: itm
342/7: history
342/8: !vi itm.py
342/9: !vi item.txt
340/1:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i(2:4)+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/2:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/3:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        else:
            print 'not open'
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/4:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
try:    
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
except:
    print fname
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/5:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
try:    
    with open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
except IOError as e:
    print fname
    raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/6:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try:    
        with open(fname) as ftext:
            for line in ftext:
                t=[]
                for i in line.split(','): t.append(i)
                if len(t) ==1:
                   t=[]
                   for i in line.split(): t.append(i)
                if float(t[2])==it2:
                    ymd=float(t[3])
                    md=int(ymd%10000)
                    ss=int(float(t[0]))
                    pm=[]
                    for i in xrange(4,4+24):
                        ti=float(t[i])
                        pm.append(ti)
                    ti=np.mean(pm)
                    if ti>0:
                        y.append(int(ymd/10000))
                        m.append(int(md/100))
                        d.append(md%100)
                        s.append(ss)
                        C.append(ti)
    except IOError as e:
        print fname
        raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/7:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try: open(fname) as ftext:
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        fname.close
    except IOError as e:
        print fname
        raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/8:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        fname.close
    except IOError as e:
        print fname
        raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/9:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError as e:
        print fname
        raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/10:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        print fname
    else:
        raise
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/11:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
it2=itm.index('PM2.5')
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        print fname
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/12:
(s1,y1,C1)=([],[],[])
for i in stn:
    for j in yr:
        si=int(i)
        s1.append(si)
        yi=int(j)
        y1.append(yi)
        a=np.ma.masked_where(y!=yi, C)
        aa=np.mean(np.ma.masked_where(s!=si, a))
        C1.append(aa)
        #print ij,aa
d1={'station':Series(s1),'year':Series(y1),'PM2.5':Series(C1)}
data=DataFrame(d1)
fig, ax = plt.subplots()
for temp in stn:
    dat = data[data['station']==int(temp)]
    yr =  dat['year']
    dates_f = [ss for ss in yr]
    ax.plot(dates_f, dat['PM2.5'], label = "station: {0}".format(temp))
plt.xlabel("Year")
plt.ylabel("PM2.5(ug/M3)")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
340/13:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='NO2'#'PM2.5'
SPUN='PPB'#'ug/M3'
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        print fname
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/14:
(s1,y1,C1)=([],[],[])
for i in stn:
    for j in yr:
        si=int(i)
        s1.append(si)
        yi=int(j)
        y1.append(yi)
        a=np.ma.masked_where(y!=yi, C)
        aa=np.mean(np.ma.masked_where(s!=si, a))
        C1.append(aa)
        #print ij,aa
d1={'station':Series(s1),'year':Series(y1),SPNAM:Series(C1)}
data=DataFrame(d1)
fig, ax = plt.subplots()
for temp in stn:
    dat = data[data['station']==int(temp)]
    yr =  dat['year']
    dates_f = [ss for ss in yr]
    ax.plot(dates_f, dat[SPNAM], label = "station: {0}".format(temp))
plt.xlabel("Year")
plt.ylabel(SPNAM+'('+SPUN+")")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
340/15:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['50','67','68','70','71'] #traffic st,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='PM2.5'#'NO2'#
SPUN='ug/M3'#'PPB'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        print fname
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/16:
(s1,y1,C1)=([],[],[])
for i in stn:
    for j in yr:
        si=int(i)
        s1.append(si)
        yi=int(j)
        y1.append(yi)
        a=np.ma.masked_where(y!=yi, C)
        aa=np.mean(np.ma.masked_where(s!=si, a))
        C1.append(aa)
        #print ij,aa
d1={'station':Series(s1),'year':Series(y1),SPNAM:Series(C1)}
data=DataFrame(d1)
fig, ax = plt.subplots()
for temp in stn:
    dat = data[data['station']==int(temp)]
    yr =  dat['year']
    dates_f = [ss for ss in yr]
    ax.plot(dates_f, dat[SPNAM], label = "station: {0}".format(temp))
plt.xlabel("Year")
plt.ylabel(SPNAM+'('+SPUN+")")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
340/17:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='PM2.5'#'NO2'#
SPUN='ug/M3'#'PPB'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        print fname
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/18:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='PM2.5'#'NO2'#
SPUN='ug/M3'#'PPB'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/19:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='PM2.5'#'NO2'#
SPUN='ug/M3'#'PPB'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        a=1
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/20:
(s1,y1,C1)=([],[],[])
for i in stn:
    for j in yr:
        si=int(i)
        s1.append(si)
        yi=int(j)
        y1.append(yi)
        a=np.ma.masked_where(y!=yi, C)
        aa=np.mean(np.ma.masked_where(s!=si, a))
        C1.append(aa)
        #print ij,aa
d1={'station':Series(s1),'year':Series(y1),SPNAM:Series(C1)}
data=DataFrame(d1)
fig, ax = plt.subplots()
for temp in stn:
    dat = data[data['station']==int(temp)]
    yr =  dat['year']
    dates_f = [ss for ss in yr]
    ax.plot(dates_f, dat[SPNAM], label = "station: {0}".format(temp))
plt.xlabel("Year")
plt.ylabel(SPNAM+'('+SPUN+")")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
340/21:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='NO2'#'PM2.5'#
SPUN='PPB'#'ug/M3'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        a=1
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/22:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
yr=[str(i) for i in xrange(2005,2017)]
stn=['07','38','51','57'] #NH4 stations
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
filenm=set()
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            if fn not in filenm:filenm.add(fn)
(y,m,d,h,s,C,WD)=([],[],[],[],[],[],[])
SPNAM='NO2'#'PM2.5'#
SPUN='PPB'#'ug/M3'#
it2=itm.index(SPNAM)
if it2==0 :print 'item not found'
for fname in filenm:
    try: 
        ftext=open(fname)
        for line in ftext:
            t=[]
            for i in line.split(','): t.append(i)
            if len(t) ==1:
               t=[]
               for i in line.split(): t.append(i)
            if float(t[2])==it2:
                ymd=float(t[3])
                md=int(ymd%10000)
                ss=int(float(t[0]))
                pm=[]
                for i in xrange(4,4+24):
                    ti=float(t[i])
                    pm.append(ti)
                ti=np.mean(pm)
                if ti>0:
                    y.append(int(ymd/10000))
                    m.append(int(md/100))
                    d.append(md%100)
                    s.append(ss)
                    C.append(ti)
        ftext.close
    except IOError:
        a=1
    else:
        ftext.close
(y,m,d,s,C)=(np.array(y),np.array(m),np.array(d),np.array(s),np.array(C))
340/23:
(s1,y1,C1)=([],[],[])
for i in stn:
    for j in yr:
        si=int(i)
        s1.append(si)
        yi=int(j)
        y1.append(yi)
        a=np.ma.masked_where(y!=yi, C)
        aa=np.mean(np.ma.masked_where(s!=si, a))
        C1.append(aa)
        #print ij,aa
d1={'station':Series(s1),'year':Series(y1),SPNAM:Series(C1)}
data=DataFrame(d1)
fig, ax = plt.subplots()
for temp in stn:
    dat = data[data['station']==int(temp)]
    yr =  dat['year']
    dates_f = [ss for ss in yr]
    ax.plot(dates_f, dat[SPNAM], label = "station: {0}".format(temp))
plt.xlabel("Year")
plt.ylabel(SPNAM+'('+SPUN+")")
ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
plt.show()
340/24:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=itm.index('WIND_DIREC')
print it3
340/25:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=itm.index('WIND_DIRECT')
print it3
340/26:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
try:
    it3=itm.index('WIND_DIRECT')
except:    
print it3
340/27:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
try:
    it3=itm.index('WIND_DIRECT')
except:    
    print it3
340/28:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIRECT')
except:    
    print it3
340/29:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIREC')
except:    
    print it3
340/30:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIREC')
except:
    
print it3
340/31:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIREC')
except:
    raise
print it3
340/32:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIRECT)
except:
    raise
print it3
340/33:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIRECT')
except:
    raise
print it3
340/34:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIRECT')
except ValureError:
    raise
print it3
340/35:
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
it3=0
try:
    it3=itm.index('WIND_DIRECT')
except :
    raise
print it3
340/36: run P_N(WD).py
340/37:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)     
            except IOError:
                not_open=\+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)
print not_open
340/38:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)     
            except IOError:
                not_open+=1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)
print not_open
340/39:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)     
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)
print not_open
340/40:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)     
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)
print not_open,len(fn)
340/41:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)     
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)
print not_open,len(fn),len(yr)*len(stn)*len(yrmn)
340/42:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)
                if fn not in filenm:filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                
print not_open,len(fn),len(yr)*len(stn)*len(yrmn)
340/43:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fname)
                print fname
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)                
print not_open,len(fn),len(yr)*len(stn)*len(yrmn)
340/44:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##
itx=[itm.index(i) for i in SPNAM]
       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                print fn
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)                
print not_open,len(fn),len(yr)*len(stn)*len(yrmn)
340/45:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                if fn not in filenm:filenm.add(fn)                
print not_open,copen,len(fn),len(yr)*len(stn)*len(yrmn)
340/46:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                if fn not in filenm:filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(fn),len(yr)*len(stn)*len(yrmn)
340/47:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(fn),len(yr)*len(stn)*len(yrmn)
340/48:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(fn),len(yr)*len(stn)*len(yrmn)
340/49:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(filenm),len(yr)*len(stn)*len(yrmn)
340/50: run P_N(WD).py
340/51: 1.03**15
340/52: 1.03**20
340/53: run P_N(WD).py
340/54: run P_N(WD).py
340/55:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(filenm),len(yr)*len(stn)*len(yrmn)
340/56: run P_N(WD).py
340/57:
stn=['16','33','43','49','50','53','67','68','70','71'] 
STNAM=['DaTung','ZhanHwua','XinYin','RenWu','FenShan','NanZi','SanChong','ZhongLi','YongHe','FuXin']
for i in xrange(len(stn)):
    temp=stn[i]
    print STNAM[stn.index(temp)]
340/58: run P_N(WD).py
340/59: run P_N(WD).py
340/60: run P_N(WD).py
340/61: run P_N(WD).py
340/62: run P_N(WD).py
340/63: run P_N(WD).py
340/64: run P_N(WD).py
340/65: ymd
340/66: run northern_yr.py
340/67: dd3[:5]
340/68: data_4[i][0:2]
340/69: data_4[i]
340/70: run northern_yr.py
340/71:
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import datetime as dt
from pandas import *
nwd=22.5#in deg
yr=[str(i) for i in xrange(2005,2017)]
stn=['16','50','67','68','70','71'] 
#traffic st,Datung,FenShan,SanChong,ZhongLi,YongHe & FuXin
yrmn=['0131','0228','0331','0430','0531','0630','0731','0831','0930','1031','1130','1231']

#items of database
fname='item2.txt'
itm=[]
with open(fname) as ftext:
    for line in ftext:
        itm.append(line.strip('\n'))
SPNAM=['NO2','PM2.5','WIND_DIREC']#'NO2'#
SPUN=['PPB','ug/M3','deg']##

itx=[itm.index(i) for i in SPNAM]
copen=0       
filenm=set()
not_open=0
for i in yr:
    for j in stn:
        for k in yrmn:
            yn=k
            if float(i)%4==0 and k=='0228':yn='0229'
            fn=i+'/HS'+i[2:4]+yn+'.0'+j
            try: 
                ftext=open(fn)
                copen=copen+1
                filenm.add(fn)
            except IOError:
                not_open=not_open+1
            else:
                ftext.close                
                                
print not_open,copen,len(filenm),len(yr)*len(stn)*len(yrmn)
340/72: run northern_yr.py
340/73: run northern_yr.py
340/74: yr[-1]
340/75: yr[-1:]
340/76: run northern_yr.py
340/77: yr[-1]
340/78: start, end = yr[0],yr[-1]
340/79: print start,end
340/80: run northern_yr.py
340/81: run northern_yr.py
340/82: run northern_yr.py
340/83: run northern_yr.py
340/84: run northern_yr.py
340/85: run northern_yr.py
340/86: run northern_yr.py
340/87: run northern_yr.py
340/88: run northern_yr.py
340/89:
s_wd={1:[11,12,13],2:[21,22,23,24,25]}
12 in s_wd[1]
340/90:
s_wd={1:[11,12,13],2:[21,22,23,24,25]}
12 in s_wd[2]
340/91:
s_wd={1:[11,12,13],2:[21,22,23,24,25]}
22 in s_wd[2]
340/92: run P_N(WD).py
340/93: run northeern_yr.py
340/94: run northern_yr.py
343/1: fname='/home/cpuff/2013/mm09/ht_wrf.txt'
343/2:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(float(line.split()[4]))
343/3: line
343/4:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(float(line.split()[4]))
343/5: len(s)
343/6: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
343/7: m=[(s[i]+s[i+1])/2. for i in xrange(0,14)]
343/8: cd=['        cellzc('+str(i+2)+')='+str(m[i]) for i in xrange(13)]
343/9: cd
344/1: fname='/home/cpuff/2013/mm09/ht_wrf.txt'
344/2:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(float(line.split()[4]))
344/3: m=[(s[i]+s[i+1])/2. for i in xrange(0,15)]
344/4: m=[(s[i]+s[i+1])/2. for i in xrange(0,14)]
344/5: cd=['        cellzc('+str(i+2)+')='+str(m[i]) for i in xrange(14)]
344/6: cd
344/7: s[15]
344/8: s[14]
344/9: s[14]=12000.
344/10: m=[(s[i]+s[i+1])/2. for i in xrange(0,14)]
344/11: cd=['        cellzc('+str(i+2)+')='+str(m[i]) for i in xrange(14)]
344/12: cd
345/1: import json
345/2: fname='json'
345/3: json.load(fname)
345/4: from pprint import pprint
345/5: data = json.load(open(fname))
345/6: data
345/7: tory
345/8: history
345/9: data[u'datacollecttime']
345/10: data['datacollecttime']
345/11: len(data)
345/12: data[1]
345/13: data[0]
345/14: type(data)
345/15: k=[x for x in data]
345/16: len(k)
345/17: k
345/18: res=k[u'success']
345/19: res=k[1]
345/20: len(res)
345/21: res
345/22: data[u'result']
345/23: len(data[u'result'])
345/24: res=data[u'result']
345/25: res
345/26: key_res=[x for i in res]
345/27: len(key_res)
345/28: key_res
345/29: res
345/30: from pandas import *
345/31: df=DataFrame(res)
345/32: res
345/33: res[1]
345/34: res[u'vdid']
345/35: res['vdid']
345/36: pprint(data)
345/37:
i=0
for x in res:
    print x
    i=i+1
    if i>10:continue
345/38:
i=0
for x in res:
    print i,x
    i=i+1
    if i>20:continue
345/39: res['records']
345/40: len(res['records'])
345/41:
i=0
for x in res:
    print i,x
    i=i+1
    if i>20:continue
345/42: recd=res['records']
345/43: df=DataFrame(recd)
345/44: df.columns
345/45: df.head(20)
345/46: len(df)
345/47: vdid=set(df['vdid'])
345/48: len(vdid)
345/49: vdid
345/50: max(df['volume'])
345/51: max(df['speed'])
345/52:
i=0
for x in res:
    print i,x
    i=i+1
    if i>20:continue
345/53: res['fields']
345/54: res['total']
345/55: res['limit']
345/56: res['records']
345/57:
i=0
for x in res:
    print i,x
    i=i+1
    if i>20:continue
345/58: res['resource_id']
345/59: import urllib
345/60: url='http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000357-001'
345/61: response = urllib.urlopen(url)
345/62: print response.info()
345/63: history
345/64: data2 = json.load(open(resonde))
345/65: data2 = json.load(open(response))
345/66: data2 = json.load(response)
345/67: print response.info()
345/68: help(response)
345/69: print response.geturl()
345/70: help(response)
345/71: print response.getcode()
345/72: help(response)
345/73: esponse.getcode()
345/74: a=response.geturl()
345/75: a
345/76: a=response.read()
345/77: a
345/78: fh = open(file, "w")
345/79: fh = open('test', "w")
345/80: fh.write(response.read())
345/81: !cat test
345/82: fh.close()
345/83: !cat test
345/84: history
345/85: !vi a.py
345/86: !vi a.py
346/1: fname='test.json'
346/2:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(float(line.split('>')))
346/3:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
346/4: s[5]
346/5: len(s)
346/6:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\>'))
346/7: len(s)
346/8: s
346/9: ss=[x for x in s]
346/10: len(ss)
346/11:
for ftext in ss:
    s=[]
    for line in ftext:
        s.append(line.split('\>'))
346/12: len(s)
346/13: s[0][:5]
346/14:
for ftext in ss:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
346/15: len(s)
346/16: s[0][0:5]
346/17: s[0][5:10]
346/18: len(s[0])
346/19: s[0][5]
346/20:

or ftext in s:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
346/21:
for ftext in s[5]:
    ss=[]
    for line in ftext:
        ss.append(line.split('<'))
346/22:
for ftext in s[0][5]:
    ss=[]
    for line in ftext:
        ss.append(line.split('<'))
346/23: len(ss)
346/24: len(ss[0])
346/25: len(ss[0][0])
346/26: len(ss[0][1])
346/27: ss
346/28: ss=[x for x in s[0][5].split('<')]
346/29: len(ss)
346/30: ss[1]
346/31: ss[0]
346/32: data=ss[0]
346/33: type(data)
346/34: data=dict(data)
346/35: ss[0][:10]
346/36: a=[x for x in ss[0]]
346/37: len(a)
346/38: a[:10]
346/39: a=[x for x in ss[0].split(',')]
346/40: len(a)
346/41: a[:10]
346/42:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
346/43:
for ftext in s[0][5]:
    ss=[]
    for line in ftext:
        ss.append(line.split('<'))
346/44: len(ss)
346/45: len(ss[0])
346/46: len(ss[0][0])
346/47: ss[0][0]
346/48: ss[0][:10]
346/49: ss
346/50: s[0][4]
346/51: s[0][5]
346/52: ss=[x for x in s[0][5].split('<')]
346/53: le(ss)
346/54: len(ss)
346/55: ss[1]
346/56: ss[0][:10]
346/57: type(ss[0])
346/58: data=ss[0][1:-1]
346/59: type(data)
346/60: import re
346/61: regex = re.compile(ss[0]"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
346/62: regex = re.compile(ss[0], "\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
346/63: regex = re.compile(ss[0] "\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
346/64: r=ss[0];regex = re.compile(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
346/65: d = dict(regex.findall(r))
346/66: len(d)
346/67: len(r)
346/68: len(regex)
346/69: d
346/70: ss[0][:10]
346/71: ss[0][:20]
346/72: ss[0][:50]
346/73: import regex
346/74:
r = """(?x)
{
    (\w+)
    :
    (
        (?:
            [^{}]
            |
            (?R)
        )+
    )
}
"""
346/75: z = "{1:abc}{2:{3:{4:foo}}}{5:bar}"
346/76: print dict(re.findall(r, z))
346/77: regex=re.compile(z.r)
346/78: regex=re.compile(z,r)
346/79: print dict(re.compile.findall(r, z))
346/80: import regex
346/81: import regex
346/82: print dict(regex.findall(r, z))
346/83: print dict(regex.findall(r,ss[0]))
346/84: ss[0][:50]
346/85: z = "{1:abc}{2:{3:{4:foo}}}{5:bar}"regex.findall(r,ss[0])
346/86: regex.findall(r,ss[0])
346/87: z=ss[0]
346/88: print dict(regex.findall(r, z))
346/89: ss[0][:100]
346/90: print dict(regex.findall(z))
346/91: print dict(regex.findall(z,r))
346/92: print dict(regex.findall(r, z))
346/93:
r = """(?x)
{
    (\w+)
    :
    (
        (?:
            [^{}]
            |
            {.+?}
        )+
    )
}
"""
346/94: print dict(regex.findall(r, z))
346/95: r=ss[0];regex = re.compile(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
346/96:
r = """(?x)
{
    (\w+)
    :
    (
        (?:
            [^{}]
            |
            (?R)
        )+
    )
}
"""
346/97: print dict(regex.findall(r, z))
346/98: z
346/99: print dict(regex.findall(r, z))
346/100: a='{"vdid":"65000VT34500","datacollecttime":"2017/12/02 03:44:00","status":"3","vsrid":"1","vsrdir":"0","speed":"-99","laneoccupy":"-99","carid":"S","volume":"-99"}'
346/101: print dict(regex.findall(r, a))
346/102:
r = """(?x)
{
    (\w+)
    :
    (
        (?:
            [^{}]
            |
            {.+?}
        )+
    )
}
"""
346/103: print dict(regex.findall(r, a))
346/104: import regex
346/105: print dict(regex.findall(r, a))
346/106: a
346/107: len(z)
346/108:
for i in xrange(len(z)):
    if z[i:i+7]=='03:44:00':z[i:i+7]='03_44_00'
346/109: z[0:100]
346/110: z[0:500]
346/111:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':z[i:i+8]='03_44_00'
346/112:
for i in xrange(len(z)):
    if i+8 > len(z):continue
    if z[i:i+8]=='03:44:00':z[i:i+8]='03_44_00'
346/113: a='01234567'
346/114: a[0:3]='abc'
346/115: a[0:3]='abcd'
346/116: b='abcd'
346/117: a[0:4]=b
346/118: a[0:4]
346/119: z = "{1:abc}{2:{3:{4:foo}}}{5:bar}"regex.findall(r,ss[0])
346/120: z = "{1:abc}{2:{3:{4:foo}}}{5:bar}"
346/121: print dict(regex.findall(r, z))
346/122: z = "{1:abc},{2:{3:{4:foo}}},{5:bar}"
346/123: print dict(regex.findall(r, z))
346/124: z=ss[0]
346/125: print dict(regex.findall(r, z))
346/126: z=ss[0][:100]
346/127: print dict(regex.findall(r, z))
346/128: from pyparsing import *
346/129: import string, re
346/130: z=ss[0]
346/131: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
346/132: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
346/133: len(d)
346/134: kk=[x for x in d]
346/135: kk
346/136: df=DataFrame(d)
346/137: from pandas import *
346/138: df=DataFrame(d)
346/139: history
347/1: from pandas import *
347/2: import re
347/3: fname='test.json'
347/4:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
347/5: ss=[x for x in s[0][5].split('<')]
347/6: z=ss[0]
347/7: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/8: len(d)
347/9: df=DataFrame(d)
347/10: for k in d:
347/11:
i=1
for k in d:
   if i<5:print k
   i=i+1
347/12: a='01234567'
347/13: a[0:4]='abcd'
347/14:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':
        z[i+2]='_'
        z[i+5]='_'
347/15: z_list=list(z)
347/16:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':
        z_list[i+2]='_'
        z_list[i+5]='_'
347/17: z=''.join(z_list)
347/18: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/19: len(d)
347/20:
i=1
for k in d:
   if i<5:print k
   i=i+1
347/21: r
347/22: d
347/23:
i=1
for k in d:
   if i<=1:print k
   i=i+1
347/24:
i=1
for k in d:
   if i==2:print k
   i=i+1
347/25: z[:100]
347/26: r = """(?x){(\w+):((?:[^{}]|{.+?})+)}"""
347/27: print dict(regex.findall(r, z))
347/28: import regex
347/29: print dict(regex.findall(r, z))
347/30: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/31: d=dict(re.findall(r,z))
347/32: len(d)
347/33: len(z)
347/34: z[:500]
347/35: !top
347/36: r = "name: srek age :24 description: blah blah"
347/37: regex = re.compile(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
347/38: print dict(regex.findall(r))
347/39: r = "name:srek age:24 description:blah blah"
347/40: regex = re.compile(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
347/41: print dict(regex.findall(r))
347/42: from pyparsing import *
347/43: import string, re
347/44: RawWord = Word(re.sub('[()" ]', '', r))
347/45: Token = Forward()
347/46:
Token << ( RawWord | 
           Group('"' + OneOrMore(RawWord) + '"') |
           Group('(' + OneOrMore(Token) + ')') )
347/47: Phrase = ZeroOrMore(Token)
347/48: Phrase.parseString(s, parseAll=True)
347/49: s
347/50: RawWord
347/51: r
347/52: x="{key1 value1} {key2 value2} {key3 {value with spaces}}"
347/53: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",x))
347/54: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/55: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/56:
i=1
for k in d:
   if i==2:print k
   i=i+1
347/57:
i=0
for x in d:
    print i,x
    i=i+1
    if i>20:continue
347/58: print dict(re.findall(r"\{(\S+)\s+\{*(.*
347/59: print dict(re.findall(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)",x))
347/60: x
347/61: x="{key1 value1} {key2 value2} {key3 {value with spaces}}"
347/62: rrr=re.compile(x,"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
347/63: rrr=re.compile(x"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
347/64: r="{key1 value1} {key2 value2} {key3 {value with spaces}}"
347/65: rrr=re.compile(r"\b(\w+)\s*:\s*([^:]*)(?=\s+\w+\s*:|$)")
347/66: print dict(rrr.findall(r))
347/67: x="{key1:value1} {key2:value2} {key3:{value with spaces}}"
347/68: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",x))
347/69:
for i in xrange(len(z)):
    if z[i]==':': z_list[i]=' '
347/70: z=''.join(z_list)
347/71: z[:500]
347/72: d=dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",z))
347/73: len(d)
347/74:
i=1
for k in d:
   if i==0:print k
   i=i+1
347/75:
i=0
for k in d:
   if i==0:print k
   i=i+1
347/76:
i=0
for k in d:
   if i==1:print k
   i=i+1
347/77:
i=0
for k in d:
   if i==2:print k
   i=i+1
347/78: d
347/79: z=ss[0]
347/80: z=''.join(z_list)
347/81: z[:100]
347/82: z=ss[0]
347/83:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':
        z_list[i+2]='_'
        z_list[i+5]='_'
347/84: z_list=list(z)
347/85:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':
        z_list[i+2]='_'
        z_list[i+5]='_'
347/86: z=''.join(z_list)
347/87: z[:500]
345/87: x="{key1 value1} {key2 value2} {key3 {value with spaces}}"
345/88: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",x))
345/89: import re
345/90: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",x))
345/91: x="{key1 value1} {key2 value2} {key3 {value with spaces}} {key1 value1} {key2 value2} {key3 {value with spaces}}"
345/92: print dict(re.findall(r"\{(\S+)\s+\{*(.*?)\}+",x))
348/1: import string, re
348/2: r = """(?x){(\w+):((?:[^{}]|{.+?})+)}"""
348/3: x="{key1:value1} {key2:value2} {key3:{value with spaces}}"
348/4: print dict(re.findall(r"(?x){(\w+):((?:[^{}]|{.+?})+)}",x))
348/5: x="{key1 value1} {key2 value2} {key3 {value with spaces}} {key11 value11} {key12 value12} {key13 {value with spaces13}}"
348/6: print dict(re.findall(r"(?x){(\w+):((?:[^{}]|{.+?})+)}",x))
348/7: !vi b.py
348/8: run b.py
348/9: s
348/10: z
348/11: fname='test.json'
348/12:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
348/13: ss=[x for x in s[0][5].split('<')]
348/14: z=ss[0]
348/15: z_list=list(z)
348/16:
for i in xrange(len(z)):
    if z[i:i+8]=='03:44:00':
        z_list[i+2]='_'
        z_list[i+5]='_'
348/17: z=''.join(z_list)
348/18: !vi b.py
348/19:
print section.parseString(z)
print allSections
348/20: type( allSections)
348/21: allSections[:5]
348/22: allSections=[]
348/23: print section.parseString(z)
348/24: len(allSections)
348/25: section.parseString(z)
348/26: aa=section.parseString(z)
348/27: len(aa)
348/28: aa[:5]
348/29:
for i in xrange(5):
    print i,zz[i]
348/30:
for i in xrange(5):
    print i,aa[i]
348/31:
for i in xrange(5,10):
    print i,aa[i]
348/32:
for i in xrange(10,20):
    print i,aa[i]
348/33:
for i in xrange(20,50):
    print i,aa[i]
348/34:
for i in xrange(50,100):
    print i,aa[i]
348/35:
for i in xrange(100,150):
    print i,aa[i]
348/36:
for i in xrange(150,200):
    print i,aa[i]
348/37:
for i in xrange(len(aa)):
    print i,aa[i]
348/38: 'speed' in aa
348/39: 'speed' in z
348/40: import simplejson
348/41: json_2_dict = simplejson.loads(z)
348/42: len(json_2_dict)
348/43:
i=0
for k in json_2_dict:
   if i==0:print k
   i=i+1
348/44:
i=0
for k in json_2_dict:
   if i==1:print k
   i=i+1
348/45: print json_2_dict['result
348/46: print json_2_dict['result']
348/47: jj=json_2_dict['result']
348/48: len(jj)
348/49:
i=0
for k in jj:
   if i==0:print k
   i=i+1
348/50:
i=0
for k in jj:
   if i==1:print k
   i=i+1
348/51:
i=0
for k in jj:
   if i==2:print k
   i=i+1
348/52:
i=0
for k in jj:
   if i==3:print k
   i=i+1
348/53:
i=0
for k in jj:
   if i==4:print k
   i=i+1
348/54: len(jj['records'])
348/55: history
348/56: !vi a.py
348/57: !vi a.py
348/58: !vi a.py
348/59: df=DataFrame(jj['records'])
348/60: from pandas import *
348/61: df=DataFrame(jj['records'])
348/62: df.head(10)
348/63: len(set(df['vdid']))
348/64: z=ss[0]
348/65: json_2_dict = simplejson.loads(z)
348/66: jj=json_2_dict['result']
348/67: df=DataFrame(jj['records'])
348/68: df.head(10)
348/69: len(set(df['vdid']))
348/70: len(df)
349/1: fname='latest.json'
349/2:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
349/3: ss=[x for x in s[0][5].split('<')]
349/4: z=ss[0]
349/5: json_2_dict = simplejson.loads(z)
349/6: import simplejson
349/7: json_2_dict = simplejson.loads(z)
349/8: z
349/9: ss[1]
349/10: ss[2]
349/11: ss
349/12: s
349/13: len(s)
349/14:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
349/15: ss=[x for x in s[0][5].split('<')]
349/16: ss
349/17: ss=[x for x in s[0][4].split('<')]
349/18: len(s)
349/19: len(ss)
349/20: ss[0]
349/21: ss[1]
349/22: ss=[x for x in s[0][3].split('<')]
349/23: ss
349/24: ss=[x for x in s[0][6].split('<')]
349/25: ss
349/26: z=ss[0]
349/27: z
349/28: json_2_dict = simplejson.loads(z)
349/29: jj=json_2_dict['result']
349/30: df=DataFrame(jj['records'])
349/31: from pandas import *
349/32: df=DataFrame(jj['records'])
349/33: cols=["vdid","datacollecttime","status","vsrid","vsrdir","speed","laneoccupy","carid","volume"]
349/34: df[cols].to_csv('latest.csv')
349/35:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('>'))
349/36: ss=[x for x in s[0][6].split('<')]
349/37: z=ss[0]
349/38: json_2_dict = simplejson.loads(z)
350/1: from pandas import *
350/2: fname='roadlevel_value.xml'
350/3: import xml
350/4: import xml.etree.elementtree as et
350/5: !pip install etree
350/6: !pip install elementtree
350/7: !pip install Elementtree
350/8: !pip install ElementTree
350/9: import xml.sax
350/10:
class MovieHandler( xml.sax.ContentHandler ):
   def __init__(self):
      self.CurrentData = ""
      self.type = ""
      self.format = ""
      self.year = ""
      self.rating = ""
      self.stars = ""
      self.description = ""

   # 元素开始事件处理
   def startElement(self, tag, attributes):
      self.CurrentData = tag
      if tag == "movie":
         print "*****Movie*****"
         title = attributes["title"]
         print "Title:", title

   # 元素结束事件处理
   def endElement(self, tag):
      if self.CurrentData == "type":
         print "Type:", self.type
      elif self.CurrentData == "format":
         print "Format:", self.format
      elif self.CurrentData == "year":
         print "Year:", self.year
      elif self.CurrentData == "rating":
         print "Rating:", self.rating
      elif self.CurrentData == "stars":
         print "Stars:", self.stars
      elif self.CurrentData == "description":
         print "Description:", self.description
      self.CurrentData = ""

   # 内容事件处理
   def characters(self, content):
      if self.CurrentData == "type":
         self.type = content
      elif self.CurrentData == "format":
         self.format = content
      elif self.CurrentData == "year":
         self.year = content
      elif self.CurrentData == "rating":
         self.rating = content
      elif self.CurrentData == "stars":
         self.stars = content
      elif self.CurrentData == "description":
         self.description = content
  
if ( __name__ == "__main__"):
   
   # 创建一个 XMLReader
   parser = xml.sax.make_parser()
   # turn off namepsaces
   parser.setFeature(xml.sax.handler.feature_namespaces, 0)

   # 重写 ContextHandler
   Handler = MovieHandler()
   parser.setContentHandler( Handler )
   
   parser.parse("movies.xml")
350/11: !vi tt.py
350/12: !vi movies.xml
350/13: run tt.py
350/14: !vi tt.py
350/15: run tt.py
350/16: !vi item.txt
350/17: !vi tt.py
350/18: run tt.py
350/19: !cp tt.py  rr.py
350/20: !vi rr.py
350/21: !ls
350/22: !vi rr.py
350/23: run rr.py
350/24: !vi rr.py
350/25:

with open(fname) as ftext:
    s=[]
    i=0
    for line in ftext:
        if i >=3:s.append(line.split('"'))
        i=i+1
350/26: s[0]
350/27: s[-1]
350/28: s[-2]
350/29: s[-3]
350/30:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('"'))
350/31: s[3]
350/32: s[2]
350/33: s[-3]
350/34: df=DataFrame()
350/35: ss=s[2];cols=[ss[x].split('=')[0] for x in xrange(0,10,2)]
350/36: ss=s[2];cols=[ss[x].split('=')[0] for x in xrange(0,9,2)]
350/37: len(ss)
350/38: ss=s[2]cols=[ss[x].split('=')[0] for x in xrange(0,9,2)]
350/39: cols=[ss[x].split('=')[0] for x in xrange(0,9,2)]
350/40: ss=s[2]
350/41: len(ss)
350/42: ss
350/43: ss=s[3]
350/44: cols=[ss[x].split('=')[0] for x in xrange(0,9,2)]
350/45: cols
350/46: cols[0]=' routeid'
350/47: cols=[x.split()[1] for x in cols]
350/48: cols=[x.split(' ')[1] for x in cols]
350/49: cols
350/50:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:[x[i*2-1] for x in s[3:-2]]})
350/51: d['routeid']
350/52: d['level']
350/53:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:[x[i*2+1] for x in s[3:-2]]})
350/54: d['routeid']
350/55: df=DataFrame(d)
350/56: df.head(10)
350/57: df[cols].set_index('routeid').to_csv('latest')
350/58: history
350/59: history
350/60: run getVD.py
350/61: cols
350/62: import xml.etree.ElementTree
351/1: fname='GetVDDATA'
351/2: import xml.etree.ElementTree
351/3: tree = ET.ElementTree(file=fnmae)
351/4: import xml.etree as ET
351/5: tree = ET.ElementTree(file=fnmae)
351/6: tree = ET.ElementTree(file=fname)
351/7: import xml.etree.cElementTree as ET
351/8: tree = ET.ElementTree(file=fname)
351/9: tree.getroot()
351/10: root.tag, root.attrib
351/11: root = tree.getroot()
351/12: root.tag, root.attrib
351/13:
for child_of_root in root:
    print child_of_root.tag, child_of_root.attrib
351/14:
for child_of_root in root:
    for gc_of_root in child_of_root:
        print gc_of_root.tag, gc_of_root.attrib
351/15:
for elem in tree.iter():
    print elem.tag, elem.attrib
351/16:
for elem in tree.iter():
    print elem.tag, elem.attrib,elem.eval
351/17: help(elem)
351/18:
for elem in tree.iter(tag='VDDevice'):
    rint elem.tag, elem.attrib
351/19:
for elem in tree.iter(tag='VDDevice'):
    print elem.tag, elem.attrib
351/20:
for elem in tree.iter(tag='Mvolume'):
    print elem.tag, elem.attrib
351/21:
for elem in tree.iter(tag='Mvolume'):
    print elem.tag, elem.attrib,elem.text
351/22:
i=0
for elem in tree.iter():
    if i<10:print elem.tag, elem.text
    i=i+1
351/23:
i=0
for elem in tree.iter():
    if i<20:print i, elem.tag, elem.text
    i=i+1
351/24:
i=-2
for elem in tree.iter():
    if i<40:print i, elem.tag, elem.text
    i=i+1
    if i>13:i=0
351/25: s=set([elem.tag for elem in tree.iter()])
351/26: len(s)
351/27: s
351/28:
i=-2
for elem in tree.iter():
    if i<40:print i, elem.tag, elem.text
    i=i+1
351/29: ii=set([elem.text for elem in tree.iter(tag='VDInfo')])
351/30: ii
351/31: print set([elem.text for elem in tree.iter(tag='VDData')])
351/32: print set([elem.text for elem in tree.iter(tag='DeviceID')])
351/33: id=set([elem.text for elem in tree.iter(tag='DeviceID')])
351/34: len(id)
351/35: ii=[elem.tag for elem in tree.iter]
351/36: ii=[elem.tag for elem in tree.iter()]
351/37: len(ii)
351/38: 18966/678
351/39:
i=-2
for elem in tree.iter():
    if i<40:print i, elem.tag, elem.text
    i=i+1
351/40: ii.count('VDInfoSet')
351/41: ii.count('LaneNO')
351/42: ii.count('AvgSpeed')
351/43: ii.count('DeviceID')
351/44:
i=-2
for elem in tree.iter():
    if i>27 and i<50:print i, elem.tag, elem.text
    i=i+1
351/45:
i=-2
for elem in tree.iter():
    if i>27 and i<60:print i, elem.tag, elem.text
    i=i+1
351/46: ii.count('TotalOfLane')
351/47: print set([elem for elem in tree.iter('LaneData')])
351/48: print set([elem.text for elem in tree.iter('LaneData')])
351/49:
i=-2
for elem in tree.iter():
    if i>27 and i<60:print i, elem.tag, elem.text
    i=i+1
351/50: len(ii)
351/51: len(id)
351/52: ii[:4]
351/53: ttag=[elem.tag for elem in tree.iter()]
351/54: ttxt=[elem.text for elem in tree.iter()]
351/55: len(ttxt),len(ttag)
351/56: list(id)[0]
351/57: ttxt.count( list(id)[0])
351/58:
ic=0
for i in id:
    is=ttxt.index(i)
    ttl=int(ttxt[is+2])
351/59: ttxt.index('V1221E0')
351/60: is=ttxt.index('V1221E0')
351/61:
(DeviceID,TotalOfLane,LaneNO,Volume,AvgSpeed,AvgOccupancy,Svolume,Mvolume,Lvolume)=([],[],[],[],[],[],[],[],[])
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        DeviceID.append(i)
        TotalOfLane.append(ttl)
        LaneNO.append(ttxt[ist+4])
        Volume.append(ttxt[ist+5])
        AvgSpeed.append(ttxt[ist+6])
        AvgOccupancy.append(ttxt[ist+7])
        Svolume.append(ttxt[ist+8])
        Mvolume.append(ttxt[ist+9])
        Lvolume.append(ttxt[ist+10])
351/62: len(DeviceID)
351/63: cols=['DeviceID','TotalOfLane','LaneNO','Volume','AvgSpeed','AvgOccupancy','Svolume','Mvolume','Lvolume']
351/64: from pandas import *
351/65: v=[10*[]]
351/66: v
351/67: v=[[]*10]
351/68: v
351/69: for i len(cols):
351/70: for i xrange(len(cols)):
351/71: for i xrange(len(cols)):
351/72:
v=[]
for i in xrange(len(cols)):
    v.apend([])
351/73:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/74: v
351/75:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[ist+k+2])
351/76: len(v[1])
351/77: d={}
351/78:
for i in xrange(len(cols)):
    d.update({cols[i],v[i]})
351/79:
for i in xrange(len(cols)):
    d.update({cols[i],v[i][:]})
351/80:
for i in xrange(len(cols)):
    d.update({cols[i],list(v[i])})
351/81: v[1]
351/82:
for i in xrange(len(cols)):
    d.update({cols[i],Series(v[i])})
351/83:
for i in xrange(len(cols)):
    d.update({cols[i],Series([x for x in v[i]])})
351/84: a=[x for x in v[1]]
351/85: len(a)
351/86:
for i in xrange(len(cols)):
    d.update({cols[i],[x for x in v[i]]})
351/87:
for i in xrange(len(cols)):
    vi=v[i]
    d.update({cols[i],[x for x in vi]})
351/88: i
351/89: len(vi)
351/90:
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/91:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/92: df=DataFrame(d)
351/93: df[cols].set_index('DeviceID').to_csv('latest')
351/94: !head lates
351/95: !head latest
351/96: history
351/97:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+j*7
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[istt+k+2])
351/98:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/99:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+j*7
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[istt+k+2])
351/100:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/101: df=DataFrame(d)
351/102: df[cols].set_index('DeviceID').to_csv('latest')
351/103: !head latest
351/104:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/105:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+4+j*7
        for k in xrange(len(cols)-2):
            v[k].append(ttxt[istt+k])
351/106:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/107: df=DataFrame(d)
351/108:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/109:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+4+j*7
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[istt+k-2])
351/110:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/111: df=DataFrame(d)
351/112: df[cols].set_index('DeviceID').to_csv('latest')
351/113: !head latest
351/114:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/115:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+4+j*6
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[istt+k-2])
351/116:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/117: df=DataFrame(d)
351/118: df[cols].set_index('DeviceID').to_csv('latest')
351/119: !head latest
351/120:
v=[]
for i in xrange(len(cols)):
    v.append([])
351/121:
for i in id:
    ist=ttxt.index(i)
    ttl=int(ttxt[ist+2])
    for j in xrange(ttl):
        v[0].append(i)
        v[1].append(ttl)
        istt=ist+4+j*8
        for k in xrange(2,len(cols)):
            v[k].append(ttxt[istt+k-2])
351/122:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
351/123: df=DataFrame(d)
351/124: df[cols].set_index('DeviceID').to_csv('latest')
351/125: !head latest
351/126: history
351/127: !vi getVD.py
351/128: ttxt[:5]
351/129: ttag[:5]
351/130: !vi getVD.py
351/131: cols.append('ExchangeTime')
351/132: d.update({cols[-1]:[ttxt[1] for x in xrange(len(v[0]))]})
351/133: df=DataFrame(d)
351/134: df.head(10)
351/135: df[cols].set_index('DeviceID').to_csv('latest')
351/136: !head latest
351/137: grep V8010A2 2017-12-05
351/138: !grep V8010A2 2017-12-05
351/139: !grep 'V8010A2,6,1' 2017-12-05
351/140: !head -n1 2017-12-05
352/1: import json
352/2: a=json.load('a')
352/3:
with open('a', 'r') as f:
    data = json.load(f)
352/4: !more a
352/5:
with open('a', 'r') as f:
    data = json.load(f,code='big5')
352/6:
with open('a', 'r') as f:
    data = json.load(f)
352/7:
with open('a', 'r') as f:
    data = json.load(f.decode('utf-8'))
352/8:
with open('a', 'r') as f:
    data = json.load(f.read().decode('utf-8'))
352/9:
with open('a', 'r') as f:
    f.read().decode('utf-8')
352/10: f=open('a','r')
352/11: f.read()
352/12: b=f.read()
352/13: json.dumps(b)
352/14: json.dumps(b[1:-2])
352/15: b[:5]
352/16: b[:10]
352/17: len(b)
352/18: b[:30]
352/19: b[0:30]
352/20: b
352/21: json.dumps(f.read())
352/22: f.read()
352/23: f=open('a','r')
352/24: json.dumps(f.read())
352/25: f=open('a','r')
352/26: b=f.read()
352/27: len(b)
352/28: b[0:30]
352/29: json.dumps(b[1:-2])
352/30: b[0:100]
352/31: import simplejson
352/32: json_2_dict = simplejson.loads(z)
352/33: json_2_dict = simplejson.loads(b)
352/34: len(json_2_dict)
352/35: json_2_dict = simplejson.loads(b[:100])
352/36: b[0:200]
352/37: b[0:200].encode('utf8')
352/38: json_2_dict = simplejson.loads(b.encode('utf8'))
352/39: json_2_dict = simplejson.loads(b.encode('big5'))
352/40: json_2_dict = simplejson.loads(b.encode('ascii'))
352/41: len(b)
352/42: b[347375:]
352/43: b[347359:]
352/44: b[347360:]
352/45: json_2_dict = simplejson.loads(b[:347360]+'}}')
352/46: json_2_dict = simplejson.loads(b[:347359]+'}}')
352/47: len(b)
352/48: json_2_dict = simplejson.loads(b[:-47]+'}}')
352/49: len(json_2_dict)
352/50: print json_2_dict.keys
352/51: print json_2_dict
352/52: print json_2_dict[1]
352/53:
i=1
for itm in json_2_dict:
    if i==1:print itm
352/54: !head -n1 a
352/55:
i=1
for itm in json_2_dict:
    if i==1:print itm
352/56: rec=json_2_dict['XML_Head']
352/57:
i=1
for itm in rec:
    if i<=5:print itm
    i=i+1
352/58: recc=rec['Infos']
352/59: len(recc)
352/60: recc['Info']
352/61: len(recc['Info'])
352/62: d=recc['Info']
352/63: from pandas import *;df=DataFrame(d)
352/64: df.head(10)
352/65: df.tail(10)
352/66: set(df['datacollecttime'])
352/67: df['lane'][0]
352/68: df2=DataFrame(df['lane'][0])
352/69: df2
352/70: df3=DataFrame(df2['cars'][0])
352/71: df3
352/72: df.columns
352/73: set(df['status'])
352/74: cols=df.columns
352/75: cols=df.columns+df2.columns+df3.columns
352/76: cols=df.columns
352/77: cols.append(df2.columns)
352/78: cols=cols.append(df2.columns)
352/79: cols=cols.append(df3.columns)
352/80: len(cols)
352/81: colT=[x+'T' for x in cols]
352/82: colT
352/83: colT=colT.append(['Lvolume','Mvolume','Svolume'])
352/84:
del colT['caridT','volumeT','carsT']
colT.append('TotalOfLaneT')
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(simplejson.loads(df.loc[i1,'lane']))
    ttl=len(df2)
    for i2 in xrange(ttl):
        v[0].append(df.loc[i1,cols[0]])
        v[1].append(i2)
352/85: colT
352/86: colT=[x+'T' for x in cols]
352/87: colT=colT.append(['Lvolume','Mvolume','Svolume'])
352/88: colT
352/89: colT=[x+'T' for x in cols]
352/90: colT
352/91: colT.append(['Lvolume','Mvolumet','SvolumeT'])
352/92: colT
352/93: colT=[x+'T' for x in cols]
352/94: colT.append('Lvolume','Mvolumet','SvolumeT')
352/95: colT.append('Lvolume')
352/96: colT.append('Svolume')
352/97: colT.append('Mvolume')
352/98: colT
352/99: !vi fdaf
352/100:
colT=['datacollecttimeT',
 'statusT',
 'vdidT',
 'TotalOfLaneT',
 'laneT',
 'laneoccupyT',
 'speedT',
 'vsrdirT',
 'vsridT',
 'Lvolume',
 'Svolume',
 'Mvolume']
352/101:
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(simplejson.loads(df.loc[i1,'lane']))
    ttl=len(df2)
    for i2 in xrange(ttl):
        v[0].append(df.loc[i1,cols[0]])
        v[1].append(i2)
352/102:
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df.loc[i1,colT[j][:-2]])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5:9):
            v[j]=df2[colT[j][:-2]][i2]]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/103:
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df.loc[i1,colT[j][:-2]])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-2]][i2]]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/104:
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df.loc[i1,colT[j][:-2]])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-2]][i2]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/105: cols
352/106: !vi
352/107: !vi fdaf
352/108:
cols=[u'datacollecttime',
u'status', u'vdid', u'cars', u'laneoccupy',
u'lane',
       u'speed', u'vsrdir', u'vsrid', u'carid', u'volume']
352/109:
v=[]
for i in xrange(len(colT)):
    v.append({})
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-2]][i2]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/110: type(v)
352/111: j
352/112:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-2]][i2]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/113: 'laneoccup' in df2.columns
352/114: df2.columns
352/115:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['car'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/116:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volumn'])
        v[10].append(df3[df3['carid']=='L']['volumn'])
        v[11].append(df3[df3['carid']=='L']['volumn'])
352/117: df3.columns
352/118:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'])
        v[10].append(df3[df3['carid']=='L']['volume'])
        v[11].append(df3[df3['carid']=='L']['volume'])
352/119: i1
352/120: df.loc[40]
352/121: df3
352/122:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/123: colT
352/124:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/125: df3[df3['carid']=='L']['volume']
352/126: df3
352/127: df3[df3['carid']=='S']['volume']
352/128: df2['cars'][i2]
352/129: df2['cars']
352/130: i2
352/131:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=df2['cars'][i2]
        v[9].append(df3['L'])
        v[10].append(df3['S'])
        v[11].append(df3['M'])
352/132: df3
352/133:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/134: df3
352/135: df3[df3['carid']=='L']['volume']
352/136: int(df3[df3['carid']=='L']['volume'])
352/137:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(int(df3[df3['carid']=='L']['volume']))
        v[10].append(int(df3[df3['carid']=='S']['volume']))
        v[11].append(int(df3[df3['carid']=='M']['volume']))
352/138: i2
352/139: i1
352/140: df3[df3['carid']=='L']['volume']
352/141:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'][0])
        v[10].append(df3[df3['carid']=='S']['volume'][0])
        v[11].append(df3[df3['carid']=='M']['volume'][0])
352/142: i1
352/143:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(df3[df3['carid']=='L']['volume'])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/144: type(df3[df3['carid']=='L']['volume'])
352/145: df3[df3['carid']=='L']['volume'][0]
352/146:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(list(df3[df3['carid']=='L']['volume'])[0])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/147: v[9]
352/148: len(v[9])
352/149:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        df3=DataFrame(df2['cars'][i2])
        v[9].append(list(df3[df3['carid']=='L']['volume'])[0])
        v[10].append(df3[df3['carid']=='S']['volume'])
        v[11].append(df3[df3['carid']=='M']['volume'])
352/150: df3=DataFrame(df2['cars'][i2])
352/151: df2['cars'][i2]
352/152: len(df2['cars'][i2])
352/153: len(df2['cars'][i2-1])
352/154: len(df2['cars'][30])
352/155:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume']))
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/156:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume'])
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/157:
for i in xrange(len(colT)):
    print i,len(v[i])
352/158:
for i in xrange(len(colT)):
    print i,len(v[i])
352/159: v[0]
352/160: len(v[0])
352/161: len(v[11])
352/162: len(v[10])
352/163: len(v[2])
352/164: len(v[1])
352/165:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        if len(df2['cars'][i2]) <=6:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume']))
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/166:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        if len(df2['cars'][i2]) <=6:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume'])
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/167:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j]=df2[colT[j][:-1]][i2]
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume'])
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/168:
for i in xrange(len(colT)):
    print i,len(v[i])
352/169: v[5]
352/170: colT[5]
352/171:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j].append(df2[colT[j][:-1]][i2])
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume'])
            v[10].append(df3[df3['carid']=='S']['volume'])
            v[11].append(df3[df3['carid']=='M']['volume'])
352/172:
for i in xrange(len(colT)):
    print i,len(v[i])
352/173:
d={}
for i in xrange(len(colT)):
    d.update({cols[i][:-1]:v[i]})
352/174:
d={}
for i in xrange(len(colT)):
    d.update({colT[i][:-1]:v[i]})
352/175: df4=DataFrame(d)
352/176: df4.head(10)
352/177:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j].append(df2[colT[j][:-1]][i2])
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(df3[df3['carid']=='L']['volume'][0])
            v[10].append(df3[df3['carid']=='S']['volume'][0])
            v[11].append(df3[df3['carid']=='M']['volume'][0])
352/178:
v=[]
for i in xrange(len(colT)):
    v.append([])
for i1 in xrange(len(df)):
    df2=DataFrame(df['lane'][i1])
    ttl=len(df2)
    for i2 in xrange(ttl):
        for j in xrange(3):
            v[j].append(df[cols[j]][i1])
        v[3].append(ttl)
        v[4].append(i2)
        for j in xrange(5,9):
            v[j].append(df2[colT[j][:-1]][i2])
        if len(df2['cars'][i2]) <=2:
            d=df2['cars'][i2]
            if d['carid']=='L':v[9].append(d['volume'])
            if d['carid']=='S':v[10].append(d['volume'])
            if d['carid']=='M':v[11].append(d['volume'])
            if 'L' not in set(d['carid']):v[9].append(-99)
            if 'S' not in set(d['carid']):v[10].append(-99)
            if 'M' not in set(d['carid']):v[11].append(-99)            
        else:
            df3=DataFrame(df2['cars'][i2])
            v[9].append(list(df3[df3['carid']=='L']['volume'])[0])
            v[10].append(list(df3[df3['carid']=='S']['volume'])[0])
            v[11].append(list(df3[df3['carid']=='M']['volume'])[0])
352/179: colT
352/180: for i in xrange(9:12):
352/181:
for i in xrange(9,12):
    colT[i]=colT[i]+'T'
352/182: colT
352/183:
d={}
for i in xrange(len(colT)):
    d.update({colT[i][:-1]:v[i]})
352/184: df4=DataFrame(d)
352/185: df4.head(10)
352/186: df4.tail(10)
352/187: df4[colT].set_index('vdid').to_csv('latest')
352/188: cols=[x[:-1] for x in colT]
352/189: df4[cols].set_index('vdid').to_csv('latest')
352/190: history
352/191: df=DataFrame(json_2_dict['XML_Head']['Infos']['Info'])
352/192: df.head(10)
352/193: colT
352/194: cols
353/1: import json
353/2: f=open('a','r')
353/3: b=f.read()
353/4: data=eval(b)
353/5: data
353/6: len(data)
353/7: !cat getVD.py
353/8: from pandas import *
353/9: df=DataFrame(data['XML_Head']['Infos']['Info'])
353/10: len(df)
353/11: df.head(10)
353/12: user = '{"name" : "jim", "sex" : "male", "age": 18}'
353/13: exec('exec_user_info=' + user)
353/14: print exec_user_info
353/15: !ls stock/
353/16: !lst stock/
353/17: !cat a
353/18: !cp a /autofs/master/python_eg
353/19: !cat getVD.py
353/20: !lst stock/
353/21: !lst stock/
353/22: !cat getVD.py
353/23: !vi getVD.py
353/24: size[9:12]=['L','S','M']
353/25: size=[x for x in xrange(12)]
353/26: size[9:12]=['L','S','M']
353/27: size
353/28: !vi getVD.py
353/29: !lst stock/
353/30: !tail stock/2017-12-04
353/31: !tail stock/2017-12-04
353/32: !grep thbVD-56-0180-063-01 stock/2017-12-04|grep '00,0,2,1'
353/33: !grep thbVD-56-0180-063-01 stock/2017-12-04|grep '00,0,2,1'
353/34: !grep thbVD-56-0180-063-01 stock/2017-12-04|grep '00,0,2,1'|tail
353/35: !grep thbVD-56-0180-063-01 stock/2017-12-04|grep '00,0,2,1'|tail
353/36: !grep thbVD-56-0180-063-01 stock/2017-12-04|grep '00,0,2,1'|tail
353/37: !vi getVD.py
353/38: !lst stock/
353/39: !lst stock/
353/40: !top
353/41: !lst stock/
353/42: !lst stock/
353/43: !lst stock/
353/44: !lst stock/
353/45: !top
353/46: exut
354/1: from pandas import *
354/2: import xml.etree.cElementTree as ET
354/3: tree=ET.ElementTree(file='a')
354/4: ttxt=[elem.text for elem in tree.iter()]
354/5: ttag=[elem.tag for elem in tree.iter()]
354/6: set(ttag)
354/7: len(ttxt)
354/8: ttxt[3]
354/9: ttxt[4]
354/10: ttxt[:10]
354/11: ttag[:10]
354/12: tatt=[elem.attrib for elem in tree.iter()]
354/13: tatt[:10]
354/14:   ttag[:30]
354/15: ttag.index('Info')
354/16: ttag[3:].index('Info')
354/17:
ist=[0]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]:].index('Info'))
354/18: len(ist)
354/19: ist[:10]
354/20:
ist=[0]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]+1:].index('Info'))
354/21: ist[:10]
354/22: ttag[0:].index('Info')
354/23: ttag[1:].index('Info')
354/24: ttag[2:].index('Info')
354/25:
ist=[0]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]:].index('Info')+ist[i])
354/26: ist[:10]
354/27:
ist=[0]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]+1:].index('Info')+ist[i])
354/28: ist[:10]
354/29:
ist=[2]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]+1:].index('Info')+ist[i])
354/30: ist[:10]
354/31: ttag[11:].index('Info')
354/32:
ist=[2]
for i in xrange(ttag.count('Info')):
    ist.append(ttag[ist[i]+1:].index('Info')+ist[i]+1)
354/33: ist[:10]
354/34: ttag[12:].index('Info')
354/35: ttag[29:].index('Info')
354/36: ttag[124:].index('Info')
354/37: len(ttag)
354/38: ttag.count('Info')
354/39: i
354/40: ist[-10:]
354/41:
ist=[2]
for i in xrange(ttag.count('Info')-1):
    ist.append(ttag[ist[i]+1:].index('Info')+ist[i]+1)
354/42: len(ist)
354/43: a=[ist[i+1]-ist[i] for i in xrange(303)]
354/44: set(a)
354/45: a=[ist[i+1]-ist[i]+1 for i in xrange(303)]
354/46: set(a)
354/47: ist[:10]
354/48: ttag[:10]
354/49: ttag[:30]
354/50: cols=['datacollecttime', 'status', 'vdid', 'TotalOfLane', 'lane', 'laneoccupy', 'speed', 'vsrdir', 'vsrid', 'Lvolume', 'Svolume', 'Mvolume']
354/51:

=[]
for i in xrange(len(cols)):
    v.append([])
for i in xrange(ttag.count('Info')):
354/52: cols=['datacollecttime', 'status', 'vdid', 'TotalOfLane', 'laneoccupy', 'speed', 'vsrdir', 'vsrid', 'Lvolume', 'Svolume', 'Mvolume']
354/53:
ist.append(len(ttag))
v=[]
for i in xrange(len(cols)):
    v.append([])
for i in xrange(ttag.count('Info')):
    d2=tatt[ist[i]]
    ttl=ist[i+1]-ist[i]-1)/4
    for lane in xrange(ttl):
        for j in xrange(3):
            v[j].append(d2[cols[j]])
        v[3].append(ttl)
        d3=tatt[ist[i]+4*lane+1]
354/54:
size=[0 for x in cols]
size[-3:]=['L','S','M']
ist.append(len(ttag))
v=[]
for i in xrange(len(cols)):
    v.append([])
for i in xrange(ttag.count('Info')):
    d2=tatt[ist[i]]
    ttl=(ist[i+1]-ist[i]-1)/4
    for lane in xrange(ttl):
        for j in xrange(3):
            v[j].append(d2[cols[j]])
        v[3].append(ttl)
        d3=tatt[ist[i]+4*lane+1]
        for j in xrange(4,8):
            v[j].append(d3[cols[j]])
        for k in xrange(ist[i]+4*lane+2,ist[i]+4*lane+5):
            d4=tatt[k]
            for l in xrange(len(cols)-3,len(cols)):
                if d4['carid']==size[l]:v[l]=d4['volume']
354/55: size
354/56: len(size)
354/57: len(cols)
354/58:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
df4=DataFrame(d)
df4[cols].set_index('vdid').to_csv('latest')
354/59: cols
354/60: set(df4['Lvolume'])
354/61: set(df4['Mvolume'])
354/62: set(df4['Svolume'])
354/63:
v=[]
for i in xrange(len(cols)):
    v.append([])
for i in xrange(ttag.count('Info')):
    d2=tatt[ist[i]]
    ttl=(ist[i+1]-ist[i]-1)/4
    for lane in xrange(ttl):
        for j in xrange(3):
            v[j].append(d2[cols[j]])
        v[3].append(ttl)
        d3=tatt[ist[i]+4*lane+1]
        for j in xrange(4,8):
            v[j].append(d3[cols[j]])
        for k in xrange(ist[i]+4*lane+2,ist[i]+4*lane+5):
            d4=tatt[k]
            for l in xrange(len(cols)-3,len(cols)):
                if d4['carid']==size[l]:v[l].append(d4['volume'])
354/64:
d={}
for i in xrange(len(cols)):
    d.update({cols[i]:v[i]})
df4=DataFrame(d)
df4[cols].set_index('vdid').to_csv('latest')
354/65: set(df4['Svolume'])
354/66: set(df4['Mvolume'])
354/67: set(df4['Lvolume'])
354/68: history
354/69: len(df4)
354/70:
for i in xrange(len(df4)):
    ss=df4.loc[i,'Svolume']+df4.loc[i,'Mvolume']+df4.loc[i,'Lvolume']
    print i,ss
354/71:
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0:print i,ss
354/72:
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0:
        print i,ss
    else
        del df4.loc[i]
354/73:
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0:
        print i,ss
    else:
        del df4.loc[i]
354/74:
drp=[]
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0:
        print i,ss
    else:
        drp.append(i)
df4.drop(df4.index[drp], inplace=True)
354/75: df4
354/76:
drp=[]
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0 or df4.loc[i,'speed']!=0:
        print i,ss,df4.loc[i,'speed']
    else:
        drp.append(i)
df4.drop(df4.index[drp], inplace=True)
354/77: df4=DataFrame(d)
354/78:
drp=[]
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0 or df4.loc[i,'speed']!=0:
        print i,ss,df4.loc[i,'speed']
    else:
        drp.append(i)
df4.drop(df4.index[drp], inplace=True)
354/79:
drp=[]
for i in xrange(len(df4)):
    ss=int(df4.loc[i,'Svolume'])+int(df4.loc[i,'Mvolume'])+int(df4.loc[i,'Lvolume'])
    if ss!=0 or int(df4.loc[i,'speed'])!=0:
        print i,ss,df4.loc[i,'speed']
    else:
        drp.append(i)
df4.drop(df4.index[drp], inplace=True)
354/80: history
354/81: !vi getVD.py
354/82: import time
354/83: ticks = time.time()
354/84: print ticks
354/85: localtime = time.localtime(time.time())
354/86: print localtime
354/87: print localtime('tm_year')
354/88: print localtime('tm_year').tm_year
354/89: print time.asctime( time.localtime(time.time()) )
354/90: time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
354/91: time.strftime("%Y-%m-%d", time.localtime())
354/92: ymd=time.strftime("%Y-%m-%d", time.localtime())
354/93: ymd
354/94: NewM=time.strftime("%M", time.localtime())
354/95: NewM
354/96: !cat TaoyuanGetVD.cs
354/97: !cat ../NewtaipeiVD/NewtpGetVD.cs
354/98: !cat ../TainanVD/TainanGetVD.cs
354/99: sleep 10s
354/100: sleep 10
354/101: sleep (10)
354/102: time.sleep (10)
354/103: !grep mv /home/kuang/py_programs/*/*py
354/104: !grep 'import os' /home/kuang/py_programs/*/*py
354/105: NewM
354/106: OldM
354/107: OldM
354/108: OldM=NewM
354/109:
while NewM==OldM:
    print 'OK'
354/110:
while NewM==OldM:
    print 'OK'
    NewM=0
354/111:
K=1
While K==1:
    while NewM==OldM:
        print 'OK'
        NewM=0
    K=2
354/112: for i in xrange(10)
354/113:
for i in xrange(10):
    if i<=5:
        print i
    else:
        break
355/1: from pandas import *
355/2: fname='2016/HS160131.001'
355/3: !grep read_csv /home/kuang/py_programs/*/*py
355/4: df=read_csv(fname)
355/5: df.head(5)
355/6: df.columns
355/7: df[3]
355/8: df.columns[3]
355/9: df=read_csv(fname,header=None)
355/10: df.head(5)
355/11: df.columns
355/12: df[1]
355/13: df[2]
355/14: set(df[2])
355/15: !pwd
355/16: mean([1,2,3])
355/17: sum([1,2,3])
355/18: sum(df[0,4:])
355/19: s=0;for i in xrange(4,len(df.columns)):s=s+df[0,i]
355/20: s=0;for i in xrange(4,len(df.columns)):s=s+df[0,i]
355/21:
s=0
for i in xrange(4,len(df.columns)):
    s=s+df[0,i]
print s
355/22:
s=0
for i in xrange(4,len(df.columns)):
    s=s+df.loc[0,i]
print s
355/23: sum(df.loc[0,4:])
355/24: df1=df[index(2)==33]
355/25: df1=df[Index(2)==33]
355/26: cols=['NS','NAMEST','PollID','YYYYMMDD']
355/27:
for i in xrange(1,25):
    cols.append('V'+str(i))
355/28: cols
355/29: len(cols),len(df.columns)
355/30: df.columns=cols
355/31: df.head(5)
355/32: !ls 2016/HS* >fn.txt
355/33: !head fn.txt
355/34:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n'))
355/35: len(s)
355/36: !pwd
355/37: s[:5]
355/38:
with open('fn.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n'))
355/39: len(s)
355/40:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs['PollID'==33]
    dfs['PM2.5']=[sum(dfs.loc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/41: dfs=read_csv(s[0],header=None)
355/42: s[0]
355/43:
with open('fn.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
355/44: s[0]
355/45:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs['PollID'==33]
    dfs['PM2.5']=[sum(dfs.loc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/46: dfs=dfs['PollID'==33]
355/47: set(dfs['PollID'])
355/48:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID'==33]]
    dfs['PM2.5']=[sum(dfs.loc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/49: dfs=dfs[dfs['PollID'==33]]
355/50: dfs=dfs[dfs['PollID']==33]
355/51:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33]
    dfs['PM2.5']=[sum(dfs.loc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/52:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.loc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/53: i
355/54: sum(dfs.loc[i,4:])/24
355/55: sum(dfs.loc[1,4:])/24
355/56: sum(dfs.loc[1,4:])
355/57: sum(dfs.loc[0,4:])
355/58: df=read_csv(fname,header=None)
355/59: sum(dfs.loc[0,4:])
355/60: df.loc[0]
355/61: df.loc[0,4:]
355/62: sum(df.loc[0,4:])
355/63: sum(df.loc[0,4:])
355/64: sum(dfs.loc[0,4:])
355/65: dfs.loc[0,4:]
355/66: dfs.loc[0]
355/67: df.columns
355/68: cols
355/69: df.columns[2:4]=cols[2:4]
355/70: for x in xrange(2,4):df.columns[x]=cols[x]
355/71: df.columns[x]
355/72: df.columns[x]=cols[2]
355/73: df.columns[x]='a'
355/74: dfs.loc[0,5]
355/75: dfs.locs[0,5]
355/76: dfs.iloc[0,5]
355/77: dfs.iloc[0,5:]
355/78:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.apppend(dfs).reset_index()
355/79:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]
    df=df.append(dfs).reset_index()
355/80: df.head(5)
355/81: s
355/82:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]
    if 'level_0' in df.columns:del df['level_0']
    df=df.append(dfs).reset_index()
355/83: len(df)
355/84: df.head(5)
355/85:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/86: df.head(5)
355/87: dfs.head(5)
355/88: df=read_csv(fname,header=None)
355/89: df.columns=cols;dfs=df[df['PollID']==33]
355/90: dfs.head(5)
355/91: for x in xrange(1,25):print max(dfs['V'+str(x)])
355/92:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(x)]))
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'index' in df.columns:del df['index']
355/93:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(x)]))
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/94:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/95: 'V'+str(v)
355/96: dfs['V1']
355/97: dfs.head(5)
355/98:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]    
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/99: df.head(5)
355/100:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]    
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    print max(mm)
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/101: df.head(5)
355/102: dfs.head(5)
355/103: df=read_csv(fname,header=None)
355/104: sum(df.iloc[1,4:28])/24
355/105: sum(df.iloc[2,4:28])/24
355/106: sum(df.iloc[20,4:28])/24
355/107: df.columns=cols;dfs=df[df['PollID']==33]
355/108: sum(dfs.iloc[20,4:28])/24
355/109: dfs.head(5)
355/110:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28])/24 for i in xrange(len(dfs))]    
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    print max(mm),max( dfs['PM2.5'])
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/111:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    dfs['PM2.5']=[sum(dfs.iloc[i,4:28]) for i in xrange(len(dfs))]    
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    print max(mm),max( dfs['PM2.5'])
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/112:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    dfs['PM2.5']=[sum(dfs.iloc[i,5:])/24 for i in xrange(len(dfs))]    
    mm=[]
    for v in xrange(1,25):
        mm.append(max(dfs['V'+str(v)]))
        del dfs['V'+str(v)]
    print max(mm),max( dfs['PM2.5'])
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/113:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
355/114: df.head(5)
355/115: sum(df['PM2.5'])/len(df)
355/116: max(df['PM2.5'])
355/117: len(set(df['NS']))
355/118: import datetime
355/119: datetime.date(2017, 12, 7).weekday()
355/120: datetime.date(2017, 12, 7).weekday()+1
355/121: datetime.date(2017, 12, 10).weekday()+1
355/122: %history -f hhh.py
355/123: %history -g -f hhh.py
355/124:
def WofD(it):
        year=it/100/100; month=(it/100)%100; day = it%100
        return datetime.date(year, month, day).weekday()
355/125: WofD(20171207)
355/126:
def WofD(it):
        year=it/100/100; month=(it/100)%100; day = it%100
        return datetime.date(year, month, day).weekday()+1
355/127: WofD(20171207)
355/128: df['WeekDay']=[WofD(x) for x in df['YYYYMMDD']]
355/129: df.head(5)
355/130: import numpy as np
355/131: df_pv1=pivot_table(df,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/132: df_pv1
355/133: sea=[4,4,1,1,1,2,2,2,3,3,3,4]
355/134: df['Season']=[sea[x/100%100-1] for x in df['YYYYMMDD']]
355/135: df.head(5)
355/136: df.tail(5)
355/137: del df['index']
355/138: AWdf=df[df['Seaosn']>=3]
355/139: AWdf=df[df['Season']>=3]
355/140: df_pv2=pivot_table(AWdf,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/141: df_pv2
355/142: STAMPdf=df[df['NS']>=40]
355/143: df_pv3=pivot_table(STAMPdf,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/144: df_pv3
355/145: for i in set([df['NS']):
355/146: for i in set(df['NS']):
355/147:
st={}
for i in set(df['NS']):
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update{i:max(pp)/np.mean(pp)}
355/148:
st={}
for i in set(df['NS']):
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
355/149: max(st.values)
355/150: max(st.values())
355/151: max(st, key=st.get)
355/152: Lulinshan_df=df[df['NS']==82]
355/153: df_pv4=pivot_table(Lulinshan_df,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/154: df_pv4
355/155: pp=df_pv4['PM2.5']
355/156: max(pp)/np.mean(pp)
355/157: stns= set(df['NS'])-set([82])
355/158: 82 in stns
355/159: len(stns)
355/160:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
355/161: max(st, key=st.get)
355/162: stns=stns-set([64])
355/163:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
max(st, key=st.get)
355/164: DSdf=df[df['NS']==66]
355/165: df_pv5=pivot_table(DSdf,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/166: df_pv5
355/167: YMdf=df[df['NS']==64]
355/168: df_pv6=pivot_table(YMdf,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/169: df_pv6
355/170: 66 in stns
355/171: stns=stns-set([66])
355/172:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
max(st, key=st.get)
355/173: ZhSdf=df[df['NS']==12]
355/174: df_pv7=pivot_table(ZhSdf,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
355/175: df_pv7
355/176: sorted_x = sorted(st.items(), key=operator.itemgetter(1))
355/177: import operator
355/178: sorted_x = sorted(st.items(), key=operator.itemgetter(1))
355/179: len(sorted_x)
355/180: sorted_x[:10]
355/181: sorted_x[-10:]
355/182: stns=set(df['NS'])
355/183:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
max(st, key=st.get)
sorted_x = sorted(st.items(), key=operator.itemgetter(1))
355/184: sorted_x[-10:]
355/185: sorted_x[-10:][0]
357/1:
with open('fn.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
357/2: cols=['NS','NAMEST','PollID','YYYYMMDD']
357/3:
for i in xrange(1,25):
    cols.append('V'+str(i))
357/4: from pandas import *
357/5: import operator
357/6: import numpy as np
357/7: import datetime
357/8:
def WofD(it):
        year=it/100/100; month=(it/100)%100; day = it%100
        return datetime.date(year, month, day).weekday()+1
357/9:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
357/10: df['WeekDay']=[WofD(x) for x in df['YYYYMMDD']]
357/11: sea=[4,4,1,1,1,2,2,2,3,3,3,4]
357/12: df['Season']=[sea[x/100%100-1] for x in df['YYYYMMDD']]
357/13: stns=set(df['NS'])
357/14: AWdf=df[df['Season']>=3]
357/15:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
max(st, key=st.get)
sorted_x = sorted(st.items(), key=operator.itemgetter(1))
357/16: list(sorted_x[-10:][0])[0]
357/17: for i in xrange(-20,len(sorted_x)):print list(sorted_x[i])[0]
357/18: for i in xrange(len(sorted_x),-20,-1):print list(sorted_x[i])[0]
357/19: for i in xrange(len(sorted_x),len(sorted_x)-20,-1):print list(sorted_x[i])[0]
357/20: for i in xrange(len(sorted_x)-1,len(sorted_x)-20,-1):print list(sorted_x[i])[0]
357/21: !vi a
357/22:
with open('fn.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
357/23:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
357/24: len(df)
357/25:
df=DataFrame({})
for fname in s:
    with open(fname,'r') as f:
        dfs=read_csv(fname,header=None)
        dfs.columns=cols
        dfs=dfs[dfs['PollID']==33].reset_index()
        if len(dfs) ==0:continue
        if 'index' in dfs.columns:del dfs['index']
        dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
        for v in xrange(1,25):
            del dfs['V'+str(v)]
        df=df.append(dfs).reset_index()
        if 'level_0' in df.columns:del df['level_0']
357/26:
df=DataFrame({})
for fname in s:
    print fname
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
357/27:
with open('fn.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
357/28:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
357/29: dfs.columns
357/30: len(dfs)
357/31: dfs.head(10)
357/32: len(dfs.columns)
357/33:
df=DataFrame({})
for fname in s:
    dfs=read_csv(fname,header=None)
    if len(dfs.columns)!=28: continue
    dfs.columns=cols
    dfs=dfs[dfs['PollID']==33].reset_index()
    if len(dfs) ==0:continue
    if 'index' in dfs.columns:del dfs['index']
    dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
    for v in xrange(1,25):
        del dfs['V'+str(v)]
    df=df.append(dfs).reset_index()
    if 'level_0' in df.columns:del df['level_0']
357/34: fname
357/35:
df=DataFrame({})
line     = []
expected = []
saw      = []     
cont     = True 
for fname in s:
    try:
        dfs=read_csv(fname,header=None)
    except Exception as e:    
        errortype = e.message.split('.')[0].strip()                                
        if errortype == 'Error tokenizing data':                        
           cerror      = e.message.split(':')[1].strip().replace(',','')
           nums        = [n for n in cerror.split(' ') if str.isdigit(n)]
           expected.append(int(nums[0]))
           saw.append(int(nums[2]))
           line.append(int(nums[1])-1)
         else:
           cerror      = 'Unknown'
           print 'Unknown Error - 222'
    
    else:        
        if len(dfs.columns)!=28: continue
        dfs.columns=cols
        dfs=dfs[dfs['PollID']==33].reset_index()
        if len(dfs) ==0:continue
        if 'index' in dfs.columns:del dfs['index']
        dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
        for v in xrange(1,25):
            del dfs['V'+str(v)]
        df=df.append(dfs).reset_index()
        if 'level_0' in df.columns:del df['level_0']
357/36:
df=DataFrame({})
line     = []
expected = []
saw      = []     
cont     = True 
for fname in s:
    try:
        dfs=read_csv(fname,header=None)
    except Exception as e:    
        errortype = e.message.split('.')[0].strip()                                
        if errortype == 'Error tokenizing data':                        
           cerror      = e.message.split(':')[1].strip().replace(',','')
           nums        = [n for n in cerror.split(' ') if str.isdigit(n)]
           expected.append(int(nums[0]))
           saw.append(int(nums[2]))
           line.append(int(nums[1])-1)
        else:
           cerror      = 'Unknown'
           print 'Unknown Error - 222'
    
    else:        
        if len(dfs.columns)!=28: continue
        dfs.columns=cols
        dfs=dfs[dfs['PollID']==33].reset_index()
        if len(dfs) ==0:continue
        if 'index' in dfs.columns:del dfs['index']
        dfs['PM2.5']=[sum(dfs.iloc[i,4:])/24 for i in xrange(len(dfs))]    
        for v in xrange(1,25):
            del dfs['V'+str(v)]
        df=df.append(dfs).reset_index()
        if 'level_0' in df.columns:del df['level_0']
357/37: len(df)
357/38: df['Season']=[sea[x/100%100-1] for x in df['YYYYMMDD']]
357/39: df['WeekDay']=[WofD(x) for x in df['YYYYMMDD']]
357/40: AWdf=df[df['Season']>=3]
357/41:
st={}
for i in stns:
    df_tmp=AWdf[AWdf['NS']==i]
    df_pv2=pivot_table(df_tmp,index=['WeekDay'],values=['PM2.5'],aggfunc=np.mean)
    pp=df_pv2['PM2.5']
    st.update({i:max(pp)/np.mean(pp)})
max(st, key=st.get)
sorted_x = sorted(st.items(), key=operator.itemgetter(1))
357/42: for i in xrange(len(sorted_x)-1,len(sorted_x)-20,-1):print list(sorted_x[i])[0]
357/43: !vi a
357/44: history
357/45: !vi wkPM2_5.py
357/46: sorted_x[-39:-20]
357/47: for i in xrange(len(sorted_x-20)-1,len(sorted_x)-40,-1):print list(sorted_x[i])[0]
357/48: for i in xrange(len(sorted_x)-20,len(sorted_x)-40,-1):print list(sorted_x[i])[0]
357/49: !vi a
358/1: from pandas import *
358/2: fname='G3801239.csv';df=read_csv(fname)
358/3: df.head(5)
358/4: df_lz=df[df['cno']=='G3801239']
358/5: len(df),len(df_lz)
358/6: set(df_lz['polno'])
358/7: len(set(df_lz['ymdh']))
358/8: max(df_lz['SO2(ppm)'])
358/9: min(df_lz['SO2(ppm)'])
358/10: len(set(df_lz['SO2(ppm)']))
358/11: len(set(df_lz['NO2(ppm)']))
358/12: len(set(df_lz['NOx(ppm)']))
358/13: len(set(df_lz['O2(%)']))
359/1: fname='G3801239.csv'
359/2: from pandas import *
359/3: df=read_csv(fname)
359/4: df.columns
359/5: df=df[df['cno']=='G3801239']
359/6: len(df)
359/7: df.head(5)
359/8: len(set(df['polno']))
359/9:
def WofD(it):
        year=it/100/100; month=(it/100)%100; day = it%100
        return datetime.date(year, month, day).weekday()+1
359/10: df['ymd']=[x/100 for x in df['ymdh']]
359/11: import numpy as np;cols=df.columns;col2=list(set(cols)-set('ymdh'));df_dm=pivot_table(df,index=['ymd'],values=['col2'],aggfunc=np.mean)
359/12: df_dm=pivot_table(df,index=['ymd'],values=col2,aggfunc=np.mean)
359/13: df_dm.head(5)
359/14: col2
359/15: del df_dm['ymdh']
359/16:  df_dm.reset_index()
359/17: df_dm=df_dm.reset_index()
359/18: df_dm.head(5)
359/19: len(df_dm)
359/20: df['mon']=[x/10%10 for x in df['ymd']]
359/21: df['week_day']=[WoD(x) for x in  df['ymd']]
359/22: df['week_day']=[WofD(x) for x in  df['ymd']]
359/23: import datetime
359/24: df['week_day']=[WofD(x) for x in  df['ymd']]
359/25: sea=[4,4,1,1,1,2,2,2,3,3,3,4]
359/26: df['month']=[x/100%100 for x in  df['ymd']]
359/27: df['seas']=[sea[x-1] for x in  df['month']]
359/28: df.head(5)
359/29: col2=list(set(df.columns)-set('ymdh'))
359/30: col2
359/31: col2=list(set(df.columns)-set(['ymdh']))
359/32: col2
359/33: df.head(5)
359/34: del df['mon']
359/35: col2=list(set(df.columns)-set(['ymdh']))
359/36: df_dm=pivot_table(df,index=['ymd'],values=col2,aggfunc=np.mean).reset_index()
359/37: df_dm.head(5)
359/38: 'ymdh' in col2
359/39: del df_dm['ymdh']
359/40: df_wk=pivot_table(df,index=['week_day'],values=col2,aggfunc=np.mean).reset_index()
359/41: df_wk
359/42: df_sea=pivot_table(df,index=['seas'],values=col2,aggfunc=np.mean).reset_index()
359/43: df_sea
359/44: df_mon=pivot_table(df,index=['month'],values=col2,aggfunc=np.mean).reset_index()
359/45: df_mon
360/1: from pandas import *
360/2: import datetime
360/3: import numpy as np
360/4: fname='G3801239.csv'
360/5: df=read_csv(fname)
360/6: df=df[df['cno']=='G3801239'].reset_index()
360/7:
def WofD(it):
        year=it/100/100; month=(it/100)%100; day = it%100
        return datetime.date(year, month, day).weekday()+1
360/8: sea=[4,4,1,1,1,2,2,2,3,3,3,4]
360/9: df['ymd']=[x/100 for x in df['ymdh']]
360/10: df['month']=[x/100%100 for x in  df['ymd']]
360/11: df['seas']=[sea[x-1] for x in  df['month']]
360/12: df['week_day']=[WofD(x) for x in  df['ymd']]
360/13: col2=list(set(df.columns)-set(['ymdh']))
360/14: df_mon=pivot_table(df,index=['month'],values=col2,aggfunc=np.mean).reset_index()
360/15: df_wk=pivot_table(df,index=['week_day'],values=col2,aggfunc=np.mean).reset_index()
360/16: df_sea=pivot_table(df,index=['seas'],values=col2,aggfunc=np.mean).reset_index()
360/17: 1 in df['month']
360/18: df_mon
360/19: set(df['month'])
360/20: [1] in df['month']
360/21: i in set(df['month'])
360/22: 1 in set(df['month'])
360/23: 2 in set(df['month'])
360/24: df['year']=[x/10000 for x in df['ymd']]
360/25: set(df['year'])
360/26: min (df['ymd']),max(df['ymd'])
360/27: col2
360/28:
col2=['ymd', 'seas','month', 'week_day', 'O2(%)','Q(CMH)', 'NOx(ppm)', 'SO2(ppm)', 'CO(ppm)', 'CO2(%)', 'HCl(ppm)', 'T(Celsius)',
'polno']
360/29: df_sea[col2].to_csv['df_sea.csv']
360/30: df_sea
360/31: df_sea=pivot_table(df,index=['seas','polno'],values=col2,aggfunc=np.mean).reset_index()
360/32: df_sea=pivot_table(df,index=[zip('seas','polno')],values=col2,aggfunc=np.mean).reset_index()
360/33: df.columns
360/34: df['week_day']=[(WofD(x),y) for x,y in zip(df['ymd'],df['polno'])]
360/35: df.head(5)
360/36: df['month']=[(x/100%100,y) for x,y in zip(df['ymd'],,df['polno'])]
360/37: df['month']=[(x/100%100,y) for x,y in zip(df['ymd'],df['polno'])]
360/38: df['seas']=[(sea[x-1],y) for x,y in  zip(df['month'],df['polno'])]
360/39: df['seas']=[(x,y) for x,y in  zip(df['seas'],df['polno'])]
360/40: df.head(5)
360/41: df_sea=pivot_table(df,index=['seas'],values=col2,aggfunc=np.mean).reset_index()
360/42: col2=['O2(%)','Q(CMH)', 'NOx(ppm)', 'SO2(ppm)', 'CO(ppm)', 'CO2(%)', 'HCl(ppm)', 'T(Celsius)']
360/43: df_sea=pivot_table(df,index=['seas'],values=col2,aggfunc=np.mean).reset_index()
360/44: =pivot_table(df,index=['seas'],values=col2,aggfunc=np.mean).reset_index()
360/45: df_wk=pivot_table(df,index=['week_day'],values=col2,aggfunc=np.mean).reset_index()
360/46: df_mon=pivot_table(df,index=['month'],values=col2,aggfunc=np.mean).reset_index()
360/47: df_mon
360/48: df_mon['polno']=[zip(*x)[0] for x in df_mon['month']]
360/49: df_mon['month'][0]
360/50: zip(*df_mon['month'][0])
360/51: zip(*list(df_mon['month'][0]))
360/52: a=(3, 'P001')
360/53: zip(*a)
360/54: history
360/55: !vi rd_cems.py
360/56: a[0]
360/57: df_mon['polno']=[x[1] for x in df_mon['month']]
360/58: df_mon.head(5)
360/59: df_mon['month']=[x[0] for x in df_mon['month']]
360/60: df_wk['polno']=[x[1] for x in df_mon['weekday']]
360/61: df_wk
360/62: df_wk['polno']=[x[1] for x in df_mon['week_day']]
360/63: df_wk['polno']=[x[1] for x in df_wk['week_day']]
360/64: df_wk['week_day']=[x[0] for x in df_wk['week_day']]
360/65: df_sea['polno']=[x[1] for x in df_sea['seas']]
360/66: df_sea['seas']=[x[0] for x in df_sea['seas']]
360/67: df_sea
360/68: df_wk
360/69: df_wk.set_index('week_day').to_csv('df_wk.csv')
360/70: df_mon.set_index('month').to_csv('df_mo.csv')
360/71: df_sea.set_index('seas').to_csv('df_sea.csv')
360/72: history
361/1:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
361/2:
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
361/3:
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
361/4:
import matplotlib.pyplot as plt
import plotly.plotly as py
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
361/5: df_v.set_index('HOUR').to_csv('mixh.csv')
361/6:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='source/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=df['NOx(ppm)']
bins = np.linspace(min(NOx),max(NOx), 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/7:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='source/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=df['NOx(ppm)']
bins = np.linspace(min(NOx),max(NOx), 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/8:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=df['NOx(ppm)']
bins = np.linspace(min(NOx),max(NOx), 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/9: min(NOx),max(NOx)
361/10: bins
361/11:
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/12:
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins, alpha=5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/13:
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins) # alpha=5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/14:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=list*=(df['NOx(ppm)'])
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/15:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=list(df['NOx(ppm)'])
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/16: bins
361/17:
bins = np.linspace(50,250, 11)
plt.hist(NOx, bins) # alpha=5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/18: bins
361/19:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=np.array(df['NOx(ppm)'])
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins)#, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/20:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=np.array(df['NOx(ppm)'])
bins = np.linspace(50,250, 10)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/21:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
NOx=np.array(NOx)
bins = np.linspace(50,250, 11)
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
361/22:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
NOx=np.array(NOx)
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
plt.hist(NOx, bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")

fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/1:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df_pt=[list(df[df['polno']=='P001'].reset_index()['NOx']),list(df[df['polno']=='P002'].reset_index()['NOx'])]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5)
plt.hist(v[1], bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/2:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx'],df2['NOx']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5)
plt.hist(v[1], bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/3:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx(ppm)'],df2['NOx(ppm)']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5)
plt.hist(v[1], bins, alpha=0.5)
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/4:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx(ppm)'],df2['NOx(ppm)']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
#plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5,label = "P001".format(0))
plt.hist(v[1], bins, alpha=0.5,label = "P001".format(0))
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/5:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx(ppm)'],df2['NOx(ppm)']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
#plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5,label = "P001".format(0))
plt.hist(v[1], bins, alpha=0.5,label = "P002".format(0))
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/6:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx(ppm)'],df2['NOx(ppm)']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
#plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5,label = "P001".format(0))
plt.hist(v[1], bins, alpha=0.5,label = "P002".format(1))
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/7:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
from pandas import *
fname='sources/G3801239.csv'
df=read_csv(fname)
df=df[df['cno']=='G3801239'].reset_index()
df1=df[df['polno']=='P001'].reset_index()
df2=df[df['polno']=='P002'].reset_index()
df_pt=[df1['NOx(ppm)'],df2['NOx(ppm)']]
NOx=[]
for i in xrange(len(df)):
    a=df.loc[i,'NOx(ppm)']
    if a>0:NOx.append(a)
v=[[],[]]
for iv in xrange(len(v)):
    for i in xrange(len(df_pt[iv])):
        a=df_pt[iv][i]
        if a>0:v[iv].append(a)
NOx=np.array(NOx)
for iv in xrange(len(v)):np.array(v[iv])
bins = np.linspace(50,250, 51)
fig, ax = plt.subplots()
plt.hist(NOx, bins, alpha=0.5)
plt.hist(v[0], bins, alpha=0.5,label = "P001".format(0))
#plt.hist(v[1], bins, alpha=0.5,label = "P002".format(1))
plt.title("NOx Histogram")
plt.xlabel("NOx (ppm)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
362/8: np.mean(NOx)
362/9: np.mean(v[0]),np.mean(v[1])
362/10: np.max(v[0]),np.max(v[1])
362/11:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v
362/12:
import matplotlib.pyplot as plt
import plotly.plotly as py
fig, ax = plt.subplots()
ax.plot(list(df_v['HOUR']),list(df_v['CMIX']), label = "Convective MIXH".format(0))
ax.plot(list(df_v['HOUR']),list(df_v['MMIX']), label = "Mechanical MIXH".format(1))
plt.xlabel("Hour of day")
plt.ylabel("c-MIXH or m-MIXH(m)")
ax.legend(bbox_to_anchor=(0.99, 0.95), loc=1, borderaxespad=0.)
ax.xaxis.set_ticks(np.arange(0, 24, 3))
#plt.show()
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='line_plot')
362/13:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df_v.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/mixh.csv')
363/1: from pandas import *
363/2: fname='467060.ASC'
363/3: !head 467060.ASC
363/4: from pandas import *
363/5:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n'))
363/6: hr=[x[6:8] for x in s[1:]]
363/7: hr[:5]
363/8: x
363/9: x[6:8]
363/10: x[0][6:8]
363/11:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\r')[0])
363/12: hr=[int(x[6:8]) for x in s[1:]]
363/13: hr[:5]
363/14: x[34:41]
363/15: mixh=[float(x[34:41]) for x in s[1:]]
363/16: mixh[:24]
363/17: !head -n25 467060.ASC
363/18: df=DataFrame({'hr':hr,'mixh':mixh})
363/19: !ls *py
363/20: !ls *py -l
363/21: !cat plot_mix.py
363/22:
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.
363/23: df_v=pivot_table(df,index=['hr'],values=['mixh'],aggfunc=avg_positive).reset_index()
363/24: df_v
363/25: df_v.set_index('hr').to_csv('mixh_isc.csv')
363/26: history
363/27: !vi rd_asc.py
363/28: open(fname+'N','w')
363/29: fn=open(fname+'N','w')
363/30: ss=[x+'\n' for x in s]
363/31: fn.write(ss)
363/32:
for i in xrange(len(s)):
    fn.write(s[i])
363/33: !head -n25 467060.ASCN
363/34: !rm 467060.ASCN
363/35:
for i in xrange(len(s)):
    fn.write(ss[i])
363/36: !head -n25 467060.ASCN
363/37: open(fname+'N','w')
363/38: fn=open(fname+'N','w')
363/39:
for i in xrange(len(s)):
    fn.write(ss[i])
363/40: !head -n25 467060.ASCN
363/41: history
363/42: !vi rd_asc.py
362/14: df.columns
362/15: df.head(10)
362/16: df.head(30)
362/17:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/df.csv')
362/18:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/df.csv')
362/19:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe/df.csv')
362/20:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/df.csv')
363/43: !pwd
363/44: df_mm5=read_csv('df.csv')
363/45: len(df),len(df_mm5)
363/46: !more leze.sfc
362/21:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
da=[int(x[3]) for x in met]
mn=[int(x[2]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'MON':mn,'DAY':da,'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/df.csv')
362/22:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
da=[int(x[3]) for x in met]
mn=[int(x[2]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'MON':mn,'DAY':da,'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe/df.csv')
363/47: df_mm5=read_csv('df.csv')
363/48: df_mm5.columns
363/49: df_mm5.head(5)
363/50: df_mm5.tail(5)
363/51: set(df_mm5['MON'])
363/52: !more leze.sfc
362/23:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
da=[int(x[3]) for x in met]
mn=[int(x[1]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'MON':mn,'DAY':da,'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe/df.csv')
363/53: !more leze.sfc
363/54: df_mm5=read_csv('df.csv')
363/55: df_mm5.tail(5)
363/56: set(df_mm5['MON'])
363/57: set(df_mm5['DAY'])
362/24:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
da=[int(x[2]) for x in met]
mn=[int(x[1]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'MON':mn,'DAY':da,'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe/df.csv')
363/58: df_mm5=read_csv('df.csv')
363/59: set(df_mm5['DAY'])
363/60: df_mm5.tail(5)
363/61: set(df_mm5[df_mm5['MON']==7]['DAY'])
363/62: len(set(df_mm5[df_mm5['MON']==7]['DAY']))
363/63: len(set(df_mm5[df_mm5['MON']==6]['DAY']))
363/64: len(set(df_mm5[df_mm5['MON']==5]['DAY']))
363/65: len(set(df_mm5[df_mm5['MON']==12]['DAY']))
363/66: da=[int(x[4:6]) for x in s[1:]]
363/67: mn=[int(x[2:4]) for x in s[1:]]
363/68: df=DataFrame({'hr':hr,'mixh':mixh},'mn':mn,'da':da)
363/69: df=DataFrame({'hr':hr,'mixh':mixh,'mn':mn,'da':da})
363/70: mm5=[0 for x in xrange(len(df))]
363/71: df=DataFrame({'hr':hr,'mixh':mixh,'mn':mn,'da':da,'mm5':mm5})
363/72:
for i in xrange(len(df)):
    m=df.loc[i,'mn]
    d=df.loc[i,'da]
    h=df.loc[i,'hr]
    boo1=df_mm5['MON']==m
    boo2=df_mm5['DAY']==d
    boo3=df_mm5['HOUR']==h
    if len(df_mm5[boo1 and boo2 and boo3])==0:continue
363/73:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    boo1=df_mm5['MON']==m
    boo2=df_mm5['DAY']==d
    boo3=df_mm5['HOUR']==h
    a=df_mm5[boo1 and boo2 and boo3]
    if len(a)==0:continue
    mixh_mm5=max(a['CMIX'][0],a['MMIX'][0])
    df.loc[i,'mm5']=mixh_mm5
363/74:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    boo1=df_mm5['MON']==m
    boo2=df_mm5[df_mm5[boo1]['DAY']]==d
    boo3=df_mm5[df_mm5[boo2]['HOUR']]==h
    a=df_mm5[boo1 and boo2 and boo3]
    if len(a)==0:continue
    mixh_mm5=max(a['CMIX'][0],a['MMIX'][0])
    df.loc[i,'mm5']=mixh_mm5
363/75:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_mm5[df_mm5['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_mm5=max(b3['CMIX'][0],b3['MMIX'][0])
    df.loc[i,'mm5']=mixh_mm5
363/76:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_mm5[df_mm5['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_mm5=max(list(b3['CMIX'])[0],list(b3['MMIX'])[0])
    df.loc[i,'mm5']=mixh_mm5
363/77: df.head(20)
363/78: df_mm5.head(20)
363/79: df_mm5.head(20:30)
363/80: df_mm5.head(20,30)
363/81: df_mm5.head(30)
363/82: df.head(30)
363/83: df[df['mm5']==0.0]
363/84: set(df[df['mm5']==0.0]['mn'])
363/85: set(df[df['mm5']==0.0]['hr'])
363/86: set(df_mm5[df_mm5['MMIX']==0.0]['HOUR'])
363/87: set(df_mm5[df_mm5['MMIX']==0.0]['MON'])
363/88: set(df_mm5[df_mm5['MMIX']==0.0]['DA'])
363/89: set(df_mm5[df_mm5['MMIX']==0.0]['DAY'])
363/90: len(df_mm5[df_mm5['MMIX']==0.0])
363/91: df_mm5[df_mm5['MMIX']==0.0]
363/92: df_v
363/93: df_vASC=df_v
363/94: !cat plot_mix.py
363/95: a=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
363/96:
with open('maco.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
363/97:
with open('leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
363/98: a=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
363/99: df_v=pivot_table(a,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
363/100: df_v
363/101: a=df_mm5[df_mm5['MMIX']==0.0]['HOUR']
363/102:
for i in xrange(1,25):
    print i,a.count(i)
363/103: a[:5]
363/104: a=list(df_mm5[df_mm5['MMIX']==0.0]['HOUR'])
363/105:
for i in xrange(1,25):
    print i,a.count(i)
363/106: d_mmix=[]
363/107: df_v
363/108:
for i in xrange(len(df_v)):
    d_mmix.append(df_v.loc[i,'HOUR']:df_v.loc[i,'MMIX'])
363/109:
d_mmix={}
for i in xrange(len(df_v)):
    d_mmix.update({df_v.loc[i,'HOUR']:df_v.loc[i,'MMIX']})
363/110: d_mmix[1]
363/111:
for i in xrange(len(df_mm5)):
    if df_mm5.loc[i,'MMIX']==0.0:df_mm5.loc[i,'MMIX']=d_mmix[df_mm5.loc[i,'HOUR']]
363/112:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_mm5[df_mm5['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_mm5=max(list(b3['CMIX'])[0],list(b3['MMIX'])[0])
    df.loc[i,'mm5']=mixh_mm5
363/113: df.head(30)
363/114: print %.2f 353.000000
363/115: print %.2f (353.000000)
363/116: print '%.2f' % (353.000000)
363/117: !head -n25 467060.ASCN
363/118: a= '%.2f' % (353.000000)
363/119: a
363/120: mm5o=['%.1f' % (x) for x in df['mm5']]
363/121: len(mm5o)
363/122: open(fname+'_MM5','w')
363/123: fn=open(fname+'_MM5','w')
363/124:
fn.write(s[0])
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+mm5o[i-1]+' '+mm5o[i-1]+'\n')
363/125: !ls
363/126: !more 467060.ASC_MM5
363/127: fn=open(fname+'_MM5','w')
363/128:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+mm5o[i-1]+' '+mm5o[i-1]+'\n')
363/129:
with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
363/130: df_wrf=read_csv('/home/aermod/Leezhe_wrf/df.csv')
363/131: df_v=pivot_table(a,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
363/132: a=DataFrame({'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
363/133: df_v=pivot_table(a,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
363/134:
d_mmix={}
for i in xrange(len(df_v)):
    d_mmix.update({df_v.loc[i,'HOUR']:df_v.loc[i,'MMIX']})
363/135:
for i in xrange(len(df_wrf)):
    if df_wrf.loc[i,'MMIX']==0.0:df_wrf.loc[i,'MMIX']=d_mmix[df_wrf.loc[i,'HOUR']]
363/136:
df['wrf']=[0 for x in xrange(len(df))]
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_wrf[df_wrf['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_wrf=max(list(b3['CMIX'])[0],list(b3['MMIX'])[0])
    df.loc[i,'wrf']=mixh_wrf
363/137: wrf5o=['%.1f' % (x) for x in df['wrf']]
363/138: len(wrfo)
363/139: wrfo=['%.1f' % (x) for x in df['wrf']]
363/140: len(wrfo)
363/141: fn=open(fname+'_wrf','w')
363/142:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+wrfo[i-1]+' '+wrfo[i-1]+'\n')
363/143: history
363/144: !vi gen_ASC.py
363/145: !pw
363/146: !pwd
363/147: df.columns
363/148: df[u'mn', 'da', u'hr', u'mixh', 'mm5', u'wrf'].set_index(mn).to_csv('cmb.csv')
363/149: df['mn', 'da', 'hr', 'mixh', 'mm5', 'wrf'].set_index(mn).to_csv('cmb.csv')
363/150: cols=['mn', 'da', 'hr', 'mixh', 'mm5', 'wrf']
363/151: df[cols].set_index(mn).to_csv('cmb.csv')
363/152: df(cols).set_index(mn).to_csv('cmb.csv')
363/153: df[cols].set_index('mn').to_csv('cmb.csv')
363/154: !ls -lrt
363/155: df_wrf.head(30)
363/156:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_wrf[df_wrf['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_wrf=max(list(b3['CMIX'])[0],list(b3['MMIX'])[0])
    df.loc[i,'wrf']=mixh_wrf
363/157: wrfo=['%.1f' % (x) for x in df['wrf']]
363/158: fn=open(fname+'_wrf','w')
363/159:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+wrfo[i-1]+' '+wrfo[i-1]+'\n')
363/160: fn.close()
363/161: !more 467060.ASC_wrf
363/162: wrfo[:30]
363/163: df.head(30)
363/164: df_wrf.head(30)
362/25:
import numpy as np
from pandas import *
def avg_positive(speed):
    s = np.array(speed)
    positives = s > 0
    if positives.any():
        return s[positives].mean()
    else:
        return 0.

with open('/home/aermod/Leezhe_wrf/leze.sfc') as ftext:
    met=[line.strip('\n').split() for line in ftext]
met=met[1:]
monin=[1/float(x[11]) for x in met]
hr=[int(x[4]) for x in met]
da=[int(x[2]) for x in met]
mn=[int(x[1]) for x in met]
cmix=[float(x[9]) for x in met]
mmix=[float(x[10]) for x in met]
df=DataFrame({'MON':mn,'DAY':da,'HOUR':hr,'CMIX':cmix,'MMIX':mmix}).clip(0)
df_v=pivot_table(df,index=['HOUR'],values=['CMIX','MMIX'],aggfunc=avg_positive).reset_index()
min(monin), max(monin) ,len(monin)
df.set_index('HOUR').to_csv('/home/aermod/Leezhe_wrf/df.csv')
363/165: df_wrf=read_csv('/home/aermod/Leezhe_wrf/df.csv')
363/166:
for i in xrange(len(df_wrf)):
    if df_wrf.loc[i,'MMIX']==0.0:df_wrf.loc[i,'MMIX']=d_mmix[df_wrf.loc[i,'HOUR']]
363/167: df_wrf.head(30)
363/168:
for i in xrange(len(df)):
    m=df.loc[i,'mn']
    d=df.loc[i,'da']
    h=df.loc[i,'hr']
    b1=df_wrf[df_wrf['MON']==m]
    b2=b1[b1['DAY']==d]
    b3=b2[b2['HOUR']==h]
    if len(b3)==0:continue
    mixh_wrf=max(list(b3['CMIX'])[0],list(b3['MMIX'])[0])
    df.loc[i,'wrf']=mixh_wrf
363/169: wrfo=['%.1f' % (x) for x in df['wrf']]
363/170: fn=open(fname+'_wrf','w')
363/171:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+wrfo[i-1]+' '+wrfo[i-1]+'\n')
363/172: !more 467060.ASC_wrf
363/173: for x in df['mm5']]
363/174:
mm5o=[]
for x in df['mm5']:
    o='%.1f' % (x)
    mm5o.append((7-len(o))*' '+o)
363/175: mm5o[:30]
363/176:
wrfo=[]
for x in df['wrf']:
    o='%.1f' % (x)
    wrfo.append((7-len(o))*' '+o)
363/177: wrfo[:30]
363/178: fn=open(fname+'_MM5','w')
363/179:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+mm5o[i-1]+' '+mm5o[i-1]+'\n')
363/180: fn.close()
363/181: fn=open(fname+'_wrf','w')
363/182:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+' '+wrfo[i-1]+' '+wrfo[i-1]+'\n')
363/183: fn.close()
363/184: fn=open(fname+'_wrf','w')
363/185:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+wrfo[i-1]+wrfo[i-1]+'\n')
363/186: fn.close()
363/187: fn=open(fname+'_MM5','w')
363/188:
fn.write(s[0]+'\n')
for i in xrange(1,len(s)):
    fn.write(s[i][:34]+mm5o[i-1]+mm5o[i-1]+'\n')
363/189: fn.close()
363/190: history
363/191: !vi gen_ASC.py
363/192: !vi gen_ASC.py
364/1: from pandas import *
364/2: import xml.etree.cElementTree as ET
364/3: fname='GetVD'
364/4:
tree=ET.ElementTree(file=fname)
ttxt=[elem.text for elem in tree.iter()]
364/5: ttag=[elem.tag for elem in tree.iter()]
364/6: set(ttag)
364/7: ttag[:10]
364/8: ttex[:10]
364/9: ttxt[:10]
364/10: id='{http://www.iii.org.tw/dax/vd}SectionId'
364/11:
for i in xrange(len(ttxt)):
    if ttag[i]==id:print ttxt[i]
364/12:
nam_id=[]
for i in xrange(len(ttxt)):
    if ttag[i]==id:nam_id.append(ttxt[i])
364/13: len(nam_id)
364/14: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-11'
364/15: df=read_csv('fname')
364/16: df=read_csv('fnam2')
364/17: df=read_csv(fnam2)
364/18: df.columns
364/19: len(set(df['DeviceID']))
364/20: set(nam_id)-set(df['DeviceID'])
364/21: -set(nam_id)+set(df['DeviceID'])
364/22: set(df['DeviceID'])-set(nam_id)
364/23: len(set(df['DeviceID'])-set(nam_id))
364/24: list(set(df['DeviceID']))[:10]
364/25: nam_id[:10]
364/26: nam_id=nam_id.sort()
364/27: vd_id=list(set(df['DeviceID'])).sort()
364/28: nam_id[:10]
364/29: type(nam_id)
364/30:
nam_id=[]
for i in xrange(len(ttxt)):
    if ttag[i]==id:nam_id.append(ttxt[i])
364/31: type(vd_id)
364/32: vd_id=list(set(df['DeviceID']))
364/33: vd_id.sort()
364/34: vd_id[:10]
364/35: vd_id[-10:]
364/36: nam_id.sort()
364/37: nam_id[:10]
364/38: nam_id[-10:]
364/39: 'Z0111C0' in nam_id
364/40: 'V0111C0' in vd_id
364/41: d=df[df['DeviceID']=='V0111C0']
364/42: d.head(10)
364/43: set(d['ExchangeTime'])
364/44: len(ttxt)
364/45: set(ttag)
364/46: id2='{http://www.iii.org.tw/dax/vd}SectionName'
364/47:
for i in xrange(len(ttxt)):
    if ttag[i]==id2:print ttxt[i]
364/48:
for i in xrange(len(ttxt)):
    if ttag[i]==id2:print ttxt[i].encode('Big5')
364/49:
for i in xrange(len(ttxt)):
    if ttag[i]==id2:print ttxt[i].encode('utf8')
364/50:
d_nam={}
for i in xrange(len(ttxt)):
    if ttag[i]==id2:d_nam.update({i:ttxt[i].encode('utf8')})
364/51: len(d_nam)
364/52: len(set(d_nam))
364/53: fn=open('name_id.txt','w')
364/54:
for i in len(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/55:
for i in xrange(len(d_nam)):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/56: 1 in nam_id
364/57: 0 in nam_id
364/58: nam_id[1]
364/59: nam_id[0]
364/60: 0 in d_nam
364/61: d_nam[0]
364/62: d_nam[1]
364/63: d_nam[100]
364/64: set(d_nam)
364/65:
for i in set(d_nam)):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/66:
for i in set(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/67: !more name_id.txt
364/68:
fn=open('name_id.txt','w')
for i in set(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n').encode('big5')
364/69:
fn=open('name_id.txt','w')
for i in set(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n').decode('big5')
364/70:
d_nam={}
for i in xrange(len(ttxt)):
    if ttag[i]==id2:d_nam.update({i:ttxt[i]}) #.encode('utf8')})
364/71:
fn=open('name_id.txt','w')
for i in set(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/72: d_nam[100]
364/73: set(d_nam)
364/74: d_nam[8520]
364/75:
d_nam={}
for i in xrange(len(ttxt)):
    if ttag[i]==id2:d_nam.update({i:ttxt[i].encode('utf8')})
364/76:
fn=open('name_id.txt','w')
for i in set(d_nam):
    fn.write(str(i)+','+d_nam[i]+'\n')
364/77: !more name_id.txt
364/78: nakin='南京'
364/79:
for i in set(d_nam):
    if nakin in d_nam[i]:print i
364/80: nakinE='南京東路'
364/81:
for i in set(d_nam):
    if nakinE in d_nam[i][:10]:print i
364/82:
for i in set(d_nam):
    if nakinE in d_nam[i]:print i, d_nam[i]
364/83:
for i in set(d_nam):
    if nakinE in d_nam[i][0:9]:print i
364/84:
for i in set(d_nam):
    if nakinE in d_nam[i].split()[0]:print i
364/85: songjiang='松江路'
364/86:
for i in set(d_nam):
    if nakin in d_nam[i]:print i, d_nam[i]
364/87:
for i in set(d_nam):
    if nakin in d_nam[i].split()[0]:print i, d_nam[i]
364/88:
for i in set(d_nam):
    if nakin in d_nam[i].split('　')[0]:print i, d_nam[i]
364/89:
for i in set(d_nam):
    for j in len(d_nam[i],2):
        if d_nam[i][j:j+2]=='　':d_nam[i][j:j+2]='  '
364/90:
for i in set(d_nam):
    for j in xrange(0,len(d_nam[i]),2):
        if d_nam[i][j:j+2]=='　':d_nam[i][j:j+2]='  '
364/91:
for i in set(d_nam):
    if nakin in d_nam[i].split()[0]:print i, d_nam[i]
364/92:
for i in set(d_nam):
    for j in xrange(0,len(d_nam[i]),2):
        if d_nam[i][j:j+2]=='　':print d_nam[i][j:j+2]
364/93: a='123456'
364/94: a[0:2]
364/95: a[0:2]='12'
364/96:
for i in set(d_nam):
    for j in xrange(0,len(d_nam[i]),2):
        if d_nam[i][j:j+2]=='　':
            d_nam[i][j]=' '
            d_nam[i][j+1]=' '
364/97:
for i in set(d_nam):
    if nakin in d_nam[i].split()[0]:print i, d_nam[i]
364/98: '▒@' in d_nam[2393]
364/99: '　' in d_nam[2393]
364/100: blank='　'
364/101:
for i in set(d_nam):
    for j in xrange(0,len(d_nam[i]),2):
        if d_nam[i][j:j+2]==blank:
            d_nam[i][j]=' '
            d_nam[i][j+1]=' '
364/102: blank in  d_nam[2393]
364/103: blank == d_nam[2393][8:10]
364/104: blank == d_nam[2393][8:9]
364/105: blank == d_nam[2393][7:9]
364/106: blank == d_nam[2393][7:10]
364/107: blank in d_nam[2393][7:10]
364/108: '　' == blank
364/109:
for i in xrange(10):
    if d_nam[2393][i:i+2]==blank:print i
364/110:
for i in xrange(10):
    print d_nam[2393][i:i+2]
364/111:
for i in xrange(10):
    print d_nam[2393][i:i+2].encode('utf8')
364/112:
for i in xrange(10):
    print d_nam[2393][i:i+2].encode('big5')
364/113:
for i in xrange(0,10,2):
    print d_nam[2393][i:i+2].encode('utf8')
364/114:
for i in xrange(0,10,2):
    print d_nam[2393][i:i+2].encode('utf8')
     d_nam[2393][0:2]
364/115: d_nam[2393][0:2]
364/116: d_nam[2393][0:2].encode{'utf8')
364/117: d_nam[2393][0:2].encode('utf8')
364/118: print d_nam[2393][0:2].encode('utf8')
364/119: print d_nam[2393][0:2]
364/120:
for i in set(d_nam):
    if nakin in d_nam[i].split()[0]:print i, d_nam[i]
364/121:
d_nankin={}
for i in set(d_nam):
    if i==2393 or i==7376:continue
    if nakin in d_nam[i].split()[0]:
        d_nankin.update({i:d_nam[i]})
364/122: d_nankin
364/123: print d_nankin
364/124:
for i in set(d_nankin):
    print d_nankin[i]
364/125:
for i in set(d_nam):
    if songjiang in d_nam[i].split()[0]:print i, d_nam[i]
364/126:
d_songjiang={}
for i in set(d_nam):
    if songjiang in d_nam[i].split()[0]:
        d_songjiang.update({i:d_nam[i]})
364/127: len(d_songjiang)
364/128: zhongshan='中山'
364/129:
d_zhongshan={}
for i in set(d_nam):
    if zhongshan in d_nam[i].split()[0]:
        d_zhongshan.update({i:d_nam[i]})
364/130: len(d_zhongshan)
364/131: d_zhongshan
364/132:
for i in set(d_nam):
    if zhongshan in d_nam[i].split()[0]:
        print i,d_nam[i]
364/133:
d_zhongshan={}
for i in set(d_nam):
    if i==2404 or i=2459 or i==3152:continue
    if zhongshan in d_nam[i].split()[0]:
        d_zhongshan.update({i:d_nam[i]})
364/134:
d_zhongshan={}
for i in set(d_nam):
    if i==2404 or i==2459 or i==3152:continue
    if zhongshan in d_nam[i].split()[0]:
        d_zhongshan.update({i:d_nam[i]})
364/135: len(d_zhongshan)
364/136: renai='仁愛'
364/137: d_CZ=[{},{},{},{},{},{}]
364/138: xinyi='信義'
364/139:
for i in set(d_nam):
    if xinyi in d_nam[i].split()[0]:
        print i,d_nam[i]
364/140: fuxing='復興'
364/141: rd_CZ=[nakin,songjian,xinyi,fuxing,renai,zhongshan]
364/142: rd_CZ=[nakin,songjiang,xinyi,fuxing,renai,zhongshan]
364/143:
for rd in xrange(6):
    d_CZ[rd]={}
    for i in set(d_nam):
        if rd_CZ[rd] in d_nam[i].split()[0]:
            d_CZ[rd].update({i:d_nam[i]})
364/144:
for rd in xrange(6):
    d_CZ[rd]={}
    for i in set(d_nam):
        if rd_CZ[rd] in d_nam[i].split()[0]:
            d_CZ[rd].update({i:d_nam[i]})  
    print len(d_CZ[rd])
364/145:
d_nankin={}
for i in set(d_nam):
    if i==2393 or i==7376:continue
    if nakin in d_nam[i].split()[0]:
        d_nankin.update({i:d_nam[i]})
364/146: del d_CZ[0][2393]
364/147: del d_CZ[0][7376]
364/148: len(d_CZ[0])
364/149: for i in set(d_CZ[0]):print i,d_CZ[0][i]
364/150: for rd in xrange(1,6):for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/151:
for rd in xrange(1,6):
    for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/152:
d_zhongshan={}
for i in set(d_nam):
    if i==2404 or i==2459 or i==3152:continue
    if zhongshan in d_nam[i].split()[0]:
        d_zhongshan.update({i:d_nam[i]})
364/153: del d_CZ[5][2404,2459,3152]
364/154: del d_CZ[5][2404]
364/155: del d_CZ[5][2459]
364/156: del d_CZ[5][3152]
364/157: ttag[:20]
364/158: ttxt[:20]
364/159: sd= '{http://www.iii.org.tw/dax/vd}SectionData'
364/160:
a=[]
for i in xrange(len(ttxt)):
    if ttag[i]==sd:a.append(ttxt[i])
364/161: set(a)
364/162: ttag[-10]
364/163: ttag[-10:]
364/164: ttag[-11:]
364/165: (len(ttag)-4)/11
364/166:
num=0
for rd in xrange(6):
    num=num+len(d_CZ[rd]))
364/167:
num=0
for rd in xrange(6):
    num=num+len(d_CZ[rd])
364/168: num
364/169: ttex[2657-1]
364/170: ttxt[2657-1]
364/171: 'VIMNN60' in vd_id
364/172: 'IMNN60' in vd_id
364/173: len(vd_id)
364/174:
ii=0
for rd in xrange(6):
    for i in set(d_CZ[rd]):
        id='V'+ttxt[i-1][1:]
        if id in vd_id:ii=ii+1
364/175: ii
364/176:
ii=0
for rd in xrange(6):
    for i in set(d_CZ[rd]):
        id='V'+ttxt[i-1][1:]
        if id in vd_id:print ttxt[i]
364/177:
ii=0
for rd in xrange(6):
    for i in set(d_CZ[rd]):
        id='V'+ttxt[i-1][1:]
        if id in vd_id:print ttxt[i].encode('utf8')
364/178:
ii=0
for rd in xrange(6):
    for i in set(d_CZ[rd]):
        id='V'+ttxt[i-1][1:]
        if id in vd_id:print i,ttxt[i].encode('utf8')
364/179: xinsheng='新生'
364/180:
d_xinsheng={}
for i in set(d_nam):
    if xinsheng in d_nam[i].split()[0]:
        d_xinsheng.update({i:d_nam[i]})  
        print d_nam[i]
364/181: xinsheng='新生南路'
364/182: rd_CZ=[nakin,songjiang,xinyi,fuxing,renai,zhongshan,xinsheng]
364/183:
d_xinsheng={}
for i in set(d_nam):
    if xinsheng in d_nam[i].split()[0]:
        d_xinsheng.update({i:d_nam[i]})  
        print d_nam[i]
364/184: rd_CZ.append(d_xinsheng)
364/185:
rd=6
for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/186: del rd_CZ[7]
364/187: rd_CZ
364/188: for i in rd_CZ:print i
364/189: d_CZ.append(d_xinsheng)
364/190:
rd=6
for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/191:
rd=1
for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/192:
rd=0
for i in set(d_CZ[rd]):print i,d_CZ[rd][i]
364/193: history
364/194: history.encode('asc')
364/195: !vi rd_getVD.py
364/196: !vi rd_getData.py
364/197: history
364/198: help(history)
364/199: %history -g -f rrr.py
365/1: from pandas import *
365/2: fname='CleanZoneSeq.txt'
365/3:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\r')[0])
365/4: s
365/5:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
365/6: s
365/7:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(int(line.split('\n')[0]))
365/8: s
365/9: s.sort()
365/10: s
365/11: import xml.etree.cElementTree as ET
365/12: fname='GetVD'
365/13:
tree=ET.ElementTree(file=fname)
ttxt=[elem.text for elem in tree.iter()]
ttag=[elem.tag for elem in tree.iter()]
365/14: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-11'
365/15: df=read_csv(fnam2)
365/16: vd_id=list(set(df['DeviceID'])).sort()
365/17: nakin='~M~W京'
365/18:
for i in set(d_nam):
        if nakinE in d_nam[i]:print i, d_nam[i]
365/19: id2='{http://www.iii.org.tw/dax/vd}SectionName'
365/20:
d_nam={}
for i in xrange(len(ttxt)):
    if ttag[i]==id2:d_nam.update({i:ttxt[i].encode('utf8')})
365/21: d_nam[8520]
365/22: print d_nam[8520]
365/23: print d_nam[8520].encode('utf8')
365/24: print d_nam[8520].encode('big5')
365/25:
ii=0
for i in s:
    id='V'+ttxt[i-1][1:]
    if id in vd_id:ii=ii+1
365/26: type (vd_id)
365/27: vd_id
365/28: vd_id=list(set(df['DeviceID']))
365/29: vd_id.sort()
365/30:
ii=0
for i in s:
    id='V'+ttxt[i-1][1:]
    if id in vd_id:ii=ii+1
365/31: ii
365/32:
not_in=[]
for i in s:
    id='V'+ttxt[i-1][1:]
    if id in vd_id:not_in.append(i)
for i in not_in:
    del s[s.index(i)]
365/33: len(s)
365/34:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(int(line.split('\n')[0]))
365/35: fname='CleanZoneSeq.txt'
365/36:
with open(fname) as ftext:
    s=[]
    for line in ftext:
        s.append(int(line.split('\n')[0]))
365/37:
not_in=[]
for i in s:
    id='V'+ttxt[i-1][1:]
    if id not in vd_id:not_in.append(i)
for i in not_in:
    del s[s.index(i)]
365/38: len(s)
365/39: df.columns
365/40:
vd_idCZ=[]
for i in s:
    vd_idCZ.append('V'+ttxt[i-1][1:])
365/41: vd_idCZ
365/42: df.columns
365/43: len(df);df=df.drop_duplicates(inplace=True)
365/44: len(df)
365/45: df
365/46: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-11'
365/47: df=read_csv(fnam2)
365/48: len(df)
365/49: a=df.drop_duplicates
365/50: len(a)
365/51: a=df.drop_duplicates(keep='first',inplace=True)
365/52: len(a)
365/53: cols=df.columns
365/54: cols
365/55: cols=list(df.columns)
365/56: cols
365/57: a=df.drop_duplicates(subset=cols)
365/58: len(a)
365/59: len(df)
365/60: df=read_csv(fnam2)
365/61: len(df)
365/62: len(vd_id)
365/63: vd_id=list(set(df['DeviceID']))
365/64: len(vd_id)
365/65: df.head(10)
365/66: a=DataFrame({"A":["foo", "foo", "foo", "bar"], "B":[0,1,1,1], "C":["A","A","B","A"]})
365/67: a=drop_duplicates(subset=['A', 'C'], keep=False)
365/68: a=a.drop_duplicates(subset=['A', 'C'], keep=False)
365/69: a
365/70: a=a.drop_duplicates(subset=['A', 'C'], keep=False)
365/71: a
365/72: a=DataFrame({"A":["foo", "foo", "foo", "bar"], "B":[0,1,1,1], "C":["A","A","B","A"]})
365/73: a
365/74: a=a.drop_duplicates(subset=['A', 'C'])
365/75: a
365/76: df.head(10)
365/77: sum(df['Svolume']),sum(df['Mvolume']),sum(df['Lvolume'])
365/78: set(df['Svolume'])
365/79: del a.loc[2]
365/80: drop a.loc[2]
365/81: a.drop[2]
365/82: a.drop(2)
365/83: df=df.reset_index()
365/84: df[df['DeviceID']=='DeviceID']
365/85: len(df)
365/86: a=df.drop_duplicates(subset=cols)
365/87: len(a)
365/88: len(df)
365/89: df=df.drop_duplicates(subset=cols)
365/90: len(df)
365/91: df[df['DeviceID']=='DeviceID']
365/92: df=df.drop(1844).reset_index()
365/93: df[df['DeviceID']=='DeviceID']
365/94: del df['level_0']
365/95: del df['index']
365/96: df.head(10)
365/97: len(df)
365/98: sum(df['Svolume']),sum(df['Mvolume']),sum(df['Lvolume'])
365/99: set(df['Svolume'])
365/100: set(df['Mvolume'])
365/101: set(df['Lvolume'])
365/102: df['Mvolume']=[float(x) for x in df['Mvolume']]
365/103: df['Svolume']=[float(x) for x in df['Svolume']]
365/104: df['Lvolume']=[float(x) for x in df['Lvolume']]
365/105: sum(df['Svolume']),sum(df['Mvolume']),sum(df['Lvolume'])
365/106: df_CZ=df[df['DeviceID].map(lambda x for x in vd_idCZ)]
365/107: df_CZ=df[df['DeviceID'].map(lambda x for x in vd_idCZ)]
365/108: df_CZ=df[df['DeviceID'].map(lambda : x in vd_idCZ)]
365/109: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)]
365/110: len(df_CZ)
365/111: sum(df_CZ['Svolume']),sum(df_CZ['Mvolume']),sum(df_CZ['Lvolume'])
365/112: len(set(df['DeviceID']))
365/113: 20/676
365/114: 20./676.
365/115: 20./676.*100
365/116: 1048.0/49656.0*100,93.0/9817.0*100
365/117: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-09'
365/118: df=read_csv(fnam2)
365/119: df=df.drop_duplicates(subset=cols)
365/120: len(df)
365/121: df[df['DeviceID']=='DeviceID']
365/122: df=df.drop(919).reset_index()
365/123: df.head(10)
365/124: del df['index']
365/125: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)]
365/126: sum(df_CZ['Svolume'])/sum(df['Svolume'])*100,sum(df_CZ['Mvolume'])/sum(df['Mvolume'])*100,sum(df_CZ['Lvolume'])/sum(df['Lvolume'])*100
365/127: df['Svolume']=[float(x) for x in df['Svolume']]
365/128: df['Lvolume']=[float(x) for x in df['Lvolume']]
365/129: df['Mvolume']=[float(x) for x in df['Mvolume']]
365/130: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)]
365/131: sum(df_CZ['Svolume'])/sum(df['Svolume'])*100,sum(df_CZ['Mvolume'])/sum(df['Mvolume'])*100,sum(df_CZ['Lvolume'])/sum(df['Lvolume'])*100
365/132: history
365/133: %history -g -f rr2.py
365/134: df=df.sort_values(by=[' 117: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-09'
365/135:  118: df=read_csv(fnam2)
365/136:  119: df=df.drop_duplicates(subset=cols)
365/137:  122: df=df.drop(919).reset_index()
365/138:  124: del df['index']
365/139:  126: sum(df_CZ['Svolume'])/sum(df['Svolume'])*100,sum(df_CZ['Mvolume'])/sum(df['Mvolume'])*100,sum(df_CZ['Lvolume'])/sum(df['Lvolume'])*100
365/140:  127: df['Svolume']=[float(x) for x in df['Svolume']]
365/141:  130: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)]
365/142: df=df.sort_values(by=['Device_ID'],ascending=[True]).reset_index()
365/143: cols
365/144: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
365/145: df.head(10)
365/146: df=read_csv(fnam2)
365/147: df=df.drop_duplicates(subset=cols)
365/148: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
365/149: df.head(10)
365/150:
fn=open('vd_idCZ.txt','w')
for i in vd_idCZ:
    fn.write(i+'\n')
365/151: !head vd_idCZ.txt
365/152: vd_idCZ
365/153:
fn=open('vd_idCZ.txt','w')
for i in xrange(len(vd_idCZ)):
    fn.write(vd_idCZ[i]+'\n')
365/154: !head vd_idCZ.txt
365/155: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-12'
365/156: df=read_csv(fnam2)
365/157: df=df.drop_duplicates(subset=cols)
365/158: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
365/159: len(df)
365/160: sz=['Svolume','Lvolume','Mvolume']
365/161: for i in xrange(3):df[sz[i]]=[float(x) for x in df[sz[i]]]
365/162: set(df['Svolume'])
365/163: df=df.drop(0).reset_index()
365/164: for i in xrange(3):df[sz[i]]=[float(x) for x in df[sz[i]]]
365/165: sm=[[0,0,0],[0,0,0]]
365/166: for i in xrange(3):sm[0][i]=sum(x>0 for x in df[sz[i]])
365/167: for i in xrange(3):sm[1][i]=sum(x>0 for x in df_CZ[sz[i]])
365/168: import ezodf
365/169: import ezodf
365/170: import ezodf
365/171: import ezodf
365/172: import ezodf
365/173: import ezodf
365/174: import wrapcache
365/175: import ezodf
365/176: import ezodf
365/177: import pyexcel as p
365/178: sht=p.get_sheet(file_name='/home/backup/data/ETC/TaipeiVD/zip/10601VD-49/V0111C0_2.ods')
365/179: import pyexcel as p
365/180: sht=p.get_sheet(file_name='/home/backup/data/ETC/TaipeiVD/zip/10601VD-49/V0111C0_2.ods')
366/1: import pyexcel as p
366/2: sht=p.get_sheet(file_name='/home/backup/data/ETC/TaipeiVD/zip/10601VD-49/V0111C0_2.ods')
366/3: #-*- coding: utf-8 -*- :
366/4: sht=p.get_sheet(file_name='/home/backup/data/ETC/TaipeiVD/zip/10601VD-49/V0111C0_2.ods')
366/5: sht=p.get_sheet(file_name='/home/backup/data/ETC/TaipeiVD/zip/10601VD-49/V0111C0_2.ods',decode='utf8')
366/6: from ODSReader import *
366/7: from Odfpy import *
366/8: from odfpy import *
366/9: import odfpy
366/10: import Odfpy
367/1: import Odfpy
364/200: df.head(30)
364/201: cols=list(df.columns)
364/202: df=df.drop_duplicates(subset=cols)
364/203: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
364/204: df=df.drop(0).reset_index()
364/205: del df['index']
364/206: df.head(30)
364/207: df['hour']=[int((x.split('T')[1]).split(':')[0]) for x in df['ExchangeTime']]
364/208: df.head(10)
364/209: df.tail(10)
364/210: set(df['hour'])
364/211: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-12'
364/212: df=read_csv(fnam2)
364/213: df=df.drop_duplicates(subset=cols)
364/214: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
364/215: df=df.drop(0).reset_index()
364/216: df['hour']=[int((x.split('T')[1]).split(':')[0]) for x in df['ExchangeTime']]
364/217: df.head(10)
364/218: df.tail(10)
364/219: import datetime
364/220:
def WofD(it):
#    year=it/100/100; month=(it/100)%100; day = it%100
    year=int(t[0:4]); month=int(it[5:7]); day =int(it[8:10])
    return datetime.date(year, month, day).weekday()+1
364/221: df['week_day']=[WofD(x.split('T')[0]) for x in df['ExchangeTime']]
364/222:
def WofD(it):
#    year=it/100/100; month=(it/100)%100; day = it%100
    year=int(it[0:4]); month=int(it[5:7]); day =int(it[8:10])
    return datetime.date(year, month, day).weekday()+1
364/223: df['week_day']=[WofD(x.split('T')[0]) for x in df['ExchangeTime']]
364/224: df['hour']=[(int((x.split('T')[1]).split(':')[0]),y) for x,y in zip(df['ExchangeTime'], df['week_day'])]
364/225: df.head(10)
364/226: sz=['Svolume','Lvolume','Mvolume']
364/227: df_pv=pivot_table(df,index=['hour'],values=sz,aggfunc=sum)
364/228: df_pv
364/229: for i in xrange(3):df[sz[i]]=[max(0.,float(x)) for x in df[sz[i]]]
364/230: df_pv=pivot_table(df,index=['hour'],values=sz,aggfunc=sum)
364/231: df_pv
364/232: df.columns
364/233: if 'index' in list( df.columns):del df['index']
364/234: df.columns
364/235: df_pv['hour'][0]
364/236: df_pv['index'][0]
364/237: df_pv.reset_index()
364/238: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)].reset_index()
364/239:
with open('vd_idCZ.txt') as ftext:
    vd_idCZ=[]
    for line in ftext:
        vd_idCZ.append(line.split('\n')[0])
364/240: df_CZ=df[df['DeviceID'].map(lambda x: x in vd_idCZ)].reset_index()
364/241: df_CZ.columns
364/242: df_pv['index'][0]
364/243: df_pv['hour'][0]
364/244: df_pv.columns
364/245: df_pv
364/246: df_pv=df_pv.reset_index()
364/247: df_pv['hour'][0]
364/248: a=df_pv['hour'][0]
364/249: a[0]
364/250: a[1]
364/251: df_pv['hour'][3]
364/252: a=df_pv['hour'][3]
364/253: a[0]
364/254: df0=df_pv
364/255: df0['week_day']=[x[1] for x in df0['hour']]
364/256: df0
364/257: run CZ_hr.py
364/258: fnam2='/home/backup/data/ETC/TaipeiVD/2017-12-09'
364/259: df=read_csv(fnam2)
364/260: df=df.drop_duplicates(subset=cols)
364/261: df=df.sort_values(by=['DeviceID'],ascending=[True]).reset_index()
364/262: df=df.drop(0).reset_index()
364/263: del df['index']
364/264: df['week_day']=[WofD(x.split('T')[0]) for x in df['ExchangeTime']]
364/265: df['hour']=[(y,int((x.split('T')[1]).split(':')[0])) for y,x in zip(df['week_day'],df['ExchangeTime'])]
364/266: set(df['hour'])
364/267: set(df['ExchangeTime'])
368/1: history
369/1: import odfpy
369/2: from odf.opendocument import load
369/3: !pwd
369/4: fname='10601VD-49/V0111C0_2.ods'
369/5: infile='10601VD-49/V0111C0_2.ods'
369/6: doc = load(infile)
369/7: #-*- coding: utf-8 -*- :
369/8: !vi ld_odf.py
369/9: infile='10601VD-49/V0111C0_2.ods'
369/10: !vi ld_odf.py
369/11: !python ld_odf.py
369/12: from PyODConverter import DocumentConverter
369/13: listener = ('localhost', 2002)
369/14: converter = DocumentConverter(listener)
369/15: converter = DocumentConverter(listener)
370/1: fname='content.xml'
370/2: import xml.etree.cElementTree as ET
370/3: tree=ET.ElementTree(file=fname)
370/4: ttxt=[elem.text for elem in tree.iter()]
370/5: ttag=[elem.tag for elem in tree.iter()]
370/6: len(ttag)
370/7: set(ttag)
370/8: ttxt[:30]
370/9: set(ttxt)
370/10: a=list(set(ttxt))
370/11: len(a)
370/12: for i in xrange(len(a)):print i,a[i]
370/13: for i in xrange(len(a)):print i,a[i].decode('utf8')
370/14: for i in xrange(len(a)):print i,a[i].encode('utf8')
370/15: for i in xrange(len(a)):print i,str(a[i]).encode('utf8')
370/16: print a[53]
370/17:
c=a[53].encode('utf8')
print c
370/18:
for i in xrange(len(a)):
    c=a[i].encode('utf8')
    print i,c
370/19: a[123]
370/20: a[124]
370/21: type(a[124])
370/22: type(a[123])
370/23: type(a[125])
370/24:
for i in xrange(len(a)):
    c=a[i]
    if type(c)==unicode:c=c.encode('utf8')
    print i,c
370/25:
colm=[]
for i in xrange(len(ttxt)):
    if ':' in ttxt[i]:colm.append(i)
370/26:
colm=[]
for i in xrange(len(ttxt)):
    if type( ttxt[i])==NoneType: continue
    if ':' in ttxt[i]:colm.append(i)
370/27:
colm=[]
for i in xrange(len(ttxt)):
    if type( ttxt[i])!=str: continue
    if ':' in ttxt[i]:colm.append(i)
370/28: colm
370/29: len(colm)
370/30:
for i in xrange(23):
    print colm[i+1]-colm[i]
370/31:
for i in xrange(32):
    print i,ttxt[colm[0]+i]
370/32:
for i in xrange(32):
    print i,ttag[colm[0]+i]
370/33:
for i in xrange(len(ttxt)):
    if type(ttxt[i]) !=str:continue
    if 'V' in ttxt[i]: print i,ttxt[i]
370/34:
for i in xrange(32):
    print i,ttxt[colm[0]+i]
370/35: colm[0]
370/36:
for i in xrange(len(ttxt)):
    if type(ttxt[i]) !=str:continue
    if '00:00~01:00' in ttxt[i]: print i,ttxt[i]
371/1:
with open('106zip.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('/')[1].split('_')[0]))
371/2:
with open('106zip.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('/')[1].split('_')[0])
371/3: set(s)
371/4:
from pandas import *
import numpy as np
with open('vd_idCZ.txt') as ftext:
    vd_idCZ=[]
    for line in ftext:
        vd_idCZ.append(line.split('\n')[0])
371/5:
for i in vd_idCZ:
    if i in set(s):print i
371/6: vd_idCZ
371/7: vd_idCZ.sort()
371/8: vd_idCZ
371/9:
with open('106zip.txt') as ftext:
    s=[]
    for line in ftext:
        a=line.split('/')[1].split('_')[0])
        if a[0]=='V':s.append(a)
371/10:
with open('106zip.txt') as ftext:
    s=[]
    for line in ftext:
        a=line.split('/')[1].split('_')[0]
        if a[0]=='V':s.append(a)
371/11: len(s)
371/12: s
371/13: set(s)
371/14: len(set(s))
371/15: sm=[[[0,0,0],[0,0,0]],[[0,0,0],[0,0,0]]]
372/1:
from pandas import *
import xml.etree.cElementTree as ET
372/2: fname='sht1_15.htm'
372/3:
tree=ET.ElementTree(file=fname)
ttxt=[elem.text for elem in tree.iter()]
372/4: from bs4 import BeautifulSoup
372/5: soup = BeautifulSoup(fname,'html.parser')
372/6:
fn=open(fname,'r')
soup = BeautifulSoup(fn,'html.parser')
372/7: print(soup)
372/8: soup.find('td')
372/9: soup.find_all('td')
372/10: td=soup.find_all('td')
372/11:
for p in td:
    print p['href',p.text]
372/12:
for p in td:
    print p['href',p.text.encode('big5')]
372/13:
for p in td:
    print p['href',p.text.encode('utf8')]
372/14:
for p in td:
    print (p['href',p.text.encode('utf8')])
372/15: a = soup.find_all('a')
372/16: a[:5]
372/17: a = soup.find('a')
372/18: a
372/19: print a['href']
372/20: print a['href'].spit('/')[2]
372/21: print a['href'].split('/')[2]
372/22: a = soup.find_all('a')
372/23:
for i in a:
    print i['href'].split('/')[2].split('.')[0]
372/24:
fn=open('inter_nam.txt','w')
for i in soup.find_all('a'):
for i in a:
    fn.write(i['href'].split('/')[2].split('.')[0]+'\n')
372/25:
fn=open('inter_nam.txt','w')
for i in soup.find_all('a'):
    fn.write(i['href'].split('/')[2].split('.')[0]+'\n')
372/26: !pwd
372/27:
fn=open('inter_nam.txt','w')
for i in a:
    fn.write(i['href'].split('/')[2].split('.')[0]+'\n')
372/28: fn.close()
372/29: history
372/30: print soup
372/31:
fn=open('sht1','r')
soup = BeautifulSoup(fn,'html.parser')
372/32:
fn=open('sht1.htm','r')
soup = BeautifulSoup(fn,'html.parser')
372/33: !ls sht*
372/34:
fn=open('sht_1.htm','r')
soup = BeautifulSoup(fn,'html.parser')
372/35:
fn=open('sht1_1.htm','r')
soup = BeautifulSoup(fn,'html.parser')
372/36: print soup
372/37: a = soup.find_all('a')
372/38:
for i in a:
    print i['href']
372/39:
for i in a:
    print i['href'].split('/')[2].split('.')[0]
372/40: fname='sht3_I045-91.htm'
372/41:
fn=open(fname,'r')
soup = BeautifulSoup(fn,'html.parser')
372/42: td=soup.find_all('td')
372/43: td[-30:]
372/44: td['x:num'][-30:]
372/45: td['num'][-30:]
372/46: td['num']
372/47:
for i in td:
    print i['num']
372/48:
for i in td:
    print i['x:num']
372/49:
ii=0
for i in td:
    if ii<10:print i
    ii=ii+1
372/50:
ii=0
for i in td:
    if ii<30:print i
    ii=ii+1
372/51:
ii=0
for i in td:
    if 50<ii<80:print i
    ii=ii+1
372/52:
ii=0
for i in td:
    if 150<ii<180:print i
    ii=ii+1
372/53:
ii=0
for i in td:
    if 250<ii<280:print i
    ii=ii+1
372/54:
for i in td:
    print i['x\:num']
372/55:
for i in td:
    print i['x']
372/56:
for i in td:
    print i['style']
372/57: soup.find('x')
372/58: soup.find('x:num')
372/59: soup.find('style')
372/60:
for i in td:
    print i['align']
372/61: !cat *py
372/62:
for i in td:
    print i['class']
372/63: td=soup.find_all('td','x:num')
372/64: len(td)
372/65: td=soup.find_all('td','xl116')
372/66: len(td)
372/67: td[:10]
372/68: td[0]
372/69: td[0].split('>')[1]
372/70: str(td[0]).split('>')[1]
372/71: str(td[0]).split('>')[1].split('<')[0]
372/72: float(str(td[0]).split('>')[1].split('<')[0])
372/73: td=soup.find_all('td')
372/74: a=[float(str(td[i]).split('>')[1].split('<')[0]) for i in xrange(len(td))]
372/75: a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
372/76: a[:30]
372/77: a[-30:]
372/78: a[-60:-30:]
372/79: a[-90:-60:]
372/80: a[-115:-88:]
372/81: a[-143:-116]
372/82: fname='sht3_I032-91.htm'
372/83:
fn=open(fname,'r')
soup = BeautifulSoup(fn,'html.parser')
td=soup.find_all('td')
372/84:
a=[float(str(td[i]).split('>')[1].split('<')[0]) for i in xrange(len(td))]
for i in xrange(5):
    print a[-144+i*28,-143+i*28]
372/85:
a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
for i in xrange(5):
    print a[-144+i*28,-143+i*28]
372/86:
for i in xrange(5):
    print a[-144+i*28],a[-143+i*28]
372/87: a[-30:]
372/88: for i in xrange(5): print a[-143+i*28]
372/89: for i in xrange(5): print a[-145+i*28]
372/90: for i in xrange(5): print a[-142+i*28]
372/91: for i in xrange(4): print a[-142+i*28]
372/92: fname='sht3_I031-91.htm'
372/93:
fn=open(fname,'r')
soup = BeautifulSoup(fn,'html.parser')
td=soup.find_all('td')
a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
for i in xrange(4): print a[-142+i*28]
372/94:
fname='sht3_I030-91.htm'
fn=open(fname,'r')
soup = BeautifulSoup(fn,'html.parser')
td=soup.find_all('td')
a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
for i in xrange(4): print a[-142+i*28]
372/95: !ls sht3*>sss.txt
372/96:
with open('sss.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
372/97: len(a)
372/98: a[0]
372/99: a[1]
372/100: !vi sss.txt
372/101: a[:5]
372/102:
with open('sss.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\r')[0])
372/103: s[:5]
372/104:
with open('sss.txt') as ftext:
    s=[]
    for line in ftext:
        s.append(line.split('\n')[0])
372/105: s[:5]
372/106: len(s)
372/107:
t=[]
for fname in s:
    fn=open(fname,'r')
    soup = BeautifulSoup(fn,'html.parser')
    td=soup.find_all('td')
    a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
    tt=[]
    for i in xrange(4): tt.append(a[-142+i*28])
    t.append(tt)
372/108: set(t)
372/109: t[:5]
372/110: t[-5:]
372/111: s[-5:]
372/112: s[:5]
372/113:
t=[]
for fname in s:
    fn=open(fname,'r')
    soup = BeautifulSoup(fn,'html.parser')
    td=soup.find_all('td')
    a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
    tt=''
    for i in xrange(4): tt=tt++i*28])
    t.append(tt)
372/114:
t=[]
for fname in s:
    fn=open(fname,'r')
    soup = BeautifulSoup(fn,'html.parser')
    td=soup.find_all('td')
    a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
    tt=''
    for i in xrange(4): tt=tt+a[-142+i*28]
    t.append(tt)
372/115: set(t)
372/116: ABC=['A','B','C','D','E','F']
372/117: len(a)
372/118:
for i in xrange(len(a),0,-1):
    if trim(a) in ABC:
        print i
        break
372/119:
for i in xrange(len(a),0,-1):
    if a in ABC:
        print i
        break
372/120:
for i in xrange(len(a),0,-1):
    for j in ABC:
        if j in a:
        print i,j
        break
372/121:
for i in xrange(len(a),0,-1):
    for j in ABC:
        if j in a:
            print i,j
            break
372/122:
for i in xrange(len(a),0,-1):
    for j in ABC:
        k=1
        if j in a:
            print i,j
            k=0
            break
        if k==0:break
372/123:
for i in xrange(len(a),0,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j
            k=0
            break
        if k==0:break
372/124:
for i in xrange(len(a)-1,-1,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j
            k=0
            break
        if k==0:break
372/125:
for i in xrange(len(a)-1,-1,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j
            k=0
            break
    if k==0:break
372/126: i
372/127:
for i in xrange(len(a)-1,-1,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j,a[i]+'$'
            k=0
            break
    if k==0:break
372/128:
for i in xrange(len(a)-1,-1,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j,j==a[i]            
            k=0
            break
    if k==0:break
372/129:
for k in xrange(i,-1,-28):
    if a[k] not in ABC:
        print k
        break
372/130:
for k in xrange(i,-1,-28):
    print a[k]
    if a[k] not in ABC:
        print k
        break
372/131: fname
372/132: k
372/133:
for i in xrange(k-29,-1,-1):
    for j in ABC:
        brk=1
        if j in a[i]:
            print i,j,j==a[i]            
            brk=0
            break
    if brk==0:break
372/134:
for i in xrange(k-30,-1,-1):
    for j in ABC:
        brk=1
        if j in a[i]:
            print i,j,j==a[i]            
            brk=0
            break
    if brk==0:break
372/135:
for i in xrange(k+28,-1,-1):
    for j in ABC:
        brk=1
        if j in a[i]:
            print i,j,j==a[i]            
            brk=0
            break
    if brk==0:break
372/136:
for i in xrange(k+27,-1,-1):
    for j in ABC:
        brk=1
        if j in a[i]:
            print i,j,j==a[i]            
            brk=0
            break
    if brk==0:break
372/137: i=1068
372/138: a[i:]
372/139: a[i-28:]
372/140: a[937:937+30]
372/141: a[937-28:937-28+30]
372/142: import numpy as np
372/143: float('\xe3\x80\x80') is np.nan
372/144:
try:
    a=float('\xe3\x80\x80')
except:
    print 'err'
else:
    print a
372/145:
try:
    a=float('0.15')
except:
    print 'err'
else:
    print a
372/146: i
372/147:
a=[str(td[i]).split('>')[1].split('<')[0] for i in xrange(len(td))]
for i in xrange(5):
    print a[-144+i*28,-143+i*28]
372/148: len(a)
372/149: a[i]
372/150:
for i in xrange(len(a)-1,-1,-1):
    for j in ABC:
        k=1
        if j in a[i]:
            print i,j,j==a[i]            
            k=0
            break
    if k==0:break
372/151:
tab=[]
for j in xrange(i,len(a)):
    try:
        tt=float(a[j])
    else:
372/152:
tab=[]
for j in xrange(i,len(a)):
    try:
        tt=float(a[j])
    except:
    else:
372/153:
tab=[]
for j in xrange(i,len(a)):
    try:
        tt=float(a[j])
    except:
        
    else:
372/154:
tab=[]
for j in xrange(i,len(a)):
    try:
        tt=float(a[j])
    except:
        print 'err'
    else:
        tab.append(tt)
372/155: len(tab)
372/156: tab
372/157: i=i-28
372/158:
tab2=[]
for j in xrange(i,i+29):
    try:
        tt=float(a[j])
    except:
        continue
    else:
        tab2.append(tt)
372/159: len(tab2)
372/160: history
372/161: !vi rd_sht3.py
372/162: !vi rd_sht3.py
372/163: !head sss.txt
372/164: !ls sht3*htm
372/165: !v
372/166: !vi rd_sht3.py
372/167: history
372/168: !vi rd_sht3.py
372/169: !vi rd_sht3.py
372/170: !vi rd_sht3.py
372/171: end=len(a)
372/172: for last in xrange(end,-1,-1):if a[last] in ABC:break
372/173: for last in xrange(end,-1,-1): if a[last] in ABC:break
372/174: !vi rd_sht3.py
372/175: !vi rd_sht3.py
372/176: !vi rd_sht3.py
372/177: run rd_sht3.py
372/178: !vi rd_sht3.py
372/179: run rd_sht3.py
372/180: !vi rd_sht3.py
372/181: run rd_sht3.py
372/182: !vi rd_sht3.py
372/183: run rd_sht3.py
372/184: !vi rd_sht3.py
372/185: run rd_sht3.py
372/186: len(tab)
372/187: tab
372/188: fname
372/189: last
372/190: a[last:last+28]
372/191: a[last+7][-1]
372/192: !vi rd_sht3.py
372/193: j=last+7
372/194:
if a[j][-1]=='%':
print (float(a[j][:-1])/100)
372/195:
if a[j][-1]=='%':
    print (float(a[j][:-1])/100)
372/196: a[j]
372/197: run rd_sht3.py
372/198: tab
372/199: len(tab)
372/200: !vi rd_sht3.py
372/201: len(a)
372/202: a[last:]
372/203: !vi rd_sht3.py
372/204: run rd_sht3.py
372/205: a[j]
372/206: !vi rd_sht3.py
372/207: run rd_sht3.py
372/208: len(tab)
372/209: iv
372/210: tab
372/211: fname
372/212: a[last]
372/213: tab.insert('a',0)
372/214: tab.insert(0,'a')
372/215: tab
372/216: !v
372/217: !vi rd_sht3.py
372/218: run rd_sht3.py
372/219: !vi rd_sht3.py
372/220: run rd_sht3.py
372/221: a[j]
372/222: j
372/223: len(a)
372/224: fname
372/225: !vi rd_sht3.py
372/226: run rd_sht3.py
372/227: fname
372/228: run rd_sht3.py
372/229: run rd_sht3.py
372/230: end
372/231: last
372/232:  a[last] in ABC
372/233: !vi rd_sht3.py
372/234: run rd_sht3.py
372/235: last1
372/236: last
372/237: fname
372/238: tab
372/239: run rd_sht3.py
372/240: fname
372/241: last
372/242: tab
372/243: run rd_sht3.py
372/244: fname
372/245: run rd_sht3.py
372/246: fname
372/247: run rd_sht3.py
372/248: run rd_sht3.py
372/249: run rd_sht3.py
372/250: run rd_sht3.py
372/251: run rd_sht3.py
372/252: fname
372/253: run rd_sht3.py
372/254: fname
372/255: tab
372/256: last
372/257: ampm
372/258: A_last
372/259: len(a)
372/260: a
372/261: soup
372/262: run rd_sht3.py
372/263: fname
372/264: run rd_sht3.py
372/265: fname
372/266: run rd_sht3.py
372/267: fname
372/268: run rd_sht3.py
372/269: fname
372/270: run rd_sht3.py
372/271: fname
372/272: run rd_sht3.py
372/273: fname
372/274: run rd_sht3.py
372/275: fname
372/276: run rd_sht3.py
372/277: fname
372/278: run rd_sht3.py
372/279: fname
372/280: !vi rd_sht3.py
372/281: run rd_sht3.py
372/282: run rd_sht3.py
372/283: run rd_sht3.py
372/284: fname
372/285: run rd_sht3.py
373/1:
from pandas import *
with open('467060.ASC') as ftext: s1=[line.split('\r')[0] for line in ftext]
with open('467060.ASCR') as ftext: s2=[line.split('\r')[0] for line in ftext]
373/2:
from pandas import *
with open('467060.ASC') as ftext: s1=[line.split('\r')[0] for line in ftext]
with open('467060.ASCR') as ftext: s2=[line.split('\r')[0] for line in ftext]
wd1=[float(x[8:16]) for x in s1[1:]]
wd2=[float(x[8:16]) for x in s2[1:]]
373/3:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original".format(0)))
plt.hist(wd2, bins, alpha=0.5,label = "random".format(1))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/4:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original".format(0))
plt.hist(wd2, bins, alpha=0.5,label = "random".format(1))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/5:
from pandas import *
with open('467060.ASC') as ftext: s1=[line.split('\r')[0] for line in ftext]
with open('467060.ASCR') as ftext: s2=[line.split('\r')[0] for line in ftext]
wd1=[float(x[8:16])+180. for x in s1[1:]]
wd2=[float(x[8:16])+180. for x in s2[1:]]
for i in xrange(len(wd1)):
    if wd1[i] > 360.:wd1[i]=wd1[i]-360.
    if wd2[i] > 360.:wd1[i]=wd2[i]-360.
373/6:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original".format(0))
plt.hist(wd2, bins, alpha=0.5,label = "random".format(1))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/7: max(wd2)
373/8: max(wd1)
373/9:
from pandas import *
with open('467060.ASC') as ftext: s1=[line.split('\r')[0] for line in ftext]
with open('467060.ASCR') as ftext: s2=[line.split('\r')[0] for line in ftext]
wd1=[float(x[8:16])+180. for x in s1[1:]]
wd2=[float(x[8:16])+180. for x in s2[1:]]
for i in xrange(len(wd1)):
    if wd1[i] > 360.:wd1[i]=wd1[i]-360.
    if wd2[i] > 360.:wd1[i]=wd2[i]-360.
373/10: max(wd1)
373/11: max(wd2)
373/12:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original".format(0))
plt.hist(wd2, bins, alpha=0.5,label = "random".format(1))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/13:
from pandas import *
with open('467060.ASC') as ftext: s1=[line.split('\r')[0] for line in ftext]
with open('467060.ASCR') as ftext: s2=[line.split('\r')[0] for line in ftext]
wd1=[float(x[8:16])+180. for x in s1[1:]]
wd2=[float(x[8:16])+180. for x in s2[1:]]
for i in xrange(len(wd1)):
    if wd1[i] > 360.:wd1[i]=wd1[i]-360.
    if wd2[i] > 360.:wd2[i]=wd2[i]-360.
373/14: max(wd2)
373/15:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
h1=plt.hist(wd1, bins, alpha=0.5)#,label = "original".format(0))
h2=plt.hist(wd2, bins, alpha=0.5)#,label = "random".format(1))
ax.legend((h1[0], h2[0]), ('original', 'random'))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/16:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
h1=plt.hist(wd1, bins, alpha=0.5)#,label = "original".format(0))
h2=plt.hist(wd2, bins, alpha=0.5)#,label = "random".format(1))
ax.legend((h1, h2), ('original', 'random'))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/17:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original".format(0))
plt.hist(wd2, bins, alpha=0.5,label = "random".format(1))
plt.legend()#(h1, h2), ('original', 'random'))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/18:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
h1,=plt.hist(wd1, bins, alpha=0.5,label = "original")
h2,=plt.hist(wd2, bins, alpha=0.5,label = "random")
plt.legend((h1, h2), ('original', 'random'))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/19:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original")
plt.hist(wd2, bins, alpha=0.5,label = "random")
handles, labels = ax.get_legend_handles_labels()
ax.legend(handles,labels)
plt.legend()#(h1, h2), ('original', 'random'))
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/20:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
h1, =plt.hist(wd1, bins, alpha=0.5,label = "original")
h2, =plt.hist(wd2, bins, alpha=0.5,label = "random")
plt.legend([h1, h2], ['original', 'random'])
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/21:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original")
plt.hist(wd2, bins, alpha=0.5,label = "random")
plt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0.)
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
373/22:
import numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original")
plt.hist(wd2, bins, alpha=0.5,label = "random")
plt.legend()#bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0.)
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
372/286: !vi NO2-H-R.DAT
372/287: !vi /home/aermod/Leezhe/NO2-H-R.DAT
375/1:
with open('NO2-H-R.DAT') as ftext:
    s_r=[line.split()[2] for line in ftext]
with open('NO2-H-L.DAT') as ftext:
    s_l=[line.split()[2] for line in ftext]
375/2: !vi /home/aermod/Leezhe/NO2-H-L.DAT
372/288: !vi /home/aermod/Leezhe/NO2-H-R.DAT
375/3: s_r[:10]
375/4: s_r=[float(x) for x in s_r[8:]]
375/5: s_l=[float(x) for x in s_l[8:]]
375/6: max(s_r),max(s_l)
375/7:
with open('NO2-Y-R.DAT') as ftext:
    s_r=[line.split()[2] for line in ftext]
with open('NO2-Y-L.DAT') as ftext:
    s_l=[line.split()[2] for line in ftext]
375/8: s_r=[float(x) for x in s_r[8:]]
375/9: s_l=[float(x) for x in s_l[8:]]
375/10: max(s_r),max(s_l)
372/289: !vi /home/aermod/Leezhe/NO2-H-R.DAT
372/290:
with open('NO2-Y-R.DAT') as ftext:
    s_r=[line.split()[2] for line in ftext]
s_r=[float(x) for x in s_r[8:]]
max(s_r)
372/291:
with open('/home/aermod/Leezhe/NO2-H-R.DAT') as ftext:
    s_r=[line.split()[2] for line in ftext]
s_r=[float(x) for x in s_r[8:]]
max(s_r)
376/1:
from pandas import *
import xml.etree.cElementTree as ET
df=read_csv('sht3_df.csv')
376/2: df.drop(3)
376/3: df2=df.drop(3)
376/4: df2.head(5)
377/1:
from pandas import *
import xml.etree.cElementTree as ET
df=read_csv('sht3_df.csv')
377/2: !cat rd_sht3.py
377/3: nam_v=['Lvolume','Lratio','Mvolume','Mratio','Svolume','Sratio','PCU','PHF']
377/4:
for i in xrange(len(df)):
        sum=0.
        for j in nam_v:
                try:
                        tt=float(df.loc(i,j))
                    except:
377/5:
for i in xrange(len(df)):
    sm=0.
    for j in nam_v:
        try:
            tt=float(df.loc(i,j))
        except:
            continue
        else:
            sm=sm+tt                    
        if sum==0.: df=df.drop(i)
377/6: df2=df
377/7: df=read_csv('sht3_df.csv')
377/8: len(df2),len(df)
377/9:
for i in xrange(len(df)):
    sm=0.
    for j in nam_v:
        try:
            tt=float(df.loc(i,j))
        except:
            continue
        else:
            sm=sm+tt                    
        if sm==0.: df=df.drop(i)
377/10: len(df2),len(df)
377/11: df.loc(i,j)
377/12: df.iloc(i,j)
377/13: j
377/14: df.iloc(i,[j])
377/15: df.loc(i,[j])
377/16: df.iloc[i,[j]]
377/17: !grep df.loc /home/kuang/py_programs/*/*py
377/18: !grep iloc /home/kuang/py_programs/*/*py
377/19: df.iloc[i,j]
377/20: i
377/21: df.iloc[i-10,j]
377/22: df.iloc[10,j]
377/23: df.loc[10,j]
377/24:
for i in xrange(len(df)):
    sm=0.
    for j in nam_v:
        try:
            tt=float(df.loc[i,j])
        except:
            continue
        else:
            sm=sm+tt                    
        if sm==0.: df=df.drop(i)
377/25: len(df2),len(df)
377/26: !cat rd_sht3.py
377/27: df.set_index('year').to_csv('sht3_df.csv')
377/28: !grep dum sht3_df.csv|wc
377/29: df2.set_index('year').to_csv('sht3_df.csv')
377/30: !grep dum sht3_df.csv|wc
377/31: 319-288
377/32: !grep dum sht3_df.csv
377/33:
df=df2
for i in xrange(len(df)):
    sm=0.
    for j in nam_v:
        try:
            tt=float(df.loc[i,j])
        except:
            continue
        else:
            sm=sm+tt                    
    if sm==0.: df=df.drop(i)
377/34: len(df2),len(df)
377/35: df.set_index('year').to_csv('sht3_df.csv')
377/36: !grep dum sht3_df.csv
377/37: !grep dum sht3_df.csv|wc
377/38: df.columns
377/39: cols=['year','dirn','name','time']+nam_v
377/40: history
377/41: df[cols].set_index('year').to_csv('sht3_df.csv')
377/42: !grep dum sht3_df.csv|wc
377/43: !grep dum sht3_df.csv
377/44: !grep dum sht3_df.csv|wc
377/45: cols
377/46: df['Lvolume'][:10]
377/47: max(df['Lvolume'])
377/48: df.loc[7]
377/49: max(df['Lratio'])
377/50: set(df['Lratio'])
377/51: !more dum sht3_df.csv
377/52: df.loc[8]
377/53: !lst
377/54: !ls -lrT sh5*
377/55: !ls  sh5*
377/56: !ls  sht3*
377/57: !vi sht3_10_NI002
377/58: !vi sht3_10_NI002.htm
378/1: !vi rd_sht3.py
378/2: run rd_sht3.py
378/3: list(set(df['Lratio']))[:30]
378/4: list(set(df['Lratio']))[-30:]
378/5: 'dum' in list(set(df['Lratio']))
378/6: 'dum' in list(set(df['Lvolume']))
378/7:  list(set(df['Lvolume']))[:30]
378/8: !more sht3_df.csv
378/9: !vi sht3_10_NI001.htm
378/10: !vi rd_sht3.py
378/11: !cp sss.txt sss.txt_old
378/12: !vi sss.txt
378/13: run rd_sht3.py
378/14: !more sht3_df.csv
378/15: !pwd
378/16: !vi sht3_10_NI001.htm!
378/17: !vi rd_sht3.py
378/18: run rd_sht3.py
378/19: !more sht3_df.csv
378/20: !vi rd_sht3.py
378/21: !vi rd_sht3.py
378/22: !vi sss.txt
378/23: run rd_sht3.py
378/24: !more sht3_df.csv
378/25: list(set(df['Lratio']))[-30:]
378/26: list(set(df['Lvolume']))[-30:]
378/27: !more sht3_df.csv
378/28: list(set(df['PHF']))[-30:]
378/29: !more sht3_df.csv
378/30: df[df['PHF']>1]
378/31: df[df['PHF']>1][cols]
378/32: !cat /home/kuang/MyPrograms/anydesk.txt
378/33: !vi rd_sht3.py
378/34: run rd_sht3.py
378/35: !vi rd_sht3.py
378/36: run rd_sht3.py
378/37: df[df['PHF']>1][cols]
378/38: !vi rd_sht3.py
378/39: run rd_sht3.py
378/40: !more sht3_df.csv
378/41: df[df['PHF']>1][cols]
378/42: !vi rd_sht3.py
378/43: run rd_sht3.py
378/44: df[df['PHF']>1][cols]
378/45: !cp sss.txt_old sss.txt
378/46: run rd_sht3.py
378/47: df[df['PHF']>1][cols]
378/48: df[df['Sratio']>1][cols]
378/49: len(df[df['Sratio']>1][cols])
378/50: len(df[df['PHF']>1][cols])
378/51: len(df[df['Lratio']>1][cols])
378/52: len(df[df['Mratio']>1][cols])
379/1: from pandas import *
379/2: df=read_csv('sht3_df.csv')
379/3: !pwd
380/1: from pandas import *
380/2: df=read_csv('sht3_df.csv')
380/3: len(df[df['Mratio']>1][cols])
380/4: cols=['year','dirn','name','time']+nam_v
380/5: nam_v=['Lvolume','Lratio','Mvolume','Mratio','Svolume','Sratio','PCU','PHF']
380/6: cols=['year','dirn','name','time']+nam_v
380/7: len(df[df['Mratio']>1][cols])
380/8: !pwd
380/9: len(df[df['Mratio']>1])
380/10: len(df[df['PHF']>1])
380/11: len(df[df['Sratio']>1])
380/12: len(df)
380/13: df.head(10)
380/14: df[df['PHF']>1]
380/15: run rd_sht3.py
380/16: len(df[df['PHF']>1])
380/17: df[df['PHF']>1]
380/18: df[df['PHF']>1][cols]
380/19: run rd_sht3.py
380/20: df[df['PHF']>1][cols]
380/21: df[df['Sratio']>1][cols]
380/22: len(df[df['PHF']>1])
381/1: from pandas import *
381/2: df=read_csv('sht3_df.csv')
381/3: len(df[df['Sratio']>1][cols])
381/4: nam_v=['Lvolume','Lratio','Mvolume','Mratio','Svolume','Sratio','PCU','PHF']
381/5: cols=['year','dirn','name','time']+nam_v
381/6: len(df[df['Sratio']>1][cols])
381/7: len(df[df['HPF']>1][cols])
381/8: len(df[df['PHF']>1][cols])
381/9: len(df[df['PCU']<1][cols])
381/10: len(df[df['Lratio']<1][cols])
381/11: df.head(30)
381/12: a=df['Sratio']
381/13: a=list(df['Sratio'])
381/14: a.sort()
381/15: a[:10]
381/16: a[-10:]
381/17: run rd_sht3.py
381/18: !vi rd_sht3.py
381/19: run rd_sht3.py
381/20: len(df[df['Lratio']>1][cols])
381/21: len(df[df['PHF']>1][cols])
381/22: df[df['PHF']>1][cols]
381/23: !vi rd_sht3.py
381/24: a=list(df['Sratio'])
381/25: a[-10:]
381/26: run rd_sht3.py
381/27: len(df[df['PHF']>1][cols])
381/28: len(df[df['Sratio']>1][cols])
381/29: len(df[df['Lratio']>1][cols])
381/30: len(df[df['Mratio']>1][cols])
381/31: !grep sort /home/kuang/py_programs/*/*py|grep df
381/32: a=df.sort_values('Sratio')
381/33: a.tail(30)[cols]
381/34: !diff sss.txt sss.txt_old
381/35: !cp sss.txt_old sss.txt
381/36: !diff sss.txt sss.txt_old
381/37: !vi sss.txt
381/38: run rd_sht3.py
381/39: len(df[df['Mratio']>1][cols])
381/40: df[df['Mratio']>1][cols]
381/41: !pwd
381/42: !vi rd_sht3.py
381/43: run rd_sht3.py
381/44: len(df[df['Mratio']>1][cols])
381/45: df[df['Mratio']>1][cols]
381/46: len(df[df['PHF']==1][cols])
381/47: df[df['PHF']==1][cols]
381/48: !vi rd_sht3.py
381/49: run rd_sht3.py
381/50: df[df['PHF']==1][cols]
381/51: run rd_sht3.py
381/52: len(df[df['PHF']==1][cols])
381/53: len(df[df['Mratio']>1][cols])
381/54: df[df['PHF']==1][cols]
381/55: df[df['Mratio']>=1][cols]
381/56: !vi rd_sht3.py
381/57: run rd_sht3.py
381/58: df[df['Mratio']>=1][cols]
381/59: run rd_sht3.py
381/60: df[df['Mratio']>=1][cols]
381/61: df[df['PHF']>1][cols]
381/62: df[df['PHF']>=1][cols]
381/63: !vi rd_sht3.py
381/64: run rd_sht3.py
381/65: df[df['PHF']>=1][cols]
381/66: df[df['Mratio']>=1][cols]
381/67: df[df['Sratio']>=1][cols]
381/68: df[df['Svolume']<1][cols]
381/69: df[0<df['Svolume']<1][cols]
381/70: df[df['Svolume']<1][cols]
381/71: a=df[df['Svolume']<1][cols]
381/72: a[a['Svolume']>0][cols]
381/73: a=df[df['Lvolume']<1][cols]
381/74: a[a['Lvolume']>0][cols]
381/75: !cat /home/kuang/MyPrograms/anydesk.txt
381/76: run rd_sht3.py
381/77: a=df[df['Lvolume']<1][cols]
381/78: a[a['Lvolume']>0][cols]
381/79: !cp sss.txt_old sss.txt
381/80: run rd_sht3.py
381/81: a=df[df['Lvolume']<1][cols]
381/82: a[a['Lvolume']>0][cols]
381/83: df[df['Svolume']<1][cols]
381/84: len(df[df['Mratio']>1][cols])
381/85: df[df['Mratio']>1][cols]
381/86: df[df['Lratio']>1][cols]
381/87: df[df['Sratio']>1][cols]
381/88: !vi rd_sht3.py
381/89: !wc sss.txt
381/90: !vi get_sheet001.cs
382/1: run rd_sht3.py
382/2: !vi sss.txt
382/3: run rd_sht3.py
382/4: len(a)
382/5:
from pypinyin import pinyin, lazy_pinyin
for i in xrange(len(a)):
    cha=a[i]
    if type(cha)==float:continue
    s=lazy_pinyin(cha.decode('big5'))
    ss=''
    for j in s:
        ss=ss+j
382/6:
from pypinyin import pinyin, lazy_pinyin
for i in xrange(len(a)):
    cha=a[i]
    if type(cha)==float:continue
    if len(cha)<2:continue
    s=lazy_pinyin(cha.decode('big5'))
    ss=''
    for j in s:
        ss=ss+j
    print ss
382/7: cha
382/8:
from pypinyin import pinyin, lazy_pinyin
for i in xrange(len(a)):
    cha=a[i]
    if type(cha)==float:continue
    if len(cha)<2:continue
    s=lazy_pinyin(cha.decode('utf8'))
    ss=''
    for j in s:
        ss=ss+j
    print ss
382/9:
from pypinyin import pinyin, lazy_pinyin
for i in xrange(100):
    cha=a[i]
    if type(cha)==float:continue
    if len(cha)<2:continue
    s=lazy_pinyin(cha.decode('utf8'))
    ss=''
    for j in s:
        ss=ss+j
    print i,ss
382/10: a.index('zhan▒@ming▒G')
382/11:

mport numpy as np
import matplotlib.pyplot as plt
import plotly.plotly as py
bins = np.linspace(0,360, 36)
fig, ax = plt.subplots()
plt.hist(wd1, bins, alpha=0.5,label = "original")
plt.hist(wd2, bins, alpha=0.5,label = "random")
plt.legend(bbox_to_anchor=(1.05,1), loc=2, borderaxespad=0.)
plt.title("Wind direction Histogram")
plt.xlabel("WD (deg)")
plt.ylabel("Frequency")
fig = plt.gcf()
plot_url = py.plot_mpl(fig, filename='mpl-basic-histogram')
382/12:
from pypinyin import pinyin, lazy_pinyin
b=[]
for i in xrange(100):
    cha=a[i]
    if type(cha)==float:
        b.append(cha)
        continue
    if len(cha)<2:
        b.append(cha)
        continue
    s=lazy_pinyin(cha.decode('utf8'))
    ss=''
    for j in s:
        ss=ss+j
    b.append(ss)
382/13: b.index('zhan▒@ming▒G')
382/14: b.index('zhan▒@ming▒G'.encode('utf8'))
382/15: b.index('zhan▒@ming▒G'.encode('big5'))
382/16: b.index('xiaoxingche')
382/17:
from pypinyin import pinyin, lazy_pinyin
b=[]
for i in xrange(100):
    cha=a[i]
    if type(cha)==float:
        b.append(cha)
        continue
    if len(cha)<2:
        b.append(cha)
        continue
    s=lazy_pinyin(cha.decode('utf8'))
    ss=''
    for j in s:
        if s.isalnum():ss=ss+j
    b.append(ss)
382/18:
from pypinyin import pinyin, lazy_pinyin
b=[]
for i in xrange(100):
    cha=a[i]
    if type(cha)==float:
        b.append(cha)
        continue
    if len(cha)<2:
        b.append(cha)
        continue
    s=lazy_pinyin(cha.decode('utf8'))
    ss=''
    for j in s:
        if j.isalnum():ss=ss+j
    b.append(ss)
382/19: b.index('xiaoxingche')
382/20: b.index('zhanming')
382/21: b.index('zhanhao')
382/22: b[2]
382/23: b[28]
382/24: history
382/25: !vi rd_sht3.py
382/26: !vi rd_sht3.py
382/27: run rd_sht3.py
382/28: !vi rd_sht3.py
382/29: run rd_sht3.py
382/30: df.head(10)
382/31: !v
382/32: !vi rd_sht3.py
382/33: run rd_sht3.py
382/34: df.head(10)
382/35: set(df['road'])
382/36: len(set(df['road']))
382/37: len(df)
382/38: !cp sss.txt_old sss.txt
382/39: run rd_sht3.py
382/40: len(set(df['road']))
382/41: set(df['road'])
382/42: 'not_found' in set(df['road'])
382/43: a=list(df['road'])
382/44: a.count('not_found')
382/45: len(df)
382/46: b.index('zhanming')
382/47: a[28]
382/48: b[28]
382/49: road_s
382/50: df[df['road']=='not_found'][cols].head(20)
382/51: set(df[df['road']=='not_found']['name'])
382/52: len(set(df[df['road']=='not_found']['name']))
382/53: !vi sss.txt
382/54: run rd_sht3.py
382/55: b
382/56: fname
382/57: b[28]
382/58: b[26]
382/59: 'ming' in b
382/60: 'hao' in b
382/61: 'zhan' in b
382/62: b.count('zhan')
382/63: b.index('zhan')
382/64: b[25]
382/65: !vi rd_sht3.py
382/66: len(set(df[df['road']=='not_found']))
382/67: run rd_sht3.py
382/68: len(set(df[df['road']=='not_found']))
382/69: b.index('zhan')
382/70: b[25]
382/71: !v
382/72: !vi rd_sht3.py
382/73: b.index('zhanming')
382/74: !vi rd_sht3.py
382/75: set(df[df['road']=='not_found'])
382/76: df[df['road']=='not_found']
382/77: set(df[df['road']=='not_found']['name'])
382/78: !vi sss.txt
382/79: run rd_sht3.py
382/80: b
382/81: fname
382/82: !vi rd_sht3.py
382/83: run rd_sht3.py
382/84: set(df[df['road']=='not_found']['name'])
382/85: set(df['road'])
382/86: len(set(df['road']))
382/87: 'not_found' in set(df['road']))
382/88: 'not_found' in set(df['road'])
382/89: !cp sss.txt_old sss.txt
382/90: run rd_sht3.py
   1: from pandas import *
   2: df=read_csv('sht3_df.csv')
   3: rd=list(df['road'])
   4: len(set(rd))
   5: len(set(df['name']))
   6: rd=set(rd)
   7:
for r in rd:
    print r,len(set(df[df['road']==r]['year']))
   8:
for r in rd:
    print len(set(df[df['road']==r]['year'])),r
   9:
d_r,d_y=[],[]
for r in rd:
    d_r.append(r)
    d_y.append(len(set(df[df['road']==r]['year'])))
  10: df_r=DataFrame({'road':d_r,'nyr':d_y})
  11: !grep sort /home/kuang/py_programs/*/*py|grep df
  12: df_r=df_r.sort_values('nyr')
  13: df_r.tail(30)
  14: len(set(df['year']))
  15: a=list(df_r['nyr'])
  16:
for i in xrange(14):
    print i,a.count(i)
  17: df_r[df_r['nyr']==10]
  18: rd_10=set(df_r[df_r['nyr']==10]['road'])
  19:
for r in rd_10:
    a=list(set(df[df['road']==r]['year']))
    print a[0],a[-1:]
  20:
for r in rd_10:
    a=list(set(df[df['road']==r]['year'])).sort()
    print a[0],a[-1:]
  21:
for r in rd_10:
    a=list(set(df[df['road']==r]['year']))
    a.sort()
    print a[0],a[-1:]
  22:
for r in rd_10:
    a=list(set(df[df['road']==r]['year']))
    a.sort()
    print a
  23:
s_r=[]
for r in rd_10:
    a=list(set(df[df['road']==r]['year']))
    a.sort()
    s_yr=''
    for i in a:s_yr=syr+str(i)+','
    s_r.append(s_yr)
  24:
s_r=[]
for r in rd_10:
    a=list(set(df[df['road']==r]['year']))
    a.sort()
    s_yr=''
    for i in a:s_yr=s_yr+str(i)+','
    s_r.append(s_yr)
  25: set(s_r)
  26: len(set(s_r))
  27: len(s_r)
  28: s_r.sort()
  29: s_r
  30: %history -g -f his.py
